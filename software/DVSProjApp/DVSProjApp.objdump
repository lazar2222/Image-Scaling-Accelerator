
DVSProjApp.elf:     file format elf32-littlenios2
DVSProjApp.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000230

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x0001871c memsz 0x0001871c flags r-x
    LOAD off    0x0001973c vaddr 0x0401873c paddr 0x0401a404 align 2**12
         filesz 0x00001cc8 memsz 0x00001cc8 flags rw-
    LOAD off    0x0001c0cc vaddr 0x0401c0cc paddr 0x0401c0cc align 2**12
         filesz 0x00000000 memsz 0x00000178 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00017b00  04000230  04000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a0c  04017d30  04017d30  00018d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cc8  0401873c  0401a404  0001973c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000178  0401c0cc  0401c0cc  0001c0cc  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0401c244  0401c244  0001b404  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001b404  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000013d8  00000000  00000000  0001b428  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000347d1  00000000  00000000  0001c800  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000cf1b  00000000  00000000  00050fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000105fe  00000000  00000000  0005deec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002f98  00000000  00000000  0006e4ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004cdb  00000000  00000000  00071484  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00021048  00000000  00000000  0007615f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000971a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001fb8  00000000  00000000  000971b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0009d2c6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000009  00000000  00000000  0009d2c9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0009d2d2  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0009d2d3  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0009d2d4  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0009d2dd  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0009d2e6  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  0009d2ef  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001e  00000000  00000000  0009d2f5  2**0
                  CONTENTS, READONLY
 26 .jdi          00005eee  00000000  00000000  0009d313  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006ef0c  00000000  00000000  000a3201  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000230 l    d  .text	00000000 .text
04017d30 l    d  .rodata	00000000 .rodata
0401873c l    d  .rwdata	00000000 .rwdata
0401c0cc l    d  .bss	00000000 .bss
0401c244 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../DVSProjApp_bsp//obj/HAL/src/crt0.o
04000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hw_impl.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sw_impl.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-divtable.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04001de8 l     F .text	00000008 __fp_unlock
04001dfc l     F .text	0000019c __sinit.part.1
04001f98 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
0401883c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
04003f48 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 stpcpy.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfscanf.c
0401801a l     O .rodata	00000022 basefix.4359
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
0401813d l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
04019088 l     O .rwdata	00000020 lc_ctype_charset
04019068 l     O .rwdata	00000020 lc_message_charset
040190a8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
04007744 l     F .text	00000064 sulp
040182dc l     O .rodata	00000014 fpinan.2773
040182f0 l     O .rodata	00000014 fpi.2737
04018304 l     O .rodata	00000028 tinytens
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 vfprintf.c
0401836e l     O .rodata	00000010 zeroes.4389
0401837e l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0400bde0 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0400d690 l     F .text	00000100 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 mprec.c
040184a0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
040185c4 l     O .rodata	00000010 zeroes.4333
040185d4 l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
04014398 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
040144cc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
040144f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
040145ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
040146d4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
040147c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0401499c l     F .text	0000003c alt_get_errno
040149d8 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
04014c20 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0401a3a4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
04014e94 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
04014fd0 l     F .text	00000034 alt_dev_reg
04019288 l     O .rwdata	00001060 jtag_uart
0401a2e8 l     O .rwdata	00000030 sgdma_m2s
0401a318 l     O .rwdata	00000030 sgdma_s2m
0401a348 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
040152ec l     F .text	0000020c altera_avalon_jtag_uart_irq
040154f8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
04015b30 l     F .text	0000003c alt_get_errno
04016760 l     F .text	000000bc alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 altera_hostfs.c
0401a3b0 l     O .rwdata	00000009 hcinfo.2538
0401a3bc l     O .rwdata	0000000a hcinfo.2551
0401a3c8 l     O .rwdata	00000009 hcinfo.2560
0401a3d4 l     O .rwdata	0000000a hcinfo.2573
0401a3e0 l     O .rwdata	0000000a hcinfo.2586
0401a3ec l     O .rwdata	0000000a hcinfo.2612
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04016e9c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
040175d8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0401c118 g     O .bss	00000004 alt_instruction_exception_handler
040043bc g     F .text	00000088 stpcpy
0400f17c g     F .text	00000074 _mprec_log10
0400f268 g     F .text	0000008c __any_on
04006870 g     F .text	00000054 _isatty_r
040184ac g     O .rodata	00000028 __mprec_tinytens
040148d8 g     F .text	0000007c alt_main
04004444 g     F .text	00000090 strcpy
04003e74 g     F .text	000000c0 _puts_r
0401c144 g     O .bss	00000100 alt_irq
040069d0 g     F .text	00000060 _lseek_r
0400027c g     F .text	00000010 txCallback
0401a404 g       *ABS*	00000000 __flash_rwdata_start
040062fc g     F .text	000000ac __sflags
04012bc8 g     F .text	00000088 .hidden __eqdf2
0401c244 g       *ABS*	00000000 __alt_heap_start
04015c90 g     F .text	00000110 alt_avalon_sgdma_do_sync_transfer
04004358 g     F .text	0000005c __sseek
04002148 g     F .text	00000010 __sinit
040068f4 g     F .text	0000007c _setlocale_r
04001fa0 g     F .text	00000078 __sfmoreglue
040002e4 g     F .text	00000010 cleanupHW
040047d4 g     F .text	00000018 ungetc
04014978 g     F .text	00000024 __malloc_unlock
040168c4 g     F .text	0000011c alt_hostfs_open
040077a8 g     F .text	000015e4 _strtod_r
0401c0cc g     O .bss	00000004 rx_done
040163a8 g     F .text	000003b8 alt_avalon_sgdma_construct_descriptor_burst
04006d38 g     F .text	0000015c memmove
04002130 g     F .text	00000018 _cleanup
0400e23c g     F .text	000000a8 _Balloc
04012c50 g     F .text	000000dc .hidden __gtdf2
040178dc g     F .text	00000024 altera_nios2_gen2_irq_init
0401c0dc g     O .bss	00000004 sgdma_rx
04000000 g     F .entry	0000000c __reset
0401c0d8 g     O .bss	00000004 bufferPtr
04015ef8 g     F .text	00000078 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
04000020 g       *ABS*	00000000 __flash_exceptions_start
04002dc8 g     F .text	0000005c _fstat_r
0401c0e4 g     O .bss	00000004 errno
040041ac g     F .text	00000014 __srget
040061e0 g     F .text	0000001c __svfscanf
040042d4 g     F .text	00000008 __seofread
0400f594 g     F .text	000013a0 ___svfiprintf_internal_r
04000fd0 g     F .text	00000110 resizeImage
0401c104 g     O .bss	00000004 alt_argv
04022370 g       *ABS*	00000000 _gp
040007bc g     F .text	000000b8 printError
04000cf0 g     F .text	000002e0 prepareCommand
04019108 g     O .rwdata	00000180 alt_fd_list
040030bc g     F .text	00000070 _getc_r
0400312c g     F .text	00000088 getc
04016afc g     F .text	00000068 alt_hostfs_seek
0401703c g     F .text	00000090 alt_find_dev
04003ba4 g     F .text	00000148 memcpy
0400dfe0 g     F .text	0000025c __hexnan
04001df0 g     F .text	0000000c _cleanup_r
04014008 g     F .text	000000dc .hidden __floatsidf
040171d4 g     F .text	00000080 alt_fs_reg
040176bc g     F .text	0000007c alt_io_redirect
04012d2c g     F .text	000000f4 .hidden __ltdf2
04017d30 g       *ABS*	00000000 __DTOR_END__
04003f34 g     F .text	00000014 puts
04017900 g     F .text	0000009c alt_exception_cause_generated_bad_addr
04006adc g     F .text	000000d8 mbrtowc
040009f0 g     F .text	0000017c parseCommand
04007458 g     F .text	00000074 __fpclassifyd
040061fc g     F .text	0000004c _vfscanf_r
0400f0d8 g     F .text	000000a4 __ratio
04015ff0 g     F .text	0000008c alt_avalon_sgdma_construct_mem_to_stream_desc_burst
040002f4 g     F .text	0000008c checkHWStatus
040156f0 g     F .text	0000021c altera_avalon_jtag_uart_read
04003370 g     F .text	00000014 malloc
04001958 g     F .text	00000064 .hidden __udivsi3
04014628 g     F .text	000000ac isatty
040068c4 g     F .text	00000030 iswspace
040184fc g     O .rodata	000000c8 __mprec_tens
04006970 g     F .text	0000000c __locale_charset
04011884 g     F .text	000000c8 .hidden __lesf2
04010b1c g     F .text	00000074 .hidden __fixunsdfsi
0401c0f0 g     O .bss	00000004 __malloc_top_pad
04009694 g     F .text	0000001c strtoul
0401a384 g     O .rwdata	00000004 __mb_cur_max
040069a0 g     F .text	0000000c _localeconv_r
040096b0 g     F .text	00000320 _strtoull_r
0400e670 g     F .text	0000003c __i2b
040063a8 g     F .text	000004c8 __sfvwrite_r
04016128 g     F .text	0000005c alt_avalon_sgdma_stop
040041c0 g     F .text	00000054 _sbrk_r
04016a24 g     F .text	0000006c alt_hostfs_read
0400028c g     F .text	00000058 printHWError
04006e94 g     F .text	00000060 _read_r
04016e74 g     F .text	00000028 alt_dcache_flush
0401a39c g     O .rwdata	00000004 alt_max_fd
04001a3c g     F .text	000000f0 _fclose_r
04001db8 g     F .text	00000030 fflush
0401c0ec g     O .bss	00000004 __malloc_max_sbrked_mem
0401194c g     F .text	000008ac .hidden __adddf3
04011750 g     F .text	00000078 .hidden __nesf2
0400ee80 g     F .text	0000010c __b2d
04001514 g     F .text	0000034c scaleSW
0401118c g     F .text	000005c4 .hidden __umoddi3
040147fc g     F .text	000000dc lseek
0401a370 g     O .rwdata	00000004 _global_impure_ptr
04006ef4 g     F .text	00000564 _realloc_r
0401c244 g       *ABS*	00000000 __bss_end
040174e8 g     F .text	000000f0 alt_iic_isr_register
04015b6c g     F .text	00000124 alt_avalon_sgdma_do_async_transfer
040177d4 g     F .text	00000108 alt_tick
040183a0 g     O .rodata	00000100 __hexdig
04010b90 g     F .text	000005fc .hidden __udivdi3
040184d4 g     O .rodata	00000028 __mprec_bigtens
0400e454 g     F .text	00000104 __s2b
040140e4 g     F .text	000000a8 .hidden __floatunsidf
0400ebc0 g     F .text	00000060 __mcmp
04002168 g     F .text	00000018 __fp_lock_all
0401749c g     F .text	0000004c alt_ic_irq_enabled
04017738 g     F .text	0000009c alt_alarm_stop
040090fc g     F .text	0000001c strtol
0401c10c g     O .bss	00000004 alt_irq_active
04002968 g     F .text	00000444 _fseeko_r
040169e0 g     F .text	00000044 alt_hostfs_close
040000fc g     F .exceptions	000000d4 alt_irq_handler
040190e0 g     O .rwdata	00000028 alt_dev_null
04016184 g     F .text	00000064 alt_avalon_sgdma_check_descriptor_status
040144ac g     F .text	00000020 alt_dcache_flush_all
0400e558 g     F .text	00000068 __hi0bits
04013f88 g     F .text	00000080 .hidden __fixdfsi
0401c0e0 g     O .bss	00000004 sgdma_tx
04008d8c g     F .text	00000018 strtod
0401a404 g       *ABS*	00000000 __ram_rwdata_end
0401a394 g     O .rwdata	00000008 alt_dev_list
04014ed0 g     F .text	00000100 write
040162c8 g     F .text	00000080 alt_avalon_sgdma_enable_desc_poll
040117c8 g     F .text	000000bc .hidden __gtsf2
0401873c g       *ABS*	00000000 __ram_rodata_end
04014534 g     F .text	000000b8 fstat
04012d2c g     F .text	000000f4 .hidden __ledf2
0400e938 g     F .text	00000140 __pow5mult
0401c0fc g     O .bss	00000004 __nlocale_changed
040019bc g     F .text	00000058 .hidden __umodsi3
04004250 g     F .text	00000030 _scanf_r
04015f70 g     F .text	00000080 alt_avalon_sgdma_construct_mem_to_stream_desc
0401607c g     F .text	00000054 alt_avalon_sgdma_register_callback
0401c244 g       *ABS*	00000000 end
04002dac g     F .text	0000001c fseeko
0400294c g     F .text	0000001c fseek
0401522c g     F .text	000000c0 altera_avalon_jtag_uart_init
040001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
04017d30 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
04016348 g     F .text	00000060 alt_avalon_sgdma_disable_desc_poll
04014334 g     F .text	00000064 .hidden __clzsi2
0401590c g     F .text	00000224 altera_avalon_jtag_uart_write
04015da0 g     F .text	00000074 alt_avalon_sgdma_construct_mem_to_mem_desc
04002158 g     F .text	00000004 __sfp_lock_acquire
04006c54 g     F .text	000000e4 memchr
040075a4 g     F .text	00000058 _sprintf_r
04015e98 g     F .text	00000060 alt_avalon_sgdma_construct_stream_to_mem_desc
04002638 g     F .text	00000310 _free_r
0400697c g     F .text	00000010 __locale_mb_cur_max
04017b7c g     F .text	00000180 __call_exitprocs
04004138 g     F .text	00000074 __srget_r
0401c0f8 g     O .bss	00000004 __mlocale_changed
0401a378 g     O .rwdata	00000004 __malloc_sbrk_base
04000230 g     F .text	0000003c _start
0401c0d4 g     O .bss	00000004 descPtr
0401c110 g     O .bss	00000004 _alt_tick_rate
04009118 g     F .text	00000304 _strtoll_r
040161e8 g     F .text	00000054 alt_avalon_sgdma_open
0400ea78 g     F .text	00000148 __lshift
0401c114 g     O .bss	00000004 _alt_nticks
04014c5c g     F .text	00000104 read
0401503c g     F .text	0000008c alt_sys_init
0400f3c4 g     F .text	000001d0 __ssprint_r
04003e14 g     F .text	00000060 _open_r
04017a64 g     F .text	00000118 __register_exitproc
0401c0d0 g     O .bss	00000004 tx_done
0400f2f4 g     F .text	000000d0 strncmp
0400e6ac g     F .text	0000028c __multiply
04015598 g     F .text	00000068 altera_avalon_jtag_uart_close
04001a14 g     F .text	00000028 .hidden __mulsi3
0401873c g       *ABS*	00000000 __ram_rwdata_start
04017d30 g       *ABS*	00000000 __ram_rodata_start
0401c11c g     O .bss	00000028 __malloc_current_mallinfo
04001420 g     F .text	000000f4 scaleLineSW
04011750 g     F .text	00000078 .hidden __eqsf2
0400ef8c g     F .text	0000014c __d2b
040150c8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0400941c g     F .text	00000278 _strtoul_r
04017254 g     F .text	000000c4 alt_get_fd
040062a8 g     F .text	00000054 _close_r
04000380 g     F .text	000000d0 initHW
040179e8 g     F .text	0000007c memcmp
04015188 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0401c244 g       *ABS*	00000000 __alt_stack_base
040151d8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04002fac g     F .text	000000dc _fwrite_r
0400bc8c g     F .text	00000154 __swsetup_r
040121f8 g     F .text	000009d0 .hidden __divdf3
04002018 g     F .text	00000118 __sfp
0400f1f0 g     F .text	00000078 __copybits
04018c60 g     O .rwdata	00000408 __malloc_av_
04002164 g     F .text	00000004 __sinit_lock_release
04012e20 g     F .text	0000086c .hidden __muldf3
04004280 g     F .text	00000054 __sread
040024e0 g     F .text	00000034 fread
040170cc g     F .text	00000108 alt_find_file
04016ed8 g     F .text	000000a4 alt_dev_llist_insert
04014954 g     F .text	00000024 __malloc_lock
04014de4 g     F .text	000000b0 sbrk
040099d0 g     F .text	000022bc ___svfprintf_internal_r
040160d0 g     F .text	00000058 alt_avalon_sgdma_start
04001d5c g     F .text	0000005c _fflush_r
04010934 g     F .text	000000dc _calloc_r
0401873c g     O .rwdata	00000100 .hidden __divsi3_table
0400228c g     F .text	00000018 fopen
0401c0cc g       *ABS*	00000000 __bss_start
04003cec g     F .text	00000128 memset
0400126c g     F .text	000001b4 main
04000874 g     F .text	00000050 cleanup
04000770 g     F .text	0000004c printHelp
0401c108 g     O .bss	00000004 alt_envp
0401c0e8 g     O .bss	00000004 __malloc_max_total_mem
04015128 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04011884 g     F .text	000000c8 .hidden __ltsf2
040022a4 g     F .text	0000023c _fread_r
0401a3a8 g     O .rwdata	00000008 alt_sgdma_list
040043b4 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
04001b2c g     F .text	00000014 fclose
04008ea4 g     F .text	00000258 _strtol_r
0401418c g     F .text	000001a8 .hidden __truncdfsf2
0400c008 g     F .text	00001688 _dtoa_r
04003398 g     F .text	0000080c _malloc_r
04000768 g     F .text	00000008 scaleHSCD
0401a3a0 g     O .rwdata	00000004 alt_errno
0400456c g     F .text	000000d4 __submore
04002e24 g     F .text	000000c4 _fwalk
04006bf8 g     F .text	0000005c _mbtowc_r
04001860 g     F .text	00000084 .hidden __divsi3
04002514 g     F .text	00000124 _malloc_trim_r
04017d30 g       *ABS*	00000000 __CTOR_END__
04007668 g     F .text	000000dc strcmp
04017d30 g       *ABS*	00000000 __flash_rodata_start
04017d30 g       *ABS*	00000000 __DTOR_LIST__
04012bc8 g     F .text	00000088 .hidden __nedf2
04015004 g     F .text	00000038 alt_irq_init
04014d60 g     F .text	00000084 alt_release_fd
040075fc g     F .text	0000006c sprintf
040185e4 g     O .rodata	00000100 .hidden __clz_tab
0401c0f4 g     O .bss	00000004 _PathLocale
04008da4 g     F .text	00000100 strtof
0401799c g     F .text	00000014 atexit
040117c8 g     F .text	000000bc .hidden __gesf2
04006248 g     F .text	00000060 _write_r
040069ac g     F .text	00000018 setlocale
0400026c g     F .text	00000010 rxCallback
04004214 g     F .text	0000003c scanf
0400759c g     F .text	00000008 nanf
0401a374 g     O .rwdata	00000004 _impure_ptr
0401c100 g     O .bss	00000004 alt_argc
04001b40 g     F .text	0000021c __sflush_r
04006a30 g     F .text	000000ac _mbrtowc_r
04016fdc g     F .text	00000060 _do_dtors
04006998 g     F .text	00000008 __locale_cjk_lang
04002948 g     F .text	00000004 _fseek_r
04003f64 g     F .text	000001d4 __srefill_r
04000020 g       .exceptions	00000000 alt_irq_entry
04006bb4 g     F .text	00000044 __ascii_mbtowc
0400ee1c g     F .text	00000064 __ulp
04002180 g     F .text	00000018 __fp_unlock_all
040010e0 g     F .text	0000018c saveImage
0401a38c g     O .rwdata	00000008 alt_fs_list
04016a90 g     F .text	0000006c alt_hostfs_write
04000020 g       *ABS*	00000000 __ram_exceptions_start
040069c4 g     F .text	0000000c localeconv
04017338 g     F .text	00000050 alt_ic_isr_register
04000b6c g     F .text	00000184 loadImage
04003088 g     F .text	00000034 fwrite
0401a404 g       *ABS*	00000000 _edata
0401c244 g       *ABS*	00000000 _end
04000230 g       *ABS*	00000000 __ram_exceptions_end
04006178 g     F .text	00000068 vfscanf
04015600 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
04000450 g     F .text	00000318 scaleHW
04017410 g     F .text	0000008c alt_ic_irq_disable
0401623c g     F .text	0000008c alt_avalon_sgdma_construct_descriptor
040042dc g     F .text	0000007c __swrite
0401a37c g     O .rwdata	00000004 __malloc_trim_threshold
0400698c g     F .text	0000000c __locale_msgcharset
040179b0 g     F .text	00000038 exit
04002ee8 g     F .text	000000c4 _fwalk_reent
0400ec20 g     F .text	000001fc __mdiff
040018e4 g     F .text	00000074 .hidden __modsi3
0401a380 g     O .rwdata	00000004 __ctype_ptr__
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
0400215c g     F .text	00000004 __sfp_lock_release
04000000 g       *ABS*	00000000 __alt_mem_sdram
040008c4 g     F .text	0000012c checkCommand
040074cc g     F .text	000000d0 __sccl
0401803c g     O .rodata	00000101 _ctype_
0401a388 g     O .rwdata	00000004 __mbtowc
04002198 g     F .text	000000f4 _fopen_r
04017cfc g     F .text	00000034 _exit
04016d48 g     F .text	0000012c alt_alarm_start
04010a10 g     F .text	0000010c .hidden __muldi3
040031b4 g     F .text	000001bc __smakebuf_r
040044d4 g     F .text	00000098 strlen
04014ac4 g     F .text	0000015c open
04012c50 g     F .text	000000dc .hidden __gedf2
0400d790 g     F .text	00000850 __gethex
04017318 g     F .text	00000020 alt_icache_flush_all
0401a3f8 g     O .rwdata	00000004 alt_priority_mask
04017388 g     F .text	00000088 alt_ic_irq_enable
04015e14 g     F .text	00000084 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
0401368c g     F .text	000008fc .hidden __subdf3
0400e5c0 g     F .text	000000b0 __lo0bits
040047ec g     F .text	0000198c __svfscanf_r
0401a3fc g     O .rwdata	00000008 alt_alarm_list
04004640 g     F .text	00000194 _ungetc_r
04016f7c g     F .text	00000060 _do_ctors
040143d4 g     F .text	000000d8 close
0401473c g     F .text	00000084 alt_load
0401681c g     F .text	000000a8 alt_avalon_sgdma_init
04003384 g     F .text	00000014 free
04002160 g     F .text	00000004 __sinit_lock_acquire
0400e30c g     F .text	00000148 __multadd
0400e2e4 g     F .text	00000028 _Bfree
04016b64 g     F .text	000001e4 alt_hostfs_fstat



Disassembly of section .entry:

04000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000004:	08408c14 	ori	at,at,560
    jmp r1
 4000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	008100b4 	movhi	r2,1026
 4000140:	10b05104 	addi	r2,r2,-16060
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	008100b4 	movhi	r2,1026
 4000158:	10b05104 	addi	r2,r2,-16060
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 40001e4:	00bfffc4 	movi	r2,-1
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 40001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40001f0:	d0a76a17 	ldw	r2,-25176(gp)
 40001f4:	10000726 	beq	r2,zero,4000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 40001f8:	d0a76a17 	ldw	r2,-25176(gp)
 40001fc:	e0fffd17 	ldw	r3,-12(fp)
 4000200:	e1bffe17 	ldw	r6,-8(fp)
 4000204:	e17fff17 	ldw	r5,-4(fp)
 4000208:	1809883a 	mov	r4,r3
 400020c:	103ee83a 	callr	r2
 4000210:	00000206 	br	400021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4000218:	0005883a 	mov	r2,zero
}
 400021c:	e037883a 	mov	sp,fp
 4000220:	dfc00117 	ldw	ra,4(sp)
 4000224:	df000017 	ldw	fp,0(sp)
 4000228:	dec00204 	addi	sp,sp,8
 400022c:	f800283a 	ret

Disassembly of section .text:

04000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000230:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000238:	068100b4 	movhi	gp,1026
    ori gp, gp, %lo(_gp)
 400023c:	d688dc14 	ori	gp,gp,9072
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000240:	00810074 	movhi	r2,1025
    ori r2, r2, %lo(__bss_start)
 4000244:	10b03314 	ori	r2,r2,49356

    movhi r3, %hi(__bss_end)
 4000248:	00c10074 	movhi	r3,1025
    ori r3, r3, %lo(__bss_end)
 400024c:	18f09114 	ori	r3,r3,49732

    beq r2, r3, 1f
 4000250:	10c00326 	beq	r2,r3,4000260 <_start+0x30>

0:
    stw zero, (r2)
 4000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 400025c:	10fffd36 	bltu	r2,r3,4000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000260:	401473c0 	call	401473c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000264:	40148d80 	call	40148d8 <alt_main>

04000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000268:	003fff06 	br	4000268 <__alt_data_end+0xfc000268>

0400026c <rxCallback>:
}

void rxCallback(void * ctx)
{
	alt_32* rx_done = ctx;
	(*rx_done)++;
 400026c:	20800017 	ldw	r2,0(r4)
 4000270:	10800044 	addi	r2,r2,1
 4000274:	20800015 	stw	r2,0(r4)
 4000278:	f800283a 	ret

0400027c <txCallback>:
 400027c:	20800017 	ldw	r2,0(r4)
 4000280:	10800044 	addi	r2,r2,1
 4000284:	20800015 	stw	r2,0(r4)
 4000288:	f800283a 	ret

0400028c <printHWError>:
}

void printHWError(int status)
{
	if (status == 0) { printf("No error\n"); }
 400028c:	20000926 	beq	r4,zero,40002b4 <printHWError+0x28>
	else if (status == 1) { printf("Failed to open tx SGDMA\n"); }
 4000290:	00800044 	movi	r2,1
 4000294:	20800d26 	beq	r4,r2,40002cc <printHWError+0x40>
	else if (status == 2) { printf("Failed to open rx SGDMA\n"); }
 4000298:	00800084 	movi	r2,2
 400029c:	20800e26 	beq	r4,r2,40002d8 <printHWError+0x4c>
	else if (status == 3) { printf("Failed to allocate descriptors\n"); }
 40002a0:	008000c4 	movi	r2,3
 40002a4:	20800626 	beq	r4,r2,40002c0 <printHWError+0x34>
	else { printf("Unknown error\n"); }
 40002a8:	01010074 	movhi	r4,1025
 40002ac:	211f6304 	addi	r4,r4,32140
 40002b0:	4003f341 	jmpi	4003f34 <puts>
	(*rx_done)++;
}

void printHWError(int status)
{
	if (status == 0) { printf("No error\n"); }
 40002b4:	01010074 	movhi	r4,1025
 40002b8:	211f4c04 	addi	r4,r4,32048
 40002bc:	4003f341 	jmpi	4003f34 <puts>
	else if (status == 1) { printf("Failed to open tx SGDMA\n"); }
	else if (status == 2) { printf("Failed to open rx SGDMA\n"); }
	else if (status == 3) { printf("Failed to allocate descriptors\n"); }
 40002c0:	01010074 	movhi	r4,1025
 40002c4:	211f5b04 	addi	r4,r4,32108
 40002c8:	4003f341 	jmpi	4003f34 <puts>
}

void printHWError(int status)
{
	if (status == 0) { printf("No error\n"); }
	else if (status == 1) { printf("Failed to open tx SGDMA\n"); }
 40002cc:	01010074 	movhi	r4,1025
 40002d0:	211f4f04 	addi	r4,r4,32060
 40002d4:	4003f341 	jmpi	4003f34 <puts>
	else if (status == 2) { printf("Failed to open rx SGDMA\n"); }
 40002d8:	01010074 	movhi	r4,1025
 40002dc:	211f5504 	addi	r4,r4,32084
 40002e0:	4003f341 	jmpi	4003f34 <puts>

040002e4 <cleanupHW>:
	else { printf("Unknown error\n"); }
}

void cleanupHW(int status)
{
	if (bufferPtr != NULL) { free(bufferPtr); }
 40002e4:	d1275a17 	ldw	r4,-25240(gp)
 40002e8:	20000126 	beq	r4,zero,40002f0 <cleanupHW+0xc>
 40002ec:	40033841 	jmpi	4003384 <free>
 40002f0:	f800283a 	ret

040002f4 <checkHWStatus>:
}

int checkHWStatus(int status)
{
	if (status != 0)
 40002f4:	2000021e 	bne	r4,zero,4000300 <checkHWStatus+0xc>
	{
		printHWError(status);
		cleanupHW(status);
		return 1;
	}
	return 0;
 40002f8:	0005883a 	mov	r2,zero
}
 40002fc:	f800283a 	ret
{
	if (bufferPtr != NULL) { free(bufferPtr); }
}

int checkHWStatus(int status)
{
 4000300:	deffff04 	addi	sp,sp,-4
 4000304:	dfc00015 	stw	ra,0(sp)
}

void printHWError(int status)
{
	if (status == 0) { printf("No error\n"); }
	else if (status == 1) { printf("Failed to open tx SGDMA\n"); }
 4000308:	00800044 	movi	r2,1
 400030c:	20801426 	beq	r4,r2,4000360 <checkHWStatus+0x6c>
	else if (status == 2) { printf("Failed to open rx SGDMA\n"); }
 4000310:	00800084 	movi	r2,2
 4000314:	20801626 	beq	r4,r2,4000370 <checkHWStatus+0x7c>
	else if (status == 3) { printf("Failed to allocate descriptors\n"); }
 4000318:	008000c4 	movi	r2,3
 400031c:	20800c26 	beq	r4,r2,4000350 <checkHWStatus+0x5c>
	else { printf("Unknown error\n"); }
 4000320:	01010074 	movhi	r4,1025
 4000324:	211f6304 	addi	r4,r4,32140
 4000328:	4003f340 	call	4003f34 <puts>
}

void cleanupHW(int status)
{
	if (bufferPtr != NULL) { free(bufferPtr); }
 400032c:	d1275a17 	ldw	r4,-25240(gp)
 4000330:	20000526 	beq	r4,zero,4000348 <checkHWStatus+0x54>
 4000334:	40033840 	call	4003384 <free>
{
	if (status != 0)
	{
		printHWError(status);
		cleanupHW(status);
		return 1;
 4000338:	00800044 	movi	r2,1
	}
	return 0;
}
 400033c:	dfc00017 	ldw	ra,0(sp)
 4000340:	dec00104 	addi	sp,sp,4
 4000344:	f800283a 	ret
{
	if (status != 0)
	{
		printHWError(status);
		cleanupHW(status);
		return 1;
 4000348:	00800044 	movi	r2,1
 400034c:	003ffb06 	br	400033c <__alt_data_end+0xfc00033c>
void printHWError(int status)
{
	if (status == 0) { printf("No error\n"); }
	else if (status == 1) { printf("Failed to open tx SGDMA\n"); }
	else if (status == 2) { printf("Failed to open rx SGDMA\n"); }
	else if (status == 3) { printf("Failed to allocate descriptors\n"); }
 4000350:	01010074 	movhi	r4,1025
 4000354:	211f5b04 	addi	r4,r4,32108
 4000358:	4003f340 	call	4003f34 <puts>
 400035c:	003ff306 	br	400032c <__alt_data_end+0xfc00032c>
}

void printHWError(int status)
{
	if (status == 0) { printf("No error\n"); }
	else if (status == 1) { printf("Failed to open tx SGDMA\n"); }
 4000360:	01010074 	movhi	r4,1025
 4000364:	211f4f04 	addi	r4,r4,32060
 4000368:	4003f340 	call	4003f34 <puts>
 400036c:	003fef06 	br	400032c <__alt_data_end+0xfc00032c>
	else if (status == 2) { printf("Failed to open rx SGDMA\n"); }
 4000370:	01010074 	movhi	r4,1025
 4000374:	211f5504 	addi	r4,r4,32084
 4000378:	4003f340 	call	4003f34 <puts>
 400037c:	003feb06 	br	400032c <__alt_data_end+0xfc00032c>

04000380 <initHW>:
	return 0;
}

int initHW()
{
	sgdma_tx = alt_avalon_sgdma_open(SGDMA_M2S_NAME);
 4000380:	01010074 	movhi	r4,1025
	}
	return 0;
}

int initHW()
{
 4000384:	deffff04 	addi	sp,sp,-4
	sgdma_tx = alt_avalon_sgdma_open(SGDMA_M2S_NAME);
 4000388:	211f6704 	addi	r4,r4,32156
	}
	return 0;
}

int initHW()
{
 400038c:	dfc00015 	stw	ra,0(sp)
	sgdma_tx = alt_avalon_sgdma_open(SGDMA_M2S_NAME);
 4000390:	40161e80 	call	40161e8 <alt_avalon_sgdma_open>
 4000394:	d0a75c15 	stw	r2,-25232(gp)
	if (sgdma_tx == NULL) {return 1;}
 4000398:	10002526 	beq	r2,zero,4000430 <initHW+0xb0>

	sgdma_rx = alt_avalon_sgdma_open(SGDMA_S2M_NAME);
 400039c:	01010074 	movhi	r4,1025
 40003a0:	211f6b04 	addi	r4,r4,32172
 40003a4:	40161e80 	call	40161e8 <alt_avalon_sgdma_open>
 40003a8:	d0a75b15 	stw	r2,-25236(gp)
	if (sgdma_rx == NULL) {return 2;}
 40003ac:	10001c26 	beq	r2,zero,4000420 <initHW+0xa0>

	bufferPtr = malloc(((BUFFER_SIZE + 1) * 5) * ALTERA_AVALON_SGDMA_DESCRIPTOR_SIZE);
 40003b0:	010000f4 	movhi	r4,3
 40003b4:	21202804 	addi	r4,r4,-32608
 40003b8:	40033700 	call	4003370 <malloc>
 40003bc:	d0a75a15 	stw	r2,-25240(gp)
	if (bufferPtr == NULL) {return 3;}
 40003c0:	10001f26 	beq	r2,zero,4000440 <initHW+0xc0>

	descPtr = (alt_sgdma_descriptor*)((alt_32)bufferPtr & ~(ALTERA_AVALON_SGDMA_DESCRIPTOR_SIZE - 1));
 40003c4:	00fff804 	movi	r3,-32
 40003c8:	10c6703a 	and	r3,r2,r3
	if (descPtr < bufferPtr) { descPtr++; }
 40003cc:	1880012e 	bgeu	r3,r2,40003d4 <initHW+0x54>
 40003d0:	18c00804 	addi	r3,r3,32

	alt_u32 controlMask = (ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK | ALTERA_AVALON_SGDMA_CONTROL_IE_CHAIN_COMPLETED_MSK | ALTERA_AVALON_SGDMA_CONTROL_PARK_MSK);
	alt_avalon_sgdma_register_callback(sgdma_tx, txCallback, controlMask, &tx_done);
 40003d4:	d1275c17 	ldw	r4,-25232(gp)
 40003d8:	018000b4 	movhi	r6,2
 40003dc:	01410034 	movhi	r5,1024
 40003e0:	31800604 	addi	r6,r6,24
 40003e4:	29409f04 	addi	r5,r5,636
 40003e8:	d1e75804 	addi	r7,gp,-25248

	bufferPtr = malloc(((BUFFER_SIZE + 1) * 5) * ALTERA_AVALON_SGDMA_DESCRIPTOR_SIZE);
	if (bufferPtr == NULL) {return 3;}

	descPtr = (alt_sgdma_descriptor*)((alt_32)bufferPtr & ~(ALTERA_AVALON_SGDMA_DESCRIPTOR_SIZE - 1));
	if (descPtr < bufferPtr) { descPtr++; }
 40003ec:	d0e75915 	stw	r3,-25244(gp)

	alt_u32 controlMask = (ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK | ALTERA_AVALON_SGDMA_CONTROL_IE_CHAIN_COMPLETED_MSK | ALTERA_AVALON_SGDMA_CONTROL_PARK_MSK);
	alt_avalon_sgdma_register_callback(sgdma_tx, txCallback, controlMask, &tx_done);
 40003f0:	401607c0 	call	401607c <alt_avalon_sgdma_register_callback>
	alt_avalon_sgdma_register_callback(sgdma_rx, rxCallback, controlMask, &rx_done);
 40003f4:	d1275b17 	ldw	r4,-25236(gp)
 40003f8:	018000b4 	movhi	r6,2
 40003fc:	01410034 	movhi	r5,1024
 4000400:	31800604 	addi	r6,r6,24
 4000404:	29409b04 	addi	r5,r5,620
 4000408:	d1e75704 	addi	r7,gp,-25252
 400040c:	401607c0 	call	401607c <alt_avalon_sgdma_register_callback>

	return 0;
 4000410:	0005883a 	mov	r2,zero
}
 4000414:	dfc00017 	ldw	ra,0(sp)
 4000418:	dec00104 	addi	sp,sp,4
 400041c:	f800283a 	ret
{
	sgdma_tx = alt_avalon_sgdma_open(SGDMA_M2S_NAME);
	if (sgdma_tx == NULL) {return 1;}

	sgdma_rx = alt_avalon_sgdma_open(SGDMA_S2M_NAME);
	if (sgdma_rx == NULL) {return 2;}
 4000420:	00800084 	movi	r2,2
	alt_u32 controlMask = (ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK | ALTERA_AVALON_SGDMA_CONTROL_IE_CHAIN_COMPLETED_MSK | ALTERA_AVALON_SGDMA_CONTROL_PARK_MSK);
	alt_avalon_sgdma_register_callback(sgdma_tx, txCallback, controlMask, &tx_done);
	alt_avalon_sgdma_register_callback(sgdma_rx, rxCallback, controlMask, &rx_done);

	return 0;
}
 4000424:	dfc00017 	ldw	ra,0(sp)
 4000428:	dec00104 	addi	sp,sp,4
 400042c:	f800283a 	ret
}

int initHW()
{
	sgdma_tx = alt_avalon_sgdma_open(SGDMA_M2S_NAME);
	if (sgdma_tx == NULL) {return 1;}
 4000430:	00800044 	movi	r2,1
	alt_u32 controlMask = (ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK | ALTERA_AVALON_SGDMA_CONTROL_IE_CHAIN_COMPLETED_MSK | ALTERA_AVALON_SGDMA_CONTROL_PARK_MSK);
	alt_avalon_sgdma_register_callback(sgdma_tx, txCallback, controlMask, &tx_done);
	alt_avalon_sgdma_register_callback(sgdma_rx, rxCallback, controlMask, &rx_done);

	return 0;
}
 4000434:	dfc00017 	ldw	ra,0(sp)
 4000438:	dec00104 	addi	sp,sp,4
 400043c:	f800283a 	ret

	sgdma_rx = alt_avalon_sgdma_open(SGDMA_S2M_NAME);
	if (sgdma_rx == NULL) {return 2;}

	bufferPtr = malloc(((BUFFER_SIZE + 1) * 5) * ALTERA_AVALON_SGDMA_DESCRIPTOR_SIZE);
	if (bufferPtr == NULL) {return 3;}
 4000440:	008000c4 	movi	r2,3
	alt_u32 controlMask = (ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK | ALTERA_AVALON_SGDMA_CONTROL_IE_CHAIN_COMPLETED_MSK | ALTERA_AVALON_SGDMA_CONTROL_PARK_MSK);
	alt_avalon_sgdma_register_callback(sgdma_tx, txCallback, controlMask, &tx_done);
	alt_avalon_sgdma_register_callback(sgdma_rx, rxCallback, controlMask, &rx_done);

	return 0;
}
 4000444:	dfc00017 	ldw	ra,0(sp)
 4000448:	dec00104 	addi	sp,sp,4
 400044c:	f800283a 	ret

04000450 <scaleHW>:

int scaleHW(unsigned char* source, unsigned char* destination, int sourceWidth, int sourceHeight, int x, int y, int width, int height, int xScale, int yScale)
{
 4000450:	deffef04 	addi	sp,sp,-68
	int dwidth = xScale > 0 ? width * xScale : width / -xScale;
 4000454:	d8c01517 	ldw	r3,84(sp)

	return 0;
}

int scaleHW(unsigned char* source, unsigned char* destination, int sourceWidth, int sourceHeight, int x, int y, int width, int height, int xScale, int yScale)
{
 4000458:	df000f15 	stw	fp,60(sp)
 400045c:	dd000b15 	stw	r20,44(sp)
 4000460:	dcc00a15 	stw	r19,40(sp)
 4000464:	dc000715 	stw	r16,28(sp)
 4000468:	dfc01015 	stw	ra,64(sp)
 400046c:	ddc00e15 	stw	r23,56(sp)
 4000470:	dd800d15 	stw	r22,52(sp)
 4000474:	dd400c15 	stw	r21,48(sp)
 4000478:	dc800915 	stw	r18,36(sp)
 400047c:	dc400815 	stw	r17,32(sp)
 4000480:	d9400415 	stw	r5,16(sp)
 4000484:	2039883a 	mov	fp,r4
 4000488:	3029883a 	mov	r20,r6
 400048c:	dc001417 	ldw	r16,80(sp)
 4000490:	dcc01617 	ldw	r19,88(sp)
	int dwidth = xScale > 0 ? width * xScale : width / -xScale;
 4000494:	00c07f0e 	bge	zero,r3,4000694 <scaleHW+0x244>
 4000498:	d9401317 	ldw	r5,76(sp)
 400049c:	1809883a 	mov	r4,r3
 40004a0:	4001a140 	call	4001a14 <__mulsi3>
 40004a4:	102b883a 	mov	r21,r2
	int dheight = yScale > 0 ? height * yScale : height / -yScale;
 40004a8:	04c0720e 	bge	zero,r19,4000674 <scaleHW+0x224>
 40004ac:	800b883a 	mov	r5,r16
 40004b0:	9809883a 	mov	r4,r19
 40004b4:	4001a140 	call	4001a14 <__mulsi3>
 40004b8:	1025883a 	mov	r18,r2

	int descIdx = 0;

	alt_sgdma_descriptor* tx_desc = &descPtr[descIdx];
 40004bc:	d5e75917 	ldw	r23,-25244(gp)
	for(int i = 0; i < height; i++)
 40004c0:	0400a20e 	bge	zero,r16,400074c <scaleHW+0x2fc>
 40004c4:	d9001217 	ldw	r4,72(sp)
 40004c8:	a00b883a 	mov	r5,r20
 40004cc:	4001a140 	call	4001a14 <__mulsi3>
 40004d0:	d8c01117 	ldw	r3,68(sp)
 40004d4:	b809883a 	mov	r4,r23
 40004d8:	10c5883a 	add	r2,r2,r3
 40004dc:	d8c01317 	ldw	r3,76(sp)
 40004e0:	e0a3883a 	add	r17,fp,r2
 40004e4:	0039883a 	mov	fp,zero
 40004e8:	1dbfffcc 	andi	r22,r3,65535
 40004ec:	00000106 	br	40004f4 <scaleHW+0xa4>
 40004f0:	d1275917 	ldw	r4,-25244(gp)
 40004f4:	e006917a 	slli	r3,fp,5
	{
		alt_avalon_sgdma_construct_mem_to_stream_desc(&descPtr[descIdx], &descPtr[descIdx + 1], (alt_u32*)&source[PIXEL(x, y + i, sourceWidth)], width, 0, 0, 0, 0);
 40004f8:	880d883a 	mov	r6,r17
 40004fc:	d8000315 	stw	zero,12(sp)
 4000500:	19400804 	addi	r5,r3,32
 4000504:	214b883a 	add	r5,r4,r5
 4000508:	d8000215 	stw	zero,8(sp)
 400050c:	20c9883a 	add	r4,r4,r3
 4000510:	d8000115 	stw	zero,4(sp)
 4000514:	d8000015 	stw	zero,0(sp)
 4000518:	b00f883a 	mov	r7,r22
		descIdx++;
 400051c:	e7000044 	addi	fp,fp,1
	int descIdx = 0;

	alt_sgdma_descriptor* tx_desc = &descPtr[descIdx];
	for(int i = 0; i < height; i++)
	{
		alt_avalon_sgdma_construct_mem_to_stream_desc(&descPtr[descIdx], &descPtr[descIdx + 1], (alt_u32*)&source[PIXEL(x, y + i, sourceWidth)], width, 0, 0, 0, 0);
 4000520:	4015f700 	call	4015f70 <alt_avalon_sgdma_construct_mem_to_stream_desc>
 4000524:	8d23883a 	add	r17,r17,r20
	int dheight = yScale > 0 ? height * yScale : height / -yScale;

	int descIdx = 0;

	alt_sgdma_descriptor* tx_desc = &descPtr[descIdx];
	for(int i = 0; i < height; i++)
 4000528:	873ff11e 	bne	r16,fp,40004f0 <__alt_data_end+0xfc0004f0>
 400052c:	8004917a 	slli	r2,r16,5
 4000530:	d1675917 	ldw	r5,-25244(gp)
 4000534:	87000044 	addi	fp,r16,1
 4000538:	15800804 	addi	r22,r2,32
	{
		alt_avalon_sgdma_construct_mem_to_stream_desc(&descPtr[descIdx], &descPtr[descIdx + 1], (alt_u32*)&source[PIXEL(x, y + i, sourceWidth)], width, 0, 0, 0, 0);
		descIdx++;
	}
	descPtr[descIdx++].control = 0;
 400053c:	2885883a 	add	r2,r5,r2

	alt_sgdma_descriptor* rx_desc = &descPtr[descIdx];
 4000540:	2dad883a 	add	r22,r5,r22
	for(int i = 0; i < height; i++)
	{
		alt_avalon_sgdma_construct_mem_to_stream_desc(&descPtr[descIdx], &descPtr[descIdx + 1], (alt_u32*)&source[PIXEL(x, y + i, sourceWidth)], width, 0, 0, 0, 0);
		descIdx++;
	}
	descPtr[descIdx++].control = 0;
 4000544:	100007c5 	stb	zero,31(r2)

	alt_sgdma_descriptor* rx_desc = &descPtr[descIdx];
 4000548:	dd800515 	stw	r22,20(sp)
	for(int i = 0; i < dheight; i++)
 400054c:	0480840e 	bge	zero,r18,4000760 <scaleHW+0x310>
 4000550:	e008917a 	slli	r4,fp,5
 4000554:	ad3fffcc 	andi	r20,r21,65535
 4000558:	dd800417 	ldw	r22,16(sp)
 400055c:	9723883a 	add	r17,r18,fp
 4000560:	00000206 	br	400056c <scaleHW+0x11c>
 4000564:	d1675917 	ldw	r5,-25244(gp)
 4000568:	9009883a 	mov	r4,r18
 400056c:	24800804 	addi	r18,r4,32
	{
		alt_avalon_sgdma_construct_stream_to_mem_desc(&descPtr[descIdx], &descPtr[descIdx + 1], (alt_u32*)&destination[PIXEL(0, i, dwidth)], dwidth, 0);
 4000570:	b00d883a 	mov	r6,r22
 4000574:	2909883a 	add	r4,r5,r4
 4000578:	d8000015 	stw	zero,0(sp)
 400057c:	2c8b883a 	add	r5,r5,r18
 4000580:	a00f883a 	mov	r7,r20
		descIdx++;
 4000584:	e7000044 	addi	fp,fp,1
	descPtr[descIdx++].control = 0;

	alt_sgdma_descriptor* rx_desc = &descPtr[descIdx];
	for(int i = 0; i < dheight; i++)
	{
		alt_avalon_sgdma_construct_stream_to_mem_desc(&descPtr[descIdx], &descPtr[descIdx + 1], (alt_u32*)&destination[PIXEL(0, i, dwidth)], dwidth, 0);
 4000588:	4015e980 	call	4015e98 <alt_avalon_sgdma_construct_stream_to_mem_desc>
 400058c:	b56d883a 	add	r22,r22,r21
		descIdx++;
	}
	descPtr[descIdx++].control = 0;

	alt_sgdma_descriptor* rx_desc = &descPtr[descIdx];
	for(int i = 0; i < dheight; i++)
 4000590:	e47ff41e 	bne	fp,r17,4000564 <__alt_data_end+0xfc000564>
 4000594:	e038917a 	slli	fp,fp,5
 4000598:	d0a75917 	ldw	r2,-25244(gp)
 400059c:	1739883a 	add	fp,r2,fp
		alt_avalon_sgdma_construct_stream_to_mem_desc(&descPtr[descIdx], &descPtr[descIdx + 1], (alt_u32*)&destination[PIXEL(0, i, dwidth)], dwidth, 0);
		descIdx++;
	}
	descPtr[descIdx++].control = 0;

	alt_u32 cr = (xScale > 0) << X_UPSCALE_OFFSET | (yScale > 0) << Y_UPSCALE_OFFSET;
 40005a0:	d8c01517 	ldw	r3,84(sp)
	for(int i = 0; i < dheight; i++)
	{
		alt_avalon_sgdma_construct_stream_to_mem_desc(&descPtr[descIdx], &descPtr[descIdx + 1], (alt_u32*)&destination[PIXEL(0, i, dwidth)], dwidth, 0);
		descIdx++;
	}
	descPtr[descIdx++].control = 0;
 40005a4:	e00007c5 	stb	zero,31(fp)

	alt_u32 cr = (xScale > 0) << X_UPSCALE_OFFSET | (yScale > 0) << Y_UPSCALE_OFFSET;
 40005a8:	00c02e0e 	bge	zero,r3,4000664 <scaleHW+0x214>
 40005ac:	00800904 	movi	r2,36
 40005b0:	00c00104 	movi	r3,4
 40005b4:	04c0220e 	bge	zero,r19,4000640 <scaleHW+0x1f0>
	xScale = xScale > 0 ? xScale : -xScale;
	yScale = yScale > 0 ? yScale : -yScale;
	cr |= (xScale - 1) << X_SCALE_OFFSET | (yScale - 1) << Y_SCALE_OFFSET;
	IOWR_32DIRECT(UP_DOWN_SCALER_BASE, CR_ADDR, cr);
 40005b8:	98002316 	blt	r19,zero,4000648 <scaleHW+0x1f8>
 40005bc:	dc801517 	ldw	r18,84(sp)
 40005c0:	9cffffc4 	addi	r19,r19,-1
 40005c4:	982690fa 	slli	r19,r19,3
 40005c8:	90002416 	blt	r18,zero,400065c <scaleHW+0x20c>
 40005cc:	94bfffc4 	addi	r18,r18,-1
 40005d0:	9ca4b03a 	or	r18,r19,r18
 40005d4:	90a4b03a 	or	r18,r18,r2
 40005d8:	00820034 	movhi	r2,2048
 40005dc:	10844204 	addi	r2,r2,4360
 40005e0:	14800035 	stwio	r18,0(r2)
	alt_u32 wh = width << WIDTH_OFFSET | height << HEIGHT_OFFSET;
	IOWR_32DIRECT(UP_DOWN_SCALER_BASE, WH_ADDR, wh);
 40005e4:	d8c01317 	ldw	r3,76(sp)
 40005e8:	8020943a 	slli	r16,r16,16
 40005ec:	00820034 	movhi	r2,2048
 40005f0:	10844304 	addi	r2,r2,4364
 40005f4:	80e0b03a 	or	r16,r16,r3
 40005f8:	14000035 	stwio	r16,0(r2)

	if(alt_avalon_sgdma_do_async_transfer(sgdma_tx, tx_desc)) { return 4; }
 40005fc:	d1275c17 	ldw	r4,-25232(gp)
 4000600:	b80b883a 	mov	r5,r23
 4000604:	4015b6c0 	call	4015b6c <alt_avalon_sgdma_do_async_transfer>
 4000608:	10003a26 	beq	r2,zero,40006f4 <scaleHW+0x2a4>
 400060c:	00800104 	movi	r2,4

	alt_avalon_sgdma_stop(sgdma_tx);
	alt_avalon_sgdma_stop(sgdma_rx);

	return 0;
}
 4000610:	dfc01017 	ldw	ra,64(sp)
 4000614:	df000f17 	ldw	fp,60(sp)
 4000618:	ddc00e17 	ldw	r23,56(sp)
 400061c:	dd800d17 	ldw	r22,52(sp)
 4000620:	dd400c17 	ldw	r21,48(sp)
 4000624:	dd000b17 	ldw	r20,44(sp)
 4000628:	dcc00a17 	ldw	r19,40(sp)
 400062c:	dc800917 	ldw	r18,36(sp)
 4000630:	dc400817 	ldw	r17,32(sp)
 4000634:	dc000717 	ldw	r16,28(sp)
 4000638:	dec01104 	addi	sp,sp,68
 400063c:	f800283a 	ret
 4000640:	1805883a 	mov	r2,r3

	alt_u32 cr = (xScale > 0) << X_UPSCALE_OFFSET | (yScale > 0) << Y_UPSCALE_OFFSET;
	xScale = xScale > 0 ? xScale : -xScale;
	yScale = yScale > 0 ? yScale : -yScale;
	cr |= (xScale - 1) << X_SCALE_OFFSET | (yScale - 1) << Y_SCALE_OFFSET;
	IOWR_32DIRECT(UP_DOWN_SCALER_BASE, CR_ADDR, cr);
 4000644:	983fdd0e 	bge	r19,zero,40005bc <__alt_data_end+0xfc0005bc>
 4000648:	dc801517 	ldw	r18,84(sp)
 400064c:	04e7c83a 	sub	r19,zero,r19
 4000650:	9cffffc4 	addi	r19,r19,-1
 4000654:	982690fa 	slli	r19,r19,3
 4000658:	903fdc0e 	bge	r18,zero,40005cc <__alt_data_end+0xfc0005cc>
 400065c:	04a5c83a 	sub	r18,zero,r18
 4000660:	003fda06 	br	40005cc <__alt_data_end+0xfc0005cc>
 4000664:	00800804 	movi	r2,32
 4000668:	0007883a 	mov	r3,zero
		alt_avalon_sgdma_construct_stream_to_mem_desc(&descPtr[descIdx], &descPtr[descIdx + 1], (alt_u32*)&destination[PIXEL(0, i, dwidth)], dwidth, 0);
		descIdx++;
	}
	descPtr[descIdx++].control = 0;

	alt_u32 cr = (xScale > 0) << X_UPSCALE_OFFSET | (yScale > 0) << Y_UPSCALE_OFFSET;
 400066c:	04ffd216 	blt	zero,r19,40005b8 <__alt_data_end+0xfc0005b8>
 4000670:	003ff306 	br	4000640 <__alt_data_end+0xfc000640>
}

int scaleHW(unsigned char* source, unsigned char* destination, int sourceWidth, int sourceHeight, int x, int y, int width, int height, int xScale, int yScale)
{
	int dwidth = xScale > 0 ? width * xScale : width / -xScale;
	int dheight = yScale > 0 ? height * yScale : height / -yScale;
 4000674:	04cbc83a 	sub	r5,zero,r19
 4000678:	8144b03a 	or	r2,r16,r5
 400067c:	00c003c4 	movi	r3,15
 4000680:	1880152e 	bgeu	r3,r2,40006d8 <scaleHW+0x288>
 4000684:	8009883a 	mov	r4,r16
 4000688:	40018600 	call	4001860 <__divsi3>
 400068c:	1025883a 	mov	r18,r2
 4000690:	003f8a06 	br	40004bc <__alt_data_end+0xfc0004bc>
	return 0;
}

int scaleHW(unsigned char* source, unsigned char* destination, int sourceWidth, int sourceHeight, int x, int y, int width, int height, int xScale, int yScale)
{
	int dwidth = xScale > 0 ? width * xScale : width / -xScale;
 4000694:	00cbc83a 	sub	r5,zero,r3
 4000698:	d8c01317 	ldw	r3,76(sp)
 400069c:	1944b03a 	or	r2,r3,r5
 40006a0:	00c003c4 	movi	r3,15
 40006a4:	1880042e 	bgeu	r3,r2,40006b8 <scaleHW+0x268>
 40006a8:	d9001317 	ldw	r4,76(sp)
 40006ac:	40018600 	call	4001860 <__divsi3>
 40006b0:	102b883a 	mov	r21,r2
 40006b4:	003f7c06 	br	40004a8 <__alt_data_end+0xfc0004a8>
 40006b8:	d8c01317 	ldw	r3,76(sp)
 40006bc:	1804913a 	slli	r2,r3,4
 40006c0:	114ab03a 	or	r5,r2,r5
 40006c4:	008100b4 	movhi	r2,1026
 40006c8:	10a1cf04 	addi	r2,r2,-30916
 40006cc:	288b883a 	add	r5,r5,r2
 40006d0:	2d400003 	ldbu	r21,0(r5)
 40006d4:	003f7406 	br	40004a8 <__alt_data_end+0xfc0004a8>
	int dheight = yScale > 0 ? height * yScale : height / -yScale;
 40006d8:	8004913a 	slli	r2,r16,4
 40006dc:	114ab03a 	or	r5,r2,r5
 40006e0:	008100b4 	movhi	r2,1026
 40006e4:	10a1cf04 	addi	r2,r2,-30916
 40006e8:	288b883a 	add	r5,r5,r2
 40006ec:	2c800003 	ldbu	r18,0(r5)
 40006f0:	003f7206 	br	40004bc <__alt_data_end+0xfc0004bc>
	IOWR_32DIRECT(UP_DOWN_SCALER_BASE, CR_ADDR, cr);
	alt_u32 wh = width << WIDTH_OFFSET | height << HEIGHT_OFFSET;
	IOWR_32DIRECT(UP_DOWN_SCALER_BASE, WH_ADDR, wh);

	if(alt_avalon_sgdma_do_async_transfer(sgdma_tx, tx_desc)) { return 4; }
	if(alt_avalon_sgdma_do_async_transfer(sgdma_rx, rx_desc)) { return 5; }
 40006f4:	d1275b17 	ldw	r4,-25236(gp)
 40006f8:	d9400517 	ldw	r5,20(sp)
 40006fc:	4015b6c0 	call	4015b6c <alt_avalon_sgdma_do_async_transfer>
 4000700:	10000426 	beq	r2,zero,4000714 <scaleHW+0x2c4>
 4000704:	00800144 	movi	r2,5
 4000708:	003fc106 	br	4000610 <__alt_data_end+0xfc000610>

	while(tx_done == 0 || rx_done == 0) {}
 400070c:	d0e75717 	ldw	r3,-25252(gp)
 4000710:	1800051e 	bne	r3,zero,4000728 <scaleHW+0x2d8>
 4000714:	d0e75817 	ldw	r3,-25248(gp)
 4000718:	183ffc1e 	bne	r3,zero,400070c <__alt_data_end+0xfc00070c>
 400071c:	d0e75817 	ldw	r3,-25248(gp)
 4000720:	183ffc26 	beq	r3,zero,4000714 <__alt_data_end+0xfc000714>
 4000724:	003ff906 	br	400070c <__alt_data_end+0xfc00070c>

	tx_done = 0;
	rx_done = 0;

	alt_avalon_sgdma_stop(sgdma_tx);
 4000728:	d1275c17 	ldw	r4,-25232(gp)
	if(alt_avalon_sgdma_do_async_transfer(sgdma_tx, tx_desc)) { return 4; }
	if(alt_avalon_sgdma_do_async_transfer(sgdma_rx, rx_desc)) { return 5; }

	while(tx_done == 0 || rx_done == 0) {}

	tx_done = 0;
 400072c:	d0275815 	stw	zero,-25248(gp)
	rx_done = 0;

	alt_avalon_sgdma_stop(sgdma_tx);
 4000730:	d8800615 	stw	r2,24(sp)
	if(alt_avalon_sgdma_do_async_transfer(sgdma_rx, rx_desc)) { return 5; }

	while(tx_done == 0 || rx_done == 0) {}

	tx_done = 0;
	rx_done = 0;
 4000734:	d0275715 	stw	zero,-25252(gp)

	alt_avalon_sgdma_stop(sgdma_tx);
 4000738:	40161280 	call	4016128 <alt_avalon_sgdma_stop>
	alt_avalon_sgdma_stop(sgdma_rx);
 400073c:	d1275b17 	ldw	r4,-25236(gp)
 4000740:	40161280 	call	4016128 <alt_avalon_sgdma_stop>

	return 0;
 4000744:	d8800617 	ldw	r2,24(sp)
 4000748:	003fb106 	br	4000610 <__alt_data_end+0xfc000610>
	int dheight = yScale > 0 ? height * yScale : height / -yScale;

	int descIdx = 0;

	alt_sgdma_descriptor* tx_desc = &descPtr[descIdx];
	for(int i = 0; i < height; i++)
 400074c:	b80b883a 	mov	r5,r23
 4000750:	05800804 	movi	r22,32
 4000754:	0005883a 	mov	r2,zero
 4000758:	07000044 	movi	fp,1
 400075c:	003f7706 	br	400053c <__alt_data_end+0xfc00053c>
 4000760:	b039883a 	mov	fp,r22
 4000764:	003f8e06 	br	40005a0 <__alt_data_end+0xfc0005a0>

04000768 <scaleHSCD>:
}

int scaleHSCD(unsigned char* source, unsigned char* destination, int sourceWidth, int sourceHeight, int x, int y, int width, int height, int xScale, int yScale)
{
	return 0;
}
 4000768:	0005883a 	mov	r2,zero
 400076c:	f800283a 	ret

04000770 <printHelp>:
	unsigned char* destinationImage;
} Command;

void printHelp()
{
	printf("Enter command in this format <filename> (B | [R <x> <y> <w> <h>] <scale factor>)\n");
 4000770:	01010074 	movhi	r4,1025
	unsigned char* referenceImage;
	unsigned char* destinationImage;
} Command;

void printHelp()
{
 4000774:	deffff04 	addi	sp,sp,-4
	printf("Enter command in this format <filename> (B | [R <x> <y> <w> <h>] <scale factor>)\n");
 4000778:	211f6f04 	addi	r4,r4,32188
	unsigned char* referenceImage;
	unsigned char* destinationImage;
} Command;

void printHelp()
{
 400077c:	dfc00015 	stw	ra,0(sp)
	printf("Enter command in this format <filename> (B | [R <x> <y> <w> <h>] <scale factor>)\n");
 4000780:	4003f340 	call	4003f34 <puts>
	printf("B starts benchmark, no other parameters are allowed\n");
 4000784:	01010074 	movhi	r4,1025
 4000788:	211f8404 	addi	r4,r4,32272
 400078c:	4003f340 	call	4003f34 <puts>
	printf("R selects the part of the picture to scale\n");
 4000790:	01010074 	movhi	r4,1025
 4000794:	211f9104 	addi	r4,r4,32324
 4000798:	4003f340 	call	4003f34 <puts>
	printf("Scale factor is one or two numbers in range {-4, -3, -2, -1, 1, 2, 3, 4}\n");
 400079c:	01010074 	movhi	r4,1025
 40007a0:	211f9c04 	addi	r4,r4,32368
 40007a4:	4003f340 	call	4003f34 <puts>
	printf("If two numbers are specified they are x and y scaling factors respectively\n");
 40007a8:	01010074 	movhi	r4,1025
 40007ac:	211faf04 	addi	r4,r4,32444
}
 40007b0:	dfc00017 	ldw	ra,0(sp)
 40007b4:	dec00104 	addi	sp,sp,4
{
	printf("Enter command in this format <filename> (B | [R <x> <y> <w> <h>] <scale factor>)\n");
	printf("B starts benchmark, no other parameters are allowed\n");
	printf("R selects the part of the picture to scale\n");
	printf("Scale factor is one or two numbers in range {-4, -3, -2, -1, 1, 2, 3, 4}\n");
	printf("If two numbers are specified they are x and y scaling factors respectively\n");
 40007b8:	4003f341 	jmpi	4003f34 <puts>

040007bc <printError>:
}

void printError(Command* cmd)
{
	int status = cmd->status;
 40007bc:	20800007 	ldb	r2,0(r4)
	if (status == 0) { printf("No error\n"); }
 40007c0:	10001426 	beq	r2,zero,4000814 <printError+0x58>
	else if (status >= 1 && status <= 5) { printf("Failed to load image\n"); }
 40007c4:	10ffffc4 	addi	r3,r2,-1
 40007c8:	01000104 	movi	r4,4
 40007cc:	20c0142e 	bgeu	r4,r3,4000820 <printError+0x64>
	else if (status == 6) { printf("Invalid X scale factor\n"); }
 40007d0:	00c00184 	movi	r3,6
 40007d4:	10c01826 	beq	r2,r3,4000838 <printError+0x7c>
	else if (status == 7) { printf("Invalid Y scale factor\n"); }
 40007d8:	00c001c4 	movi	r3,7
 40007dc:	10c01926 	beq	r2,r3,4000844 <printError+0x88>
	else if (status == 8) { printf("Invalid picture start point\n"); }
 40007e0:	00c00204 	movi	r3,8
 40007e4:	10c01a26 	beq	r2,r3,4000850 <printError+0x94>
	else if (status == 9) { printf("Invalid picture end point\n"); }
 40007e8:	00c00244 	movi	r3,9
 40007ec:	10c01b26 	beq	r2,r3,400085c <printError+0xa0>
	else if (status == 10 || status == 11) { printf("Failed to allocate output buffers\n"); }
 40007f0:	10fffd84 	addi	r3,r2,-10
 40007f4:	01000044 	movi	r4,1
 40007f8:	20c01b2e 	bgeu	r4,r3,4000868 <printError+0xac>
	else if (status >= 12 && status <= 15) { printf("Failed to save image\n"); }
 40007fc:	10bffd04 	addi	r2,r2,-12
 4000800:	00c000c4 	movi	r3,3
 4000804:	1880092e 	bgeu	r3,r2,400082c <printError+0x70>
	else { printf("Unknown error\n"); }
 4000808:	01010074 	movhi	r4,1025
 400080c:	211f6304 	addi	r4,r4,32140
 4000810:	4003f341 	jmpi	4003f34 <puts>
}

void printError(Command* cmd)
{
	int status = cmd->status;
	if (status == 0) { printf("No error\n"); }
 4000814:	01010074 	movhi	r4,1025
 4000818:	211f4c04 	addi	r4,r4,32048
 400081c:	4003f341 	jmpi	4003f34 <puts>
	else if (status >= 1 && status <= 5) { printf("Failed to load image\n"); }
 4000820:	01010074 	movhi	r4,1025
 4000824:	211fc204 	addi	r4,r4,32520
 4000828:	4003f341 	jmpi	4003f34 <puts>
	else if (status == 6) { printf("Invalid X scale factor\n"); }
	else if (status == 7) { printf("Invalid Y scale factor\n"); }
	else if (status == 8) { printf("Invalid picture start point\n"); }
	else if (status == 9) { printf("Invalid picture end point\n"); }
	else if (status == 10 || status == 11) { printf("Failed to allocate output buffers\n"); }
	else if (status >= 12 && status <= 15) { printf("Failed to save image\n"); }
 400082c:	01010074 	movhi	r4,1025
 4000830:	211feb04 	addi	r4,r4,32684
 4000834:	4003f341 	jmpi	4003f34 <puts>
void printError(Command* cmd)
{
	int status = cmd->status;
	if (status == 0) { printf("No error\n"); }
	else if (status >= 1 && status <= 5) { printf("Failed to load image\n"); }
	else if (status == 6) { printf("Invalid X scale factor\n"); }
 4000838:	01010074 	movhi	r4,1025
 400083c:	211fc804 	addi	r4,r4,32544
 4000840:	4003f341 	jmpi	4003f34 <puts>
	else if (status == 7) { printf("Invalid Y scale factor\n"); }
 4000844:	01010074 	movhi	r4,1025
 4000848:	211fce04 	addi	r4,r4,32568
 400084c:	4003f341 	jmpi	4003f34 <puts>
	else if (status == 8) { printf("Invalid picture start point\n"); }
 4000850:	01010074 	movhi	r4,1025
 4000854:	211fd404 	addi	r4,r4,32592
 4000858:	4003f341 	jmpi	4003f34 <puts>
	else if (status == 9) { printf("Invalid picture end point\n"); }
 400085c:	01010074 	movhi	r4,1025
 4000860:	211fdb04 	addi	r4,r4,32620
 4000864:	4003f341 	jmpi	4003f34 <puts>
	else if (status == 10 || status == 11) { printf("Failed to allocate output buffers\n"); }
 4000868:	01010074 	movhi	r4,1025
 400086c:	211fe204 	addi	r4,r4,32648
 4000870:	4003f341 	jmpi	4003f34 <puts>

04000874 <cleanup>:
	else if (status >= 12 && status <= 15) { printf("Failed to save image\n"); }
	else { printf("Unknown error\n"); }
}

void cleanup(Command* cmd)
{
 4000874:	defffe04 	addi	sp,sp,-8
 4000878:	dc000015 	stw	r16,0(sp)
 400087c:	2021883a 	mov	r16,r4
	if (cmd->sourceImage != NULL) { free(cmd->sourceImage); cmd->sourceImage = NULL; }
 4000880:	21004f17 	ldw	r4,316(r4)
	else if (status >= 12 && status <= 15) { printf("Failed to save image\n"); }
	else { printf("Unknown error\n"); }
}

void cleanup(Command* cmd)
{
 4000884:	dfc00115 	stw	ra,4(sp)
	if (cmd->sourceImage != NULL) { free(cmd->sourceImage); cmd->sourceImage = NULL; }
 4000888:	20000226 	beq	r4,zero,4000894 <cleanup+0x20>
 400088c:	40033840 	call	4003384 <free>
 4000890:	80004f15 	stw	zero,316(r16)
	if (cmd->referenceImage != NULL) { free(cmd->referenceImage); cmd->referenceImage = NULL; }
 4000894:	81005017 	ldw	r4,320(r16)
 4000898:	20000226 	beq	r4,zero,40008a4 <cleanup+0x30>
 400089c:	40033840 	call	4003384 <free>
 40008a0:	80005015 	stw	zero,320(r16)
	if (cmd->destinationImage != NULL) { free(cmd->destinationImage); cmd->destinationImage = NULL; }
 40008a4:	81005117 	ldw	r4,324(r16)
 40008a8:	20000226 	beq	r4,zero,40008b4 <cleanup+0x40>
 40008ac:	40033840 	call	4003384 <free>
 40008b0:	80005115 	stw	zero,324(r16)
}
 40008b4:	dfc00117 	ldw	ra,4(sp)
 40008b8:	dc000017 	ldw	r16,0(sp)
 40008bc:	dec00204 	addi	sp,sp,8
 40008c0:	f800283a 	ret

040008c4 <checkCommand>:

int checkCommand(Command* cmd)
{
	if (cmd->status != 0)
 40008c4:	20800007 	ldb	r2,0(r4)
 40008c8:	1000021e 	bne	r2,zero,40008d4 <checkCommand+0x10>
	{
		printError(cmd);
		cleanup(cmd);
		return 1;
	}
	return 0;
 40008cc:	0005883a 	mov	r2,zero
}
 40008d0:	f800283a 	ret
	if (cmd->referenceImage != NULL) { free(cmd->referenceImage); cmd->referenceImage = NULL; }
	if (cmd->destinationImage != NULL) { free(cmd->destinationImage); cmd->destinationImage = NULL; }
}

int checkCommand(Command* cmd)
{
 40008d4:	defffe04 	addi	sp,sp,-8
 40008d8:	dc000015 	stw	r16,0(sp)
 40008dc:	dfc00115 	stw	ra,4(sp)
 40008e0:	2021883a 	mov	r16,r4

void printError(Command* cmd)
{
	int status = cmd->status;
	if (status == 0) { printf("No error\n"); }
	else if (status >= 1 && status <= 5) { printf("Failed to load image\n"); }
 40008e4:	10ffffc4 	addi	r3,r2,-1
 40008e8:	01000104 	movi	r4,4
 40008ec:	20c0242e 	bgeu	r4,r3,4000980 <checkCommand+0xbc>
	else if (status == 6) { printf("Invalid X scale factor\n"); }
 40008f0:	00c00184 	movi	r3,6
 40008f4:	10c02e26 	beq	r2,r3,40009b0 <checkCommand+0xec>
	else if (status == 7) { printf("Invalid Y scale factor\n"); }
 40008f8:	00c001c4 	movi	r3,7
 40008fc:	10c03026 	beq	r2,r3,40009c0 <checkCommand+0xfc>
	else if (status == 8) { printf("Invalid picture start point\n"); }
 4000900:	00c00204 	movi	r3,8
 4000904:	10c02626 	beq	r2,r3,40009a0 <checkCommand+0xdc>
	else if (status == 9) { printf("Invalid picture end point\n"); }
 4000908:	00c00244 	movi	r3,9
 400090c:	10c03026 	beq	r2,r3,40009d0 <checkCommand+0x10c>
	else if (status == 10 || status == 11) { printf("Failed to allocate output buffers\n"); }
 4000910:	10fffd84 	addi	r3,r2,-10
 4000914:	01000044 	movi	r4,1
 4000918:	20c0312e 	bgeu	r4,r3,40009e0 <checkCommand+0x11c>
	else if (status >= 12 && status <= 15) { printf("Failed to save image\n"); }
 400091c:	10bffd04 	addi	r2,r2,-12
 4000920:	00c000c4 	movi	r3,3
 4000924:	18801a2e 	bgeu	r3,r2,4000990 <checkCommand+0xcc>
	else { printf("Unknown error\n"); }
 4000928:	01010074 	movhi	r4,1025
 400092c:	211f6304 	addi	r4,r4,32140
 4000930:	4003f340 	call	4003f34 <puts>
}

void cleanup(Command* cmd)
{
	if (cmd->sourceImage != NULL) { free(cmd->sourceImage); cmd->sourceImage = NULL; }
 4000934:	81004f17 	ldw	r4,316(r16)
 4000938:	20000226 	beq	r4,zero,4000944 <checkCommand+0x80>
 400093c:	40033840 	call	4003384 <free>
 4000940:	80004f15 	stw	zero,316(r16)
	if (cmd->referenceImage != NULL) { free(cmd->referenceImage); cmd->referenceImage = NULL; }
 4000944:	81005017 	ldw	r4,320(r16)
 4000948:	20000226 	beq	r4,zero,4000954 <checkCommand+0x90>
 400094c:	40033840 	call	4003384 <free>
 4000950:	80005015 	stw	zero,320(r16)
	if (cmd->destinationImage != NULL) { free(cmd->destinationImage); cmd->destinationImage = NULL; }
 4000954:	81005117 	ldw	r4,324(r16)
 4000958:	20000726 	beq	r4,zero,4000978 <checkCommand+0xb4>
 400095c:	40033840 	call	4003384 <free>
 4000960:	00800044 	movi	r2,1
 4000964:	80005115 	stw	zero,324(r16)
		printError(cmd);
		cleanup(cmd);
		return 1;
	}
	return 0;
}
 4000968:	dfc00117 	ldw	ra,4(sp)
 400096c:	dc000017 	ldw	r16,0(sp)
 4000970:	dec00204 	addi	sp,sp,8
 4000974:	f800283a 	ret

void cleanup(Command* cmd)
{
	if (cmd->sourceImage != NULL) { free(cmd->sourceImage); cmd->sourceImage = NULL; }
	if (cmd->referenceImage != NULL) { free(cmd->referenceImage); cmd->referenceImage = NULL; }
	if (cmd->destinationImage != NULL) { free(cmd->destinationImage); cmd->destinationImage = NULL; }
 4000978:	00800044 	movi	r2,1
 400097c:	003ffa06 	br	4000968 <__alt_data_end+0xfc000968>

void printError(Command* cmd)
{
	int status = cmd->status;
	if (status == 0) { printf("No error\n"); }
	else if (status >= 1 && status <= 5) { printf("Failed to load image\n"); }
 4000980:	01010074 	movhi	r4,1025
 4000984:	211fc204 	addi	r4,r4,32520
 4000988:	4003f340 	call	4003f34 <puts>
 400098c:	003fe906 	br	4000934 <__alt_data_end+0xfc000934>
	else if (status == 6) { printf("Invalid X scale factor\n"); }
	else if (status == 7) { printf("Invalid Y scale factor\n"); }
	else if (status == 8) { printf("Invalid picture start point\n"); }
	else if (status == 9) { printf("Invalid picture end point\n"); }
	else if (status == 10 || status == 11) { printf("Failed to allocate output buffers\n"); }
	else if (status >= 12 && status <= 15) { printf("Failed to save image\n"); }
 4000990:	01010074 	movhi	r4,1025
 4000994:	211feb04 	addi	r4,r4,32684
 4000998:	4003f340 	call	4003f34 <puts>
 400099c:	003fe506 	br	4000934 <__alt_data_end+0xfc000934>
	int status = cmd->status;
	if (status == 0) { printf("No error\n"); }
	else if (status >= 1 && status <= 5) { printf("Failed to load image\n"); }
	else if (status == 6) { printf("Invalid X scale factor\n"); }
	else if (status == 7) { printf("Invalid Y scale factor\n"); }
	else if (status == 8) { printf("Invalid picture start point\n"); }
 40009a0:	01010074 	movhi	r4,1025
 40009a4:	211fd404 	addi	r4,r4,32592
 40009a8:	4003f340 	call	4003f34 <puts>
 40009ac:	003fe106 	br	4000934 <__alt_data_end+0xfc000934>
void printError(Command* cmd)
{
	int status = cmd->status;
	if (status == 0) { printf("No error\n"); }
	else if (status >= 1 && status <= 5) { printf("Failed to load image\n"); }
	else if (status == 6) { printf("Invalid X scale factor\n"); }
 40009b0:	01010074 	movhi	r4,1025
 40009b4:	211fc804 	addi	r4,r4,32544
 40009b8:	4003f340 	call	4003f34 <puts>
 40009bc:	003fdd06 	br	4000934 <__alt_data_end+0xfc000934>
	else if (status == 7) { printf("Invalid Y scale factor\n"); }
 40009c0:	01010074 	movhi	r4,1025
 40009c4:	211fce04 	addi	r4,r4,32568
 40009c8:	4003f340 	call	4003f34 <puts>
 40009cc:	003fd906 	br	4000934 <__alt_data_end+0xfc000934>
	else if (status == 8) { printf("Invalid picture start point\n"); }
	else if (status == 9) { printf("Invalid picture end point\n"); }
 40009d0:	01010074 	movhi	r4,1025
 40009d4:	211fdb04 	addi	r4,r4,32620
 40009d8:	4003f340 	call	4003f34 <puts>
 40009dc:	003fd506 	br	4000934 <__alt_data_end+0xfc000934>
	else if (status == 10 || status == 11) { printf("Failed to allocate output buffers\n"); }
 40009e0:	01010074 	movhi	r4,1025
 40009e4:	211fe204 	addi	r4,r4,32648
 40009e8:	4003f340 	call	4003f34 <puts>
 40009ec:	003fd106 	br	4000934 <__alt_data_end+0xfc000934>

040009f0 <parseCommand>:
	}
	return 0;
}

Command parseCommand()
{
 40009f0:	deffaa04 	addi	sp,sp,-344
 40009f4:	dc405415 	stw	r17,336(sp)
 40009f8:	2023883a 	mov	r17,r4
	cmd.destinationHeight = -1;
	cmd.sourceImage = NULL;
	cmd.referenceImage = NULL;
	cmd.destinationImage = NULL;

	scanf("%s", cmd.fname);
 40009fc:	01010074 	movhi	r4,1025

	cmd.status = 0;
	cmd.benchmark = 0;
	cmd.xScale = 0;
	cmd.yScale = 0;
	cmd.x = -1;
 4000a00:	00bfffc4 	movi	r2,-1
	cmd.destinationHeight = -1;
	cmd.sourceImage = NULL;
	cmd.referenceImage = NULL;
	cmd.destinationImage = NULL;

	scanf("%s", cmd.fname);
 4000a04:	211ff104 	addi	r4,r4,32708
 4000a08:	d9400144 	addi	r5,sp,5
	}
	return 0;
}

Command parseCommand()
{
 4000a0c:	dc005315 	stw	r16,332(sp)
 4000a10:	dfc05515 	stw	ra,340(sp)
	char next;
	Command cmd;

	cmd.status = 0;
 4000a14:	d8000105 	stb	zero,4(sp)
	cmd.benchmark = 0;
 4000a18:	d8004145 	stb	zero,261(sp)
	cmd.xScale = 0;
 4000a1c:	d8004215 	stw	zero,264(sp)
	cmd.yScale = 0;
 4000a20:	d8004315 	stw	zero,268(sp)
	cmd.x = -1;
 4000a24:	d8804415 	stw	r2,272(sp)
	cmd.y = -1;
 4000a28:	d8804515 	stw	r2,276(sp)
	cmd.ex = -1;
 4000a2c:	d8804615 	stw	r2,280(sp)
	cmd.ey = -1;
 4000a30:	d8804715 	stw	r2,284(sp)
	cmd.w = -1;
 4000a34:	d8804815 	stw	r2,288(sp)
	cmd.h = -1;
 4000a38:	d8804915 	stw	r2,292(sp)
	cmd.sourceWidth = -1;
 4000a3c:	d8804a15 	stw	r2,296(sp)
	cmd.sourceHeight = -1;
 4000a40:	d8804b15 	stw	r2,300(sp)
	cmd.destinationWidth = -1;
 4000a44:	d8804c15 	stw	r2,304(sp)
	cmd.destinationHeight = -1;
 4000a48:	d8804d15 	stw	r2,308(sp)
	cmd.sourceImage = NULL;
 4000a4c:	d8005015 	stw	zero,320(sp)
	cmd.referenceImage = NULL;
 4000a50:	d8005115 	stw	zero,324(sp)
	cmd.destinationImage = NULL;
 4000a54:	d8005215 	stw	zero,328(sp)

	scanf("%s", cmd.fname);

	for (next = ' '; next == ' '; next = getchar()) {}
 4000a58:	04000804 	movi	r16,32
	cmd.destinationHeight = -1;
	cmd.sourceImage = NULL;
	cmd.referenceImage = NULL;
	cmd.destinationImage = NULL;

	scanf("%s", cmd.fname);
 4000a5c:	40042140 	call	4004214 <scanf>

	for (next = ' '; next == ' '; next = getchar()) {}
 4000a60:	d0a00117 	ldw	r2,-32764(gp)
 4000a64:	11000117 	ldw	r4,4(r2)
 4000a68:	400312c0 	call	400312c <getc>
 4000a6c:	10803fcc 	andi	r2,r2,255
 4000a70:	1080201c 	xori	r2,r2,128
 4000a74:	10bfe004 	addi	r2,r2,-128
 4000a78:	143ff926 	beq	r2,r16,4000a60 <__alt_data_end+0xfc000a60>

	if (next == 'B') { cmd.benchmark = 1; return cmd; }
 4000a7c:	00c01084 	movi	r3,66
 4000a80:	10c03326 	beq	r2,r3,4000b50 <parseCommand+0x160>
	else if (next == 'R') { scanf("%d %d %d %d", &cmd.x, &cmd.y, &cmd.w,  &cmd.h); }
 4000a84:	00c01484 	movi	r3,82
 4000a88:	10c02826 	beq	r2,r3,4000b2c <parseCommand+0x13c>
	else { ungetc(next, stdin); }
 4000a8c:	1009883a 	mov	r4,r2
 4000a90:	d0a00117 	ldw	r2,-32764(gp)
 4000a94:	11400117 	ldw	r5,4(r2)
 4000a98:	40047d40 	call	40047d4 <ungetc>

	scanf("%d", &cmd.xScale);
 4000a9c:	01010074 	movhi	r4,1025
 4000aa0:	211ff504 	addi	r4,r4,32724
 4000aa4:	d9404204 	addi	r5,sp,264
 4000aa8:	40042140 	call	4004214 <scanf>
	cmd.yScale = cmd.xScale;
 4000aac:	d8804217 	ldw	r2,264(sp)

	for (next = ' '; next == ' '; next = getchar()) {}
 4000ab0:	04000804 	movi	r16,32
	if (next == 'B') { cmd.benchmark = 1; return cmd; }
	else if (next == 'R') { scanf("%d %d %d %d", &cmd.x, &cmd.y, &cmd.w,  &cmd.h); }
	else { ungetc(next, stdin); }

	scanf("%d", &cmd.xScale);
	cmd.yScale = cmd.xScale;
 4000ab4:	d8804315 	stw	r2,268(sp)

	for (next = ' '; next == ' '; next = getchar()) {}
 4000ab8:	d0a00117 	ldw	r2,-32764(gp)
 4000abc:	11000117 	ldw	r4,4(r2)
 4000ac0:	400312c0 	call	400312c <getc>
 4000ac4:	10803fcc 	andi	r2,r2,255
 4000ac8:	1080201c 	xori	r2,r2,128
 4000acc:	10bfe004 	addi	r2,r2,-128
 4000ad0:	143ff926 	beq	r2,r16,4000ab8 <__alt_data_end+0xfc000ab8>

	if (next == '\n' || next == '\r') { return cmd; }
 4000ad4:	00c00284 	movi	r3,10
 4000ad8:	10c00a26 	beq	r2,r3,4000b04 <parseCommand+0x114>
 4000adc:	00c00344 	movi	r3,13
 4000ae0:	10c00826 	beq	r2,r3,4000b04 <parseCommand+0x114>
	else { ungetc(next, stdin); }
 4000ae4:	1009883a 	mov	r4,r2
 4000ae8:	d0a00117 	ldw	r2,-32764(gp)
 4000aec:	11400117 	ldw	r5,4(r2)
 4000af0:	40047d40 	call	40047d4 <ungetc>

	scanf("%d", &cmd.yScale);
 4000af4:	01010074 	movhi	r4,1025
 4000af8:	211ff504 	addi	r4,r4,32724
 4000afc:	d9404304 	addi	r5,sp,268
 4000b00:	40042140 	call	4004214 <scanf>

	return cmd;
 4000b04:	01805204 	movi	r6,328
 4000b08:	d9400104 	addi	r5,sp,4
 4000b0c:	8809883a 	mov	r4,r17
 4000b10:	4003ba40 	call	4003ba4 <memcpy>
}
 4000b14:	8805883a 	mov	r2,r17
 4000b18:	dfc05517 	ldw	ra,340(sp)
 4000b1c:	dc405417 	ldw	r17,336(sp)
 4000b20:	dc005317 	ldw	r16,332(sp)
 4000b24:	dec05604 	addi	sp,sp,344
 4000b28:	f800283a 	ret
	scanf("%s", cmd.fname);

	for (next = ' '; next == ' '; next = getchar()) {}

	if (next == 'B') { cmd.benchmark = 1; return cmd; }
	else if (next == 'R') { scanf("%d %d %d %d", &cmd.x, &cmd.y, &cmd.w,  &cmd.h); }
 4000b2c:	d8804904 	addi	r2,sp,292
 4000b30:	01010074 	movhi	r4,1025
 4000b34:	211ff204 	addi	r4,r4,32712
 4000b38:	d8800015 	stw	r2,0(sp)
 4000b3c:	d9c04804 	addi	r7,sp,288
 4000b40:	d9804504 	addi	r6,sp,276
 4000b44:	d9404404 	addi	r5,sp,272
 4000b48:	40042140 	call	4004214 <scanf>
 4000b4c:	003fd306 	br	4000a9c <__alt_data_end+0xfc000a9c>

	scanf("%s", cmd.fname);

	for (next = ' '; next == ' '; next = getchar()) {}

	if (next == 'B') { cmd.benchmark = 1; return cmd; }
 4000b50:	01805204 	movi	r6,328
 4000b54:	d9400104 	addi	r5,sp,4
 4000b58:	8809883a 	mov	r4,r17
 4000b5c:	00800044 	movi	r2,1
 4000b60:	d8804145 	stb	r2,261(sp)
 4000b64:	4003ba40 	call	4003ba4 <memcpy>
 4000b68:	003fea06 	br	4000b14 <__alt_data_end+0xfc000b14>

04000b6c <loadImage>:
	return cmd;
}

void loadImage(Command* cmd)
{
	char ffname[MAX_PATH] = "/mnt/host/../../";
 4000b6c:	009d1bb4 	movhi	r2,29806

	return cmd;
}

void loadImage(Command* cmd)
{
 4000b70:	deffba04 	addi	sp,sp,-280
	char ffname[MAX_PATH] = "/mnt/host/../../";
 4000b74:	109b4bc4 	addi	r2,r2,27951
 4000b78:	d8800015 	stw	r2,0(sp)
 4000b7c:	009cdbf4 	movhi	r2,29551
 4000b80:	109a0bc4 	addi	r2,r2,26671
 4000b84:	d8800115 	stw	r2,4(sp)
 4000b88:	008b8bb4 	movhi	r2,11822
 4000b8c:	108bdd04 	addi	r2,r2,12148
 4000b90:	d8800215 	stw	r2,8(sp)
 4000b94:	008bcbb4 	movhi	r2,12078

	return cmd;
}

void loadImage(Command* cmd)
{
 4000b98:	dc004015 	stw	r16,256(sp)
	char ffname[MAX_PATH] = "/mnt/host/../../";
 4000b9c:	01803b04 	movi	r6,236

	return cmd;
}

void loadImage(Command* cmd)
{
 4000ba0:	2021883a 	mov	r16,r4
	char ffname[MAX_PATH] = "/mnt/host/../../";
 4000ba4:	000b883a 	mov	r5,zero
 4000ba8:	d9000504 	addi	r4,sp,20
 4000bac:	108b8bc4 	addi	r2,r2,11823

	return cmd;
}

void loadImage(Command* cmd)
{
 4000bb0:	dfc04515 	stw	ra,276(sp)
 4000bb4:	dd004415 	stw	r20,272(sp)
 4000bb8:	dcc04315 	stw	r19,268(sp)
 4000bbc:	dc804215 	stw	r18,264(sp)
 4000bc0:	dc404115 	stw	r17,260(sp)
	char ffname[MAX_PATH] = "/mnt/host/../../";
 4000bc4:	d8800315 	stw	r2,12(sp)
 4000bc8:	d8000415 	stw	zero,16(sp)
 4000bcc:	4003cec0 	call	4003cec <memset>
	strcat(ffname, cmd->fname);
 4000bd0:	81400044 	addi	r5,r16,1
 4000bd4:	d9000404 	addi	r4,sp,16
 4000bd8:	40044440 	call	4004444 <strcpy>
	FILE* f = fopen(ffname, "rb");
 4000bdc:	01410074 	movhi	r5,1025
 4000be0:	295ff604 	addi	r5,r5,32728
 4000be4:	d809883a 	mov	r4,sp
 4000be8:	400228c0 	call	400228c <fopen>
	if (f == NULL) { cmd->status = 1; return; }
 4000bec:	10001626 	beq	r2,zero,4000c48 <loadImage+0xdc>

	size_t read = fread(&cmd->sourceWidth, sizeof(int), 1, f);
 4000bf0:	04800044 	movi	r18,1
 4000bf4:	05000104 	movi	r20,4
 4000bf8:	100f883a 	mov	r7,r2
 4000bfc:	900d883a 	mov	r6,r18
 4000c00:	a00b883a 	mov	r5,r20
 4000c04:	81004904 	addi	r4,r16,292
 4000c08:	1023883a 	mov	r17,r2
 4000c0c:	40024e00 	call	40024e0 <fread>
 4000c10:	1027883a 	mov	r19,r2
	if (read != 1) { fclose(f); cmd->status = 2; return; }
 4000c14:	14800f26 	beq	r2,r18,4000c54 <loadImage+0xe8>
 4000c18:	8809883a 	mov	r4,r17
 4000c1c:	4001b2c0 	call	4001b2c <fclose>
 4000c20:	00800084 	movi	r2,2
 4000c24:	80800005 	stb	r2,0(r16)

	read = fread(cmd->sourceImage, sizeof(unsigned char), cmd->sourceSize, f);
	if (read != cmd->sourceSize) { fclose(f); cmd->status = 5; return; }

	fclose(f);
}
 4000c28:	dfc04517 	ldw	ra,276(sp)
 4000c2c:	dd004417 	ldw	r20,272(sp)
 4000c30:	dcc04317 	ldw	r19,268(sp)
 4000c34:	dc804217 	ldw	r18,264(sp)
 4000c38:	dc404117 	ldw	r17,260(sp)
 4000c3c:	dc004017 	ldw	r16,256(sp)
 4000c40:	dec04604 	addi	sp,sp,280
 4000c44:	f800283a 	ret
void loadImage(Command* cmd)
{
	char ffname[MAX_PATH] = "/mnt/host/../../";
	strcat(ffname, cmd->fname);
	FILE* f = fopen(ffname, "rb");
	if (f == NULL) { cmd->status = 1; return; }
 4000c48:	00800044 	movi	r2,1
 4000c4c:	80800005 	stb	r2,0(r16)
 4000c50:	003ff506 	br	4000c28 <__alt_data_end+0xfc000c28>

	size_t read = fread(&cmd->sourceWidth, sizeof(int), 1, f);
	if (read != 1) { fclose(f); cmd->status = 2; return; }

	read = fread(&cmd->sourceHeight, sizeof(int), 1, f);
 4000c54:	880f883a 	mov	r7,r17
 4000c58:	100d883a 	mov	r6,r2
 4000c5c:	a00b883a 	mov	r5,r20
 4000c60:	81004a04 	addi	r4,r16,296
 4000c64:	40024e00 	call	40024e0 <fread>
 4000c68:	1025883a 	mov	r18,r2
	if (read != 1) { fclose(f); cmd->status = 3; return; }
 4000c6c:	14c00526 	beq	r2,r19,4000c84 <loadImage+0x118>
 4000c70:	8809883a 	mov	r4,r17
 4000c74:	4001b2c0 	call	4001b2c <fclose>
 4000c78:	008000c4 	movi	r2,3
 4000c7c:	80800005 	stb	r2,0(r16)
 4000c80:	003fe906 	br	4000c28 <__alt_data_end+0xfc000c28>

	cmd->sourceSize = cmd->sourceWidth * cmd->sourceHeight;
 4000c84:	81004917 	ldw	r4,292(r16)
 4000c88:	81404a17 	ldw	r5,296(r16)
 4000c8c:	4001a140 	call	4001a14 <__mulsi3>
 4000c90:	80804d15 	stw	r2,308(r16)
	cmd->sourceImage = malloc(sizeof(unsigned char) * cmd->sourceSize);
 4000c94:	1009883a 	mov	r4,r2
	if (read != 1) { fclose(f); cmd->status = 2; return; }

	read = fread(&cmd->sourceHeight, sizeof(int), 1, f);
	if (read != 1) { fclose(f); cmd->status = 3; return; }

	cmd->sourceSize = cmd->sourceWidth * cmd->sourceHeight;
 4000c98:	1027883a 	mov	r19,r2
	cmd->sourceImage = malloc(sizeof(unsigned char) * cmd->sourceSize);
 4000c9c:	40033700 	call	4003370 <malloc>
 4000ca0:	80804f15 	stw	r2,316(r16)
	if (cmd->sourceImage == NULL) { fclose(f); cmd->status = 4; return; }
 4000ca4:	10000c26 	beq	r2,zero,4000cd8 <loadImage+0x16c>

	read = fread(cmd->sourceImage, sizeof(unsigned char), cmd->sourceSize, f);
 4000ca8:	1009883a 	mov	r4,r2
 4000cac:	880f883a 	mov	r7,r17
 4000cb0:	980d883a 	mov	r6,r19
 4000cb4:	900b883a 	mov	r5,r18
 4000cb8:	40024e00 	call	40024e0 <fread>
	if (read != cmd->sourceSize) { fclose(f); cmd->status = 5; return; }
 4000cbc:	80c04d17 	ldw	r3,308(r16)
 4000cc0:	8809883a 	mov	r4,r17
 4000cc4:	10c00826 	beq	r2,r3,4000ce8 <loadImage+0x17c>
 4000cc8:	4001b2c0 	call	4001b2c <fclose>
 4000ccc:	00800144 	movi	r2,5
 4000cd0:	80800005 	stb	r2,0(r16)
 4000cd4:	003fd406 	br	4000c28 <__alt_data_end+0xfc000c28>
	read = fread(&cmd->sourceHeight, sizeof(int), 1, f);
	if (read != 1) { fclose(f); cmd->status = 3; return; }

	cmd->sourceSize = cmd->sourceWidth * cmd->sourceHeight;
	cmd->sourceImage = malloc(sizeof(unsigned char) * cmd->sourceSize);
	if (cmd->sourceImage == NULL) { fclose(f); cmd->status = 4; return; }
 4000cd8:	8809883a 	mov	r4,r17
 4000cdc:	4001b2c0 	call	4001b2c <fclose>
 4000ce0:	85000005 	stb	r20,0(r16)
 4000ce4:	003fd006 	br	4000c28 <__alt_data_end+0xfc000c28>

	read = fread(cmd->sourceImage, sizeof(unsigned char), cmd->sourceSize, f);
	if (read != cmd->sourceSize) { fclose(f); cmd->status = 5; return; }

	fclose(f);
 4000ce8:	4001b2c0 	call	4001b2c <fclose>
 4000cec:	003fce06 	br	4000c28 <__alt_data_end+0xfc000c28>

04000cf0 <prepareCommand>:
}

void prepareCommand(Command* cmd)
{
 4000cf0:	defffb04 	addi	sp,sp,-20
 4000cf4:	dc000015 	stw	r16,0(sp)
 4000cf8:	21404117 	ldw	r5,260(r4)
 4000cfc:	24004217 	ldw	r16,264(r4)
 4000d00:	dfc00415 	stw	ra,16(sp)
 4000d04:	dcc00315 	stw	r19,12(sp)
 4000d08:	dc800215 	stw	r18,8(sp)
 4000d0c:	dc400115 	stw	r17,4(sp)
 4000d10:	01bfff44 	movi	r6,-3
 4000d14:	80bfff20 	cmpeqi	r2,r16,-4
 4000d18:	29807c26 	beq	r5,r6,4000f0c <prepareCommand+0x21c>
 4000d1c:	28ffff20 	cmpeqi	r3,r5,-4
 4000d20:	01bfff44 	movi	r6,-3
 4000d24:	81807726 	beq	r16,r6,4000f04 <prepareCommand+0x214>
 4000d28:	01bfff84 	movi	r6,-2
 4000d2c:	29807326 	beq	r5,r6,4000efc <prepareCommand+0x20c>
 4000d30:	01bfff84 	movi	r6,-2
 4000d34:	81806f26 	beq	r16,r6,4000ef4 <prepareCommand+0x204>
 4000d38:	01bfffc4 	movi	r6,-1
 4000d3c:	29806b26 	beq	r5,r6,4000eec <prepareCommand+0x1fc>
 4000d40:	01bfffc4 	movi	r6,-1
 4000d44:	81806726 	beq	r16,r6,4000ee4 <prepareCommand+0x1f4>
 4000d48:	01800044 	movi	r6,1
 4000d4c:	29806326 	beq	r5,r6,4000edc <prepareCommand+0x1ec>
 4000d50:	01800044 	movi	r6,1
 4000d54:	81805f26 	beq	r16,r6,4000ed4 <prepareCommand+0x1e4>
 4000d58:	01800084 	movi	r6,2
 4000d5c:	29805b26 	beq	r5,r6,4000ecc <prepareCommand+0x1dc>
 4000d60:	01800084 	movi	r6,2
 4000d64:	81805726 	beq	r16,r6,4000ec4 <prepareCommand+0x1d4>
 4000d68:	018000c4 	movi	r6,3
 4000d6c:	29805326 	beq	r5,r6,4000ebc <prepareCommand+0x1cc>
 4000d70:	018000c4 	movi	r6,3
 4000d74:	81804f26 	beq	r16,r6,4000eb4 <prepareCommand+0x1c4>
 4000d78:	01800104 	movi	r6,4
 4000d7c:	81804b26 	beq	r16,r6,4000eac <prepareCommand+0x1bc>
	for (int i = 0; i < 8; i++)
	{
		if (cmd->xScale == validScales[i]) { validX = 1; }
		if (cmd->yScale == validScales[i]) { validY = 1; }
	}
	if (validX == 0) { cmd->status = 6; return; }
 4000d80:	01800104 	movi	r6,4
 4000d84:	29800a26 	beq	r5,r6,4000db0 <prepareCommand+0xc0>
 4000d88:	1800091e 	bne	r3,zero,4000db0 <prepareCommand+0xc0>
 4000d8c:	00800184 	movi	r2,6
 4000d90:	20800005 	stb	r2,0(r4)
	cmd->referenceImage = malloc(sizeof(unsigned char) * cmd->destinationSize);
	cmd->destinationImage = malloc(sizeof(unsigned char) * cmd->destinationSize);

	if (cmd->referenceImage == NULL) { cmd->status = 10; return; }
	if (cmd->destinationImage == NULL) { cmd->status = 11; return; }
}
 4000d94:	dfc00417 	ldw	ra,16(sp)
 4000d98:	dcc00317 	ldw	r19,12(sp)
 4000d9c:	dc800217 	ldw	r18,8(sp)
 4000da0:	dc400117 	ldw	r17,4(sp)
 4000da4:	dc000017 	ldw	r16,0(sp)
 4000da8:	dec00504 	addi	sp,sp,20
 4000dac:	f800283a 	ret
	{
		if (cmd->xScale == validScales[i]) { validX = 1; }
		if (cmd->yScale == validScales[i]) { validY = 1; }
	}
	if (validX == 0) { cmd->status = 6; return; }
	if (validY == 0) { cmd->status = 7; return; }
 4000db0:	1000031e 	bne	r2,zero,4000dc0 <prepareCommand+0xd0>
 4000db4:	008001c4 	movi	r2,7
 4000db8:	20800005 	stb	r2,0(r4)
 4000dbc:	003ff506 	br	4000d94 <__alt_data_end+0xfc000d94>

	if (cmd->x == -1) { cmd->x = 0; }
 4000dc0:	20804317 	ldw	r2,268(r4)
 4000dc4:	00ffffc4 	movi	r3,-1
 4000dc8:	10c05b26 	beq	r2,r3,4000f38 <prepareCommand+0x248>
	if (cmd->y == -1) { cmd->y = 0; }
 4000dcc:	20c04417 	ldw	r3,272(r4)
 4000dd0:	01bfffc4 	movi	r6,-1
 4000dd4:	19805526 	beq	r3,r6,4000f2c <prepareCommand+0x23c>
	if (cmd->w == -1) { cmd->w = cmd->sourceWidth; }
 4000dd8:	21804717 	ldw	r6,284(r4)
 4000ddc:	01ffffc4 	movi	r7,-1
 4000de0:	31c04f26 	beq	r6,r7,4000f20 <prepareCommand+0x230>
	if (cmd->h == -1) { cmd->h = cmd->sourceHeight; }
 4000de4:	24404817 	ldw	r17,288(r4)
 4000de8:	01ffffc4 	movi	r7,-1
 4000dec:	89c04926 	beq	r17,r7,4000f14 <prepareCommand+0x224>

	cmd->ex = cmd->x + cmd->w;
 4000df0:	118f883a 	add	r7,r2,r6
	cmd->ey = cmd->y + cmd->h;
 4000df4:	88d1883a 	add	r8,r17,r3
	if (cmd->x == -1) { cmd->x = 0; }
	if (cmd->y == -1) { cmd->y = 0; }
	if (cmd->w == -1) { cmd->w = cmd->sourceWidth; }
	if (cmd->h == -1) { cmd->h = cmd->sourceHeight; }

	cmd->ex = cmd->x + cmd->w;
 4000df8:	21c04515 	stw	r7,276(r4)
	cmd->ey = cmd->y + cmd->h;
 4000dfc:	22004615 	stw	r8,280(r4)

	if (cmd->x < 0 || cmd->x >= cmd->sourceWidth || cmd->y < 0 || cmd->y >= cmd->sourceHeight) { cmd->status = 8; return; }
 4000e00:	10002716 	blt	r2,zero,4000ea0 <prepareCommand+0x1b0>
 4000e04:	22404917 	ldw	r9,292(r4)
 4000e08:	1240250e 	bge	r2,r9,4000ea0 <prepareCommand+0x1b0>
 4000e0c:	18002416 	blt	r3,zero,4000ea0 <prepareCommand+0x1b0>
 4000e10:	20804a17 	ldw	r2,296(r4)
 4000e14:	1880220e 	bge	r3,r2,4000ea0 <prepareCommand+0x1b0>
	if (cmd->ex <= 0 || cmd->ex > cmd->sourceWidth || cmd->ey <= 0 || cmd->ey > cmd->sourceHeight) { cmd->status = 9; return; }
 4000e18:	01c04a0e 	bge	zero,r7,4000f44 <prepareCommand+0x254>
 4000e1c:	49c04916 	blt	r9,r7,4000f44 <prepareCommand+0x254>
 4000e20:	0200480e 	bge	zero,r8,4000f44 <prepareCommand+0x254>
 4000e24:	12004716 	blt	r2,r8,4000f44 <prepareCommand+0x254>

	cmd->destinationWidth = cmd->w;
 4000e28:	21804b15 	stw	r6,300(r4)
	cmd->destinationHeight = cmd->h;
 4000e2c:	24404c15 	stw	r17,304(r4)
 4000e30:	2025883a 	mov	r18,r4

	if(cmd->xScale < 0) { cmd->destinationWidth /= -cmd->xScale; }
 4000e34:	28005416 	blt	r5,zero,4000f88 <prepareCommand+0x298>
	else { cmd->destinationWidth *= cmd->xScale; }
 4000e38:	3009883a 	mov	r4,r6
 4000e3c:	4001a140 	call	4001a14 <__mulsi3>
 4000e40:	1027883a 	mov	r19,r2
 4000e44:	94c04b15 	stw	r19,300(r18)
	if(cmd->yScale < 0) { cmd->destinationHeight /= -cmd->yScale; }
 4000e48:	80004416 	blt	r16,zero,4000f5c <prepareCommand+0x26c>
	else { cmd->destinationHeight *= cmd->yScale; }
 4000e4c:	880b883a 	mov	r5,r17
 4000e50:	8009883a 	mov	r4,r16
 4000e54:	4001a140 	call	4001a14 <__mulsi3>

	cmd->destinationSize = cmd->destinationWidth * cmd->destinationHeight;
 4000e58:	980b883a 	mov	r5,r19
 4000e5c:	1009883a 	mov	r4,r2
	cmd->destinationHeight = cmd->h;

	if(cmd->xScale < 0) { cmd->destinationWidth /= -cmd->xScale; }
	else { cmd->destinationWidth *= cmd->xScale; }
	if(cmd->yScale < 0) { cmd->destinationHeight /= -cmd->yScale; }
	else { cmd->destinationHeight *= cmd->yScale; }
 4000e60:	90804c15 	stw	r2,304(r18)

	cmd->destinationSize = cmd->destinationWidth * cmd->destinationHeight;
 4000e64:	4001a140 	call	4001a14 <__mulsi3>

	cmd->referenceImage = malloc(sizeof(unsigned char) * cmd->destinationSize);
 4000e68:	1009883a 	mov	r4,r2
	if(cmd->xScale < 0) { cmd->destinationWidth /= -cmd->xScale; }
	else { cmd->destinationWidth *= cmd->xScale; }
	if(cmd->yScale < 0) { cmd->destinationHeight /= -cmd->yScale; }
	else { cmd->destinationHeight *= cmd->yScale; }

	cmd->destinationSize = cmd->destinationWidth * cmd->destinationHeight;
 4000e6c:	90804e15 	stw	r2,312(r18)
 4000e70:	1021883a 	mov	r16,r2

	cmd->referenceImage = malloc(sizeof(unsigned char) * cmd->destinationSize);
 4000e74:	40033700 	call	4003370 <malloc>
 4000e78:	90805015 	stw	r2,320(r18)
	cmd->destinationImage = malloc(sizeof(unsigned char) * cmd->destinationSize);
 4000e7c:	8009883a 	mov	r4,r16
	if(cmd->yScale < 0) { cmd->destinationHeight /= -cmd->yScale; }
	else { cmd->destinationHeight *= cmd->yScale; }

	cmd->destinationSize = cmd->destinationWidth * cmd->destinationHeight;

	cmd->referenceImage = malloc(sizeof(unsigned char) * cmd->destinationSize);
 4000e80:	1023883a 	mov	r17,r2
	cmd->destinationImage = malloc(sizeof(unsigned char) * cmd->destinationSize);
 4000e84:	40033700 	call	4003370 <malloc>
 4000e88:	90805115 	stw	r2,324(r18)

	if (cmd->referenceImage == NULL) { cmd->status = 10; return; }
 4000e8c:	88003026 	beq	r17,zero,4000f50 <prepareCommand+0x260>
	if (cmd->destinationImage == NULL) { cmd->status = 11; return; }
 4000e90:	103fc01e 	bne	r2,zero,4000d94 <__alt_data_end+0xfc000d94>
 4000e94:	008002c4 	movi	r2,11
 4000e98:	90800005 	stb	r2,0(r18)
 4000e9c:	003fbd06 	br	4000d94 <__alt_data_end+0xfc000d94>
	if (cmd->h == -1) { cmd->h = cmd->sourceHeight; }

	cmd->ex = cmd->x + cmd->w;
	cmd->ey = cmd->y + cmd->h;

	if (cmd->x < 0 || cmd->x >= cmd->sourceWidth || cmd->y < 0 || cmd->y >= cmd->sourceHeight) { cmd->status = 8; return; }
 4000ea0:	00800204 	movi	r2,8
 4000ea4:	20800005 	stb	r2,0(r4)
 4000ea8:	003fba06 	br	4000d94 <__alt_data_end+0xfc000d94>
 4000eac:	00800044 	movi	r2,1
 4000eb0:	003fb306 	br	4000d80 <__alt_data_end+0xfc000d80>
 4000eb4:	00800044 	movi	r2,1
 4000eb8:	003faf06 	br	4000d78 <__alt_data_end+0xfc000d78>
 4000ebc:	00c00044 	movi	r3,1
 4000ec0:	003fab06 	br	4000d70 <__alt_data_end+0xfc000d70>
 4000ec4:	00800044 	movi	r2,1
 4000ec8:	003fa706 	br	4000d68 <__alt_data_end+0xfc000d68>
 4000ecc:	00c00044 	movi	r3,1
 4000ed0:	003fa306 	br	4000d60 <__alt_data_end+0xfc000d60>
 4000ed4:	8005883a 	mov	r2,r16
 4000ed8:	003f9f06 	br	4000d58 <__alt_data_end+0xfc000d58>
 4000edc:	2807883a 	mov	r3,r5
 4000ee0:	003f9b06 	br	4000d50 <__alt_data_end+0xfc000d50>
 4000ee4:	00800044 	movi	r2,1
 4000ee8:	003f9706 	br	4000d48 <__alt_data_end+0xfc000d48>
 4000eec:	00c00044 	movi	r3,1
 4000ef0:	003f9306 	br	4000d40 <__alt_data_end+0xfc000d40>
 4000ef4:	00800044 	movi	r2,1
 4000ef8:	003f8f06 	br	4000d38 <__alt_data_end+0xfc000d38>
 4000efc:	00c00044 	movi	r3,1
 4000f00:	003f8b06 	br	4000d30 <__alt_data_end+0xfc000d30>
 4000f04:	00800044 	movi	r2,1
 4000f08:	003f8706 	br	4000d28 <__alt_data_end+0xfc000d28>
 4000f0c:	00c00044 	movi	r3,1
 4000f10:	003f8306 	br	4000d20 <__alt_data_end+0xfc000d20>
	if (validY == 0) { cmd->status = 7; return; }

	if (cmd->x == -1) { cmd->x = 0; }
	if (cmd->y == -1) { cmd->y = 0; }
	if (cmd->w == -1) { cmd->w = cmd->sourceWidth; }
	if (cmd->h == -1) { cmd->h = cmd->sourceHeight; }
 4000f14:	24404a17 	ldw	r17,296(r4)
 4000f18:	24404815 	stw	r17,288(r4)
 4000f1c:	003fb406 	br	4000df0 <__alt_data_end+0xfc000df0>
	if (validX == 0) { cmd->status = 6; return; }
	if (validY == 0) { cmd->status = 7; return; }

	if (cmd->x == -1) { cmd->x = 0; }
	if (cmd->y == -1) { cmd->y = 0; }
	if (cmd->w == -1) { cmd->w = cmd->sourceWidth; }
 4000f20:	21804917 	ldw	r6,292(r4)
 4000f24:	21804715 	stw	r6,284(r4)
 4000f28:	003fae06 	br	4000de4 <__alt_data_end+0xfc000de4>
	}
	if (validX == 0) { cmd->status = 6; return; }
	if (validY == 0) { cmd->status = 7; return; }

	if (cmd->x == -1) { cmd->x = 0; }
	if (cmd->y == -1) { cmd->y = 0; }
 4000f2c:	20004415 	stw	zero,272(r4)
 4000f30:	0007883a 	mov	r3,zero
 4000f34:	003fa806 	br	4000dd8 <__alt_data_end+0xfc000dd8>
		if (cmd->yScale == validScales[i]) { validY = 1; }
	}
	if (validX == 0) { cmd->status = 6; return; }
	if (validY == 0) { cmd->status = 7; return; }

	if (cmd->x == -1) { cmd->x = 0; }
 4000f38:	20004315 	stw	zero,268(r4)
 4000f3c:	0005883a 	mov	r2,zero
 4000f40:	003fa206 	br	4000dcc <__alt_data_end+0xfc000dcc>

	cmd->ex = cmd->x + cmd->w;
	cmd->ey = cmd->y + cmd->h;

	if (cmd->x < 0 || cmd->x >= cmd->sourceWidth || cmd->y < 0 || cmd->y >= cmd->sourceHeight) { cmd->status = 8; return; }
	if (cmd->ex <= 0 || cmd->ex > cmd->sourceWidth || cmd->ey <= 0 || cmd->ey > cmd->sourceHeight) { cmd->status = 9; return; }
 4000f44:	00800244 	movi	r2,9
 4000f48:	20800005 	stb	r2,0(r4)
 4000f4c:	003f9106 	br	4000d94 <__alt_data_end+0xfc000d94>
	cmd->destinationSize = cmd->destinationWidth * cmd->destinationHeight;

	cmd->referenceImage = malloc(sizeof(unsigned char) * cmd->destinationSize);
	cmd->destinationImage = malloc(sizeof(unsigned char) * cmd->destinationSize);

	if (cmd->referenceImage == NULL) { cmd->status = 10; return; }
 4000f50:	00800284 	movi	r2,10
 4000f54:	90800005 	stb	r2,0(r18)
 4000f58:	003f8e06 	br	4000d94 <__alt_data_end+0xfc000d94>
	cmd->destinationWidth = cmd->w;
	cmd->destinationHeight = cmd->h;

	if(cmd->xScale < 0) { cmd->destinationWidth /= -cmd->xScale; }
	else { cmd->destinationWidth *= cmd->xScale; }
	if(cmd->yScale < 0) { cmd->destinationHeight /= -cmd->yScale; }
 4000f5c:	040bc83a 	sub	r5,zero,r16
 4000f60:	8944b03a 	or	r2,r17,r5
 4000f64:	00c003c4 	movi	r3,15
 4000f68:	18801236 	bltu	r3,r2,4000fb4 <prepareCommand+0x2c4>
 4000f6c:	8822913a 	slli	r17,r17,4
 4000f70:	008100b4 	movhi	r2,1026
 4000f74:	10a1cf04 	addi	r2,r2,-30916
 4000f78:	894ab03a 	or	r5,r17,r5
 4000f7c:	288b883a 	add	r5,r5,r2
 4000f80:	28800003 	ldbu	r2,0(r5)
 4000f84:	003fb406 	br	4000e58 <__alt_data_end+0xfc000e58>
	if (cmd->ex <= 0 || cmd->ex > cmd->sourceWidth || cmd->ey <= 0 || cmd->ey > cmd->sourceHeight) { cmd->status = 9; return; }

	cmd->destinationWidth = cmd->w;
	cmd->destinationHeight = cmd->h;

	if(cmd->xScale < 0) { cmd->destinationWidth /= -cmd->xScale; }
 4000f88:	014bc83a 	sub	r5,zero,r5
 4000f8c:	3144b03a 	or	r2,r6,r5
 4000f90:	00c003c4 	movi	r3,15
 4000f94:	18800a36 	bltu	r3,r2,4000fc0 <prepareCommand+0x2d0>
 4000f98:	300c913a 	slli	r6,r6,4
 4000f9c:	008100b4 	movhi	r2,1026
 4000fa0:	10a1cf04 	addi	r2,r2,-30916
 4000fa4:	314ab03a 	or	r5,r6,r5
 4000fa8:	288b883a 	add	r5,r5,r2
 4000fac:	2cc00003 	ldbu	r19,0(r5)
 4000fb0:	003fa406 	br	4000e44 <__alt_data_end+0xfc000e44>
	else { cmd->destinationWidth *= cmd->xScale; }
	if(cmd->yScale < 0) { cmd->destinationHeight /= -cmd->yScale; }
 4000fb4:	8809883a 	mov	r4,r17
 4000fb8:	40018600 	call	4001860 <__divsi3>
 4000fbc:	003fa606 	br	4000e58 <__alt_data_end+0xfc000e58>
	if (cmd->ex <= 0 || cmd->ex > cmd->sourceWidth || cmd->ey <= 0 || cmd->ey > cmd->sourceHeight) { cmd->status = 9; return; }

	cmd->destinationWidth = cmd->w;
	cmd->destinationHeight = cmd->h;

	if(cmd->xScale < 0) { cmd->destinationWidth /= -cmd->xScale; }
 4000fc0:	3009883a 	mov	r4,r6
 4000fc4:	40018600 	call	4001860 <__divsi3>
 4000fc8:	1027883a 	mov	r19,r2
 4000fcc:	003f9d06 	br	4000e44 <__alt_data_end+0xfc000e44>

04000fd0 <resizeImage>:
	if (cmd->referenceImage == NULL) { cmd->status = 10; return; }
	if (cmd->destinationImage == NULL) { cmd->status = 11; return; }
}

void resizeImage(Command* cmd)
{
 4000fd0:	defff704 	addi	sp,sp,-36
	PERF_RESET(PERF_CNT_BASE);
 4000fd4:	00820034 	movhi	r2,2048
	if (cmd->referenceImage == NULL) { cmd->status = 10; return; }
	if (cmd->destinationImage == NULL) { cmd->status = 11; return; }
}

void resizeImage(Command* cmd)
{
 4000fd8:	dc000615 	stw	r16,24(sp)
 4000fdc:	dfc00815 	stw	ra,32(sp)
 4000fe0:	dc400715 	stw	r17,28(sp)
 4000fe4:	2021883a 	mov	r16,r4
	PERF_RESET(PERF_CNT_BASE);
 4000fe8:	10840004 	addi	r2,r2,4096
 4000fec:	00c00044 	movi	r3,1
 4000ff0:	10c00035 	stwio	r3,0(r2)
	PERF_START_MEASURING(PERF_CNT_BASE);
 4000ff4:	00820034 	movhi	r2,2048
 4000ff8:	0023883a 	mov	r17,zero
 4000ffc:	10840104 	addi	r2,r2,4100
 4001000:	14400035 	stwio	r17,0(r2)

	alt_dcache_flush_all();
 4001004:	40144ac0 	call	40144ac <alt_dcache_flush_all>
	PERF_BEGIN(PERF_CNT_BASE, 1);
 4001008:	00820034 	movhi	r2,2048
 400100c:	10840504 	addi	r2,r2,4116
 4001010:	14400035 	stwio	r17,0(r2)
	scaleSW(cmd->sourceImage, cmd->referenceImage, cmd->sourceWidth, cmd->sourceHeight, cmd->x, cmd->y, cmd->w, cmd->h, cmd->xScale, cmd->yScale);
 4001014:	80804317 	ldw	r2,268(r16)
 4001018:	82c04217 	ldw	r11,264(r16)
 400101c:	82804117 	ldw	r10,260(r16)
 4001020:	82404817 	ldw	r9,288(r16)
 4001024:	82004717 	ldw	r8,284(r16)
 4001028:	80c04417 	ldw	r3,272(r16)
 400102c:	81c04a17 	ldw	r7,296(r16)
 4001030:	81804917 	ldw	r6,292(r16)
 4001034:	81405017 	ldw	r5,320(r16)
 4001038:	81004f17 	ldw	r4,316(r16)
 400103c:	d8800015 	stw	r2,0(sp)
 4001040:	dac00515 	stw	r11,20(sp)
 4001044:	da800415 	stw	r10,16(sp)
 4001048:	da400315 	stw	r9,12(sp)
 400104c:	da000215 	stw	r8,8(sp)
 4001050:	d8c00115 	stw	r3,4(sp)
 4001054:	40015140 	call	4001514 <scaleSW>
	PERF_END(PERF_CNT_BASE, 1);
 4001058:	00820034 	movhi	r2,2048
 400105c:	10840404 	addi	r2,r2,4112
 4001060:	14400035 	stwio	r17,0(r2)

	alt_dcache_flush_all();
 4001064:	40144ac0 	call	40144ac <alt_dcache_flush_all>
	PERF_BEGIN(PERF_CNT_BASE, 2);
 4001068:	00820034 	movhi	r2,2048
 400106c:	10840904 	addi	r2,r2,4132
 4001070:	14400035 	stwio	r17,0(r2)
	checkHWStatus(scaleHW(cmd->sourceImage, cmd->destinationImage, cmd->sourceWidth, cmd->sourceHeight, cmd->x, cmd->y, cmd->w, cmd->h, cmd->xScale, cmd->yScale));
 4001074:	82c04217 	ldw	r11,264(r16)
 4001078:	82804117 	ldw	r10,260(r16)
 400107c:	82404817 	ldw	r9,288(r16)
 4001080:	82004717 	ldw	r8,284(r16)
 4001084:	80c04417 	ldw	r3,272(r16)
 4001088:	80804317 	ldw	r2,268(r16)
 400108c:	81c04a17 	ldw	r7,296(r16)
 4001090:	81804917 	ldw	r6,292(r16)
 4001094:	81405117 	ldw	r5,324(r16)
 4001098:	81004f17 	ldw	r4,316(r16)
 400109c:	dac00515 	stw	r11,20(sp)
 40010a0:	da800415 	stw	r10,16(sp)
 40010a4:	da400315 	stw	r9,12(sp)
 40010a8:	da000215 	stw	r8,8(sp)
 40010ac:	d8c00115 	stw	r3,4(sp)
 40010b0:	d8800015 	stw	r2,0(sp)
 40010b4:	40004500 	call	4000450 <scaleHW>
 40010b8:	1009883a 	mov	r4,r2
 40010bc:	40002f40 	call	40002f4 <checkHWStatus>
	PERF_END(PERF_CNT_BASE, 3);
 40010c0:	00820034 	movhi	r2,2048
 40010c4:	10840c04 	addi	r2,r2,4144
 40010c8:	14400035 	stwio	r17,0(r2)
}
 40010cc:	dfc00817 	ldw	ra,32(sp)
 40010d0:	dc400717 	ldw	r17,28(sp)
 40010d4:	dc000617 	ldw	r16,24(sp)
 40010d8:	dec00904 	addi	sp,sp,36
 40010dc:	f800283a 	ret

040010e0 <saveImage>:

void saveImage(Command* cmd)
{
	char ffname[MAX_PATH] = "/mnt/host/../../";
 40010e0:	009d1bb4 	movhi	r2,29806
	checkHWStatus(scaleHW(cmd->sourceImage, cmd->destinationImage, cmd->sourceWidth, cmd->sourceHeight, cmd->x, cmd->y, cmd->w, cmd->h, cmd->xScale, cmd->yScale));
	PERF_END(PERF_CNT_BASE, 3);
}

void saveImage(Command* cmd)
{
 40010e4:	deffbb04 	addi	sp,sp,-276
	char ffname[MAX_PATH] = "/mnt/host/../../";
 40010e8:	109b4bc4 	addi	r2,r2,27951
 40010ec:	d8800015 	stw	r2,0(sp)
 40010f0:	009cdbf4 	movhi	r2,29551
 40010f4:	109a0bc4 	addi	r2,r2,26671
 40010f8:	d8800115 	stw	r2,4(sp)
 40010fc:	008b8bb4 	movhi	r2,11822
 4001100:	108bdd04 	addi	r2,r2,12148
 4001104:	d8800215 	stw	r2,8(sp)
 4001108:	008bcbb4 	movhi	r2,12078
 400110c:	01803b04 	movi	r6,236
	checkHWStatus(scaleHW(cmd->sourceImage, cmd->destinationImage, cmd->sourceWidth, cmd->sourceHeight, cmd->x, cmd->y, cmd->w, cmd->h, cmd->xScale, cmd->yScale));
	PERF_END(PERF_CNT_BASE, 3);
}

void saveImage(Command* cmd)
{
 4001110:	dc004015 	stw	r16,256(sp)
	char ffname[MAX_PATH] = "/mnt/host/../../";
 4001114:	000b883a 	mov	r5,zero
	checkHWStatus(scaleHW(cmd->sourceImage, cmd->destinationImage, cmd->sourceWidth, cmd->sourceHeight, cmd->x, cmd->y, cmd->w, cmd->h, cmd->xScale, cmd->yScale));
	PERF_END(PERF_CNT_BASE, 3);
}

void saveImage(Command* cmd)
{
 4001118:	2021883a 	mov	r16,r4
	char ffname[MAX_PATH] = "/mnt/host/../../";
 400111c:	108b8bc4 	addi	r2,r2,11823
 4001120:	d9000504 	addi	r4,sp,20
	checkHWStatus(scaleHW(cmd->sourceImage, cmd->destinationImage, cmd->sourceWidth, cmd->sourceHeight, cmd->x, cmd->y, cmd->w, cmd->h, cmd->xScale, cmd->yScale));
	PERF_END(PERF_CNT_BASE, 3);
}

void saveImage(Command* cmd)
{
 4001124:	dfc04415 	stw	ra,272(sp)
 4001128:	dcc04315 	stw	r19,268(sp)
 400112c:	dc804215 	stw	r18,264(sp)
 4001130:	dc404115 	stw	r17,260(sp)
	char ffname[MAX_PATH] = "/mnt/host/../../";
 4001134:	d8800315 	stw	r2,12(sp)
 4001138:	d8000415 	stw	zero,16(sp)
 400113c:	4003cec0 	call	4003cec <memset>
	strcat(ffname, cmd->fname);
 4001140:	81400044 	addi	r5,r16,1
 4001144:	d9000404 	addi	r4,sp,16
 4001148:	40043bc0 	call	40043bc <stpcpy>
	int dot = strlen(ffname);
	for (; ffname[dot] != '.'; dot--) {}
 400114c:	10c00007 	ldb	r3,0(r2)
 4001150:	01800b84 	movi	r6,46
 4001154:	16c5c83a 	sub	r2,r2,sp
 4001158:	19800726 	beq	r3,r6,4001178 <saveImage+0x98>
 400115c:	10ffffc4 	addi	r3,r2,-1
 4001160:	d8c9883a 	add	r4,sp,r3
 4001164:	213fffc4 	addi	r4,r4,-1
 4001168:	21400047 	ldb	r5,1(r4)
 400116c:	1805883a 	mov	r2,r3
 4001170:	18ffffc4 	addi	r3,r3,-1
 4001174:	29bffb1e 	bne	r5,r6,4001164 <__alt_data_end+0xfc001164>
	ffname[dot + 1] = 'o';
 4001178:	d887883a 	add	r3,sp,r2
 400117c:	01001bc4 	movi	r4,111
 4001180:	19000045 	stb	r4,1(r3)
	ffname[dot + 2] = 'u';
 4001184:	01001d44 	movi	r4,117
 4001188:	19000085 	stb	r4,2(r3)
	ffname[dot + 3] = 't';
	ffname[dot + 4] = 0;

	FILE* f = fopen(ffname, "wb");
 400118c:	01410074 	movhi	r5,1025
	strcat(ffname, cmd->fname);
	int dot = strlen(ffname);
	for (; ffname[dot] != '.'; dot--) {}
	ffname[dot + 1] = 'o';
	ffname[dot + 2] = 'u';
	ffname[dot + 3] = 't';
 4001190:	01001d04 	movi	r4,116
 4001194:	190000c5 	stb	r4,3(r3)
	ffname[dot + 4] = 0;

	FILE* f = fopen(ffname, "wb");
 4001198:	295ff704 	addi	r5,r5,32732
 400119c:	d809883a 	mov	r4,sp
	int dot = strlen(ffname);
	for (; ffname[dot] != '.'; dot--) {}
	ffname[dot + 1] = 'o';
	ffname[dot + 2] = 'u';
	ffname[dot + 3] = 't';
	ffname[dot + 4] = 0;
 40011a0:	18000105 	stb	zero,4(r3)

	FILE* f = fopen(ffname, "wb");
 40011a4:	400228c0 	call	400228c <fopen>
 40011a8:	1023883a 	mov	r17,r2
	if (f == NULL) { cmd->status = 12; return; }
 40011ac:	10001326 	beq	r2,zero,40011fc <saveImage+0x11c>

	size_t write = fwrite(&cmd->destinationWidth, sizeof(int), 1, f);
 40011b0:	04800044 	movi	r18,1
 40011b4:	100f883a 	mov	r7,r2
 40011b8:	900d883a 	mov	r6,r18
 40011bc:	01400104 	movi	r5,4
 40011c0:	81004b04 	addi	r4,r16,300
 40011c4:	40030880 	call	4003088 <fwrite>
 40011c8:	1027883a 	mov	r19,r2
	if (write != 1) { fclose(f); cmd->status = 13; return; }
 40011cc:	14800e26 	beq	r2,r18,4001208 <saveImage+0x128>
 40011d0:	8809883a 	mov	r4,r17
 40011d4:	4001b2c0 	call	4001b2c <fclose>
 40011d8:	00800344 	movi	r2,13
 40011dc:	80800005 	stb	r2,0(r16)

	write = fwrite(cmd->destinationImage, sizeof(unsigned char), cmd->destinationSize, f);
	if (write != cmd->destinationSize) { fclose(f); cmd->status = 15; return; }

	fclose(f);
}
 40011e0:	dfc04417 	ldw	ra,272(sp)
 40011e4:	dcc04317 	ldw	r19,268(sp)
 40011e8:	dc804217 	ldw	r18,264(sp)
 40011ec:	dc404117 	ldw	r17,260(sp)
 40011f0:	dc004017 	ldw	r16,256(sp)
 40011f4:	dec04504 	addi	sp,sp,276
 40011f8:	f800283a 	ret
	ffname[dot + 2] = 'u';
	ffname[dot + 3] = 't';
	ffname[dot + 4] = 0;

	FILE* f = fopen(ffname, "wb");
	if (f == NULL) { cmd->status = 12; return; }
 40011fc:	00800304 	movi	r2,12
 4001200:	80800005 	stb	r2,0(r16)
 4001204:	003ff606 	br	40011e0 <__alt_data_end+0xfc0011e0>

	size_t write = fwrite(&cmd->destinationWidth, sizeof(int), 1, f);
	if (write != 1) { fclose(f); cmd->status = 13; return; }

	write = fwrite(&cmd->destinationHeight, sizeof(int), 1, f);
 4001208:	880f883a 	mov	r7,r17
 400120c:	100d883a 	mov	r6,r2
 4001210:	01400104 	movi	r5,4
 4001214:	81004c04 	addi	r4,r16,304
 4001218:	40030880 	call	4003088 <fwrite>
	if (write != 1) { fclose(f); cmd->status = 14; return; }
 400121c:	14c00526 	beq	r2,r19,4001234 <saveImage+0x154>
 4001220:	8809883a 	mov	r4,r17
 4001224:	4001b2c0 	call	4001b2c <fclose>
 4001228:	00800384 	movi	r2,14
 400122c:	80800005 	stb	r2,0(r16)
 4001230:	003feb06 	br	40011e0 <__alt_data_end+0xfc0011e0>

	write = fwrite(cmd->destinationImage, sizeof(unsigned char), cmd->destinationSize, f);
 4001234:	81005117 	ldw	r4,324(r16)
 4001238:	81804e17 	ldw	r6,312(r16)
 400123c:	880f883a 	mov	r7,r17
 4001240:	100b883a 	mov	r5,r2
 4001244:	40030880 	call	4003088 <fwrite>
	if (write != cmd->destinationSize) { fclose(f); cmd->status = 15; return; }
 4001248:	80c04e17 	ldw	r3,312(r16)
 400124c:	8809883a 	mov	r4,r17
 4001250:	10c00426 	beq	r2,r3,4001264 <saveImage+0x184>
 4001254:	4001b2c0 	call	4001b2c <fclose>
 4001258:	008003c4 	movi	r2,15
 400125c:	80800005 	stb	r2,0(r16)
 4001260:	003fdf06 	br	40011e0 <__alt_data_end+0xfc0011e0>

	fclose(f);
 4001264:	4001b2c0 	call	4001b2c <fclose>
 4001268:	003fdd06 	br	40011e0 <__alt_data_end+0xfc0011e0>

0400126c <main>:
}

int main()
{
 400126c:	deff5a04 	addi	sp,sp,-664
 4001270:	dfc0a515 	stw	ra,660(sp)
	Command command;
	Command* cmd = &command;

	checkHWStatus(initHW());
 4001274:	40003800 	call	4000380 <initHW>
 4001278:	1009883a 	mov	r4,r2
 400127c:	40002f40 	call	40002f4 <checkHWStatus>

	printHelp();
 4001280:	40007700 	call	4000770 <printHelp>

	while(1)
	{
		command = parseCommand();
 4001284:	d9005304 	addi	r4,sp,332
 4001288:	40009f00 	call	40009f0 <parseCommand>
 400128c:	01805204 	movi	r6,328
 4001290:	d9405304 	addi	r5,sp,332
 4001294:	d809883a 	mov	r4,sp
 4001298:	4003ba40 	call	4003ba4 <memcpy>

		loadImage(cmd);
 400129c:	d809883a 	mov	r4,sp
 40012a0:	4000b6c0 	call	4000b6c <loadImage>
	if (cmd->destinationImage != NULL) { free(cmd->destinationImage); cmd->destinationImage = NULL; }
}

int checkCommand(Command* cmd)
{
	if (cmd->status != 0)
 40012a4:	d8800007 	ldb	r2,0(sp)
 40012a8:	10002c1e 	bne	r2,zero,400135c <main+0xf0>
	{
		command = parseCommand();

		loadImage(cmd);
		CCC(cmd);
		printf("Image loaded\n");
 40012ac:	01010074 	movhi	r4,1025
 40012b0:	211ff804 	addi	r4,r4,32736
 40012b4:	4003f340 	call	4003f34 <puts>

		int a;
		scanf("%d", &a);
 40012b8:	01010074 	movhi	r4,1025
 40012bc:	d9405204 	addi	r5,sp,328
 40012c0:	211ff504 	addi	r4,r4,32724
 40012c4:	40042140 	call	4004214 <scanf>

		if (cmd->benchmark)
 40012c8:	d8804047 	ldb	r2,257(sp)
 40012cc:	1000161e 	bne	r2,zero,4001328 <main+0xbc>
		{

		}
		else
		{
			prepareCommand(cmd);
 40012d0:	d809883a 	mov	r4,sp
 40012d4:	4000cf00 	call	4000cf0 <prepareCommand>
	if (cmd->destinationImage != NULL) { free(cmd->destinationImage); cmd->destinationImage = NULL; }
}

int checkCommand(Command* cmd)
{
	if (cmd->status != 0)
 40012d8:	d8800007 	ldb	r2,0(sp)
 40012dc:	10001f1e 	bne	r2,zero,400135c <main+0xf0>
		else
		{
			prepareCommand(cmd);
			CCC(cmd);

			resizeImage(cmd);
 40012e0:	d809883a 	mov	r4,sp
 40012e4:	4000fd00 	call	4000fd0 <resizeImage>
	if (cmd->destinationImage != NULL) { free(cmd->destinationImage); cmd->destinationImage = NULL; }
}

int checkCommand(Command* cmd)
{
	if (cmd->status != 0)
 40012e8:	d8800007 	ldb	r2,0(sp)
 40012ec:	10001b1e 	bne	r2,zero,400135c <main+0xf0>
			prepareCommand(cmd);
			CCC(cmd);

			resizeImage(cmd);
			CCC(cmd);
			printf("Image resized\n");
 40012f0:	01010074 	movhi	r4,1025
 40012f4:	211ffc04 	addi	r4,r4,32752
 40012f8:	4003f340 	call	4003f34 <puts>
			scanf("%d", &a);
 40012fc:	01010074 	movhi	r4,1025
 4001300:	d9405204 	addi	r5,sp,328
 4001304:	211ff504 	addi	r4,r4,32724
 4001308:	40042140 	call	4004214 <scanf>
			saveImage(cmd);
 400130c:	d809883a 	mov	r4,sp
 4001310:	40010e00 	call	40010e0 <saveImage>
	if (cmd->destinationImage != NULL) { free(cmd->destinationImage); cmd->destinationImage = NULL; }
}

int checkCommand(Command* cmd)
{
	if (cmd->status != 0)
 4001314:	d8800007 	ldb	r2,0(sp)
 4001318:	1000101e 	bne	r2,zero,400135c <main+0xf0>
			CCC(cmd);
			printf("Image resized\n");
			scanf("%d", &a);
			saveImage(cmd);
			CCC(cmd);
			printf("Image saved\n");
 400131c:	010100b4 	movhi	r4,1026
 4001320:	21200004 	addi	r4,r4,-32768
 4001324:	4003f340 	call	4003f34 <puts>
	else { printf("Unknown error\n"); }
}

void cleanup(Command* cmd)
{
	if (cmd->sourceImage != NULL) { free(cmd->sourceImage); cmd->sourceImage = NULL; }
 4001328:	d9004f17 	ldw	r4,316(sp)
 400132c:	20000226 	beq	r4,zero,4001338 <main+0xcc>
 4001330:	40033840 	call	4003384 <free>
 4001334:	d8004f15 	stw	zero,316(sp)
	if (cmd->referenceImage != NULL) { free(cmd->referenceImage); cmd->referenceImage = NULL; }
 4001338:	d9005017 	ldw	r4,320(sp)
 400133c:	20000226 	beq	r4,zero,4001348 <main+0xdc>
 4001340:	40033840 	call	4003384 <free>
 4001344:	d8005015 	stw	zero,320(sp)
	if (cmd->destinationImage != NULL) { free(cmd->destinationImage); cmd->destinationImage = NULL; }
 4001348:	d9005117 	ldw	r4,324(sp)
 400134c:	203fcd26 	beq	r4,zero,4001284 <__alt_data_end+0xfc001284>
 4001350:	40033840 	call	4003384 <free>
 4001354:	d8005115 	stw	zero,324(sp)
 4001358:	003fca06 	br	4001284 <__alt_data_end+0xfc001284>

void printError(Command* cmd)
{
	int status = cmd->status;
	if (status == 0) { printf("No error\n"); }
	else if (status >= 1 && status <= 5) { printf("Failed to load image\n"); }
 400135c:	10ffffc4 	addi	r3,r2,-1
 4001360:	01000104 	movi	r4,4
 4001364:	20c0122e 	bgeu	r4,r3,40013b0 <main+0x144>
	else if (status == 6) { printf("Invalid X scale factor\n"); }
 4001368:	00c00184 	movi	r3,6
 400136c:	10c01826 	beq	r2,r3,40013d0 <main+0x164>
	else if (status == 7) { printf("Invalid Y scale factor\n"); }
 4001370:	00c001c4 	movi	r3,7
 4001374:	10c01a26 	beq	r2,r3,40013e0 <main+0x174>
	else if (status == 8) { printf("Invalid picture start point\n"); }
 4001378:	00c00204 	movi	r3,8
 400137c:	10c01c26 	beq	r2,r3,40013f0 <main+0x184>
	else if (status == 9) { printf("Invalid picture end point\n"); }
 4001380:	00c00244 	movi	r3,9
 4001384:	10c01e26 	beq	r2,r3,4001400 <main+0x194>
	else if (status == 10 || status == 11) { printf("Failed to allocate output buffers\n"); }
 4001388:	10fffd84 	addi	r3,r2,-10
 400138c:	01000044 	movi	r4,1
 4001390:	20c01f2e 	bgeu	r4,r3,4001410 <main+0x1a4>
	else if (status >= 12 && status <= 15) { printf("Failed to save image\n"); }
 4001394:	10bffd04 	addi	r2,r2,-12
 4001398:	00c000c4 	movi	r3,3
 400139c:	1880082e 	bgeu	r3,r2,40013c0 <main+0x154>
	else { printf("Unknown error\n"); }
 40013a0:	01010074 	movhi	r4,1025
 40013a4:	211f6304 	addi	r4,r4,32140
 40013a8:	4003f340 	call	4003f34 <puts>
 40013ac:	003fde06 	br	4001328 <__alt_data_end+0xfc001328>

void printError(Command* cmd)
{
	int status = cmd->status;
	if (status == 0) { printf("No error\n"); }
	else if (status >= 1 && status <= 5) { printf("Failed to load image\n"); }
 40013b0:	01010074 	movhi	r4,1025
 40013b4:	211fc204 	addi	r4,r4,32520
 40013b8:	4003f340 	call	4003f34 <puts>
 40013bc:	003fda06 	br	4001328 <__alt_data_end+0xfc001328>
	else if (status == 6) { printf("Invalid X scale factor\n"); }
	else if (status == 7) { printf("Invalid Y scale factor\n"); }
	else if (status == 8) { printf("Invalid picture start point\n"); }
	else if (status == 9) { printf("Invalid picture end point\n"); }
	else if (status == 10 || status == 11) { printf("Failed to allocate output buffers\n"); }
	else if (status >= 12 && status <= 15) { printf("Failed to save image\n"); }
 40013c0:	01010074 	movhi	r4,1025
 40013c4:	211feb04 	addi	r4,r4,32684
 40013c8:	4003f340 	call	4003f34 <puts>
 40013cc:	003fd606 	br	4001328 <__alt_data_end+0xfc001328>
void printError(Command* cmd)
{
	int status = cmd->status;
	if (status == 0) { printf("No error\n"); }
	else if (status >= 1 && status <= 5) { printf("Failed to load image\n"); }
	else if (status == 6) { printf("Invalid X scale factor\n"); }
 40013d0:	01010074 	movhi	r4,1025
 40013d4:	211fc804 	addi	r4,r4,32544
 40013d8:	4003f340 	call	4003f34 <puts>
 40013dc:	003fd206 	br	4001328 <__alt_data_end+0xfc001328>
	else if (status == 7) { printf("Invalid Y scale factor\n"); }
 40013e0:	01010074 	movhi	r4,1025
 40013e4:	211fce04 	addi	r4,r4,32568
 40013e8:	4003f340 	call	4003f34 <puts>
 40013ec:	003fce06 	br	4001328 <__alt_data_end+0xfc001328>
	else if (status == 8) { printf("Invalid picture start point\n"); }
 40013f0:	01010074 	movhi	r4,1025
 40013f4:	211fd404 	addi	r4,r4,32592
 40013f8:	4003f340 	call	4003f34 <puts>
 40013fc:	003fca06 	br	4001328 <__alt_data_end+0xfc001328>
	else if (status == 9) { printf("Invalid picture end point\n"); }
 4001400:	01010074 	movhi	r4,1025
 4001404:	211fdb04 	addi	r4,r4,32620
 4001408:	4003f340 	call	4003f34 <puts>
 400140c:	003fc606 	br	4001328 <__alt_data_end+0xfc001328>
	else if (status == 10 || status == 11) { printf("Failed to allocate output buffers\n"); }
 4001410:	01010074 	movhi	r4,1025
 4001414:	211fe204 	addi	r4,r4,32648
 4001418:	4003f340 	call	4003f34 <puts>
 400141c:	003fc206 	br	4001328 <__alt_data_end+0xfc001328>

04001420 <scaleLineSW>:
#include <string.h>

#define PIXEL(x, y, width) ((x) + (y) * (width))

void scaleLineSW(unsigned char* source, unsigned char* destination, int width, int xScale)
{
 4001420:	defff604 	addi	sp,sp,-40
 4001424:	dcc00315 	stw	r19,12(sp)
 4001428:	dc800215 	stw	r18,8(sp)
 400142c:	dc400115 	stw	r17,4(sp)
 4001430:	dc000015 	stw	r16,0(sp)
 4001434:	dfc00915 	stw	ra,36(sp)
 4001438:	df000815 	stw	fp,32(sp)
 400143c:	ddc00715 	stw	r23,28(sp)
 4001440:	dd800615 	stw	r22,24(sp)
 4001444:	dd400515 	stw	r21,20(sp)
 4001448:	dd000415 	stw	r20,16(sp)
 400144c:	3825883a 	mov	r18,r7
 4001450:	2021883a 	mov	r16,r4
 4001454:	2823883a 	mov	r17,r5
 4001458:	3027883a 	mov	r19,r6
	if (xScale > 0)
 400145c:	01c0160e 	bge	zero,r7,40014b8 <scaleLineSW+0x98>
	{
		for (int i = 0; i < width; i++)
 4001460:	0180090e 	bge	zero,r6,4001488 <scaleLineSW+0x68>
 4001464:	2807883a 	mov	r3,r5
 4001468:	21a3883a 	add	r17,r4,r6
		{
			memset(&destination[i * xScale], source[i], xScale);
 400146c:	81400003 	ldbu	r5,0(r16)
 4001470:	1809883a 	mov	r4,r3
 4001474:	900d883a 	mov	r6,r18
 4001478:	4003cec0 	call	4003cec <memset>
 400147c:	84000044 	addi	r16,r16,1
 4001480:	1487883a 	add	r3,r2,r18

void scaleLineSW(unsigned char* source, unsigned char* destination, int width, int xScale)
{
	if (xScale > 0)
	{
		for (int i = 0; i < width; i++)
 4001484:	847ff91e 	bne	r16,r17,400146c <__alt_data_end+0xfc00146c>
		for (int i = 0; i < width; i += xScale)
		{
			destination[i / xScale] = source[i];
		}
	}
}
 4001488:	dfc00917 	ldw	ra,36(sp)
 400148c:	df000817 	ldw	fp,32(sp)
 4001490:	ddc00717 	ldw	r23,28(sp)
 4001494:	dd800617 	ldw	r22,24(sp)
 4001498:	dd400517 	ldw	r21,20(sp)
 400149c:	dd000417 	ldw	r20,16(sp)
 40014a0:	dcc00317 	ldw	r19,12(sp)
 40014a4:	dc800217 	ldw	r18,8(sp)
 40014a8:	dc400117 	ldw	r17,4(sp)
 40014ac:	dc000017 	ldw	r16,0(sp)
 40014b0:	dec00a04 	addi	sp,sp,40
 40014b4:	f800283a 	ret
			memset(&destination[i * xScale], source[i], xScale);
		}
	}
	else
	{
		xScale = - xScale;
 40014b8:	01ebc83a 	sub	r21,zero,r7
		for (int i = 0; i < width; i += xScale)
 40014bc:	01bff20e 	bge	zero,r6,4001488 <__alt_data_end+0xfc001488>
		{
			destination[i / xScale] = source[i];
 40014c0:	070100b4 	movhi	fp,1026
		}
	}
	else
	{
		xScale = - xScale;
		for (int i = 0; i < width; i += xScale)
 40014c4:	2029883a 	mov	r20,r4
		{
			destination[i / xScale] = source[i];
 40014c8:	e721cf04 	addi	fp,fp,-30916
 40014cc:	0009883a 	mov	r4,zero
 40014d0:	05c003c4 	movi	r23,15
 40014d4:	00000606 	br	40014f0 <scaleLineSW+0xd0>
 40014d8:	10800003 	ldbu	r2,0(r2)
 40014dc:	8885883a 	add	r2,r17,r2
 40014e0:	a4a9c83a 	sub	r20,r20,r18
 40014e4:	15800005 	stb	r22,0(r2)
		}
	}
	else
	{
		xScale = - xScale;
		for (int i = 0; i < width; i += xScale)
 40014e8:	a409c83a 	sub	r4,r20,r16
 40014ec:	24ffe60e 	bge	r4,r19,4001488 <__alt_data_end+0xfc001488>
		{
			destination[i / xScale] = source[i];
 40014f0:	2004913a 	slli	r2,r4,4
 40014f4:	2546b03a 	or	r3,r4,r21
 40014f8:	a80b883a 	mov	r5,r21
 40014fc:	1544b03a 	or	r2,r2,r21
 4001500:	1705883a 	add	r2,r2,fp
 4001504:	a5800003 	ldbu	r22,0(r20)
 4001508:	b8fff32e 	bgeu	r23,r3,40014d8 <__alt_data_end+0xfc0014d8>
 400150c:	40018600 	call	4001860 <__divsi3>
 4001510:	003ff206 	br	40014dc <__alt_data_end+0xfc0014dc>

04001514 <scaleSW>:
		}
	}
}

void scaleSW(unsigned char* source, unsigned char* destination, int sourceWidth, int sourceHeight, int x, int y, int width, int height, int xScale, int yScale)
{
 4001514:	defff204 	addi	sp,sp,-56
 4001518:	dc000415 	stw	r16,16(sp)
 400151c:	dc001217 	ldw	r16,72(sp)
 4001520:	dd400915 	stw	r21,36(sp)
 4001524:	dc800615 	stw	r18,24(sp)
 4001528:	dfc00d15 	stw	ra,52(sp)
 400152c:	df000c15 	stw	fp,48(sp)
 4001530:	ddc00b15 	stw	r23,44(sp)
 4001534:	dd800a15 	stw	r22,40(sp)
 4001538:	dd000815 	stw	r20,32(sp)
 400153c:	dcc00715 	stw	r19,28(sp)
 4001540:	dc400515 	stw	r17,20(sp)
 4001544:	d9400315 	stw	r5,12(sp)
 4001548:	d9800115 	stw	r6,4(sp)
 400154c:	2025883a 	mov	r18,r4
 4001550:	dd401017 	ldw	r21,64(sp)
	int dwidth = xScale > 0 ? width * xScale : width / -xScale;
 4001554:	0400640e 	bge	zero,r16,40016e8 <scaleSW+0x1d4>
 4001558:	a80b883a 	mov	r5,r21
 400155c:	8009883a 	mov	r4,r16
 4001560:	4001a140 	call	4001a14 <__mulsi3>
 4001564:	102d883a 	mov	r22,r2
	if (yScale > 0)
 4001568:	d8c01317 	ldw	r3,76(sp)
 400156c:	00c0670e 	bge	zero,r3,400170c <scaleSW+0x1f8>
	{
		for (int i = 0; i < height; i++)
 4001570:	d8c01117 	ldw	r3,68(sp)
 4001574:	00c02b0e 	bge	zero,r3,4001624 <scaleSW+0x110>
 4001578:	d9401317 	ldw	r5,76(sp)
 400157c:	b009883a 	mov	r4,r22
 4001580:	002f883a 	mov	r23,zero
 4001584:	4001a140 	call	4001a14 <__mulsi3>
 4001588:	d9400117 	ldw	r5,4(sp)
 400158c:	d9000f17 	ldw	r4,60(sp)
 4001590:	d8800015 	stw	r2,0(sp)
 4001594:	4001a140 	call	4001a14 <__mulsi3>
 4001598:	d9400e17 	ldw	r5,56(sp)
 400159c:	b587883a 	add	r3,r22,r22
 40015a0:	d8c00215 	stw	r3,8(sp)
 40015a4:	1145883a 	add	r2,r2,r5
 40015a8:	1d87883a 	add	r3,r3,r22
 40015ac:	dc400317 	ldw	r17,12(sp)
 40015b0:	90a9883a 	add	r20,r18,r2
 40015b4:	d8c00315 	stw	r3,12(sp)
			memset(&destination[i * xScale], source[i], xScale);
		}
	}
	else
	{
		xScale = - xScale;
 40015b8:	0425c83a 	sub	r18,zero,r16

#define PIXEL(x, y, width) ((x) + (y) * (width))

void scaleLineSW(unsigned char* source, unsigned char* destination, int width, int xScale)
{
	if (xScale > 0)
 40015bc:	0400340e 	bge	zero,r16,4001690 <scaleSW+0x17c>
	{
		for (int i = 0; i < width; i++)
 40015c0:	05400a0e 	bge	zero,r21,40015ec <scaleSW+0xd8>
 40015c4:	ad27883a 	add	r19,r21,r20
 40015c8:	880f883a 	mov	r7,r17
 40015cc:	a039883a 	mov	fp,r20
		{
			memset(&destination[i * xScale], source[i], xScale);
 40015d0:	e1400003 	ldbu	r5,0(fp)
 40015d4:	3809883a 	mov	r4,r7
 40015d8:	800d883a 	mov	r6,r16
 40015dc:	4003cec0 	call	4003cec <memset>
 40015e0:	e7000044 	addi	fp,fp,1
 40015e4:	140f883a 	add	r7,r2,r16

void scaleLineSW(unsigned char* source, unsigned char* destination, int width, int xScale)
{
	if (xScale > 0)
	{
		for (int i = 0; i < width; i++)
 40015e8:	9f3ff91e 	bne	r19,fp,40015d0 <__alt_data_end+0xfc0015d0>
	if (yScale > 0)
	{
		for (int i = 0; i < height; i++)
		{
			scaleLineSW(&source[PIXEL(x, y + i, sourceWidth)], &destination[PIXEL(0, i * yScale, dwidth)], width, xScale);
			switch(yScale)
 40015ec:	d8c01317 	ldw	r3,76(sp)
 40015f0:	014000c4 	movi	r5,3
 40015f4:	19401c26 	beq	r3,r5,4001668 <scaleSW+0x154>
 40015f8:	01800104 	movi	r6,4
 40015fc:	19801526 	beq	r3,r6,4001654 <scaleSW+0x140>
 4001600:	00800084 	movi	r2,2
 4001604:	18801d26 	beq	r3,r2,400167c <scaleSW+0x168>
 4001608:	d8c00017 	ldw	r3,0(sp)
void scaleSW(unsigned char* source, unsigned char* destination, int sourceWidth, int sourceHeight, int x, int y, int width, int height, int xScale, int yScale)
{
	int dwidth = xScale > 0 ? width * xScale : width / -xScale;
	if (yScale > 0)
	{
		for (int i = 0; i < height; i++)
 400160c:	bdc00044 	addi	r23,r23,1
 4001610:	88e3883a 	add	r17,r17,r3
 4001614:	d8c00117 	ldw	r3,4(sp)
 4001618:	a0e9883a 	add	r20,r20,r3
 400161c:	d8c01117 	ldw	r3,68(sp)
 4001620:	1dffe61e 	bne	r3,r23,40015bc <__alt_data_end+0xfc0015bc>
		for (int i = 0; i < height; i += yScale)
		{
			scaleLineSW(&source[PIXEL(x, y + i, sourceWidth)], &destination[PIXEL(0, i / yScale , dwidth)], width, xScale);
		}
	}
}
 4001624:	dfc00d17 	ldw	ra,52(sp)
 4001628:	df000c17 	ldw	fp,48(sp)
 400162c:	ddc00b17 	ldw	r23,44(sp)
 4001630:	dd800a17 	ldw	r22,40(sp)
 4001634:	dd400917 	ldw	r21,36(sp)
 4001638:	dd000817 	ldw	r20,32(sp)
 400163c:	dcc00717 	ldw	r19,28(sp)
 4001640:	dc800617 	ldw	r18,24(sp)
 4001644:	dc400517 	ldw	r17,20(sp)
 4001648:	dc000417 	ldw	r16,16(sp)
 400164c:	dec00e04 	addi	sp,sp,56
 4001650:	f800283a 	ret
		for (int i = 0; i < height; i++)
		{
			scaleLineSW(&source[PIXEL(x, y + i, sourceWidth)], &destination[PIXEL(0, i * yScale, dwidth)], width, xScale);
			switch(yScale)
			{
			case 4: { memcpy(&destination[PIXEL(0, i * yScale + 3, dwidth)], &destination[PIXEL(0, i * yScale, dwidth)], dwidth); }
 4001654:	d8c00317 	ldw	r3,12(sp)
 4001658:	b00d883a 	mov	r6,r22
 400165c:	880b883a 	mov	r5,r17
 4001660:	88c9883a 	add	r4,r17,r3
 4001664:	4003ba40 	call	4003ba4 <memcpy>
			case 3: { memcpy(&destination[PIXEL(0, i * yScale + 2, dwidth)], &destination[PIXEL(0, i * yScale, dwidth)], dwidth); }
 4001668:	d8c00217 	ldw	r3,8(sp)
 400166c:	b00d883a 	mov	r6,r22
 4001670:	880b883a 	mov	r5,r17
 4001674:	88c9883a 	add	r4,r17,r3
 4001678:	4003ba40 	call	4003ba4 <memcpy>
			case 2: { memcpy(&destination[PIXEL(0, i * yScale + 1, dwidth)], &destination[PIXEL(0, i * yScale, dwidth)], dwidth); }
 400167c:	b00d883a 	mov	r6,r22
 4001680:	880b883a 	mov	r5,r17
 4001684:	8d89883a 	add	r4,r17,r22
 4001688:	4003ba40 	call	4003ba4 <memcpy>
 400168c:	003fde06 	br	4001608 <__alt_data_end+0xfc001608>
		}
	}
	else
	{
		xScale = - xScale;
		for (int i = 0; i < width; i += xScale)
 4001690:	057fd60e 	bge	zero,r21,40015ec <__alt_data_end+0xfc0015ec>
 4001694:	a027883a 	mov	r19,r20
 4001698:	0009883a 	mov	r4,zero
 400169c:	00000606 	br	40016b8 <scaleSW+0x1a4>
		{
			destination[i / xScale] = source[i];
 40016a0:	10800003 	ldbu	r2,0(r2)
 40016a4:	8885883a 	add	r2,r17,r2
 40016a8:	9c27c83a 	sub	r19,r19,r16
 40016ac:	17000005 	stb	fp,0(r2)
		}
	}
	else
	{
		xScale = - xScale;
		for (int i = 0; i < width; i += xScale)
 40016b0:	9d09c83a 	sub	r4,r19,r20
 40016b4:	257fcd0e 	bge	r4,r21,40015ec <__alt_data_end+0xfc0015ec>
		{
			destination[i / xScale] = source[i];
 40016b8:	2004913a 	slli	r2,r4,4
 40016bc:	014100b4 	movhi	r5,1026
 40016c0:	2961cf04 	addi	r5,r5,-30916
 40016c4:	1484b03a 	or	r2,r2,r18
 40016c8:	2486b03a 	or	r3,r4,r18
 40016cc:	018003c4 	movi	r6,15
 40016d0:	1145883a 	add	r2,r2,r5
 40016d4:	9f000003 	ldbu	fp,0(r19)
 40016d8:	900b883a 	mov	r5,r18
 40016dc:	30fff02e 	bgeu	r6,r3,40016a0 <__alt_data_end+0xfc0016a0>
 40016e0:	40018600 	call	4001860 <__divsi3>
 40016e4:	003fef06 	br	40016a4 <__alt_data_end+0xfc0016a4>
	}
}

void scaleSW(unsigned char* source, unsigned char* destination, int sourceWidth, int sourceHeight, int x, int y, int width, int height, int xScale, int yScale)
{
	int dwidth = xScale > 0 ? width * xScale : width / -xScale;
 40016e8:	040bc83a 	sub	r5,zero,r16
 40016ec:	a944b03a 	or	r2,r21,r5
 40016f0:	00c003c4 	movi	r3,15
 40016f4:	1880532e 	bgeu	r3,r2,4001844 <scaleSW+0x330>
 40016f8:	a809883a 	mov	r4,r21
 40016fc:	40018600 	call	4001860 <__divsi3>
	if (yScale > 0)
 4001700:	d8c01317 	ldw	r3,76(sp)
	}
}

void scaleSW(unsigned char* source, unsigned char* destination, int sourceWidth, int sourceHeight, int x, int y, int width, int height, int xScale, int yScale)
{
	int dwidth = xScale > 0 ? width * xScale : width / -xScale;
 4001704:	102d883a 	mov	r22,r2
	if (yScale > 0)
 4001708:	00ff9916 	blt	zero,r3,4001570 <__alt_data_end+0xfc001570>
			}
		}
	}
	else
	{
		yScale = - yScale;
 400170c:	00c7c83a 	sub	r3,zero,r3
 4001710:	d8c00015 	stw	r3,0(sp)
		for (int i = 0; i < height; i += yScale)
 4001714:	d8c01117 	ldw	r3,68(sp)
 4001718:	00ffc20e 	bge	zero,r3,4001624 <__alt_data_end+0xfc001624>
 400171c:	d9000117 	ldw	r4,4(sp)
 4001720:	d9400017 	ldw	r5,0(sp)
 4001724:	0029883a 	mov	r20,zero
		{
			scaleLineSW(&source[PIXEL(x, y + i, sourceWidth)], &destination[PIXEL(0, i / yScale , dwidth)], width, xScale);
 4001728:	05c003c4 	movi	r23,15
 400172c:	4001a140 	call	4001a14 <__mulsi3>
 4001730:	d9400117 	ldw	r5,4(sp)
 4001734:	d9000f17 	ldw	r4,60(sp)
 4001738:	d8800215 	stw	r2,8(sp)
			memset(&destination[i * xScale], source[i], xScale);
		}
	}
	else
	{
		xScale = - xScale;
 400173c:	0423c83a 	sub	r17,zero,r16
 4001740:	4001a140 	call	4001a14 <__mulsi3>
 4001744:	d9400e17 	ldw	r5,56(sp)
	else
	{
		yScale = - yScale;
		for (int i = 0; i < height; i += yScale)
		{
			scaleLineSW(&source[PIXEL(x, y + i, sourceWidth)], &destination[PIXEL(0, i / yScale , dwidth)], width, xScale);
 4001748:	d8c00017 	ldw	r3,0(sp)
			memset(&destination[i * xScale], source[i], xScale);
		}
	}
	else
	{
		xScale = - xScale;
 400174c:	dd800115 	stw	r22,4(sp)
 4001750:	1145883a 	add	r2,r2,r5
 4001754:	90a7883a 	add	r19,r18,r2
	else
	{
		yScale = - yScale;
		for (int i = 0; i < height; i += yScale)
		{
			scaleLineSW(&source[PIXEL(x, y + i, sourceWidth)], &destination[PIXEL(0, i / yScale , dwidth)], width, xScale);
 4001758:	a0c4b03a 	or	r2,r20,r3
 400175c:	b8801f36 	bltu	r23,r2,40017dc <scaleSW+0x2c8>
 4001760:	a004913a 	slli	r2,r20,4
 4001764:	014100b4 	movhi	r5,1026
 4001768:	2961cf04 	addi	r5,r5,-30916
 400176c:	10c4b03a 	or	r2,r2,r3
 4001770:	1145883a 	add	r2,r2,r5
 4001774:	11000003 	ldbu	r4,0(r2)
 4001778:	d9400117 	ldw	r5,4(sp)
 400177c:	4001a140 	call	4001a14 <__mulsi3>
 4001780:	d8c00317 	ldw	r3,12(sp)
 4001784:	18a5883a 	add	r18,r3,r2

#define PIXEL(x, y, width) ((x) + (y) * (width))

void scaleLineSW(unsigned char* source, unsigned char* destination, int width, int xScale)
{
	if (xScale > 0)
 4001788:	0400190e 	bge	zero,r16,40017f0 <scaleSW+0x2dc>
	{
		for (int i = 0; i < width; i++)
 400178c:	05400a0e 	bge	zero,r21,40017b8 <scaleSW+0x2a4>
 4001790:	900f883a 	mov	r7,r18
 4001794:	982d883a 	mov	r22,r19
 4001798:	ace5883a 	add	r18,r21,r19
		{
			memset(&destination[i * xScale], source[i], xScale);
 400179c:	b1400003 	ldbu	r5,0(r22)
 40017a0:	3809883a 	mov	r4,r7
 40017a4:	800d883a 	mov	r6,r16
 40017a8:	4003cec0 	call	4003cec <memset>
 40017ac:	b5800044 	addi	r22,r22,1
 40017b0:	140f883a 	add	r7,r2,r16

void scaleLineSW(unsigned char* source, unsigned char* destination, int width, int xScale)
{
	if (xScale > 0)
	{
		for (int i = 0; i < width; i++)
 40017b4:	b4bff91e 	bne	r22,r18,400179c <__alt_data_end+0xfc00179c>
		}
	}
	else
	{
		yScale = - yScale;
		for (int i = 0; i < height; i += yScale)
 40017b8:	d8c01317 	ldw	r3,76(sp)
 40017bc:	a0e9c83a 	sub	r20,r20,r3
 40017c0:	d8c00217 	ldw	r3,8(sp)
 40017c4:	98e7883a 	add	r19,r19,r3
 40017c8:	d8c01117 	ldw	r3,68(sp)
 40017cc:	a0ff950e 	bge	r20,r3,4001624 <__alt_data_end+0xfc001624>
		{
			scaleLineSW(&source[PIXEL(x, y + i, sourceWidth)], &destination[PIXEL(0, i / yScale , dwidth)], width, xScale);
 40017d0:	d8c00017 	ldw	r3,0(sp)
 40017d4:	a0c4b03a 	or	r2,r20,r3
 40017d8:	b8bfe12e 	bgeu	r23,r2,4001760 <__alt_data_end+0xfc001760>
 40017dc:	a009883a 	mov	r4,r20
 40017e0:	180b883a 	mov	r5,r3
 40017e4:	40018600 	call	4001860 <__divsi3>
 40017e8:	1009883a 	mov	r4,r2
 40017ec:	003fe206 	br	4001778 <__alt_data_end+0xfc001778>
		}
	}
	else
	{
		xScale = - xScale;
		for (int i = 0; i < width; i += xScale)
 40017f0:	057ff10e 	bge	zero,r21,40017b8 <__alt_data_end+0xfc0017b8>
 40017f4:	982d883a 	mov	r22,r19
 40017f8:	0009883a 	mov	r4,zero
 40017fc:	00000606 	br	4001818 <scaleSW+0x304>
		{
			destination[i / xScale] = source[i];
 4001800:	10800003 	ldbu	r2,0(r2)
 4001804:	9085883a 	add	r2,r18,r2
 4001808:	b42dc83a 	sub	r22,r22,r16
 400180c:	17000005 	stb	fp,0(r2)
		}
	}
	else
	{
		xScale = - xScale;
		for (int i = 0; i < width; i += xScale)
 4001810:	b4c9c83a 	sub	r4,r22,r19
 4001814:	257fe80e 	bge	r4,r21,40017b8 <__alt_data_end+0xfc0017b8>
		{
			destination[i / xScale] = source[i];
 4001818:	2004913a 	slli	r2,r4,4
 400181c:	014100b4 	movhi	r5,1026
 4001820:	2961cf04 	addi	r5,r5,-30916
 4001824:	1444b03a 	or	r2,r2,r17
 4001828:	244eb03a 	or	r7,r4,r17
 400182c:	1145883a 	add	r2,r2,r5
 4001830:	b7000003 	ldbu	fp,0(r22)
 4001834:	880b883a 	mov	r5,r17
 4001838:	b9fff12e 	bgeu	r23,r7,4001800 <__alt_data_end+0xfc001800>
 400183c:	40018600 	call	4001860 <__divsi3>
 4001840:	003ff006 	br	4001804 <__alt_data_end+0xfc001804>
	}
}

void scaleSW(unsigned char* source, unsigned char* destination, int sourceWidth, int sourceHeight, int x, int y, int width, int height, int xScale, int yScale)
{
	int dwidth = xScale > 0 ? width * xScale : width / -xScale;
 4001844:	a804913a 	slli	r2,r21,4
 4001848:	114ab03a 	or	r5,r2,r5
 400184c:	008100b4 	movhi	r2,1026
 4001850:	10a1cf04 	addi	r2,r2,-30916
 4001854:	288b883a 	add	r5,r5,r2
 4001858:	2d800003 	ldbu	r22,0(r5)
 400185c:	003f4206 	br	4001568 <__alt_data_end+0xfc001568>

04001860 <__divsi3>:
 4001860:	20001b16 	blt	r4,zero,40018d0 <__divsi3+0x70>
 4001864:	000f883a 	mov	r7,zero
 4001868:	28001616 	blt	r5,zero,40018c4 <__divsi3+0x64>
 400186c:	200d883a 	mov	r6,r4
 4001870:	29001a2e 	bgeu	r5,r4,40018dc <__divsi3+0x7c>
 4001874:	00800804 	movi	r2,32
 4001878:	00c00044 	movi	r3,1
 400187c:	00000106 	br	4001884 <__divsi3+0x24>
 4001880:	10000d26 	beq	r2,zero,40018b8 <__divsi3+0x58>
 4001884:	294b883a 	add	r5,r5,r5
 4001888:	10bfffc4 	addi	r2,r2,-1
 400188c:	18c7883a 	add	r3,r3,r3
 4001890:	293ffb36 	bltu	r5,r4,4001880 <__alt_data_end+0xfc001880>
 4001894:	0005883a 	mov	r2,zero
 4001898:	18000726 	beq	r3,zero,40018b8 <__divsi3+0x58>
 400189c:	0005883a 	mov	r2,zero
 40018a0:	31400236 	bltu	r6,r5,40018ac <__divsi3+0x4c>
 40018a4:	314dc83a 	sub	r6,r6,r5
 40018a8:	10c4b03a 	or	r2,r2,r3
 40018ac:	1806d07a 	srli	r3,r3,1
 40018b0:	280ad07a 	srli	r5,r5,1
 40018b4:	183ffa1e 	bne	r3,zero,40018a0 <__alt_data_end+0xfc0018a0>
 40018b8:	38000126 	beq	r7,zero,40018c0 <__divsi3+0x60>
 40018bc:	0085c83a 	sub	r2,zero,r2
 40018c0:	f800283a 	ret
 40018c4:	014bc83a 	sub	r5,zero,r5
 40018c8:	39c0005c 	xori	r7,r7,1
 40018cc:	003fe706 	br	400186c <__alt_data_end+0xfc00186c>
 40018d0:	0109c83a 	sub	r4,zero,r4
 40018d4:	01c00044 	movi	r7,1
 40018d8:	003fe306 	br	4001868 <__alt_data_end+0xfc001868>
 40018dc:	00c00044 	movi	r3,1
 40018e0:	003fee06 	br	400189c <__alt_data_end+0xfc00189c>

040018e4 <__modsi3>:
 40018e4:	20001716 	blt	r4,zero,4001944 <__modsi3+0x60>
 40018e8:	000f883a 	mov	r7,zero
 40018ec:	2005883a 	mov	r2,r4
 40018f0:	28001216 	blt	r5,zero,400193c <__modsi3+0x58>
 40018f4:	2900162e 	bgeu	r5,r4,4001950 <__modsi3+0x6c>
 40018f8:	01800804 	movi	r6,32
 40018fc:	00c00044 	movi	r3,1
 4001900:	00000106 	br	4001908 <__modsi3+0x24>
 4001904:	30000a26 	beq	r6,zero,4001930 <__modsi3+0x4c>
 4001908:	294b883a 	add	r5,r5,r5
 400190c:	31bfffc4 	addi	r6,r6,-1
 4001910:	18c7883a 	add	r3,r3,r3
 4001914:	293ffb36 	bltu	r5,r4,4001904 <__alt_data_end+0xfc001904>
 4001918:	18000526 	beq	r3,zero,4001930 <__modsi3+0x4c>
 400191c:	1806d07a 	srli	r3,r3,1
 4001920:	11400136 	bltu	r2,r5,4001928 <__modsi3+0x44>
 4001924:	1145c83a 	sub	r2,r2,r5
 4001928:	280ad07a 	srli	r5,r5,1
 400192c:	183ffb1e 	bne	r3,zero,400191c <__alt_data_end+0xfc00191c>
 4001930:	38000126 	beq	r7,zero,4001938 <__modsi3+0x54>
 4001934:	0085c83a 	sub	r2,zero,r2
 4001938:	f800283a 	ret
 400193c:	014bc83a 	sub	r5,zero,r5
 4001940:	003fec06 	br	40018f4 <__alt_data_end+0xfc0018f4>
 4001944:	0109c83a 	sub	r4,zero,r4
 4001948:	01c00044 	movi	r7,1
 400194c:	003fe706 	br	40018ec <__alt_data_end+0xfc0018ec>
 4001950:	00c00044 	movi	r3,1
 4001954:	003ff106 	br	400191c <__alt_data_end+0xfc00191c>

04001958 <__udivsi3>:
 4001958:	200d883a 	mov	r6,r4
 400195c:	2900152e 	bgeu	r5,r4,40019b4 <__udivsi3+0x5c>
 4001960:	28001416 	blt	r5,zero,40019b4 <__udivsi3+0x5c>
 4001964:	00800804 	movi	r2,32
 4001968:	00c00044 	movi	r3,1
 400196c:	00000206 	br	4001978 <__udivsi3+0x20>
 4001970:	10000e26 	beq	r2,zero,40019ac <__udivsi3+0x54>
 4001974:	28000516 	blt	r5,zero,400198c <__udivsi3+0x34>
 4001978:	294b883a 	add	r5,r5,r5
 400197c:	10bfffc4 	addi	r2,r2,-1
 4001980:	18c7883a 	add	r3,r3,r3
 4001984:	293ffa36 	bltu	r5,r4,4001970 <__alt_data_end+0xfc001970>
 4001988:	18000826 	beq	r3,zero,40019ac <__udivsi3+0x54>
 400198c:	0005883a 	mov	r2,zero
 4001990:	31400236 	bltu	r6,r5,400199c <__udivsi3+0x44>
 4001994:	314dc83a 	sub	r6,r6,r5
 4001998:	10c4b03a 	or	r2,r2,r3
 400199c:	1806d07a 	srli	r3,r3,1
 40019a0:	280ad07a 	srli	r5,r5,1
 40019a4:	183ffa1e 	bne	r3,zero,4001990 <__alt_data_end+0xfc001990>
 40019a8:	f800283a 	ret
 40019ac:	0005883a 	mov	r2,zero
 40019b0:	f800283a 	ret
 40019b4:	00c00044 	movi	r3,1
 40019b8:	003ff406 	br	400198c <__alt_data_end+0xfc00198c>

040019bc <__umodsi3>:
 40019bc:	2005883a 	mov	r2,r4
 40019c0:	2900122e 	bgeu	r5,r4,4001a0c <__umodsi3+0x50>
 40019c4:	28001116 	blt	r5,zero,4001a0c <__umodsi3+0x50>
 40019c8:	01800804 	movi	r6,32
 40019cc:	00c00044 	movi	r3,1
 40019d0:	00000206 	br	40019dc <__umodsi3+0x20>
 40019d4:	30000c26 	beq	r6,zero,4001a08 <__umodsi3+0x4c>
 40019d8:	28000516 	blt	r5,zero,40019f0 <__umodsi3+0x34>
 40019dc:	294b883a 	add	r5,r5,r5
 40019e0:	31bfffc4 	addi	r6,r6,-1
 40019e4:	18c7883a 	add	r3,r3,r3
 40019e8:	293ffa36 	bltu	r5,r4,40019d4 <__alt_data_end+0xfc0019d4>
 40019ec:	18000626 	beq	r3,zero,4001a08 <__umodsi3+0x4c>
 40019f0:	1806d07a 	srli	r3,r3,1
 40019f4:	11400136 	bltu	r2,r5,40019fc <__umodsi3+0x40>
 40019f8:	1145c83a 	sub	r2,r2,r5
 40019fc:	280ad07a 	srli	r5,r5,1
 4001a00:	183ffb1e 	bne	r3,zero,40019f0 <__alt_data_end+0xfc0019f0>
 4001a04:	f800283a 	ret
 4001a08:	f800283a 	ret
 4001a0c:	00c00044 	movi	r3,1
 4001a10:	003ff706 	br	40019f0 <__alt_data_end+0xfc0019f0>

04001a14 <__mulsi3>:
 4001a14:	0005883a 	mov	r2,zero
 4001a18:	20000726 	beq	r4,zero,4001a38 <__mulsi3+0x24>
 4001a1c:	20c0004c 	andi	r3,r4,1
 4001a20:	2008d07a 	srli	r4,r4,1
 4001a24:	18000126 	beq	r3,zero,4001a2c <__mulsi3+0x18>
 4001a28:	1145883a 	add	r2,r2,r5
 4001a2c:	294b883a 	add	r5,r5,r5
 4001a30:	203ffa1e 	bne	r4,zero,4001a1c <__alt_data_end+0xfc001a1c>
 4001a34:	f800283a 	ret
 4001a38:	f800283a 	ret

04001a3c <_fclose_r>:
 4001a3c:	28003926 	beq	r5,zero,4001b24 <_fclose_r+0xe8>
 4001a40:	defffc04 	addi	sp,sp,-16
 4001a44:	dc400115 	stw	r17,4(sp)
 4001a48:	dc000015 	stw	r16,0(sp)
 4001a4c:	dfc00315 	stw	ra,12(sp)
 4001a50:	dc800215 	stw	r18,8(sp)
 4001a54:	2023883a 	mov	r17,r4
 4001a58:	2821883a 	mov	r16,r5
 4001a5c:	20000226 	beq	r4,zero,4001a68 <_fclose_r+0x2c>
 4001a60:	20800e17 	ldw	r2,56(r4)
 4001a64:	10002726 	beq	r2,zero,4001b04 <_fclose_r+0xc8>
 4001a68:	8080030f 	ldh	r2,12(r16)
 4001a6c:	1000071e 	bne	r2,zero,4001a8c <_fclose_r+0x50>
 4001a70:	0005883a 	mov	r2,zero
 4001a74:	dfc00317 	ldw	ra,12(sp)
 4001a78:	dc800217 	ldw	r18,8(sp)
 4001a7c:	dc400117 	ldw	r17,4(sp)
 4001a80:	dc000017 	ldw	r16,0(sp)
 4001a84:	dec00404 	addi	sp,sp,16
 4001a88:	f800283a 	ret
 4001a8c:	800b883a 	mov	r5,r16
 4001a90:	8809883a 	mov	r4,r17
 4001a94:	4001b400 	call	4001b40 <__sflush_r>
 4001a98:	1025883a 	mov	r18,r2
 4001a9c:	80800b17 	ldw	r2,44(r16)
 4001aa0:	10000426 	beq	r2,zero,4001ab4 <_fclose_r+0x78>
 4001aa4:	81400717 	ldw	r5,28(r16)
 4001aa8:	8809883a 	mov	r4,r17
 4001aac:	103ee83a 	callr	r2
 4001ab0:	10001616 	blt	r2,zero,4001b0c <_fclose_r+0xd0>
 4001ab4:	8080030b 	ldhu	r2,12(r16)
 4001ab8:	1080200c 	andi	r2,r2,128
 4001abc:	1000151e 	bne	r2,zero,4001b14 <_fclose_r+0xd8>
 4001ac0:	81400c17 	ldw	r5,48(r16)
 4001ac4:	28000526 	beq	r5,zero,4001adc <_fclose_r+0xa0>
 4001ac8:	80801004 	addi	r2,r16,64
 4001acc:	28800226 	beq	r5,r2,4001ad8 <_fclose_r+0x9c>
 4001ad0:	8809883a 	mov	r4,r17
 4001ad4:	40026380 	call	4002638 <_free_r>
 4001ad8:	80000c15 	stw	zero,48(r16)
 4001adc:	81401117 	ldw	r5,68(r16)
 4001ae0:	28000326 	beq	r5,zero,4001af0 <_fclose_r+0xb4>
 4001ae4:	8809883a 	mov	r4,r17
 4001ae8:	40026380 	call	4002638 <_free_r>
 4001aec:	80001115 	stw	zero,68(r16)
 4001af0:	40021580 	call	4002158 <__sfp_lock_acquire>
 4001af4:	8000030d 	sth	zero,12(r16)
 4001af8:	400215c0 	call	400215c <__sfp_lock_release>
 4001afc:	9005883a 	mov	r2,r18
 4001b00:	003fdc06 	br	4001a74 <__alt_data_end+0xfc001a74>
 4001b04:	40021480 	call	4002148 <__sinit>
 4001b08:	003fd706 	br	4001a68 <__alt_data_end+0xfc001a68>
 4001b0c:	04bfffc4 	movi	r18,-1
 4001b10:	003fe806 	br	4001ab4 <__alt_data_end+0xfc001ab4>
 4001b14:	81400417 	ldw	r5,16(r16)
 4001b18:	8809883a 	mov	r4,r17
 4001b1c:	40026380 	call	4002638 <_free_r>
 4001b20:	003fe706 	br	4001ac0 <__alt_data_end+0xfc001ac0>
 4001b24:	0005883a 	mov	r2,zero
 4001b28:	f800283a 	ret

04001b2c <fclose>:
 4001b2c:	008100b4 	movhi	r2,1026
 4001b30:	10a8dd04 	addi	r2,r2,-23692
 4001b34:	200b883a 	mov	r5,r4
 4001b38:	11000017 	ldw	r4,0(r2)
 4001b3c:	4001a3c1 	jmpi	4001a3c <_fclose_r>

04001b40 <__sflush_r>:
 4001b40:	2880030b 	ldhu	r2,12(r5)
 4001b44:	defffb04 	addi	sp,sp,-20
 4001b48:	dcc00315 	stw	r19,12(sp)
 4001b4c:	dc400115 	stw	r17,4(sp)
 4001b50:	dfc00415 	stw	ra,16(sp)
 4001b54:	dc800215 	stw	r18,8(sp)
 4001b58:	dc000015 	stw	r16,0(sp)
 4001b5c:	10c0020c 	andi	r3,r2,8
 4001b60:	2823883a 	mov	r17,r5
 4001b64:	2027883a 	mov	r19,r4
 4001b68:	1800311e 	bne	r3,zero,4001c30 <__sflush_r+0xf0>
 4001b6c:	28c00117 	ldw	r3,4(r5)
 4001b70:	10820014 	ori	r2,r2,2048
 4001b74:	2880030d 	sth	r2,12(r5)
 4001b78:	00c04b0e 	bge	zero,r3,4001ca8 <__sflush_r+0x168>
 4001b7c:	8a000a17 	ldw	r8,40(r17)
 4001b80:	40002326 	beq	r8,zero,4001c10 <__sflush_r+0xd0>
 4001b84:	9c000017 	ldw	r16,0(r19)
 4001b88:	10c4000c 	andi	r3,r2,4096
 4001b8c:	98000015 	stw	zero,0(r19)
 4001b90:	18004826 	beq	r3,zero,4001cb4 <__sflush_r+0x174>
 4001b94:	89801417 	ldw	r6,80(r17)
 4001b98:	10c0010c 	andi	r3,r2,4
 4001b9c:	18000626 	beq	r3,zero,4001bb8 <__sflush_r+0x78>
 4001ba0:	88c00117 	ldw	r3,4(r17)
 4001ba4:	88800c17 	ldw	r2,48(r17)
 4001ba8:	30cdc83a 	sub	r6,r6,r3
 4001bac:	10000226 	beq	r2,zero,4001bb8 <__sflush_r+0x78>
 4001bb0:	88800f17 	ldw	r2,60(r17)
 4001bb4:	308dc83a 	sub	r6,r6,r2
 4001bb8:	89400717 	ldw	r5,28(r17)
 4001bbc:	000f883a 	mov	r7,zero
 4001bc0:	9809883a 	mov	r4,r19
 4001bc4:	403ee83a 	callr	r8
 4001bc8:	00ffffc4 	movi	r3,-1
 4001bcc:	10c04426 	beq	r2,r3,4001ce0 <__sflush_r+0x1a0>
 4001bd0:	88c0030b 	ldhu	r3,12(r17)
 4001bd4:	89000417 	ldw	r4,16(r17)
 4001bd8:	88000115 	stw	zero,4(r17)
 4001bdc:	197dffcc 	andi	r5,r3,63487
 4001be0:	8940030d 	sth	r5,12(r17)
 4001be4:	89000015 	stw	r4,0(r17)
 4001be8:	18c4000c 	andi	r3,r3,4096
 4001bec:	18002c1e 	bne	r3,zero,4001ca0 <__sflush_r+0x160>
 4001bf0:	89400c17 	ldw	r5,48(r17)
 4001bf4:	9c000015 	stw	r16,0(r19)
 4001bf8:	28000526 	beq	r5,zero,4001c10 <__sflush_r+0xd0>
 4001bfc:	88801004 	addi	r2,r17,64
 4001c00:	28800226 	beq	r5,r2,4001c0c <__sflush_r+0xcc>
 4001c04:	9809883a 	mov	r4,r19
 4001c08:	40026380 	call	4002638 <_free_r>
 4001c0c:	88000c15 	stw	zero,48(r17)
 4001c10:	0005883a 	mov	r2,zero
 4001c14:	dfc00417 	ldw	ra,16(sp)
 4001c18:	dcc00317 	ldw	r19,12(sp)
 4001c1c:	dc800217 	ldw	r18,8(sp)
 4001c20:	dc400117 	ldw	r17,4(sp)
 4001c24:	dc000017 	ldw	r16,0(sp)
 4001c28:	dec00504 	addi	sp,sp,20
 4001c2c:	f800283a 	ret
 4001c30:	2c800417 	ldw	r18,16(r5)
 4001c34:	903ff626 	beq	r18,zero,4001c10 <__alt_data_end+0xfc001c10>
 4001c38:	2c000017 	ldw	r16,0(r5)
 4001c3c:	108000cc 	andi	r2,r2,3
 4001c40:	2c800015 	stw	r18,0(r5)
 4001c44:	84a1c83a 	sub	r16,r16,r18
 4001c48:	1000131e 	bne	r2,zero,4001c98 <__sflush_r+0x158>
 4001c4c:	28800517 	ldw	r2,20(r5)
 4001c50:	88800215 	stw	r2,8(r17)
 4001c54:	04000316 	blt	zero,r16,4001c64 <__sflush_r+0x124>
 4001c58:	003fed06 	br	4001c10 <__alt_data_end+0xfc001c10>
 4001c5c:	90a5883a 	add	r18,r18,r2
 4001c60:	043feb0e 	bge	zero,r16,4001c10 <__alt_data_end+0xfc001c10>
 4001c64:	88800917 	ldw	r2,36(r17)
 4001c68:	89400717 	ldw	r5,28(r17)
 4001c6c:	800f883a 	mov	r7,r16
 4001c70:	900d883a 	mov	r6,r18
 4001c74:	9809883a 	mov	r4,r19
 4001c78:	103ee83a 	callr	r2
 4001c7c:	80a1c83a 	sub	r16,r16,r2
 4001c80:	00bff616 	blt	zero,r2,4001c5c <__alt_data_end+0xfc001c5c>
 4001c84:	88c0030b 	ldhu	r3,12(r17)
 4001c88:	00bfffc4 	movi	r2,-1
 4001c8c:	18c01014 	ori	r3,r3,64
 4001c90:	88c0030d 	sth	r3,12(r17)
 4001c94:	003fdf06 	br	4001c14 <__alt_data_end+0xfc001c14>
 4001c98:	0005883a 	mov	r2,zero
 4001c9c:	003fec06 	br	4001c50 <__alt_data_end+0xfc001c50>
 4001ca0:	88801415 	stw	r2,80(r17)
 4001ca4:	003fd206 	br	4001bf0 <__alt_data_end+0xfc001bf0>
 4001ca8:	28c00f17 	ldw	r3,60(r5)
 4001cac:	00ffb316 	blt	zero,r3,4001b7c <__alt_data_end+0xfc001b7c>
 4001cb0:	003fd706 	br	4001c10 <__alt_data_end+0xfc001c10>
 4001cb4:	89400717 	ldw	r5,28(r17)
 4001cb8:	000d883a 	mov	r6,zero
 4001cbc:	01c00044 	movi	r7,1
 4001cc0:	9809883a 	mov	r4,r19
 4001cc4:	403ee83a 	callr	r8
 4001cc8:	100d883a 	mov	r6,r2
 4001ccc:	00bfffc4 	movi	r2,-1
 4001cd0:	30801426 	beq	r6,r2,4001d24 <__sflush_r+0x1e4>
 4001cd4:	8880030b 	ldhu	r2,12(r17)
 4001cd8:	8a000a17 	ldw	r8,40(r17)
 4001cdc:	003fae06 	br	4001b98 <__alt_data_end+0xfc001b98>
 4001ce0:	98c00017 	ldw	r3,0(r19)
 4001ce4:	183fba26 	beq	r3,zero,4001bd0 <__alt_data_end+0xfc001bd0>
 4001ce8:	01000744 	movi	r4,29
 4001cec:	19000626 	beq	r3,r4,4001d08 <__sflush_r+0x1c8>
 4001cf0:	01000584 	movi	r4,22
 4001cf4:	19000426 	beq	r3,r4,4001d08 <__sflush_r+0x1c8>
 4001cf8:	88c0030b 	ldhu	r3,12(r17)
 4001cfc:	18c01014 	ori	r3,r3,64
 4001d00:	88c0030d 	sth	r3,12(r17)
 4001d04:	003fc306 	br	4001c14 <__alt_data_end+0xfc001c14>
 4001d08:	8880030b 	ldhu	r2,12(r17)
 4001d0c:	88c00417 	ldw	r3,16(r17)
 4001d10:	88000115 	stw	zero,4(r17)
 4001d14:	10bdffcc 	andi	r2,r2,63487
 4001d18:	8880030d 	sth	r2,12(r17)
 4001d1c:	88c00015 	stw	r3,0(r17)
 4001d20:	003fb306 	br	4001bf0 <__alt_data_end+0xfc001bf0>
 4001d24:	98800017 	ldw	r2,0(r19)
 4001d28:	103fea26 	beq	r2,zero,4001cd4 <__alt_data_end+0xfc001cd4>
 4001d2c:	00c00744 	movi	r3,29
 4001d30:	10c00226 	beq	r2,r3,4001d3c <__sflush_r+0x1fc>
 4001d34:	00c00584 	movi	r3,22
 4001d38:	10c0031e 	bne	r2,r3,4001d48 <__sflush_r+0x208>
 4001d3c:	9c000015 	stw	r16,0(r19)
 4001d40:	0005883a 	mov	r2,zero
 4001d44:	003fb306 	br	4001c14 <__alt_data_end+0xfc001c14>
 4001d48:	88c0030b 	ldhu	r3,12(r17)
 4001d4c:	3005883a 	mov	r2,r6
 4001d50:	18c01014 	ori	r3,r3,64
 4001d54:	88c0030d 	sth	r3,12(r17)
 4001d58:	003fae06 	br	4001c14 <__alt_data_end+0xfc001c14>

04001d5c <_fflush_r>:
 4001d5c:	defffd04 	addi	sp,sp,-12
 4001d60:	dc000115 	stw	r16,4(sp)
 4001d64:	dfc00215 	stw	ra,8(sp)
 4001d68:	2021883a 	mov	r16,r4
 4001d6c:	20000226 	beq	r4,zero,4001d78 <_fflush_r+0x1c>
 4001d70:	20800e17 	ldw	r2,56(r4)
 4001d74:	10000c26 	beq	r2,zero,4001da8 <_fflush_r+0x4c>
 4001d78:	2880030f 	ldh	r2,12(r5)
 4001d7c:	1000051e 	bne	r2,zero,4001d94 <_fflush_r+0x38>
 4001d80:	0005883a 	mov	r2,zero
 4001d84:	dfc00217 	ldw	ra,8(sp)
 4001d88:	dc000117 	ldw	r16,4(sp)
 4001d8c:	dec00304 	addi	sp,sp,12
 4001d90:	f800283a 	ret
 4001d94:	8009883a 	mov	r4,r16
 4001d98:	dfc00217 	ldw	ra,8(sp)
 4001d9c:	dc000117 	ldw	r16,4(sp)
 4001da0:	dec00304 	addi	sp,sp,12
 4001da4:	4001b401 	jmpi	4001b40 <__sflush_r>
 4001da8:	d9400015 	stw	r5,0(sp)
 4001dac:	40021480 	call	4002148 <__sinit>
 4001db0:	d9400017 	ldw	r5,0(sp)
 4001db4:	003ff006 	br	4001d78 <__alt_data_end+0xfc001d78>

04001db8 <fflush>:
 4001db8:	20000526 	beq	r4,zero,4001dd0 <fflush+0x18>
 4001dbc:	008100b4 	movhi	r2,1026
 4001dc0:	10a8dd04 	addi	r2,r2,-23692
 4001dc4:	200b883a 	mov	r5,r4
 4001dc8:	11000017 	ldw	r4,0(r2)
 4001dcc:	4001d5c1 	jmpi	4001d5c <_fflush_r>
 4001dd0:	008100b4 	movhi	r2,1026
 4001dd4:	10a8dc04 	addi	r2,r2,-23696
 4001dd8:	11000017 	ldw	r4,0(r2)
 4001ddc:	01410034 	movhi	r5,1024
 4001de0:	29475704 	addi	r5,r5,7516
 4001de4:	4002ee81 	jmpi	4002ee8 <_fwalk_reent>

04001de8 <__fp_unlock>:
 4001de8:	0005883a 	mov	r2,zero
 4001dec:	f800283a 	ret

04001df0 <_cleanup_r>:
 4001df0:	01410034 	movhi	r5,1024
 4001df4:	29468f04 	addi	r5,r5,6716
 4001df8:	4002ee81 	jmpi	4002ee8 <_fwalk_reent>

04001dfc <__sinit.part.1>:
 4001dfc:	defff704 	addi	sp,sp,-36
 4001e00:	00c10034 	movhi	r3,1024
 4001e04:	dfc00815 	stw	ra,32(sp)
 4001e08:	ddc00715 	stw	r23,28(sp)
 4001e0c:	dd800615 	stw	r22,24(sp)
 4001e10:	dd400515 	stw	r21,20(sp)
 4001e14:	dd000415 	stw	r20,16(sp)
 4001e18:	dcc00315 	stw	r19,12(sp)
 4001e1c:	dc800215 	stw	r18,8(sp)
 4001e20:	dc400115 	stw	r17,4(sp)
 4001e24:	dc000015 	stw	r16,0(sp)
 4001e28:	18c77c04 	addi	r3,r3,7664
 4001e2c:	24000117 	ldw	r16,4(r4)
 4001e30:	20c00f15 	stw	r3,60(r4)
 4001e34:	2080bb04 	addi	r2,r4,748
 4001e38:	00c000c4 	movi	r3,3
 4001e3c:	20c0b915 	stw	r3,740(r4)
 4001e40:	2080ba15 	stw	r2,744(r4)
 4001e44:	2000b815 	stw	zero,736(r4)
 4001e48:	05c00204 	movi	r23,8
 4001e4c:	00800104 	movi	r2,4
 4001e50:	2025883a 	mov	r18,r4
 4001e54:	b80d883a 	mov	r6,r23
 4001e58:	81001704 	addi	r4,r16,92
 4001e5c:	000b883a 	mov	r5,zero
 4001e60:	80000015 	stw	zero,0(r16)
 4001e64:	80000115 	stw	zero,4(r16)
 4001e68:	80000215 	stw	zero,8(r16)
 4001e6c:	8080030d 	sth	r2,12(r16)
 4001e70:	80001915 	stw	zero,100(r16)
 4001e74:	8000038d 	sth	zero,14(r16)
 4001e78:	80000415 	stw	zero,16(r16)
 4001e7c:	80000515 	stw	zero,20(r16)
 4001e80:	80000615 	stw	zero,24(r16)
 4001e84:	4003cec0 	call	4003cec <memset>
 4001e88:	05810034 	movhi	r22,1024
 4001e8c:	94400217 	ldw	r17,8(r18)
 4001e90:	05410034 	movhi	r21,1024
 4001e94:	05010034 	movhi	r20,1024
 4001e98:	04c10034 	movhi	r19,1024
 4001e9c:	b590a004 	addi	r22,r22,17024
 4001ea0:	ad50b704 	addi	r21,r21,17116
 4001ea4:	a510d604 	addi	r20,r20,17240
 4001ea8:	9cd0ed04 	addi	r19,r19,17332
 4001eac:	85800815 	stw	r22,32(r16)
 4001eb0:	85400915 	stw	r21,36(r16)
 4001eb4:	85000a15 	stw	r20,40(r16)
 4001eb8:	84c00b15 	stw	r19,44(r16)
 4001ebc:	84000715 	stw	r16,28(r16)
 4001ec0:	00800284 	movi	r2,10
 4001ec4:	8880030d 	sth	r2,12(r17)
 4001ec8:	00800044 	movi	r2,1
 4001ecc:	b80d883a 	mov	r6,r23
 4001ed0:	89001704 	addi	r4,r17,92
 4001ed4:	000b883a 	mov	r5,zero
 4001ed8:	88000015 	stw	zero,0(r17)
 4001edc:	88000115 	stw	zero,4(r17)
 4001ee0:	88000215 	stw	zero,8(r17)
 4001ee4:	88001915 	stw	zero,100(r17)
 4001ee8:	8880038d 	sth	r2,14(r17)
 4001eec:	88000415 	stw	zero,16(r17)
 4001ef0:	88000515 	stw	zero,20(r17)
 4001ef4:	88000615 	stw	zero,24(r17)
 4001ef8:	4003cec0 	call	4003cec <memset>
 4001efc:	94000317 	ldw	r16,12(r18)
 4001f00:	00800484 	movi	r2,18
 4001f04:	8c400715 	stw	r17,28(r17)
 4001f08:	8d800815 	stw	r22,32(r17)
 4001f0c:	8d400915 	stw	r21,36(r17)
 4001f10:	8d000a15 	stw	r20,40(r17)
 4001f14:	8cc00b15 	stw	r19,44(r17)
 4001f18:	8080030d 	sth	r2,12(r16)
 4001f1c:	00800084 	movi	r2,2
 4001f20:	80000015 	stw	zero,0(r16)
 4001f24:	80000115 	stw	zero,4(r16)
 4001f28:	80000215 	stw	zero,8(r16)
 4001f2c:	80001915 	stw	zero,100(r16)
 4001f30:	8080038d 	sth	r2,14(r16)
 4001f34:	80000415 	stw	zero,16(r16)
 4001f38:	80000515 	stw	zero,20(r16)
 4001f3c:	80000615 	stw	zero,24(r16)
 4001f40:	b80d883a 	mov	r6,r23
 4001f44:	000b883a 	mov	r5,zero
 4001f48:	81001704 	addi	r4,r16,92
 4001f4c:	4003cec0 	call	4003cec <memset>
 4001f50:	00800044 	movi	r2,1
 4001f54:	84000715 	stw	r16,28(r16)
 4001f58:	85800815 	stw	r22,32(r16)
 4001f5c:	85400915 	stw	r21,36(r16)
 4001f60:	85000a15 	stw	r20,40(r16)
 4001f64:	84c00b15 	stw	r19,44(r16)
 4001f68:	90800e15 	stw	r2,56(r18)
 4001f6c:	dfc00817 	ldw	ra,32(sp)
 4001f70:	ddc00717 	ldw	r23,28(sp)
 4001f74:	dd800617 	ldw	r22,24(sp)
 4001f78:	dd400517 	ldw	r21,20(sp)
 4001f7c:	dd000417 	ldw	r20,16(sp)
 4001f80:	dcc00317 	ldw	r19,12(sp)
 4001f84:	dc800217 	ldw	r18,8(sp)
 4001f88:	dc400117 	ldw	r17,4(sp)
 4001f8c:	dc000017 	ldw	r16,0(sp)
 4001f90:	dec00904 	addi	sp,sp,36
 4001f94:	f800283a 	ret

04001f98 <__fp_lock>:
 4001f98:	0005883a 	mov	r2,zero
 4001f9c:	f800283a 	ret

04001fa0 <__sfmoreglue>:
 4001fa0:	defffc04 	addi	sp,sp,-16
 4001fa4:	dc800215 	stw	r18,8(sp)
 4001fa8:	2825883a 	mov	r18,r5
 4001fac:	dc000015 	stw	r16,0(sp)
 4001fb0:	01401a04 	movi	r5,104
 4001fb4:	2021883a 	mov	r16,r4
 4001fb8:	913fffc4 	addi	r4,r18,-1
 4001fbc:	dfc00315 	stw	ra,12(sp)
 4001fc0:	dc400115 	stw	r17,4(sp)
 4001fc4:	4001a140 	call	4001a14 <__mulsi3>
 4001fc8:	8009883a 	mov	r4,r16
 4001fcc:	11401d04 	addi	r5,r2,116
 4001fd0:	1023883a 	mov	r17,r2
 4001fd4:	40033980 	call	4003398 <_malloc_r>
 4001fd8:	1021883a 	mov	r16,r2
 4001fdc:	10000726 	beq	r2,zero,4001ffc <__sfmoreglue+0x5c>
 4001fe0:	11000304 	addi	r4,r2,12
 4001fe4:	10000015 	stw	zero,0(r2)
 4001fe8:	14800115 	stw	r18,4(r2)
 4001fec:	11000215 	stw	r4,8(r2)
 4001ff0:	89801a04 	addi	r6,r17,104
 4001ff4:	000b883a 	mov	r5,zero
 4001ff8:	4003cec0 	call	4003cec <memset>
 4001ffc:	8005883a 	mov	r2,r16
 4002000:	dfc00317 	ldw	ra,12(sp)
 4002004:	dc800217 	ldw	r18,8(sp)
 4002008:	dc400117 	ldw	r17,4(sp)
 400200c:	dc000017 	ldw	r16,0(sp)
 4002010:	dec00404 	addi	sp,sp,16
 4002014:	f800283a 	ret

04002018 <__sfp>:
 4002018:	defffb04 	addi	sp,sp,-20
 400201c:	dc000015 	stw	r16,0(sp)
 4002020:	040100b4 	movhi	r16,1026
 4002024:	8428dc04 	addi	r16,r16,-23696
 4002028:	dcc00315 	stw	r19,12(sp)
 400202c:	2027883a 	mov	r19,r4
 4002030:	81000017 	ldw	r4,0(r16)
 4002034:	dfc00415 	stw	ra,16(sp)
 4002038:	dc800215 	stw	r18,8(sp)
 400203c:	20800e17 	ldw	r2,56(r4)
 4002040:	dc400115 	stw	r17,4(sp)
 4002044:	1000021e 	bne	r2,zero,4002050 <__sfp+0x38>
 4002048:	4001dfc0 	call	4001dfc <__sinit.part.1>
 400204c:	81000017 	ldw	r4,0(r16)
 4002050:	2480b804 	addi	r18,r4,736
 4002054:	047fffc4 	movi	r17,-1
 4002058:	91000117 	ldw	r4,4(r18)
 400205c:	94000217 	ldw	r16,8(r18)
 4002060:	213fffc4 	addi	r4,r4,-1
 4002064:	20000a16 	blt	r4,zero,4002090 <__sfp+0x78>
 4002068:	8080030f 	ldh	r2,12(r16)
 400206c:	10000c26 	beq	r2,zero,40020a0 <__sfp+0x88>
 4002070:	80c01d04 	addi	r3,r16,116
 4002074:	00000206 	br	4002080 <__sfp+0x68>
 4002078:	18bfe60f 	ldh	r2,-104(r3)
 400207c:	10000826 	beq	r2,zero,40020a0 <__sfp+0x88>
 4002080:	213fffc4 	addi	r4,r4,-1
 4002084:	1c3ffd04 	addi	r16,r3,-12
 4002088:	18c01a04 	addi	r3,r3,104
 400208c:	247ffa1e 	bne	r4,r17,4002078 <__alt_data_end+0xfc002078>
 4002090:	90800017 	ldw	r2,0(r18)
 4002094:	10001d26 	beq	r2,zero,400210c <__sfp+0xf4>
 4002098:	1025883a 	mov	r18,r2
 400209c:	003fee06 	br	4002058 <__alt_data_end+0xfc002058>
 40020a0:	00bfffc4 	movi	r2,-1
 40020a4:	8080038d 	sth	r2,14(r16)
 40020a8:	00800044 	movi	r2,1
 40020ac:	8080030d 	sth	r2,12(r16)
 40020b0:	80001915 	stw	zero,100(r16)
 40020b4:	80000015 	stw	zero,0(r16)
 40020b8:	80000215 	stw	zero,8(r16)
 40020bc:	80000115 	stw	zero,4(r16)
 40020c0:	80000415 	stw	zero,16(r16)
 40020c4:	80000515 	stw	zero,20(r16)
 40020c8:	80000615 	stw	zero,24(r16)
 40020cc:	01800204 	movi	r6,8
 40020d0:	000b883a 	mov	r5,zero
 40020d4:	81001704 	addi	r4,r16,92
 40020d8:	4003cec0 	call	4003cec <memset>
 40020dc:	8005883a 	mov	r2,r16
 40020e0:	80000c15 	stw	zero,48(r16)
 40020e4:	80000d15 	stw	zero,52(r16)
 40020e8:	80001115 	stw	zero,68(r16)
 40020ec:	80001215 	stw	zero,72(r16)
 40020f0:	dfc00417 	ldw	ra,16(sp)
 40020f4:	dcc00317 	ldw	r19,12(sp)
 40020f8:	dc800217 	ldw	r18,8(sp)
 40020fc:	dc400117 	ldw	r17,4(sp)
 4002100:	dc000017 	ldw	r16,0(sp)
 4002104:	dec00504 	addi	sp,sp,20
 4002108:	f800283a 	ret
 400210c:	01400104 	movi	r5,4
 4002110:	9809883a 	mov	r4,r19
 4002114:	4001fa00 	call	4001fa0 <__sfmoreglue>
 4002118:	90800015 	stw	r2,0(r18)
 400211c:	103fde1e 	bne	r2,zero,4002098 <__alt_data_end+0xfc002098>
 4002120:	00800304 	movi	r2,12
 4002124:	98800015 	stw	r2,0(r19)
 4002128:	0005883a 	mov	r2,zero
 400212c:	003ff006 	br	40020f0 <__alt_data_end+0xfc0020f0>

04002130 <_cleanup>:
 4002130:	008100b4 	movhi	r2,1026
 4002134:	10a8dc04 	addi	r2,r2,-23696
 4002138:	11000017 	ldw	r4,0(r2)
 400213c:	01410034 	movhi	r5,1024
 4002140:	29468f04 	addi	r5,r5,6716
 4002144:	4002ee81 	jmpi	4002ee8 <_fwalk_reent>

04002148 <__sinit>:
 4002148:	20800e17 	ldw	r2,56(r4)
 400214c:	10000126 	beq	r2,zero,4002154 <__sinit+0xc>
 4002150:	f800283a 	ret
 4002154:	4001dfc1 	jmpi	4001dfc <__sinit.part.1>

04002158 <__sfp_lock_acquire>:
 4002158:	f800283a 	ret

0400215c <__sfp_lock_release>:
 400215c:	f800283a 	ret

04002160 <__sinit_lock_acquire>:
 4002160:	f800283a 	ret

04002164 <__sinit_lock_release>:
 4002164:	f800283a 	ret

04002168 <__fp_lock_all>:
 4002168:	008100b4 	movhi	r2,1026
 400216c:	10a8dd04 	addi	r2,r2,-23692
 4002170:	11000017 	ldw	r4,0(r2)
 4002174:	01410034 	movhi	r5,1024
 4002178:	2947e604 	addi	r5,r5,8088
 400217c:	4002e241 	jmpi	4002e24 <_fwalk>

04002180 <__fp_unlock_all>:
 4002180:	008100b4 	movhi	r2,1026
 4002184:	10a8dd04 	addi	r2,r2,-23692
 4002188:	11000017 	ldw	r4,0(r2)
 400218c:	01410034 	movhi	r5,1024
 4002190:	29477a04 	addi	r5,r5,7656
 4002194:	4002e241 	jmpi	4002e24 <_fwalk>

04002198 <_fopen_r>:
 4002198:	defffa04 	addi	sp,sp,-24
 400219c:	3005883a 	mov	r2,r6
 40021a0:	dcc00415 	stw	r19,16(sp)
 40021a4:	d80d883a 	mov	r6,sp
 40021a8:	2827883a 	mov	r19,r5
 40021ac:	100b883a 	mov	r5,r2
 40021b0:	dc800315 	stw	r18,12(sp)
 40021b4:	dfc00515 	stw	ra,20(sp)
 40021b8:	dc400215 	stw	r17,8(sp)
 40021bc:	dc000115 	stw	r16,4(sp)
 40021c0:	2025883a 	mov	r18,r4
 40021c4:	40062fc0 	call	40062fc <__sflags>
 40021c8:	10002726 	beq	r2,zero,4002268 <_fopen_r+0xd0>
 40021cc:	9009883a 	mov	r4,r18
 40021d0:	1023883a 	mov	r17,r2
 40021d4:	40020180 	call	4002018 <__sfp>
 40021d8:	1021883a 	mov	r16,r2
 40021dc:	10002226 	beq	r2,zero,4002268 <_fopen_r+0xd0>
 40021e0:	d9800017 	ldw	r6,0(sp)
 40021e4:	01c06d84 	movi	r7,438
 40021e8:	980b883a 	mov	r5,r19
 40021ec:	9009883a 	mov	r4,r18
 40021f0:	4003e140 	call	4003e14 <_open_r>
 40021f4:	10001916 	blt	r2,zero,400225c <_fopen_r+0xc4>
 40021f8:	8080038d 	sth	r2,14(r16)
 40021fc:	00810034 	movhi	r2,1024
 4002200:	1090a004 	addi	r2,r2,17024
 4002204:	80800815 	stw	r2,32(r16)
 4002208:	00810034 	movhi	r2,1024
 400220c:	1090b704 	addi	r2,r2,17116
 4002210:	80800915 	stw	r2,36(r16)
 4002214:	00810034 	movhi	r2,1024
 4002218:	1090d604 	addi	r2,r2,17240
 400221c:	80800a15 	stw	r2,40(r16)
 4002220:	00810034 	movhi	r2,1024
 4002224:	1090ed04 	addi	r2,r2,17332
 4002228:	8440030d 	sth	r17,12(r16)
 400222c:	84000715 	stw	r16,28(r16)
 4002230:	80800b15 	stw	r2,44(r16)
 4002234:	8c40400c 	andi	r17,r17,256
 4002238:	88000d1e 	bne	r17,zero,4002270 <_fopen_r+0xd8>
 400223c:	8005883a 	mov	r2,r16
 4002240:	dfc00517 	ldw	ra,20(sp)
 4002244:	dcc00417 	ldw	r19,16(sp)
 4002248:	dc800317 	ldw	r18,12(sp)
 400224c:	dc400217 	ldw	r17,8(sp)
 4002250:	dc000117 	ldw	r16,4(sp)
 4002254:	dec00604 	addi	sp,sp,24
 4002258:	f800283a 	ret
 400225c:	40021580 	call	4002158 <__sfp_lock_acquire>
 4002260:	8000030d 	sth	zero,12(r16)
 4002264:	400215c0 	call	400215c <__sfp_lock_release>
 4002268:	0005883a 	mov	r2,zero
 400226c:	003ff406 	br	4002240 <__alt_data_end+0xfc002240>
 4002270:	01c00084 	movi	r7,2
 4002274:	000d883a 	mov	r6,zero
 4002278:	800b883a 	mov	r5,r16
 400227c:	9009883a 	mov	r4,r18
 4002280:	40029480 	call	4002948 <_fseek_r>
 4002284:	8005883a 	mov	r2,r16
 4002288:	003fed06 	br	4002240 <__alt_data_end+0xfc002240>

0400228c <fopen>:
 400228c:	008100b4 	movhi	r2,1026
 4002290:	10a8dd04 	addi	r2,r2,-23692
 4002294:	280d883a 	mov	r6,r5
 4002298:	200b883a 	mov	r5,r4
 400229c:	11000017 	ldw	r4,0(r2)
 40022a0:	40021981 	jmpi	4002198 <_fopen_r>

040022a4 <_fread_r>:
 40022a4:	defff404 	addi	sp,sp,-48
 40022a8:	dd000615 	stw	r20,24(sp)
 40022ac:	dcc00515 	stw	r19,20(sp)
 40022b0:	2029883a 	mov	r20,r4
 40022b4:	2827883a 	mov	r19,r5
 40022b8:	3809883a 	mov	r4,r7
 40022bc:	300b883a 	mov	r5,r6
 40022c0:	ddc00915 	stw	r23,36(sp)
 40022c4:	dd400715 	stw	r21,28(sp)
 40022c8:	dc000215 	stw	r16,8(sp)
 40022cc:	dfc00b15 	stw	ra,44(sp)
 40022d0:	df000a15 	stw	fp,40(sp)
 40022d4:	dd800815 	stw	r22,32(sp)
 40022d8:	dc800415 	stw	r18,16(sp)
 40022dc:	dc400315 	stw	r17,12(sp)
 40022e0:	302f883a 	mov	r23,r6
 40022e4:	382b883a 	mov	r21,r7
 40022e8:	4001a140 	call	4001a14 <__mulsi3>
 40022ec:	dc000c17 	ldw	r16,48(sp)
 40022f0:	10003826 	beq	r2,zero,40023d4 <_fread_r+0x130>
 40022f4:	102d883a 	mov	r22,r2
 40022f8:	a0000226 	beq	r20,zero,4002304 <_fread_r+0x60>
 40022fc:	a0800e17 	ldw	r2,56(r20)
 4002300:	10006e26 	beq	r2,zero,40024bc <_fread_r+0x218>
 4002304:	8080030b 	ldhu	r2,12(r16)
 4002308:	10c8000c 	andi	r3,r2,8192
 400230c:	1800061e 	bne	r3,zero,4002328 <_fread_r+0x84>
 4002310:	81001917 	ldw	r4,100(r16)
 4002314:	00f7ffc4 	movi	r3,-8193
 4002318:	10880014 	ori	r2,r2,8192
 400231c:	20c6703a 	and	r3,r4,r3
 4002320:	8080030d 	sth	r2,12(r16)
 4002324:	80c01915 	stw	r3,100(r16)
 4002328:	84400117 	ldw	r17,4(r16)
 400232c:	88005f16 	blt	r17,zero,40024ac <_fread_r+0x208>
 4002330:	8809883a 	mov	r4,r17
 4002334:	1080008c 	andi	r2,r2,2
 4002338:	1000281e 	bne	r2,zero,40023dc <_fread_r+0x138>
 400233c:	b025883a 	mov	r18,r22
 4002340:	00000b06 	br	4002370 <_fread_r+0xcc>
 4002344:	4003ba40 	call	4003ba4 <memcpy>
 4002348:	80800017 	ldw	r2,0(r16)
 400234c:	9c67883a 	add	r19,r19,r17
 4002350:	9465c83a 	sub	r18,r18,r17
 4002354:	1463883a 	add	r17,r2,r17
 4002358:	800b883a 	mov	r5,r16
 400235c:	a009883a 	mov	r4,r20
 4002360:	84400015 	stw	r17,0(r16)
 4002364:	4003f640 	call	4003f64 <__srefill_r>
 4002368:	10004c1e 	bne	r2,zero,400249c <_fread_r+0x1f8>
 400236c:	84400117 	ldw	r17,4(r16)
 4002370:	880d883a 	mov	r6,r17
 4002374:	9809883a 	mov	r4,r19
 4002378:	81400017 	ldw	r5,0(r16)
 400237c:	8cbff136 	bltu	r17,r18,4002344 <__alt_data_end+0xfc002344>
 4002380:	900d883a 	mov	r6,r18
 4002384:	4003ba40 	call	4003ba4 <memcpy>
 4002388:	80c00117 	ldw	r3,4(r16)
 400238c:	81000017 	ldw	r4,0(r16)
 4002390:	a805883a 	mov	r2,r21
 4002394:	1c87c83a 	sub	r3,r3,r18
 4002398:	24a5883a 	add	r18,r4,r18
 400239c:	80c00115 	stw	r3,4(r16)
 40023a0:	84800015 	stw	r18,0(r16)
 40023a4:	dfc00b17 	ldw	ra,44(sp)
 40023a8:	df000a17 	ldw	fp,40(sp)
 40023ac:	ddc00917 	ldw	r23,36(sp)
 40023b0:	dd800817 	ldw	r22,32(sp)
 40023b4:	dd400717 	ldw	r21,28(sp)
 40023b8:	dd000617 	ldw	r20,24(sp)
 40023bc:	dcc00517 	ldw	r19,20(sp)
 40023c0:	dc800417 	ldw	r18,16(sp)
 40023c4:	dc400317 	ldw	r17,12(sp)
 40023c8:	dc000217 	ldw	r16,8(sp)
 40023cc:	dec00c04 	addi	sp,sp,48
 40023d0:	f800283a 	ret
 40023d4:	0005883a 	mov	r2,zero
 40023d8:	003ff206 	br	40023a4 <__alt_data_end+0xfc0023a4>
 40023dc:	b007883a 	mov	r3,r22
 40023e0:	2580012e 	bgeu	r4,r22,40023e8 <_fread_r+0x144>
 40023e4:	2007883a 	mov	r3,r4
 40023e8:	81400017 	ldw	r5,0(r16)
 40023ec:	180d883a 	mov	r6,r3
 40023f0:	9809883a 	mov	r4,r19
 40023f4:	d8c00115 	stw	r3,4(sp)
 40023f8:	4003ba40 	call	4003ba4 <memcpy>
 40023fc:	d8c00117 	ldw	r3,4(sp)
 4002400:	84400017 	ldw	r17,0(r16)
 4002404:	80800117 	ldw	r2,4(r16)
 4002408:	81400c17 	ldw	r5,48(r16)
 400240c:	88e3883a 	add	r17,r17,r3
 4002410:	10c5c83a 	sub	r2,r2,r3
 4002414:	84400015 	stw	r17,0(r16)
 4002418:	80800115 	stw	r2,4(r16)
 400241c:	b0e5c83a 	sub	r18,r22,r3
 4002420:	28002c26 	beq	r5,zero,40024d4 <_fread_r+0x230>
 4002424:	90002c26 	beq	r18,zero,40024d8 <_fread_r+0x234>
 4002428:	80801004 	addi	r2,r16,64
 400242c:	28800526 	beq	r5,r2,4002444 <_fread_r+0x1a0>
 4002430:	a009883a 	mov	r4,r20
 4002434:	d8c00115 	stw	r3,4(sp)
 4002438:	40026380 	call	4002638 <_free_r>
 400243c:	d8c00117 	ldw	r3,4(sp)
 4002440:	84400017 	ldw	r17,0(r16)
 4002444:	80000c15 	stw	zero,48(r16)
 4002448:	80800517 	ldw	r2,20(r16)
 400244c:	87000417 	ldw	fp,16(r16)
 4002450:	98e7883a 	add	r19,r19,r3
 4002454:	d8800015 	stw	r2,0(sp)
 4002458:	00000106 	br	4002460 <_fread_r+0x1bc>
 400245c:	90001e26 	beq	r18,zero,40024d8 <_fread_r+0x234>
 4002460:	84c00415 	stw	r19,16(r16)
 4002464:	84800515 	stw	r18,20(r16)
 4002468:	84c00015 	stw	r19,0(r16)
 400246c:	a009883a 	mov	r4,r20
 4002470:	800b883a 	mov	r5,r16
 4002474:	4003f640 	call	4003f64 <__srefill_r>
 4002478:	d9000017 	ldw	r4,0(sp)
 400247c:	80c00117 	ldw	r3,4(r16)
 4002480:	87000415 	stw	fp,16(r16)
 4002484:	81000515 	stw	r4,20(r16)
 4002488:	84400015 	stw	r17,0(r16)
 400248c:	80000115 	stw	zero,4(r16)
 4002490:	90e5c83a 	sub	r18,r18,r3
 4002494:	98e7883a 	add	r19,r19,r3
 4002498:	103ff026 	beq	r2,zero,400245c <__alt_data_end+0xfc00245c>
 400249c:	b80b883a 	mov	r5,r23
 40024a0:	b489c83a 	sub	r4,r22,r18
 40024a4:	40019580 	call	4001958 <__udivsi3>
 40024a8:	003fbe06 	br	40023a4 <__alt_data_end+0xfc0023a4>
 40024ac:	80000115 	stw	zero,4(r16)
 40024b0:	0009883a 	mov	r4,zero
 40024b4:	0023883a 	mov	r17,zero
 40024b8:	003f9e06 	br	4002334 <__alt_data_end+0xfc002334>
 40024bc:	a009883a 	mov	r4,r20
 40024c0:	40021480 	call	4002148 <__sinit>
 40024c4:	8080030b 	ldhu	r2,12(r16)
 40024c8:	10c8000c 	andi	r3,r2,8192
 40024cc:	183f961e 	bne	r3,zero,4002328 <__alt_data_end+0xfc002328>
 40024d0:	003f8f06 	br	4002310 <__alt_data_end+0xfc002310>
 40024d4:	903fdc1e 	bne	r18,zero,4002448 <__alt_data_end+0xfc002448>
 40024d8:	a805883a 	mov	r2,r21
 40024dc:	003fb106 	br	40023a4 <__alt_data_end+0xfc0023a4>

040024e0 <fread>:
 40024e0:	defffe04 	addi	sp,sp,-8
 40024e4:	008100b4 	movhi	r2,1026
 40024e8:	d9c00015 	stw	r7,0(sp)
 40024ec:	10a8dd04 	addi	r2,r2,-23692
 40024f0:	300f883a 	mov	r7,r6
 40024f4:	280d883a 	mov	r6,r5
 40024f8:	200b883a 	mov	r5,r4
 40024fc:	11000017 	ldw	r4,0(r2)
 4002500:	dfc00115 	stw	ra,4(sp)
 4002504:	40022a40 	call	40022a4 <_fread_r>
 4002508:	dfc00117 	ldw	ra,4(sp)
 400250c:	dec00204 	addi	sp,sp,8
 4002510:	f800283a 	ret

04002514 <_malloc_trim_r>:
 4002514:	defffb04 	addi	sp,sp,-20
 4002518:	dcc00315 	stw	r19,12(sp)
 400251c:	04c100b4 	movhi	r19,1026
 4002520:	dc800215 	stw	r18,8(sp)
 4002524:	dc400115 	stw	r17,4(sp)
 4002528:	dc000015 	stw	r16,0(sp)
 400252c:	dfc00415 	stw	ra,16(sp)
 4002530:	2821883a 	mov	r16,r5
 4002534:	9ce31804 	addi	r19,r19,-29600
 4002538:	2025883a 	mov	r18,r4
 400253c:	40149540 	call	4014954 <__malloc_lock>
 4002540:	98800217 	ldw	r2,8(r19)
 4002544:	14400117 	ldw	r17,4(r2)
 4002548:	00bfff04 	movi	r2,-4
 400254c:	88a2703a 	and	r17,r17,r2
 4002550:	8c21c83a 	sub	r16,r17,r16
 4002554:	8403fbc4 	addi	r16,r16,4079
 4002558:	8020d33a 	srli	r16,r16,12
 400255c:	0083ffc4 	movi	r2,4095
 4002560:	843fffc4 	addi	r16,r16,-1
 4002564:	8020933a 	slli	r16,r16,12
 4002568:	1400060e 	bge	r2,r16,4002584 <_malloc_trim_r+0x70>
 400256c:	000b883a 	mov	r5,zero
 4002570:	9009883a 	mov	r4,r18
 4002574:	40041c00 	call	40041c0 <_sbrk_r>
 4002578:	98c00217 	ldw	r3,8(r19)
 400257c:	1c47883a 	add	r3,r3,r17
 4002580:	10c00a26 	beq	r2,r3,40025ac <_malloc_trim_r+0x98>
 4002584:	9009883a 	mov	r4,r18
 4002588:	40149780 	call	4014978 <__malloc_unlock>
 400258c:	0005883a 	mov	r2,zero
 4002590:	dfc00417 	ldw	ra,16(sp)
 4002594:	dcc00317 	ldw	r19,12(sp)
 4002598:	dc800217 	ldw	r18,8(sp)
 400259c:	dc400117 	ldw	r17,4(sp)
 40025a0:	dc000017 	ldw	r16,0(sp)
 40025a4:	dec00504 	addi	sp,sp,20
 40025a8:	f800283a 	ret
 40025ac:	040bc83a 	sub	r5,zero,r16
 40025b0:	9009883a 	mov	r4,r18
 40025b4:	40041c00 	call	40041c0 <_sbrk_r>
 40025b8:	00ffffc4 	movi	r3,-1
 40025bc:	10c00d26 	beq	r2,r3,40025f4 <_malloc_trim_r+0xe0>
 40025c0:	00c100b4 	movhi	r3,1026
 40025c4:	18f04704 	addi	r3,r3,-16100
 40025c8:	18800017 	ldw	r2,0(r3)
 40025cc:	99000217 	ldw	r4,8(r19)
 40025d0:	8c23c83a 	sub	r17,r17,r16
 40025d4:	8c400054 	ori	r17,r17,1
 40025d8:	1421c83a 	sub	r16,r2,r16
 40025dc:	24400115 	stw	r17,4(r4)
 40025e0:	9009883a 	mov	r4,r18
 40025e4:	1c000015 	stw	r16,0(r3)
 40025e8:	40149780 	call	4014978 <__malloc_unlock>
 40025ec:	00800044 	movi	r2,1
 40025f0:	003fe706 	br	4002590 <__alt_data_end+0xfc002590>
 40025f4:	000b883a 	mov	r5,zero
 40025f8:	9009883a 	mov	r4,r18
 40025fc:	40041c00 	call	40041c0 <_sbrk_r>
 4002600:	99000217 	ldw	r4,8(r19)
 4002604:	014003c4 	movi	r5,15
 4002608:	1107c83a 	sub	r3,r2,r4
 400260c:	28ffdd0e 	bge	r5,r3,4002584 <__alt_data_end+0xfc002584>
 4002610:	014100b4 	movhi	r5,1026
 4002614:	2968de04 	addi	r5,r5,-23688
 4002618:	29400017 	ldw	r5,0(r5)
 400261c:	18c00054 	ori	r3,r3,1
 4002620:	20c00115 	stw	r3,4(r4)
 4002624:	00c100b4 	movhi	r3,1026
 4002628:	1145c83a 	sub	r2,r2,r5
 400262c:	18f04704 	addi	r3,r3,-16100
 4002630:	18800015 	stw	r2,0(r3)
 4002634:	003fd306 	br	4002584 <__alt_data_end+0xfc002584>

04002638 <_free_r>:
 4002638:	28004126 	beq	r5,zero,4002740 <_free_r+0x108>
 400263c:	defffd04 	addi	sp,sp,-12
 4002640:	dc400115 	stw	r17,4(sp)
 4002644:	dc000015 	stw	r16,0(sp)
 4002648:	2023883a 	mov	r17,r4
 400264c:	2821883a 	mov	r16,r5
 4002650:	dfc00215 	stw	ra,8(sp)
 4002654:	40149540 	call	4014954 <__malloc_lock>
 4002658:	81ffff17 	ldw	r7,-4(r16)
 400265c:	00bfff84 	movi	r2,-2
 4002660:	010100b4 	movhi	r4,1026
 4002664:	81bffe04 	addi	r6,r16,-8
 4002668:	3884703a 	and	r2,r7,r2
 400266c:	21231804 	addi	r4,r4,-29600
 4002670:	308b883a 	add	r5,r6,r2
 4002674:	2a400117 	ldw	r9,4(r5)
 4002678:	22000217 	ldw	r8,8(r4)
 400267c:	00ffff04 	movi	r3,-4
 4002680:	48c6703a 	and	r3,r9,r3
 4002684:	2a005726 	beq	r5,r8,40027e4 <_free_r+0x1ac>
 4002688:	28c00115 	stw	r3,4(r5)
 400268c:	39c0004c 	andi	r7,r7,1
 4002690:	3800091e 	bne	r7,zero,40026b8 <_free_r+0x80>
 4002694:	823ffe17 	ldw	r8,-8(r16)
 4002698:	22400204 	addi	r9,r4,8
 400269c:	320dc83a 	sub	r6,r6,r8
 40026a0:	31c00217 	ldw	r7,8(r6)
 40026a4:	1205883a 	add	r2,r2,r8
 40026a8:	3a406526 	beq	r7,r9,4002840 <_free_r+0x208>
 40026ac:	32000317 	ldw	r8,12(r6)
 40026b0:	3a000315 	stw	r8,12(r7)
 40026b4:	41c00215 	stw	r7,8(r8)
 40026b8:	28cf883a 	add	r7,r5,r3
 40026bc:	39c00117 	ldw	r7,4(r7)
 40026c0:	39c0004c 	andi	r7,r7,1
 40026c4:	38003a26 	beq	r7,zero,40027b0 <_free_r+0x178>
 40026c8:	10c00054 	ori	r3,r2,1
 40026cc:	30c00115 	stw	r3,4(r6)
 40026d0:	3087883a 	add	r3,r6,r2
 40026d4:	18800015 	stw	r2,0(r3)
 40026d8:	00c07fc4 	movi	r3,511
 40026dc:	18801936 	bltu	r3,r2,4002744 <_free_r+0x10c>
 40026e0:	1004d0fa 	srli	r2,r2,3
 40026e4:	01c00044 	movi	r7,1
 40026e8:	21400117 	ldw	r5,4(r4)
 40026ec:	10c00044 	addi	r3,r2,1
 40026f0:	18c7883a 	add	r3,r3,r3
 40026f4:	1005d0ba 	srai	r2,r2,2
 40026f8:	18c7883a 	add	r3,r3,r3
 40026fc:	18c7883a 	add	r3,r3,r3
 4002700:	1907883a 	add	r3,r3,r4
 4002704:	3884983a 	sll	r2,r7,r2
 4002708:	19c00017 	ldw	r7,0(r3)
 400270c:	1a3ffe04 	addi	r8,r3,-8
 4002710:	1144b03a 	or	r2,r2,r5
 4002714:	32000315 	stw	r8,12(r6)
 4002718:	31c00215 	stw	r7,8(r6)
 400271c:	20800115 	stw	r2,4(r4)
 4002720:	19800015 	stw	r6,0(r3)
 4002724:	39800315 	stw	r6,12(r7)
 4002728:	8809883a 	mov	r4,r17
 400272c:	dfc00217 	ldw	ra,8(sp)
 4002730:	dc400117 	ldw	r17,4(sp)
 4002734:	dc000017 	ldw	r16,0(sp)
 4002738:	dec00304 	addi	sp,sp,12
 400273c:	40149781 	jmpi	4014978 <__malloc_unlock>
 4002740:	f800283a 	ret
 4002744:	100ad27a 	srli	r5,r2,9
 4002748:	00c00104 	movi	r3,4
 400274c:	19404a36 	bltu	r3,r5,4002878 <_free_r+0x240>
 4002750:	100ad1ba 	srli	r5,r2,6
 4002754:	28c00e44 	addi	r3,r5,57
 4002758:	18c7883a 	add	r3,r3,r3
 400275c:	29400e04 	addi	r5,r5,56
 4002760:	18c7883a 	add	r3,r3,r3
 4002764:	18c7883a 	add	r3,r3,r3
 4002768:	1909883a 	add	r4,r3,r4
 400276c:	20c00017 	ldw	r3,0(r4)
 4002770:	01c100b4 	movhi	r7,1026
 4002774:	213ffe04 	addi	r4,r4,-8
 4002778:	39e31804 	addi	r7,r7,-29600
 400277c:	20c04426 	beq	r4,r3,4002890 <_free_r+0x258>
 4002780:	01ffff04 	movi	r7,-4
 4002784:	19400117 	ldw	r5,4(r3)
 4002788:	29ca703a 	and	r5,r5,r7
 400278c:	1140022e 	bgeu	r2,r5,4002798 <_free_r+0x160>
 4002790:	18c00217 	ldw	r3,8(r3)
 4002794:	20fffb1e 	bne	r4,r3,4002784 <__alt_data_end+0xfc002784>
 4002798:	19000317 	ldw	r4,12(r3)
 400279c:	31000315 	stw	r4,12(r6)
 40027a0:	30c00215 	stw	r3,8(r6)
 40027a4:	21800215 	stw	r6,8(r4)
 40027a8:	19800315 	stw	r6,12(r3)
 40027ac:	003fde06 	br	4002728 <__alt_data_end+0xfc002728>
 40027b0:	29c00217 	ldw	r7,8(r5)
 40027b4:	10c5883a 	add	r2,r2,r3
 40027b8:	00c100b4 	movhi	r3,1026
 40027bc:	18e31a04 	addi	r3,r3,-29592
 40027c0:	38c03b26 	beq	r7,r3,40028b0 <_free_r+0x278>
 40027c4:	2a000317 	ldw	r8,12(r5)
 40027c8:	11400054 	ori	r5,r2,1
 40027cc:	3087883a 	add	r3,r6,r2
 40027d0:	3a000315 	stw	r8,12(r7)
 40027d4:	41c00215 	stw	r7,8(r8)
 40027d8:	31400115 	stw	r5,4(r6)
 40027dc:	18800015 	stw	r2,0(r3)
 40027e0:	003fbd06 	br	40026d8 <__alt_data_end+0xfc0026d8>
 40027e4:	39c0004c 	andi	r7,r7,1
 40027e8:	10c5883a 	add	r2,r2,r3
 40027ec:	3800071e 	bne	r7,zero,400280c <_free_r+0x1d4>
 40027f0:	81fffe17 	ldw	r7,-8(r16)
 40027f4:	31cdc83a 	sub	r6,r6,r7
 40027f8:	30c00317 	ldw	r3,12(r6)
 40027fc:	31400217 	ldw	r5,8(r6)
 4002800:	11c5883a 	add	r2,r2,r7
 4002804:	28c00315 	stw	r3,12(r5)
 4002808:	19400215 	stw	r5,8(r3)
 400280c:	10c00054 	ori	r3,r2,1
 4002810:	30c00115 	stw	r3,4(r6)
 4002814:	00c100b4 	movhi	r3,1026
 4002818:	18e8df04 	addi	r3,r3,-23684
 400281c:	18c00017 	ldw	r3,0(r3)
 4002820:	21800215 	stw	r6,8(r4)
 4002824:	10ffc036 	bltu	r2,r3,4002728 <__alt_data_end+0xfc002728>
 4002828:	008100b4 	movhi	r2,1026
 400282c:	10b03c04 	addi	r2,r2,-16144
 4002830:	11400017 	ldw	r5,0(r2)
 4002834:	8809883a 	mov	r4,r17
 4002838:	40025140 	call	4002514 <_malloc_trim_r>
 400283c:	003fba06 	br	4002728 <__alt_data_end+0xfc002728>
 4002840:	28c9883a 	add	r4,r5,r3
 4002844:	21000117 	ldw	r4,4(r4)
 4002848:	2100004c 	andi	r4,r4,1
 400284c:	2000391e 	bne	r4,zero,4002934 <_free_r+0x2fc>
 4002850:	29c00217 	ldw	r7,8(r5)
 4002854:	29000317 	ldw	r4,12(r5)
 4002858:	1885883a 	add	r2,r3,r2
 400285c:	10c00054 	ori	r3,r2,1
 4002860:	39000315 	stw	r4,12(r7)
 4002864:	21c00215 	stw	r7,8(r4)
 4002868:	30c00115 	stw	r3,4(r6)
 400286c:	308d883a 	add	r6,r6,r2
 4002870:	30800015 	stw	r2,0(r6)
 4002874:	003fac06 	br	4002728 <__alt_data_end+0xfc002728>
 4002878:	00c00504 	movi	r3,20
 400287c:	19401536 	bltu	r3,r5,40028d4 <_free_r+0x29c>
 4002880:	28c01704 	addi	r3,r5,92
 4002884:	18c7883a 	add	r3,r3,r3
 4002888:	294016c4 	addi	r5,r5,91
 400288c:	003fb406 	br	4002760 <__alt_data_end+0xfc002760>
 4002890:	280bd0ba 	srai	r5,r5,2
 4002894:	00c00044 	movi	r3,1
 4002898:	38800117 	ldw	r2,4(r7)
 400289c:	194a983a 	sll	r5,r3,r5
 40028a0:	2007883a 	mov	r3,r4
 40028a4:	2884b03a 	or	r2,r5,r2
 40028a8:	38800115 	stw	r2,4(r7)
 40028ac:	003fbb06 	br	400279c <__alt_data_end+0xfc00279c>
 40028b0:	21800515 	stw	r6,20(r4)
 40028b4:	21800415 	stw	r6,16(r4)
 40028b8:	10c00054 	ori	r3,r2,1
 40028bc:	31c00315 	stw	r7,12(r6)
 40028c0:	31c00215 	stw	r7,8(r6)
 40028c4:	30c00115 	stw	r3,4(r6)
 40028c8:	308d883a 	add	r6,r6,r2
 40028cc:	30800015 	stw	r2,0(r6)
 40028d0:	003f9506 	br	4002728 <__alt_data_end+0xfc002728>
 40028d4:	00c01504 	movi	r3,84
 40028d8:	19400536 	bltu	r3,r5,40028f0 <_free_r+0x2b8>
 40028dc:	100ad33a 	srli	r5,r2,12
 40028e0:	28c01bc4 	addi	r3,r5,111
 40028e4:	18c7883a 	add	r3,r3,r3
 40028e8:	29401b84 	addi	r5,r5,110
 40028ec:	003f9c06 	br	4002760 <__alt_data_end+0xfc002760>
 40028f0:	00c05504 	movi	r3,340
 40028f4:	19400536 	bltu	r3,r5,400290c <_free_r+0x2d4>
 40028f8:	100ad3fa 	srli	r5,r2,15
 40028fc:	28c01e04 	addi	r3,r5,120
 4002900:	18c7883a 	add	r3,r3,r3
 4002904:	29401dc4 	addi	r5,r5,119
 4002908:	003f9506 	br	4002760 <__alt_data_end+0xfc002760>
 400290c:	00c15504 	movi	r3,1364
 4002910:	19400536 	bltu	r3,r5,4002928 <_free_r+0x2f0>
 4002914:	100ad4ba 	srli	r5,r2,18
 4002918:	28c01f44 	addi	r3,r5,125
 400291c:	18c7883a 	add	r3,r3,r3
 4002920:	29401f04 	addi	r5,r5,124
 4002924:	003f8e06 	br	4002760 <__alt_data_end+0xfc002760>
 4002928:	00c03f84 	movi	r3,254
 400292c:	01401f84 	movi	r5,126
 4002930:	003f8b06 	br	4002760 <__alt_data_end+0xfc002760>
 4002934:	10c00054 	ori	r3,r2,1
 4002938:	30c00115 	stw	r3,4(r6)
 400293c:	308d883a 	add	r6,r6,r2
 4002940:	30800015 	stw	r2,0(r6)
 4002944:	003f7806 	br	4002728 <__alt_data_end+0xfc002728>

04002948 <_fseek_r>:
 4002948:	40029681 	jmpi	4002968 <_fseeko_r>

0400294c <fseek>:
 400294c:	008100b4 	movhi	r2,1026
 4002950:	10a8dd04 	addi	r2,r2,-23692
 4002954:	300f883a 	mov	r7,r6
 4002958:	280d883a 	mov	r6,r5
 400295c:	200b883a 	mov	r5,r4
 4002960:	11000017 	ldw	r4,0(r2)
 4002964:	40029681 	jmpi	4002968 <_fseeko_r>

04002968 <_fseeko_r>:
 4002968:	deffe804 	addi	sp,sp,-96
 400296c:	dd401415 	stw	r21,80(sp)
 4002970:	dc801115 	stw	r18,68(sp)
 4002974:	dc401015 	stw	r17,64(sp)
 4002978:	dc000f15 	stw	r16,60(sp)
 400297c:	dfc01715 	stw	ra,92(sp)
 4002980:	ddc01615 	stw	r23,88(sp)
 4002984:	dd801515 	stw	r22,84(sp)
 4002988:	dd001315 	stw	r20,76(sp)
 400298c:	dcc01215 	stw	r19,72(sp)
 4002990:	2023883a 	mov	r17,r4
 4002994:	2821883a 	mov	r16,r5
 4002998:	302b883a 	mov	r21,r6
 400299c:	3825883a 	mov	r18,r7
 40029a0:	20000226 	beq	r4,zero,40029ac <_fseeko_r+0x44>
 40029a4:	20800e17 	ldw	r2,56(r4)
 40029a8:	10005a26 	beq	r2,zero,4002b14 <_fseeko_r+0x1ac>
 40029ac:	8080030b 	ldhu	r2,12(r16)
 40029b0:	00c04204 	movi	r3,264
 40029b4:	1080420c 	andi	r2,r2,264
 40029b8:	10c05b26 	beq	r2,r3,4002b28 <_fseeko_r+0x1c0>
 40029bc:	85000a17 	ldw	r20,40(r16)
 40029c0:	a000f626 	beq	r20,zero,4002d9c <_fseeko_r+0x434>
 40029c4:	00800044 	movi	r2,1
 40029c8:	90803e26 	beq	r18,r2,4002ac4 <_fseeko_r+0x15c>
 40029cc:	00800084 	movi	r2,2
 40029d0:	90801026 	beq	r18,r2,4002a14 <_fseeko_r+0xac>
 40029d4:	90000f26 	beq	r18,zero,4002a14 <_fseeko_r+0xac>
 40029d8:	00800584 	movi	r2,22
 40029dc:	88800015 	stw	r2,0(r17)
 40029e0:	04ffffc4 	movi	r19,-1
 40029e4:	9805883a 	mov	r2,r19
 40029e8:	dfc01717 	ldw	ra,92(sp)
 40029ec:	ddc01617 	ldw	r23,88(sp)
 40029f0:	dd801517 	ldw	r22,84(sp)
 40029f4:	dd401417 	ldw	r21,80(sp)
 40029f8:	dd001317 	ldw	r20,76(sp)
 40029fc:	dcc01217 	ldw	r19,72(sp)
 4002a00:	dc801117 	ldw	r18,68(sp)
 4002a04:	dc401017 	ldw	r17,64(sp)
 4002a08:	dc000f17 	ldw	r16,60(sp)
 4002a0c:	dec01804 	addi	sp,sp,96
 4002a10:	f800283a 	ret
 4002a14:	80800417 	ldw	r2,16(r16)
 4002a18:	002f883a 	mov	r23,zero
 4002a1c:	0027883a 	mov	r19,zero
 4002a20:	1000cb26 	beq	r2,zero,4002d50 <_fseeko_r+0x3e8>
 4002a24:	8080030b 	ldhu	r2,12(r16)
 4002a28:	10c2068c 	andi	r3,r2,2074
 4002a2c:	1800071e 	bne	r3,zero,4002a4c <_fseeko_r+0xe4>
 4002a30:	10c1000c 	andi	r3,r2,1024
 4002a34:	1800451e 	bne	r3,zero,4002b4c <_fseeko_r+0x1e4>
 4002a38:	00c10034 	movhi	r3,1024
 4002a3c:	18d0d604 	addi	r3,r3,17240
 4002a40:	a0c0b726 	beq	r20,r3,4002d20 <_fseeko_r+0x3b8>
 4002a44:	10820014 	ori	r2,r2,2048
 4002a48:	8080030d 	sth	r2,12(r16)
 4002a4c:	800b883a 	mov	r5,r16
 4002a50:	8809883a 	mov	r4,r17
 4002a54:	4001d5c0 	call	4001d5c <_fflush_r>
 4002a58:	1027883a 	mov	r19,r2
 4002a5c:	103fe01e 	bne	r2,zero,40029e0 <__alt_data_end+0xfc0029e0>
 4002a60:	81400717 	ldw	r5,28(r16)
 4002a64:	900f883a 	mov	r7,r18
 4002a68:	a80d883a 	mov	r6,r21
 4002a6c:	8809883a 	mov	r4,r17
 4002a70:	a03ee83a 	callr	r20
 4002a74:	00ffffc4 	movi	r3,-1
 4002a78:	10ffd926 	beq	r2,r3,40029e0 <__alt_data_end+0xfc0029e0>
 4002a7c:	81400c17 	ldw	r5,48(r16)
 4002a80:	28000526 	beq	r5,zero,4002a98 <_fseeko_r+0x130>
 4002a84:	80801004 	addi	r2,r16,64
 4002a88:	28800226 	beq	r5,r2,4002a94 <_fseeko_r+0x12c>
 4002a8c:	8809883a 	mov	r4,r17
 4002a90:	40026380 	call	4002638 <_free_r>
 4002a94:	80000c15 	stw	zero,48(r16)
 4002a98:	8080030b 	ldhu	r2,12(r16)
 4002a9c:	80c00417 	ldw	r3,16(r16)
 4002aa0:	80000115 	stw	zero,4(r16)
 4002aa4:	10bdf7cc 	andi	r2,r2,63455
 4002aa8:	80c00015 	stw	r3,0(r16)
 4002aac:	8080030d 	sth	r2,12(r16)
 4002ab0:	01800204 	movi	r6,8
 4002ab4:	000b883a 	mov	r5,zero
 4002ab8:	81001704 	addi	r4,r16,92
 4002abc:	4003cec0 	call	4003cec <memset>
 4002ac0:	003fc806 	br	40029e4 <__alt_data_end+0xfc0029e4>
 4002ac4:	800b883a 	mov	r5,r16
 4002ac8:	8809883a 	mov	r4,r17
 4002acc:	4001d5c0 	call	4001d5c <_fflush_r>
 4002ad0:	8080030b 	ldhu	r2,12(r16)
 4002ad4:	10c4000c 	andi	r3,r2,4096
 4002ad8:	18008726 	beq	r3,zero,4002cf8 <_fseeko_r+0x390>
 4002adc:	84c01417 	ldw	r19,80(r16)
 4002ae0:	10c0010c 	andi	r3,r2,4
 4002ae4:	1800431e 	bne	r3,zero,4002bf4 <_fseeko_r+0x28c>
 4002ae8:	1080020c 	andi	r2,r2,8
 4002aec:	10008026 	beq	r2,zero,4002cf0 <_fseeko_r+0x388>
 4002af0:	80c00017 	ldw	r3,0(r16)
 4002af4:	80800417 	ldw	r2,16(r16)
 4002af8:	18000226 	beq	r3,zero,4002b04 <_fseeko_r+0x19c>
 4002afc:	1887c83a 	sub	r3,r3,r2
 4002b00:	98e7883a 	add	r19,r19,r3
 4002b04:	aceb883a 	add	r21,r21,r19
 4002b08:	05c00044 	movi	r23,1
 4002b0c:	0025883a 	mov	r18,zero
 4002b10:	003fc306 	br	4002a20 <__alt_data_end+0xfc002a20>
 4002b14:	40021480 	call	4002148 <__sinit>
 4002b18:	8080030b 	ldhu	r2,12(r16)
 4002b1c:	00c04204 	movi	r3,264
 4002b20:	1080420c 	andi	r2,r2,264
 4002b24:	10ffa51e 	bne	r2,r3,40029bc <__alt_data_end+0xfc0029bc>
 4002b28:	800b883a 	mov	r5,r16
 4002b2c:	8809883a 	mov	r4,r17
 4002b30:	4001d5c0 	call	4001d5c <_fflush_r>
 4002b34:	003fa106 	br	40029bc <__alt_data_end+0xfc0029bc>
 4002b38:	8080030b 	ldhu	r2,12(r16)
 4002b3c:	00c10004 	movi	r3,1024
 4002b40:	80c01315 	stw	r3,76(r16)
 4002b44:	10c4b03a 	or	r2,r2,r3
 4002b48:	8080030d 	sth	r2,12(r16)
 4002b4c:	9000311e 	bne	r18,zero,4002c14 <_fseeko_r+0x2ac>
 4002b50:	a82d883a 	mov	r22,r21
 4002b54:	b800371e 	bne	r23,zero,4002c34 <_fseeko_r+0x2cc>
 4002b58:	8080030b 	ldhu	r2,12(r16)
 4002b5c:	1084000c 	andi	r2,r2,4096
 4002b60:	10007f26 	beq	r2,zero,4002d60 <_fseeko_r+0x3f8>
 4002b64:	80801417 	ldw	r2,80(r16)
 4002b68:	81800117 	ldw	r6,4(r16)
 4002b6c:	81400c17 	ldw	r5,48(r16)
 4002b70:	11a7c83a 	sub	r19,r2,r6
 4002b74:	28008226 	beq	r5,zero,4002d80 <_fseeko_r+0x418>
 4002b78:	81c00f17 	ldw	r7,60(r16)
 4002b7c:	99e7c83a 	sub	r19,r19,r7
 4002b80:	81000e17 	ldw	r4,56(r16)
 4002b84:	80800417 	ldw	r2,16(r16)
 4002b88:	99a7883a 	add	r19,r19,r6
 4002b8c:	2087c83a 	sub	r3,r4,r2
 4002b90:	98e7c83a 	sub	r19,r19,r3
 4002b94:	38c7883a 	add	r3,r7,r3
 4002b98:	b4c02b16 	blt	r22,r19,4002c48 <_fseeko_r+0x2e0>
 4002b9c:	98c9883a 	add	r4,r19,r3
 4002ba0:	b100292e 	bgeu	r22,r4,4002c48 <_fseeko_r+0x2e0>
 4002ba4:	b4e7c83a 	sub	r19,r22,r19
 4002ba8:	14c5883a 	add	r2,r2,r19
 4002bac:	1ce7c83a 	sub	r19,r3,r19
 4002bb0:	80800015 	stw	r2,0(r16)
 4002bb4:	84c00115 	stw	r19,4(r16)
 4002bb8:	28000526 	beq	r5,zero,4002bd0 <_fseeko_r+0x268>
 4002bbc:	80801004 	addi	r2,r16,64
 4002bc0:	28800226 	beq	r5,r2,4002bcc <_fseeko_r+0x264>
 4002bc4:	8809883a 	mov	r4,r17
 4002bc8:	40026380 	call	4002638 <_free_r>
 4002bcc:	80000c15 	stw	zero,48(r16)
 4002bd0:	8080030b 	ldhu	r2,12(r16)
 4002bd4:	01800204 	movi	r6,8
 4002bd8:	000b883a 	mov	r5,zero
 4002bdc:	10bff7cc 	andi	r2,r2,65503
 4002be0:	8080030d 	sth	r2,12(r16)
 4002be4:	81001704 	addi	r4,r16,92
 4002be8:	4003cec0 	call	4003cec <memset>
 4002bec:	0027883a 	mov	r19,zero
 4002bf0:	003f7c06 	br	40029e4 <__alt_data_end+0xfc0029e4>
 4002bf4:	80c00117 	ldw	r3,4(r16)
 4002bf8:	80800c17 	ldw	r2,48(r16)
 4002bfc:	98e7c83a 	sub	r19,r19,r3
 4002c00:	10003b26 	beq	r2,zero,4002cf0 <_fseeko_r+0x388>
 4002c04:	80c00f17 	ldw	r3,60(r16)
 4002c08:	80800417 	ldw	r2,16(r16)
 4002c0c:	98e7c83a 	sub	r19,r19,r3
 4002c10:	003fbc06 	br	4002b04 <__alt_data_end+0xfc002b04>
 4002c14:	8140038f 	ldh	r5,14(r16)
 4002c18:	d80d883a 	mov	r6,sp
 4002c1c:	8809883a 	mov	r4,r17
 4002c20:	4002dc80 	call	4002dc8 <_fstat_r>
 4002c24:	103f891e 	bne	r2,zero,4002a4c <__alt_data_end+0xfc002a4c>
 4002c28:	dd800417 	ldw	r22,16(sp)
 4002c2c:	adad883a 	add	r22,r21,r22
 4002c30:	b83fc926 	beq	r23,zero,4002b58 <__alt_data_end+0xfc002b58>
 4002c34:	81400c17 	ldw	r5,48(r16)
 4002c38:	81800117 	ldw	r6,4(r16)
 4002c3c:	28005026 	beq	r5,zero,4002d80 <_fseeko_r+0x418>
 4002c40:	81c00f17 	ldw	r7,60(r16)
 4002c44:	003fce06 	br	4002b80 <__alt_data_end+0xfc002b80>
 4002c48:	84c01317 	ldw	r19,76(r16)
 4002c4c:	81400717 	ldw	r5,28(r16)
 4002c50:	000f883a 	mov	r7,zero
 4002c54:	04e7c83a 	sub	r19,zero,r19
 4002c58:	9da6703a 	and	r19,r19,r22
 4002c5c:	980d883a 	mov	r6,r19
 4002c60:	8809883a 	mov	r4,r17
 4002c64:	a03ee83a 	callr	r20
 4002c68:	00ffffc4 	movi	r3,-1
 4002c6c:	10ff7726 	beq	r2,r3,4002a4c <__alt_data_end+0xfc002a4c>
 4002c70:	80800417 	ldw	r2,16(r16)
 4002c74:	81400c17 	ldw	r5,48(r16)
 4002c78:	80000115 	stw	zero,4(r16)
 4002c7c:	80800015 	stw	r2,0(r16)
 4002c80:	28000526 	beq	r5,zero,4002c98 <_fseeko_r+0x330>
 4002c84:	80801004 	addi	r2,r16,64
 4002c88:	28800226 	beq	r5,r2,4002c94 <_fseeko_r+0x32c>
 4002c8c:	8809883a 	mov	r4,r17
 4002c90:	40026380 	call	4002638 <_free_r>
 4002c94:	80000c15 	stw	zero,48(r16)
 4002c98:	8080030b 	ldhu	r2,12(r16)
 4002c9c:	b4e7c83a 	sub	r19,r22,r19
 4002ca0:	10bff7cc 	andi	r2,r2,65503
 4002ca4:	8080030d 	sth	r2,12(r16)
 4002ca8:	98000b26 	beq	r19,zero,4002cd8 <_fseeko_r+0x370>
 4002cac:	800b883a 	mov	r5,r16
 4002cb0:	8809883a 	mov	r4,r17
 4002cb4:	4003f640 	call	4003f64 <__srefill_r>
 4002cb8:	103f641e 	bne	r2,zero,4002a4c <__alt_data_end+0xfc002a4c>
 4002cbc:	80800117 	ldw	r2,4(r16)
 4002cc0:	14ff6236 	bltu	r2,r19,4002a4c <__alt_data_end+0xfc002a4c>
 4002cc4:	80c00017 	ldw	r3,0(r16)
 4002cc8:	14c5c83a 	sub	r2,r2,r19
 4002ccc:	80800115 	stw	r2,4(r16)
 4002cd0:	1ce7883a 	add	r19,r3,r19
 4002cd4:	84c00015 	stw	r19,0(r16)
 4002cd8:	01800204 	movi	r6,8
 4002cdc:	000b883a 	mov	r5,zero
 4002ce0:	81001704 	addi	r4,r16,92
 4002ce4:	4003cec0 	call	4003cec <memset>
 4002ce8:	0027883a 	mov	r19,zero
 4002cec:	003f3d06 	br	40029e4 <__alt_data_end+0xfc0029e4>
 4002cf0:	80800417 	ldw	r2,16(r16)
 4002cf4:	003f8306 	br	4002b04 <__alt_data_end+0xfc002b04>
 4002cf8:	81400717 	ldw	r5,28(r16)
 4002cfc:	900f883a 	mov	r7,r18
 4002d00:	000d883a 	mov	r6,zero
 4002d04:	8809883a 	mov	r4,r17
 4002d08:	a03ee83a 	callr	r20
 4002d0c:	1027883a 	mov	r19,r2
 4002d10:	00bfffc4 	movi	r2,-1
 4002d14:	98bf3226 	beq	r19,r2,40029e0 <__alt_data_end+0xfc0029e0>
 4002d18:	8080030b 	ldhu	r2,12(r16)
 4002d1c:	003f7006 	br	4002ae0 <__alt_data_end+0xfc002ae0>
 4002d20:	8140038f 	ldh	r5,14(r16)
 4002d24:	283f4716 	blt	r5,zero,4002a44 <__alt_data_end+0xfc002a44>
 4002d28:	d80d883a 	mov	r6,sp
 4002d2c:	8809883a 	mov	r4,r17
 4002d30:	4002dc80 	call	4002dc8 <_fstat_r>
 4002d34:	1000041e 	bne	r2,zero,4002d48 <_fseeko_r+0x3e0>
 4002d38:	d8800117 	ldw	r2,4(sp)
 4002d3c:	00e00014 	movui	r3,32768
 4002d40:	10bc000c 	andi	r2,r2,61440
 4002d44:	10ff7c26 	beq	r2,r3,4002b38 <__alt_data_end+0xfc002b38>
 4002d48:	8080030b 	ldhu	r2,12(r16)
 4002d4c:	003f3d06 	br	4002a44 <__alt_data_end+0xfc002a44>
 4002d50:	800b883a 	mov	r5,r16
 4002d54:	8809883a 	mov	r4,r17
 4002d58:	40031b40 	call	40031b4 <__smakebuf_r>
 4002d5c:	003f3106 	br	4002a24 <__alt_data_end+0xfc002a24>
 4002d60:	81400717 	ldw	r5,28(r16)
 4002d64:	01c00044 	movi	r7,1
 4002d68:	000d883a 	mov	r6,zero
 4002d6c:	8809883a 	mov	r4,r17
 4002d70:	a03ee83a 	callr	r20
 4002d74:	00ffffc4 	movi	r3,-1
 4002d78:	10ff7b1e 	bne	r2,r3,4002b68 <__alt_data_end+0xfc002b68>
 4002d7c:	003f3306 	br	4002a4c <__alt_data_end+0xfc002a4c>
 4002d80:	80c00017 	ldw	r3,0(r16)
 4002d84:	80800417 	ldw	r2,16(r16)
 4002d88:	000b883a 	mov	r5,zero
 4002d8c:	1887c83a 	sub	r3,r3,r2
 4002d90:	98e7c83a 	sub	r19,r19,r3
 4002d94:	30c7883a 	add	r3,r6,r3
 4002d98:	003f7f06 	br	4002b98 <__alt_data_end+0xfc002b98>
 4002d9c:	00800744 	movi	r2,29
 4002da0:	88800015 	stw	r2,0(r17)
 4002da4:	04ffffc4 	movi	r19,-1
 4002da8:	003f0e06 	br	40029e4 <__alt_data_end+0xfc0029e4>

04002dac <fseeko>:
 4002dac:	008100b4 	movhi	r2,1026
 4002db0:	10a8dd04 	addi	r2,r2,-23692
 4002db4:	300f883a 	mov	r7,r6
 4002db8:	280d883a 	mov	r6,r5
 4002dbc:	200b883a 	mov	r5,r4
 4002dc0:	11000017 	ldw	r4,0(r2)
 4002dc4:	40029681 	jmpi	4002968 <_fseeko_r>

04002dc8 <_fstat_r>:
 4002dc8:	defffd04 	addi	sp,sp,-12
 4002dcc:	2805883a 	mov	r2,r5
 4002dd0:	dc000015 	stw	r16,0(sp)
 4002dd4:	040100b4 	movhi	r16,1026
 4002dd8:	dc400115 	stw	r17,4(sp)
 4002ddc:	84303904 	addi	r16,r16,-16156
 4002de0:	2023883a 	mov	r17,r4
 4002de4:	300b883a 	mov	r5,r6
 4002de8:	1009883a 	mov	r4,r2
 4002dec:	dfc00215 	stw	ra,8(sp)
 4002df0:	80000015 	stw	zero,0(r16)
 4002df4:	40145340 	call	4014534 <fstat>
 4002df8:	00ffffc4 	movi	r3,-1
 4002dfc:	10c00526 	beq	r2,r3,4002e14 <_fstat_r+0x4c>
 4002e00:	dfc00217 	ldw	ra,8(sp)
 4002e04:	dc400117 	ldw	r17,4(sp)
 4002e08:	dc000017 	ldw	r16,0(sp)
 4002e0c:	dec00304 	addi	sp,sp,12
 4002e10:	f800283a 	ret
 4002e14:	80c00017 	ldw	r3,0(r16)
 4002e18:	183ff926 	beq	r3,zero,4002e00 <__alt_data_end+0xfc002e00>
 4002e1c:	88c00015 	stw	r3,0(r17)
 4002e20:	003ff706 	br	4002e00 <__alt_data_end+0xfc002e00>

04002e24 <_fwalk>:
 4002e24:	defff704 	addi	sp,sp,-36
 4002e28:	dd000415 	stw	r20,16(sp)
 4002e2c:	dfc00815 	stw	ra,32(sp)
 4002e30:	ddc00715 	stw	r23,28(sp)
 4002e34:	dd800615 	stw	r22,24(sp)
 4002e38:	dd400515 	stw	r21,20(sp)
 4002e3c:	dcc00315 	stw	r19,12(sp)
 4002e40:	dc800215 	stw	r18,8(sp)
 4002e44:	dc400115 	stw	r17,4(sp)
 4002e48:	dc000015 	stw	r16,0(sp)
 4002e4c:	2500b804 	addi	r20,r4,736
 4002e50:	a0002326 	beq	r20,zero,4002ee0 <_fwalk+0xbc>
 4002e54:	282b883a 	mov	r21,r5
 4002e58:	002f883a 	mov	r23,zero
 4002e5c:	05800044 	movi	r22,1
 4002e60:	04ffffc4 	movi	r19,-1
 4002e64:	a4400117 	ldw	r17,4(r20)
 4002e68:	a4800217 	ldw	r18,8(r20)
 4002e6c:	8c7fffc4 	addi	r17,r17,-1
 4002e70:	88000d16 	blt	r17,zero,4002ea8 <_fwalk+0x84>
 4002e74:	94000304 	addi	r16,r18,12
 4002e78:	94800384 	addi	r18,r18,14
 4002e7c:	8080000b 	ldhu	r2,0(r16)
 4002e80:	8c7fffc4 	addi	r17,r17,-1
 4002e84:	813ffd04 	addi	r4,r16,-12
 4002e88:	b080042e 	bgeu	r22,r2,4002e9c <_fwalk+0x78>
 4002e8c:	9080000f 	ldh	r2,0(r18)
 4002e90:	14c00226 	beq	r2,r19,4002e9c <_fwalk+0x78>
 4002e94:	a83ee83a 	callr	r21
 4002e98:	b8aeb03a 	or	r23,r23,r2
 4002e9c:	84001a04 	addi	r16,r16,104
 4002ea0:	94801a04 	addi	r18,r18,104
 4002ea4:	8cfff51e 	bne	r17,r19,4002e7c <__alt_data_end+0xfc002e7c>
 4002ea8:	a5000017 	ldw	r20,0(r20)
 4002eac:	a03fed1e 	bne	r20,zero,4002e64 <__alt_data_end+0xfc002e64>
 4002eb0:	b805883a 	mov	r2,r23
 4002eb4:	dfc00817 	ldw	ra,32(sp)
 4002eb8:	ddc00717 	ldw	r23,28(sp)
 4002ebc:	dd800617 	ldw	r22,24(sp)
 4002ec0:	dd400517 	ldw	r21,20(sp)
 4002ec4:	dd000417 	ldw	r20,16(sp)
 4002ec8:	dcc00317 	ldw	r19,12(sp)
 4002ecc:	dc800217 	ldw	r18,8(sp)
 4002ed0:	dc400117 	ldw	r17,4(sp)
 4002ed4:	dc000017 	ldw	r16,0(sp)
 4002ed8:	dec00904 	addi	sp,sp,36
 4002edc:	f800283a 	ret
 4002ee0:	002f883a 	mov	r23,zero
 4002ee4:	003ff206 	br	4002eb0 <__alt_data_end+0xfc002eb0>

04002ee8 <_fwalk_reent>:
 4002ee8:	defff704 	addi	sp,sp,-36
 4002eec:	dd000415 	stw	r20,16(sp)
 4002ef0:	dfc00815 	stw	ra,32(sp)
 4002ef4:	ddc00715 	stw	r23,28(sp)
 4002ef8:	dd800615 	stw	r22,24(sp)
 4002efc:	dd400515 	stw	r21,20(sp)
 4002f00:	dcc00315 	stw	r19,12(sp)
 4002f04:	dc800215 	stw	r18,8(sp)
 4002f08:	dc400115 	stw	r17,4(sp)
 4002f0c:	dc000015 	stw	r16,0(sp)
 4002f10:	2500b804 	addi	r20,r4,736
 4002f14:	a0002326 	beq	r20,zero,4002fa4 <_fwalk_reent+0xbc>
 4002f18:	282b883a 	mov	r21,r5
 4002f1c:	2027883a 	mov	r19,r4
 4002f20:	002f883a 	mov	r23,zero
 4002f24:	05800044 	movi	r22,1
 4002f28:	04bfffc4 	movi	r18,-1
 4002f2c:	a4400117 	ldw	r17,4(r20)
 4002f30:	a4000217 	ldw	r16,8(r20)
 4002f34:	8c7fffc4 	addi	r17,r17,-1
 4002f38:	88000c16 	blt	r17,zero,4002f6c <_fwalk_reent+0x84>
 4002f3c:	84000304 	addi	r16,r16,12
 4002f40:	8080000b 	ldhu	r2,0(r16)
 4002f44:	8c7fffc4 	addi	r17,r17,-1
 4002f48:	817ffd04 	addi	r5,r16,-12
 4002f4c:	b080052e 	bgeu	r22,r2,4002f64 <_fwalk_reent+0x7c>
 4002f50:	8080008f 	ldh	r2,2(r16)
 4002f54:	9809883a 	mov	r4,r19
 4002f58:	14800226 	beq	r2,r18,4002f64 <_fwalk_reent+0x7c>
 4002f5c:	a83ee83a 	callr	r21
 4002f60:	b8aeb03a 	or	r23,r23,r2
 4002f64:	84001a04 	addi	r16,r16,104
 4002f68:	8cbff51e 	bne	r17,r18,4002f40 <__alt_data_end+0xfc002f40>
 4002f6c:	a5000017 	ldw	r20,0(r20)
 4002f70:	a03fee1e 	bne	r20,zero,4002f2c <__alt_data_end+0xfc002f2c>
 4002f74:	b805883a 	mov	r2,r23
 4002f78:	dfc00817 	ldw	ra,32(sp)
 4002f7c:	ddc00717 	ldw	r23,28(sp)
 4002f80:	dd800617 	ldw	r22,24(sp)
 4002f84:	dd400517 	ldw	r21,20(sp)
 4002f88:	dd000417 	ldw	r20,16(sp)
 4002f8c:	dcc00317 	ldw	r19,12(sp)
 4002f90:	dc800217 	ldw	r18,8(sp)
 4002f94:	dc400117 	ldw	r17,4(sp)
 4002f98:	dc000017 	ldw	r16,0(sp)
 4002f9c:	dec00904 	addi	sp,sp,36
 4002fa0:	f800283a 	ret
 4002fa4:	002f883a 	mov	r23,zero
 4002fa8:	003ff206 	br	4002f74 <__alt_data_end+0xfc002f74>

04002fac <_fwrite_r>:
 4002fac:	defff504 	addi	sp,sp,-44
 4002fb0:	dc400715 	stw	r17,28(sp)
 4002fb4:	d9400315 	stw	r5,12(sp)
 4002fb8:	2023883a 	mov	r17,r4
 4002fbc:	300b883a 	mov	r5,r6
 4002fc0:	3809883a 	mov	r4,r7
 4002fc4:	dcc00915 	stw	r19,36(sp)
 4002fc8:	dc800815 	stw	r18,32(sp)
 4002fcc:	dc000615 	stw	r16,24(sp)
 4002fd0:	dfc00a15 	stw	ra,40(sp)
 4002fd4:	3027883a 	mov	r19,r6
 4002fd8:	3821883a 	mov	r16,r7
 4002fdc:	4001a140 	call	4001a14 <__mulsi3>
 4002fe0:	1025883a 	mov	r18,r2
 4002fe4:	d8800415 	stw	r2,16(sp)
 4002fe8:	d8800215 	stw	r2,8(sp)
 4002fec:	d8800304 	addi	r2,sp,12
 4002ff0:	d8800015 	stw	r2,0(sp)
 4002ff4:	00800044 	movi	r2,1
 4002ff8:	d8800115 	stw	r2,4(sp)
 4002ffc:	d9400b17 	ldw	r5,44(sp)
 4003000:	88000226 	beq	r17,zero,400300c <_fwrite_r+0x60>
 4003004:	88800e17 	ldw	r2,56(r17)
 4003008:	10001a26 	beq	r2,zero,4003074 <_fwrite_r+0xc8>
 400300c:	2880030b 	ldhu	r2,12(r5)
 4003010:	10c8000c 	andi	r3,r2,8192
 4003014:	1800061e 	bne	r3,zero,4003030 <_fwrite_r+0x84>
 4003018:	29001917 	ldw	r4,100(r5)
 400301c:	00f7ffc4 	movi	r3,-8193
 4003020:	10880014 	ori	r2,r2,8192
 4003024:	20c6703a 	and	r3,r4,r3
 4003028:	2880030d 	sth	r2,12(r5)
 400302c:	28c01915 	stw	r3,100(r5)
 4003030:	d80d883a 	mov	r6,sp
 4003034:	8809883a 	mov	r4,r17
 4003038:	40063a80 	call	40063a8 <__sfvwrite_r>
 400303c:	10000b26 	beq	r2,zero,400306c <_fwrite_r+0xc0>
 4003040:	d9000217 	ldw	r4,8(sp)
 4003044:	980b883a 	mov	r5,r19
 4003048:	9109c83a 	sub	r4,r18,r4
 400304c:	40019580 	call	4001958 <__udivsi3>
 4003050:	dfc00a17 	ldw	ra,40(sp)
 4003054:	dcc00917 	ldw	r19,36(sp)
 4003058:	dc800817 	ldw	r18,32(sp)
 400305c:	dc400717 	ldw	r17,28(sp)
 4003060:	dc000617 	ldw	r16,24(sp)
 4003064:	dec00b04 	addi	sp,sp,44
 4003068:	f800283a 	ret
 400306c:	8005883a 	mov	r2,r16
 4003070:	003ff706 	br	4003050 <__alt_data_end+0xfc003050>
 4003074:	8809883a 	mov	r4,r17
 4003078:	d9400515 	stw	r5,20(sp)
 400307c:	40021480 	call	4002148 <__sinit>
 4003080:	d9400517 	ldw	r5,20(sp)
 4003084:	003fe106 	br	400300c <__alt_data_end+0xfc00300c>

04003088 <fwrite>:
 4003088:	defffe04 	addi	sp,sp,-8
 400308c:	008100b4 	movhi	r2,1026
 4003090:	d9c00015 	stw	r7,0(sp)
 4003094:	10a8dd04 	addi	r2,r2,-23692
 4003098:	300f883a 	mov	r7,r6
 400309c:	280d883a 	mov	r6,r5
 40030a0:	200b883a 	mov	r5,r4
 40030a4:	11000017 	ldw	r4,0(r2)
 40030a8:	dfc00115 	stw	ra,4(sp)
 40030ac:	4002fac0 	call	4002fac <_fwrite_r>
 40030b0:	dfc00117 	ldw	ra,4(sp)
 40030b4:	dec00204 	addi	sp,sp,8
 40030b8:	f800283a 	ret

040030bc <_getc_r>:
 40030bc:	defffd04 	addi	sp,sp,-12
 40030c0:	dc000115 	stw	r16,4(sp)
 40030c4:	dfc00215 	stw	ra,8(sp)
 40030c8:	2021883a 	mov	r16,r4
 40030cc:	20000226 	beq	r4,zero,40030d8 <_getc_r+0x1c>
 40030d0:	20800e17 	ldw	r2,56(r4)
 40030d4:	10000c26 	beq	r2,zero,4003108 <_getc_r+0x4c>
 40030d8:	28800117 	ldw	r2,4(r5)
 40030dc:	10bfffc4 	addi	r2,r2,-1
 40030e0:	28800115 	stw	r2,4(r5)
 40030e4:	10000c16 	blt	r2,zero,4003118 <_getc_r+0x5c>
 40030e8:	28800017 	ldw	r2,0(r5)
 40030ec:	10c00044 	addi	r3,r2,1
 40030f0:	28c00015 	stw	r3,0(r5)
 40030f4:	10800003 	ldbu	r2,0(r2)
 40030f8:	dfc00217 	ldw	ra,8(sp)
 40030fc:	dc000117 	ldw	r16,4(sp)
 4003100:	dec00304 	addi	sp,sp,12
 4003104:	f800283a 	ret
 4003108:	d9400015 	stw	r5,0(sp)
 400310c:	40021480 	call	4002148 <__sinit>
 4003110:	d9400017 	ldw	r5,0(sp)
 4003114:	003ff006 	br	40030d8 <__alt_data_end+0xfc0030d8>
 4003118:	8009883a 	mov	r4,r16
 400311c:	dfc00217 	ldw	ra,8(sp)
 4003120:	dc000117 	ldw	r16,4(sp)
 4003124:	dec00304 	addi	sp,sp,12
 4003128:	40041381 	jmpi	4004138 <__srget_r>

0400312c <getc>:
 400312c:	008100b4 	movhi	r2,1026
 4003130:	defffd04 	addi	sp,sp,-12
 4003134:	10a8dd04 	addi	r2,r2,-23692
 4003138:	dc400115 	stw	r17,4(sp)
 400313c:	14400017 	ldw	r17,0(r2)
 4003140:	dc000015 	stw	r16,0(sp)
 4003144:	dfc00215 	stw	ra,8(sp)
 4003148:	2021883a 	mov	r16,r4
 400314c:	88000226 	beq	r17,zero,4003158 <getc+0x2c>
 4003150:	88800e17 	ldw	r2,56(r17)
 4003154:	10000d26 	beq	r2,zero,400318c <getc+0x60>
 4003158:	80800117 	ldw	r2,4(r16)
 400315c:	10bfffc4 	addi	r2,r2,-1
 4003160:	80800115 	stw	r2,4(r16)
 4003164:	10000c16 	blt	r2,zero,4003198 <getc+0x6c>
 4003168:	80800017 	ldw	r2,0(r16)
 400316c:	10c00044 	addi	r3,r2,1
 4003170:	80c00015 	stw	r3,0(r16)
 4003174:	10800003 	ldbu	r2,0(r2)
 4003178:	dfc00217 	ldw	ra,8(sp)
 400317c:	dc400117 	ldw	r17,4(sp)
 4003180:	dc000017 	ldw	r16,0(sp)
 4003184:	dec00304 	addi	sp,sp,12
 4003188:	f800283a 	ret
 400318c:	8809883a 	mov	r4,r17
 4003190:	40021480 	call	4002148 <__sinit>
 4003194:	003ff006 	br	4003158 <__alt_data_end+0xfc003158>
 4003198:	800b883a 	mov	r5,r16
 400319c:	8809883a 	mov	r4,r17
 40031a0:	dfc00217 	ldw	ra,8(sp)
 40031a4:	dc400117 	ldw	r17,4(sp)
 40031a8:	dc000017 	ldw	r16,0(sp)
 40031ac:	dec00304 	addi	sp,sp,12
 40031b0:	40041381 	jmpi	4004138 <__srget_r>

040031b4 <__smakebuf_r>:
 40031b4:	2880030b 	ldhu	r2,12(r5)
 40031b8:	10c0008c 	andi	r3,r2,2
 40031bc:	1800411e 	bne	r3,zero,40032c4 <__smakebuf_r+0x110>
 40031c0:	deffec04 	addi	sp,sp,-80
 40031c4:	dc000f15 	stw	r16,60(sp)
 40031c8:	2821883a 	mov	r16,r5
 40031cc:	2940038f 	ldh	r5,14(r5)
 40031d0:	dc401015 	stw	r17,64(sp)
 40031d4:	dfc01315 	stw	ra,76(sp)
 40031d8:	dcc01215 	stw	r19,72(sp)
 40031dc:	dc801115 	stw	r18,68(sp)
 40031e0:	2023883a 	mov	r17,r4
 40031e4:	28001c16 	blt	r5,zero,4003258 <__smakebuf_r+0xa4>
 40031e8:	d80d883a 	mov	r6,sp
 40031ec:	4002dc80 	call	4002dc8 <_fstat_r>
 40031f0:	10001816 	blt	r2,zero,4003254 <__smakebuf_r+0xa0>
 40031f4:	d8800117 	ldw	r2,4(sp)
 40031f8:	00e00014 	movui	r3,32768
 40031fc:	10bc000c 	andi	r2,r2,61440
 4003200:	14c80020 	cmpeqi	r19,r2,8192
 4003204:	10c03726 	beq	r2,r3,40032e4 <__smakebuf_r+0x130>
 4003208:	80c0030b 	ldhu	r3,12(r16)
 400320c:	18c20014 	ori	r3,r3,2048
 4003210:	80c0030d 	sth	r3,12(r16)
 4003214:	00c80004 	movi	r3,8192
 4003218:	10c0521e 	bne	r2,r3,4003364 <__smakebuf_r+0x1b0>
 400321c:	8140038f 	ldh	r5,14(r16)
 4003220:	8809883a 	mov	r4,r17
 4003224:	40068700 	call	4006870 <_isatty_r>
 4003228:	10004c26 	beq	r2,zero,400335c <__smakebuf_r+0x1a8>
 400322c:	8080030b 	ldhu	r2,12(r16)
 4003230:	80c010c4 	addi	r3,r16,67
 4003234:	80c00015 	stw	r3,0(r16)
 4003238:	10800054 	ori	r2,r2,1
 400323c:	8080030d 	sth	r2,12(r16)
 4003240:	00800044 	movi	r2,1
 4003244:	80c00415 	stw	r3,16(r16)
 4003248:	80800515 	stw	r2,20(r16)
 400324c:	04810004 	movi	r18,1024
 4003250:	00000706 	br	4003270 <__smakebuf_r+0xbc>
 4003254:	8080030b 	ldhu	r2,12(r16)
 4003258:	10c0200c 	andi	r3,r2,128
 400325c:	18001f1e 	bne	r3,zero,40032dc <__smakebuf_r+0x128>
 4003260:	04810004 	movi	r18,1024
 4003264:	10820014 	ori	r2,r2,2048
 4003268:	8080030d 	sth	r2,12(r16)
 400326c:	0027883a 	mov	r19,zero
 4003270:	900b883a 	mov	r5,r18
 4003274:	8809883a 	mov	r4,r17
 4003278:	40033980 	call	4003398 <_malloc_r>
 400327c:	10002c26 	beq	r2,zero,4003330 <__smakebuf_r+0x17c>
 4003280:	80c0030b 	ldhu	r3,12(r16)
 4003284:	01010034 	movhi	r4,1024
 4003288:	21077c04 	addi	r4,r4,7664
 400328c:	89000f15 	stw	r4,60(r17)
 4003290:	18c02014 	ori	r3,r3,128
 4003294:	80c0030d 	sth	r3,12(r16)
 4003298:	80800015 	stw	r2,0(r16)
 400329c:	80800415 	stw	r2,16(r16)
 40032a0:	84800515 	stw	r18,20(r16)
 40032a4:	98001a1e 	bne	r19,zero,4003310 <__smakebuf_r+0x15c>
 40032a8:	dfc01317 	ldw	ra,76(sp)
 40032ac:	dcc01217 	ldw	r19,72(sp)
 40032b0:	dc801117 	ldw	r18,68(sp)
 40032b4:	dc401017 	ldw	r17,64(sp)
 40032b8:	dc000f17 	ldw	r16,60(sp)
 40032bc:	dec01404 	addi	sp,sp,80
 40032c0:	f800283a 	ret
 40032c4:	288010c4 	addi	r2,r5,67
 40032c8:	28800015 	stw	r2,0(r5)
 40032cc:	28800415 	stw	r2,16(r5)
 40032d0:	00800044 	movi	r2,1
 40032d4:	28800515 	stw	r2,20(r5)
 40032d8:	f800283a 	ret
 40032dc:	04801004 	movi	r18,64
 40032e0:	003fe006 	br	4003264 <__alt_data_end+0xfc003264>
 40032e4:	81000a17 	ldw	r4,40(r16)
 40032e8:	00c10034 	movhi	r3,1024
 40032ec:	18d0d604 	addi	r3,r3,17240
 40032f0:	20ffc51e 	bne	r4,r3,4003208 <__alt_data_end+0xfc003208>
 40032f4:	8080030b 	ldhu	r2,12(r16)
 40032f8:	04810004 	movi	r18,1024
 40032fc:	84801315 	stw	r18,76(r16)
 4003300:	1484b03a 	or	r2,r2,r18
 4003304:	8080030d 	sth	r2,12(r16)
 4003308:	0027883a 	mov	r19,zero
 400330c:	003fd806 	br	4003270 <__alt_data_end+0xfc003270>
 4003310:	8140038f 	ldh	r5,14(r16)
 4003314:	8809883a 	mov	r4,r17
 4003318:	40068700 	call	4006870 <_isatty_r>
 400331c:	103fe226 	beq	r2,zero,40032a8 <__alt_data_end+0xfc0032a8>
 4003320:	8080030b 	ldhu	r2,12(r16)
 4003324:	10800054 	ori	r2,r2,1
 4003328:	8080030d 	sth	r2,12(r16)
 400332c:	003fde06 	br	40032a8 <__alt_data_end+0xfc0032a8>
 4003330:	8080030b 	ldhu	r2,12(r16)
 4003334:	10c0800c 	andi	r3,r2,512
 4003338:	183fdb1e 	bne	r3,zero,40032a8 <__alt_data_end+0xfc0032a8>
 400333c:	10800094 	ori	r2,r2,2
 4003340:	80c010c4 	addi	r3,r16,67
 4003344:	8080030d 	sth	r2,12(r16)
 4003348:	00800044 	movi	r2,1
 400334c:	80c00015 	stw	r3,0(r16)
 4003350:	80c00415 	stw	r3,16(r16)
 4003354:	80800515 	stw	r2,20(r16)
 4003358:	003fd306 	br	40032a8 <__alt_data_end+0xfc0032a8>
 400335c:	04810004 	movi	r18,1024
 4003360:	003fc306 	br	4003270 <__alt_data_end+0xfc003270>
 4003364:	0027883a 	mov	r19,zero
 4003368:	04810004 	movi	r18,1024
 400336c:	003fc006 	br	4003270 <__alt_data_end+0xfc003270>

04003370 <malloc>:
 4003370:	008100b4 	movhi	r2,1026
 4003374:	10a8dd04 	addi	r2,r2,-23692
 4003378:	200b883a 	mov	r5,r4
 400337c:	11000017 	ldw	r4,0(r2)
 4003380:	40033981 	jmpi	4003398 <_malloc_r>

04003384 <free>:
 4003384:	008100b4 	movhi	r2,1026
 4003388:	10a8dd04 	addi	r2,r2,-23692
 400338c:	200b883a 	mov	r5,r4
 4003390:	11000017 	ldw	r4,0(r2)
 4003394:	40026381 	jmpi	4002638 <_free_r>

04003398 <_malloc_r>:
 4003398:	defff504 	addi	sp,sp,-44
 400339c:	dc800315 	stw	r18,12(sp)
 40033a0:	dfc00a15 	stw	ra,40(sp)
 40033a4:	df000915 	stw	fp,36(sp)
 40033a8:	ddc00815 	stw	r23,32(sp)
 40033ac:	dd800715 	stw	r22,28(sp)
 40033b0:	dd400615 	stw	r21,24(sp)
 40033b4:	dd000515 	stw	r20,20(sp)
 40033b8:	dcc00415 	stw	r19,16(sp)
 40033bc:	dc400215 	stw	r17,8(sp)
 40033c0:	dc000115 	stw	r16,4(sp)
 40033c4:	288002c4 	addi	r2,r5,11
 40033c8:	00c00584 	movi	r3,22
 40033cc:	2025883a 	mov	r18,r4
 40033d0:	18807f2e 	bgeu	r3,r2,40035d0 <_malloc_r+0x238>
 40033d4:	047ffe04 	movi	r17,-8
 40033d8:	1462703a 	and	r17,r2,r17
 40033dc:	8800a316 	blt	r17,zero,400366c <_malloc_r+0x2d4>
 40033e0:	8940a236 	bltu	r17,r5,400366c <_malloc_r+0x2d4>
 40033e4:	40149540 	call	4014954 <__malloc_lock>
 40033e8:	00807dc4 	movi	r2,503
 40033ec:	1441e92e 	bgeu	r2,r17,4003b94 <_malloc_r+0x7fc>
 40033f0:	8804d27a 	srli	r2,r17,9
 40033f4:	1000a126 	beq	r2,zero,400367c <_malloc_r+0x2e4>
 40033f8:	00c00104 	movi	r3,4
 40033fc:	18811e36 	bltu	r3,r2,4003878 <_malloc_r+0x4e0>
 4003400:	8804d1ba 	srli	r2,r17,6
 4003404:	12000e44 	addi	r8,r2,57
 4003408:	11c00e04 	addi	r7,r2,56
 400340c:	4209883a 	add	r4,r8,r8
 4003410:	04c100b4 	movhi	r19,1026
 4003414:	2109883a 	add	r4,r4,r4
 4003418:	9ce31804 	addi	r19,r19,-29600
 400341c:	2109883a 	add	r4,r4,r4
 4003420:	9909883a 	add	r4,r19,r4
 4003424:	24000117 	ldw	r16,4(r4)
 4003428:	213ffe04 	addi	r4,r4,-8
 400342c:	24009726 	beq	r4,r16,400368c <_malloc_r+0x2f4>
 4003430:	80800117 	ldw	r2,4(r16)
 4003434:	01bfff04 	movi	r6,-4
 4003438:	014003c4 	movi	r5,15
 400343c:	1184703a 	and	r2,r2,r6
 4003440:	1447c83a 	sub	r3,r2,r17
 4003444:	28c00716 	blt	r5,r3,4003464 <_malloc_r+0xcc>
 4003448:	1800920e 	bge	r3,zero,4003694 <_malloc_r+0x2fc>
 400344c:	84000317 	ldw	r16,12(r16)
 4003450:	24008e26 	beq	r4,r16,400368c <_malloc_r+0x2f4>
 4003454:	80800117 	ldw	r2,4(r16)
 4003458:	1184703a 	and	r2,r2,r6
 400345c:	1447c83a 	sub	r3,r2,r17
 4003460:	28fff90e 	bge	r5,r3,4003448 <__alt_data_end+0xfc003448>
 4003464:	3809883a 	mov	r4,r7
 4003468:	018100b4 	movhi	r6,1026
 400346c:	9c000417 	ldw	r16,16(r19)
 4003470:	31a31804 	addi	r6,r6,-29600
 4003474:	32000204 	addi	r8,r6,8
 4003478:	82013426 	beq	r16,r8,400394c <_malloc_r+0x5b4>
 400347c:	80c00117 	ldw	r3,4(r16)
 4003480:	00bfff04 	movi	r2,-4
 4003484:	188e703a 	and	r7,r3,r2
 4003488:	3c45c83a 	sub	r2,r7,r17
 400348c:	00c003c4 	movi	r3,15
 4003490:	18811f16 	blt	r3,r2,4003910 <_malloc_r+0x578>
 4003494:	32000515 	stw	r8,20(r6)
 4003498:	32000415 	stw	r8,16(r6)
 400349c:	10007f0e 	bge	r2,zero,400369c <_malloc_r+0x304>
 40034a0:	00807fc4 	movi	r2,511
 40034a4:	11c0fd36 	bltu	r2,r7,400389c <_malloc_r+0x504>
 40034a8:	3806d0fa 	srli	r3,r7,3
 40034ac:	01c00044 	movi	r7,1
 40034b0:	30800117 	ldw	r2,4(r6)
 40034b4:	19400044 	addi	r5,r3,1
 40034b8:	294b883a 	add	r5,r5,r5
 40034bc:	1807d0ba 	srai	r3,r3,2
 40034c0:	294b883a 	add	r5,r5,r5
 40034c4:	294b883a 	add	r5,r5,r5
 40034c8:	298b883a 	add	r5,r5,r6
 40034cc:	38c6983a 	sll	r3,r7,r3
 40034d0:	29c00017 	ldw	r7,0(r5)
 40034d4:	2a7ffe04 	addi	r9,r5,-8
 40034d8:	1886b03a 	or	r3,r3,r2
 40034dc:	82400315 	stw	r9,12(r16)
 40034e0:	81c00215 	stw	r7,8(r16)
 40034e4:	30c00115 	stw	r3,4(r6)
 40034e8:	2c000015 	stw	r16,0(r5)
 40034ec:	3c000315 	stw	r16,12(r7)
 40034f0:	2005d0ba 	srai	r2,r4,2
 40034f4:	01400044 	movi	r5,1
 40034f8:	288a983a 	sll	r5,r5,r2
 40034fc:	19406f36 	bltu	r3,r5,40036bc <_malloc_r+0x324>
 4003500:	28c4703a 	and	r2,r5,r3
 4003504:	10000a1e 	bne	r2,zero,4003530 <_malloc_r+0x198>
 4003508:	00bfff04 	movi	r2,-4
 400350c:	294b883a 	add	r5,r5,r5
 4003510:	2088703a 	and	r4,r4,r2
 4003514:	28c4703a 	and	r2,r5,r3
 4003518:	21000104 	addi	r4,r4,4
 400351c:	1000041e 	bne	r2,zero,4003530 <_malloc_r+0x198>
 4003520:	294b883a 	add	r5,r5,r5
 4003524:	28c4703a 	and	r2,r5,r3
 4003528:	21000104 	addi	r4,r4,4
 400352c:	103ffc26 	beq	r2,zero,4003520 <__alt_data_end+0xfc003520>
 4003530:	02bfff04 	movi	r10,-4
 4003534:	024003c4 	movi	r9,15
 4003538:	21800044 	addi	r6,r4,1
 400353c:	318d883a 	add	r6,r6,r6
 4003540:	318d883a 	add	r6,r6,r6
 4003544:	318d883a 	add	r6,r6,r6
 4003548:	998d883a 	add	r6,r19,r6
 400354c:	333ffe04 	addi	r12,r6,-8
 4003550:	2017883a 	mov	r11,r4
 4003554:	31800104 	addi	r6,r6,4
 4003558:	34000017 	ldw	r16,0(r6)
 400355c:	31fffd04 	addi	r7,r6,-12
 4003560:	81c0041e 	bne	r16,r7,4003574 <_malloc_r+0x1dc>
 4003564:	0000fb06 	br	4003954 <_malloc_r+0x5bc>
 4003568:	1801030e 	bge	r3,zero,4003978 <_malloc_r+0x5e0>
 400356c:	84000317 	ldw	r16,12(r16)
 4003570:	81c0f826 	beq	r16,r7,4003954 <_malloc_r+0x5bc>
 4003574:	80800117 	ldw	r2,4(r16)
 4003578:	1284703a 	and	r2,r2,r10
 400357c:	1447c83a 	sub	r3,r2,r17
 4003580:	48fff90e 	bge	r9,r3,4003568 <__alt_data_end+0xfc003568>
 4003584:	80800317 	ldw	r2,12(r16)
 4003588:	81000217 	ldw	r4,8(r16)
 400358c:	89400054 	ori	r5,r17,1
 4003590:	81400115 	stw	r5,4(r16)
 4003594:	20800315 	stw	r2,12(r4)
 4003598:	11000215 	stw	r4,8(r2)
 400359c:	8463883a 	add	r17,r16,r17
 40035a0:	9c400515 	stw	r17,20(r19)
 40035a4:	9c400415 	stw	r17,16(r19)
 40035a8:	18800054 	ori	r2,r3,1
 40035ac:	88800115 	stw	r2,4(r17)
 40035b0:	8a000315 	stw	r8,12(r17)
 40035b4:	8a000215 	stw	r8,8(r17)
 40035b8:	88e3883a 	add	r17,r17,r3
 40035bc:	88c00015 	stw	r3,0(r17)
 40035c0:	9009883a 	mov	r4,r18
 40035c4:	40149780 	call	4014978 <__malloc_unlock>
 40035c8:	80800204 	addi	r2,r16,8
 40035cc:	00001b06 	br	400363c <_malloc_r+0x2a4>
 40035d0:	04400404 	movi	r17,16
 40035d4:	89402536 	bltu	r17,r5,400366c <_malloc_r+0x2d4>
 40035d8:	40149540 	call	4014954 <__malloc_lock>
 40035dc:	00800184 	movi	r2,6
 40035e0:	01000084 	movi	r4,2
 40035e4:	04c100b4 	movhi	r19,1026
 40035e8:	1085883a 	add	r2,r2,r2
 40035ec:	9ce31804 	addi	r19,r19,-29600
 40035f0:	1085883a 	add	r2,r2,r2
 40035f4:	9885883a 	add	r2,r19,r2
 40035f8:	14000117 	ldw	r16,4(r2)
 40035fc:	10fffe04 	addi	r3,r2,-8
 4003600:	80c0d926 	beq	r16,r3,4003968 <_malloc_r+0x5d0>
 4003604:	80c00117 	ldw	r3,4(r16)
 4003608:	81000317 	ldw	r4,12(r16)
 400360c:	00bfff04 	movi	r2,-4
 4003610:	1884703a 	and	r2,r3,r2
 4003614:	81400217 	ldw	r5,8(r16)
 4003618:	8085883a 	add	r2,r16,r2
 400361c:	10c00117 	ldw	r3,4(r2)
 4003620:	29000315 	stw	r4,12(r5)
 4003624:	21400215 	stw	r5,8(r4)
 4003628:	18c00054 	ori	r3,r3,1
 400362c:	10c00115 	stw	r3,4(r2)
 4003630:	9009883a 	mov	r4,r18
 4003634:	40149780 	call	4014978 <__malloc_unlock>
 4003638:	80800204 	addi	r2,r16,8
 400363c:	dfc00a17 	ldw	ra,40(sp)
 4003640:	df000917 	ldw	fp,36(sp)
 4003644:	ddc00817 	ldw	r23,32(sp)
 4003648:	dd800717 	ldw	r22,28(sp)
 400364c:	dd400617 	ldw	r21,24(sp)
 4003650:	dd000517 	ldw	r20,20(sp)
 4003654:	dcc00417 	ldw	r19,16(sp)
 4003658:	dc800317 	ldw	r18,12(sp)
 400365c:	dc400217 	ldw	r17,8(sp)
 4003660:	dc000117 	ldw	r16,4(sp)
 4003664:	dec00b04 	addi	sp,sp,44
 4003668:	f800283a 	ret
 400366c:	00800304 	movi	r2,12
 4003670:	90800015 	stw	r2,0(r18)
 4003674:	0005883a 	mov	r2,zero
 4003678:	003ff006 	br	400363c <__alt_data_end+0xfc00363c>
 400367c:	01002004 	movi	r4,128
 4003680:	02001004 	movi	r8,64
 4003684:	01c00fc4 	movi	r7,63
 4003688:	003f6106 	br	4003410 <__alt_data_end+0xfc003410>
 400368c:	4009883a 	mov	r4,r8
 4003690:	003f7506 	br	4003468 <__alt_data_end+0xfc003468>
 4003694:	81000317 	ldw	r4,12(r16)
 4003698:	003fde06 	br	4003614 <__alt_data_end+0xfc003614>
 400369c:	81c5883a 	add	r2,r16,r7
 40036a0:	11400117 	ldw	r5,4(r2)
 40036a4:	9009883a 	mov	r4,r18
 40036a8:	29400054 	ori	r5,r5,1
 40036ac:	11400115 	stw	r5,4(r2)
 40036b0:	40149780 	call	4014978 <__malloc_unlock>
 40036b4:	80800204 	addi	r2,r16,8
 40036b8:	003fe006 	br	400363c <__alt_data_end+0xfc00363c>
 40036bc:	9c000217 	ldw	r16,8(r19)
 40036c0:	00bfff04 	movi	r2,-4
 40036c4:	85800117 	ldw	r22,4(r16)
 40036c8:	b0ac703a 	and	r22,r22,r2
 40036cc:	b4400336 	bltu	r22,r17,40036dc <_malloc_r+0x344>
 40036d0:	b445c83a 	sub	r2,r22,r17
 40036d4:	00c003c4 	movi	r3,15
 40036d8:	18805d16 	blt	r3,r2,4003850 <_malloc_r+0x4b8>
 40036dc:	05c100b4 	movhi	r23,1026
 40036e0:	008100b4 	movhi	r2,1026
 40036e4:	10b03c04 	addi	r2,r2,-16144
 40036e8:	bde8de04 	addi	r23,r23,-23688
 40036ec:	15400017 	ldw	r21,0(r2)
 40036f0:	b8c00017 	ldw	r3,0(r23)
 40036f4:	00bfffc4 	movi	r2,-1
 40036f8:	858d883a 	add	r6,r16,r22
 40036fc:	8d6b883a 	add	r21,r17,r21
 4003700:	1880ea26 	beq	r3,r2,4003aac <_malloc_r+0x714>
 4003704:	ad4403c4 	addi	r21,r21,4111
 4003708:	00bc0004 	movi	r2,-4096
 400370c:	a8aa703a 	and	r21,r21,r2
 4003710:	a80b883a 	mov	r5,r21
 4003714:	9009883a 	mov	r4,r18
 4003718:	d9800015 	stw	r6,0(sp)
 400371c:	40041c00 	call	40041c0 <_sbrk_r>
 4003720:	1029883a 	mov	r20,r2
 4003724:	00bfffc4 	movi	r2,-1
 4003728:	d9800017 	ldw	r6,0(sp)
 400372c:	a080e826 	beq	r20,r2,4003ad0 <_malloc_r+0x738>
 4003730:	a180a636 	bltu	r20,r6,40039cc <_malloc_r+0x634>
 4003734:	070100b4 	movhi	fp,1026
 4003738:	e7304704 	addi	fp,fp,-16100
 400373c:	e0800017 	ldw	r2,0(fp)
 4003740:	a887883a 	add	r3,r21,r2
 4003744:	e0c00015 	stw	r3,0(fp)
 4003748:	3500e626 	beq	r6,r20,4003ae4 <_malloc_r+0x74c>
 400374c:	b9000017 	ldw	r4,0(r23)
 4003750:	00bfffc4 	movi	r2,-1
 4003754:	2080ee26 	beq	r4,r2,4003b10 <_malloc_r+0x778>
 4003758:	a185c83a 	sub	r2,r20,r6
 400375c:	10c5883a 	add	r2,r2,r3
 4003760:	e0800015 	stw	r2,0(fp)
 4003764:	a0c001cc 	andi	r3,r20,7
 4003768:	1800bc26 	beq	r3,zero,4003a5c <_malloc_r+0x6c4>
 400376c:	a0e9c83a 	sub	r20,r20,r3
 4003770:	00840204 	movi	r2,4104
 4003774:	a5000204 	addi	r20,r20,8
 4003778:	10c7c83a 	sub	r3,r2,r3
 400377c:	a545883a 	add	r2,r20,r21
 4003780:	1083ffcc 	andi	r2,r2,4095
 4003784:	18abc83a 	sub	r21,r3,r2
 4003788:	a80b883a 	mov	r5,r21
 400378c:	9009883a 	mov	r4,r18
 4003790:	40041c00 	call	40041c0 <_sbrk_r>
 4003794:	00ffffc4 	movi	r3,-1
 4003798:	10c0e126 	beq	r2,r3,4003b20 <_malloc_r+0x788>
 400379c:	1505c83a 	sub	r2,r2,r20
 40037a0:	1545883a 	add	r2,r2,r21
 40037a4:	10800054 	ori	r2,r2,1
 40037a8:	e0c00017 	ldw	r3,0(fp)
 40037ac:	9d000215 	stw	r20,8(r19)
 40037b0:	a0800115 	stw	r2,4(r20)
 40037b4:	a8c7883a 	add	r3,r21,r3
 40037b8:	e0c00015 	stw	r3,0(fp)
 40037bc:	84c00e26 	beq	r16,r19,40037f8 <_malloc_r+0x460>
 40037c0:	018003c4 	movi	r6,15
 40037c4:	3580a72e 	bgeu	r6,r22,4003a64 <_malloc_r+0x6cc>
 40037c8:	81400117 	ldw	r5,4(r16)
 40037cc:	013ffe04 	movi	r4,-8
 40037d0:	b0bffd04 	addi	r2,r22,-12
 40037d4:	1104703a 	and	r2,r2,r4
 40037d8:	2900004c 	andi	r4,r5,1
 40037dc:	2088b03a 	or	r4,r4,r2
 40037e0:	81000115 	stw	r4,4(r16)
 40037e4:	01400144 	movi	r5,5
 40037e8:	8089883a 	add	r4,r16,r2
 40037ec:	21400115 	stw	r5,4(r4)
 40037f0:	21400215 	stw	r5,8(r4)
 40037f4:	3080cd36 	bltu	r6,r2,4003b2c <_malloc_r+0x794>
 40037f8:	008100b4 	movhi	r2,1026
 40037fc:	10b03b04 	addi	r2,r2,-16148
 4003800:	11000017 	ldw	r4,0(r2)
 4003804:	20c0012e 	bgeu	r4,r3,400380c <_malloc_r+0x474>
 4003808:	10c00015 	stw	r3,0(r2)
 400380c:	008100b4 	movhi	r2,1026
 4003810:	10b03a04 	addi	r2,r2,-16152
 4003814:	11000017 	ldw	r4,0(r2)
 4003818:	9c000217 	ldw	r16,8(r19)
 400381c:	20c0012e 	bgeu	r4,r3,4003824 <_malloc_r+0x48c>
 4003820:	10c00015 	stw	r3,0(r2)
 4003824:	80c00117 	ldw	r3,4(r16)
 4003828:	00bfff04 	movi	r2,-4
 400382c:	1886703a 	and	r3,r3,r2
 4003830:	1c45c83a 	sub	r2,r3,r17
 4003834:	1c400236 	bltu	r3,r17,4003840 <_malloc_r+0x4a8>
 4003838:	00c003c4 	movi	r3,15
 400383c:	18800416 	blt	r3,r2,4003850 <_malloc_r+0x4b8>
 4003840:	9009883a 	mov	r4,r18
 4003844:	40149780 	call	4014978 <__malloc_unlock>
 4003848:	0005883a 	mov	r2,zero
 400384c:	003f7b06 	br	400363c <__alt_data_end+0xfc00363c>
 4003850:	88c00054 	ori	r3,r17,1
 4003854:	80c00115 	stw	r3,4(r16)
 4003858:	8463883a 	add	r17,r16,r17
 400385c:	10800054 	ori	r2,r2,1
 4003860:	9c400215 	stw	r17,8(r19)
 4003864:	88800115 	stw	r2,4(r17)
 4003868:	9009883a 	mov	r4,r18
 400386c:	40149780 	call	4014978 <__malloc_unlock>
 4003870:	80800204 	addi	r2,r16,8
 4003874:	003f7106 	br	400363c <__alt_data_end+0xfc00363c>
 4003878:	00c00504 	movi	r3,20
 400387c:	18804a2e 	bgeu	r3,r2,40039a8 <_malloc_r+0x610>
 4003880:	00c01504 	movi	r3,84
 4003884:	18806e36 	bltu	r3,r2,4003a40 <_malloc_r+0x6a8>
 4003888:	8804d33a 	srli	r2,r17,12
 400388c:	12001bc4 	addi	r8,r2,111
 4003890:	11c01b84 	addi	r7,r2,110
 4003894:	4209883a 	add	r4,r8,r8
 4003898:	003edd06 	br	4003410 <__alt_data_end+0xfc003410>
 400389c:	3804d27a 	srli	r2,r7,9
 40038a0:	00c00104 	movi	r3,4
 40038a4:	1880442e 	bgeu	r3,r2,40039b8 <_malloc_r+0x620>
 40038a8:	00c00504 	movi	r3,20
 40038ac:	18808136 	bltu	r3,r2,4003ab4 <_malloc_r+0x71c>
 40038b0:	11401704 	addi	r5,r2,92
 40038b4:	10c016c4 	addi	r3,r2,91
 40038b8:	294b883a 	add	r5,r5,r5
 40038bc:	294b883a 	add	r5,r5,r5
 40038c0:	294b883a 	add	r5,r5,r5
 40038c4:	994b883a 	add	r5,r19,r5
 40038c8:	28800017 	ldw	r2,0(r5)
 40038cc:	018100b4 	movhi	r6,1026
 40038d0:	297ffe04 	addi	r5,r5,-8
 40038d4:	31a31804 	addi	r6,r6,-29600
 40038d8:	28806526 	beq	r5,r2,4003a70 <_malloc_r+0x6d8>
 40038dc:	01bfff04 	movi	r6,-4
 40038e0:	10c00117 	ldw	r3,4(r2)
 40038e4:	1986703a 	and	r3,r3,r6
 40038e8:	38c0022e 	bgeu	r7,r3,40038f4 <_malloc_r+0x55c>
 40038ec:	10800217 	ldw	r2,8(r2)
 40038f0:	28bffb1e 	bne	r5,r2,40038e0 <__alt_data_end+0xfc0038e0>
 40038f4:	11400317 	ldw	r5,12(r2)
 40038f8:	98c00117 	ldw	r3,4(r19)
 40038fc:	81400315 	stw	r5,12(r16)
 4003900:	80800215 	stw	r2,8(r16)
 4003904:	2c000215 	stw	r16,8(r5)
 4003908:	14000315 	stw	r16,12(r2)
 400390c:	003ef806 	br	40034f0 <__alt_data_end+0xfc0034f0>
 4003910:	88c00054 	ori	r3,r17,1
 4003914:	80c00115 	stw	r3,4(r16)
 4003918:	8463883a 	add	r17,r16,r17
 400391c:	34400515 	stw	r17,20(r6)
 4003920:	34400415 	stw	r17,16(r6)
 4003924:	10c00054 	ori	r3,r2,1
 4003928:	8a000315 	stw	r8,12(r17)
 400392c:	8a000215 	stw	r8,8(r17)
 4003930:	88c00115 	stw	r3,4(r17)
 4003934:	88a3883a 	add	r17,r17,r2
 4003938:	88800015 	stw	r2,0(r17)
 400393c:	9009883a 	mov	r4,r18
 4003940:	40149780 	call	4014978 <__malloc_unlock>
 4003944:	80800204 	addi	r2,r16,8
 4003948:	003f3c06 	br	400363c <__alt_data_end+0xfc00363c>
 400394c:	30c00117 	ldw	r3,4(r6)
 4003950:	003ee706 	br	40034f0 <__alt_data_end+0xfc0034f0>
 4003954:	5ac00044 	addi	r11,r11,1
 4003958:	588000cc 	andi	r2,r11,3
 400395c:	31800204 	addi	r6,r6,8
 4003960:	103efd1e 	bne	r2,zero,4003558 <__alt_data_end+0xfc003558>
 4003964:	00002406 	br	40039f8 <_malloc_r+0x660>
 4003968:	14000317 	ldw	r16,12(r2)
 400396c:	143f251e 	bne	r2,r16,4003604 <__alt_data_end+0xfc003604>
 4003970:	21000084 	addi	r4,r4,2
 4003974:	003ebc06 	br	4003468 <__alt_data_end+0xfc003468>
 4003978:	8085883a 	add	r2,r16,r2
 400397c:	10c00117 	ldw	r3,4(r2)
 4003980:	81000317 	ldw	r4,12(r16)
 4003984:	81400217 	ldw	r5,8(r16)
 4003988:	18c00054 	ori	r3,r3,1
 400398c:	10c00115 	stw	r3,4(r2)
 4003990:	29000315 	stw	r4,12(r5)
 4003994:	21400215 	stw	r5,8(r4)
 4003998:	9009883a 	mov	r4,r18
 400399c:	40149780 	call	4014978 <__malloc_unlock>
 40039a0:	80800204 	addi	r2,r16,8
 40039a4:	003f2506 	br	400363c <__alt_data_end+0xfc00363c>
 40039a8:	12001704 	addi	r8,r2,92
 40039ac:	11c016c4 	addi	r7,r2,91
 40039b0:	4209883a 	add	r4,r8,r8
 40039b4:	003e9606 	br	4003410 <__alt_data_end+0xfc003410>
 40039b8:	3804d1ba 	srli	r2,r7,6
 40039bc:	11400e44 	addi	r5,r2,57
 40039c0:	10c00e04 	addi	r3,r2,56
 40039c4:	294b883a 	add	r5,r5,r5
 40039c8:	003fbc06 	br	40038bc <__alt_data_end+0xfc0038bc>
 40039cc:	84ff5926 	beq	r16,r19,4003734 <__alt_data_end+0xfc003734>
 40039d0:	008100b4 	movhi	r2,1026
 40039d4:	10a31804 	addi	r2,r2,-29600
 40039d8:	14000217 	ldw	r16,8(r2)
 40039dc:	00bfff04 	movi	r2,-4
 40039e0:	80c00117 	ldw	r3,4(r16)
 40039e4:	1886703a 	and	r3,r3,r2
 40039e8:	003f9106 	br	4003830 <__alt_data_end+0xfc003830>
 40039ec:	60800217 	ldw	r2,8(r12)
 40039f0:	213fffc4 	addi	r4,r4,-1
 40039f4:	1300651e 	bne	r2,r12,4003b8c <_malloc_r+0x7f4>
 40039f8:	208000cc 	andi	r2,r4,3
 40039fc:	633ffe04 	addi	r12,r12,-8
 4003a00:	103ffa1e 	bne	r2,zero,40039ec <__alt_data_end+0xfc0039ec>
 4003a04:	98800117 	ldw	r2,4(r19)
 4003a08:	0146303a 	nor	r3,zero,r5
 4003a0c:	1884703a 	and	r2,r3,r2
 4003a10:	98800115 	stw	r2,4(r19)
 4003a14:	294b883a 	add	r5,r5,r5
 4003a18:	117f2836 	bltu	r2,r5,40036bc <__alt_data_end+0xfc0036bc>
 4003a1c:	283f2726 	beq	r5,zero,40036bc <__alt_data_end+0xfc0036bc>
 4003a20:	2886703a 	and	r3,r5,r2
 4003a24:	5809883a 	mov	r4,r11
 4003a28:	183ec31e 	bne	r3,zero,4003538 <__alt_data_end+0xfc003538>
 4003a2c:	294b883a 	add	r5,r5,r5
 4003a30:	2886703a 	and	r3,r5,r2
 4003a34:	21000104 	addi	r4,r4,4
 4003a38:	183ffc26 	beq	r3,zero,4003a2c <__alt_data_end+0xfc003a2c>
 4003a3c:	003ebe06 	br	4003538 <__alt_data_end+0xfc003538>
 4003a40:	00c05504 	movi	r3,340
 4003a44:	18801236 	bltu	r3,r2,4003a90 <_malloc_r+0x6f8>
 4003a48:	8804d3fa 	srli	r2,r17,15
 4003a4c:	12001e04 	addi	r8,r2,120
 4003a50:	11c01dc4 	addi	r7,r2,119
 4003a54:	4209883a 	add	r4,r8,r8
 4003a58:	003e6d06 	br	4003410 <__alt_data_end+0xfc003410>
 4003a5c:	00c40004 	movi	r3,4096
 4003a60:	003f4606 	br	400377c <__alt_data_end+0xfc00377c>
 4003a64:	00800044 	movi	r2,1
 4003a68:	a0800115 	stw	r2,4(r20)
 4003a6c:	003f7406 	br	4003840 <__alt_data_end+0xfc003840>
 4003a70:	1805d0ba 	srai	r2,r3,2
 4003a74:	01c00044 	movi	r7,1
 4003a78:	30c00117 	ldw	r3,4(r6)
 4003a7c:	388e983a 	sll	r7,r7,r2
 4003a80:	2805883a 	mov	r2,r5
 4003a84:	38c6b03a 	or	r3,r7,r3
 4003a88:	30c00115 	stw	r3,4(r6)
 4003a8c:	003f9b06 	br	40038fc <__alt_data_end+0xfc0038fc>
 4003a90:	00c15504 	movi	r3,1364
 4003a94:	18801a36 	bltu	r3,r2,4003b00 <_malloc_r+0x768>
 4003a98:	8804d4ba 	srli	r2,r17,18
 4003a9c:	12001f44 	addi	r8,r2,125
 4003aa0:	11c01f04 	addi	r7,r2,124
 4003aa4:	4209883a 	add	r4,r8,r8
 4003aa8:	003e5906 	br	4003410 <__alt_data_end+0xfc003410>
 4003aac:	ad400404 	addi	r21,r21,16
 4003ab0:	003f1706 	br	4003710 <__alt_data_end+0xfc003710>
 4003ab4:	00c01504 	movi	r3,84
 4003ab8:	18802336 	bltu	r3,r2,4003b48 <_malloc_r+0x7b0>
 4003abc:	3804d33a 	srli	r2,r7,12
 4003ac0:	11401bc4 	addi	r5,r2,111
 4003ac4:	10c01b84 	addi	r3,r2,110
 4003ac8:	294b883a 	add	r5,r5,r5
 4003acc:	003f7b06 	br	40038bc <__alt_data_end+0xfc0038bc>
 4003ad0:	9c000217 	ldw	r16,8(r19)
 4003ad4:	00bfff04 	movi	r2,-4
 4003ad8:	80c00117 	ldw	r3,4(r16)
 4003adc:	1886703a 	and	r3,r3,r2
 4003ae0:	003f5306 	br	4003830 <__alt_data_end+0xfc003830>
 4003ae4:	3083ffcc 	andi	r2,r6,4095
 4003ae8:	103f181e 	bne	r2,zero,400374c <__alt_data_end+0xfc00374c>
 4003aec:	99000217 	ldw	r4,8(r19)
 4003af0:	b545883a 	add	r2,r22,r21
 4003af4:	10800054 	ori	r2,r2,1
 4003af8:	20800115 	stw	r2,4(r4)
 4003afc:	003f3e06 	br	40037f8 <__alt_data_end+0xfc0037f8>
 4003b00:	01003f84 	movi	r4,254
 4003b04:	02001fc4 	movi	r8,127
 4003b08:	01c01f84 	movi	r7,126
 4003b0c:	003e4006 	br	4003410 <__alt_data_end+0xfc003410>
 4003b10:	008100b4 	movhi	r2,1026
 4003b14:	10a8de04 	addi	r2,r2,-23688
 4003b18:	15000015 	stw	r20,0(r2)
 4003b1c:	003f1106 	br	4003764 <__alt_data_end+0xfc003764>
 4003b20:	00800044 	movi	r2,1
 4003b24:	002b883a 	mov	r21,zero
 4003b28:	003f1f06 	br	40037a8 <__alt_data_end+0xfc0037a8>
 4003b2c:	81400204 	addi	r5,r16,8
 4003b30:	9009883a 	mov	r4,r18
 4003b34:	40026380 	call	4002638 <_free_r>
 4003b38:	008100b4 	movhi	r2,1026
 4003b3c:	10b04704 	addi	r2,r2,-16100
 4003b40:	10c00017 	ldw	r3,0(r2)
 4003b44:	003f2c06 	br	40037f8 <__alt_data_end+0xfc0037f8>
 4003b48:	00c05504 	movi	r3,340
 4003b4c:	18800536 	bltu	r3,r2,4003b64 <_malloc_r+0x7cc>
 4003b50:	3804d3fa 	srli	r2,r7,15
 4003b54:	11401e04 	addi	r5,r2,120
 4003b58:	10c01dc4 	addi	r3,r2,119
 4003b5c:	294b883a 	add	r5,r5,r5
 4003b60:	003f5606 	br	40038bc <__alt_data_end+0xfc0038bc>
 4003b64:	00c15504 	movi	r3,1364
 4003b68:	18800536 	bltu	r3,r2,4003b80 <_malloc_r+0x7e8>
 4003b6c:	3804d4ba 	srli	r2,r7,18
 4003b70:	11401f44 	addi	r5,r2,125
 4003b74:	10c01f04 	addi	r3,r2,124
 4003b78:	294b883a 	add	r5,r5,r5
 4003b7c:	003f4f06 	br	40038bc <__alt_data_end+0xfc0038bc>
 4003b80:	01403f84 	movi	r5,254
 4003b84:	00c01f84 	movi	r3,126
 4003b88:	003f4c06 	br	40038bc <__alt_data_end+0xfc0038bc>
 4003b8c:	98800117 	ldw	r2,4(r19)
 4003b90:	003fa006 	br	4003a14 <__alt_data_end+0xfc003a14>
 4003b94:	8808d0fa 	srli	r4,r17,3
 4003b98:	20800044 	addi	r2,r4,1
 4003b9c:	1085883a 	add	r2,r2,r2
 4003ba0:	003e9006 	br	40035e4 <__alt_data_end+0xfc0035e4>

04003ba4 <memcpy>:
 4003ba4:	defffd04 	addi	sp,sp,-12
 4003ba8:	dfc00215 	stw	ra,8(sp)
 4003bac:	dc400115 	stw	r17,4(sp)
 4003bb0:	dc000015 	stw	r16,0(sp)
 4003bb4:	00c003c4 	movi	r3,15
 4003bb8:	2005883a 	mov	r2,r4
 4003bbc:	1980452e 	bgeu	r3,r6,4003cd4 <memcpy+0x130>
 4003bc0:	2906b03a 	or	r3,r5,r4
 4003bc4:	18c000cc 	andi	r3,r3,3
 4003bc8:	1800441e 	bne	r3,zero,4003cdc <memcpy+0x138>
 4003bcc:	347ffc04 	addi	r17,r6,-16
 4003bd0:	8822d13a 	srli	r17,r17,4
 4003bd4:	28c00104 	addi	r3,r5,4
 4003bd8:	23400104 	addi	r13,r4,4
 4003bdc:	8820913a 	slli	r16,r17,4
 4003be0:	2b000204 	addi	r12,r5,8
 4003be4:	22c00204 	addi	r11,r4,8
 4003be8:	84000504 	addi	r16,r16,20
 4003bec:	2a800304 	addi	r10,r5,12
 4003bf0:	22400304 	addi	r9,r4,12
 4003bf4:	2c21883a 	add	r16,r5,r16
 4003bf8:	2811883a 	mov	r8,r5
 4003bfc:	200f883a 	mov	r7,r4
 4003c00:	41000017 	ldw	r4,0(r8)
 4003c04:	1fc00017 	ldw	ra,0(r3)
 4003c08:	63c00017 	ldw	r15,0(r12)
 4003c0c:	39000015 	stw	r4,0(r7)
 4003c10:	53800017 	ldw	r14,0(r10)
 4003c14:	6fc00015 	stw	ra,0(r13)
 4003c18:	5bc00015 	stw	r15,0(r11)
 4003c1c:	4b800015 	stw	r14,0(r9)
 4003c20:	18c00404 	addi	r3,r3,16
 4003c24:	39c00404 	addi	r7,r7,16
 4003c28:	42000404 	addi	r8,r8,16
 4003c2c:	6b400404 	addi	r13,r13,16
 4003c30:	63000404 	addi	r12,r12,16
 4003c34:	5ac00404 	addi	r11,r11,16
 4003c38:	52800404 	addi	r10,r10,16
 4003c3c:	4a400404 	addi	r9,r9,16
 4003c40:	1c3fef1e 	bne	r3,r16,4003c00 <__alt_data_end+0xfc003c00>
 4003c44:	89c00044 	addi	r7,r17,1
 4003c48:	380e913a 	slli	r7,r7,4
 4003c4c:	310003cc 	andi	r4,r6,15
 4003c50:	02c000c4 	movi	r11,3
 4003c54:	11c7883a 	add	r3,r2,r7
 4003c58:	29cb883a 	add	r5,r5,r7
 4003c5c:	5900212e 	bgeu	r11,r4,4003ce4 <memcpy+0x140>
 4003c60:	1813883a 	mov	r9,r3
 4003c64:	2811883a 	mov	r8,r5
 4003c68:	200f883a 	mov	r7,r4
 4003c6c:	42800017 	ldw	r10,0(r8)
 4003c70:	4a400104 	addi	r9,r9,4
 4003c74:	39ffff04 	addi	r7,r7,-4
 4003c78:	4abfff15 	stw	r10,-4(r9)
 4003c7c:	42000104 	addi	r8,r8,4
 4003c80:	59fffa36 	bltu	r11,r7,4003c6c <__alt_data_end+0xfc003c6c>
 4003c84:	213fff04 	addi	r4,r4,-4
 4003c88:	2008d0ba 	srli	r4,r4,2
 4003c8c:	318000cc 	andi	r6,r6,3
 4003c90:	21000044 	addi	r4,r4,1
 4003c94:	2109883a 	add	r4,r4,r4
 4003c98:	2109883a 	add	r4,r4,r4
 4003c9c:	1907883a 	add	r3,r3,r4
 4003ca0:	290b883a 	add	r5,r5,r4
 4003ca4:	30000626 	beq	r6,zero,4003cc0 <memcpy+0x11c>
 4003ca8:	198d883a 	add	r6,r3,r6
 4003cac:	29c00003 	ldbu	r7,0(r5)
 4003cb0:	18c00044 	addi	r3,r3,1
 4003cb4:	29400044 	addi	r5,r5,1
 4003cb8:	19ffffc5 	stb	r7,-1(r3)
 4003cbc:	19bffb1e 	bne	r3,r6,4003cac <__alt_data_end+0xfc003cac>
 4003cc0:	dfc00217 	ldw	ra,8(sp)
 4003cc4:	dc400117 	ldw	r17,4(sp)
 4003cc8:	dc000017 	ldw	r16,0(sp)
 4003ccc:	dec00304 	addi	sp,sp,12
 4003cd0:	f800283a 	ret
 4003cd4:	2007883a 	mov	r3,r4
 4003cd8:	003ff206 	br	4003ca4 <__alt_data_end+0xfc003ca4>
 4003cdc:	2007883a 	mov	r3,r4
 4003ce0:	003ff106 	br	4003ca8 <__alt_data_end+0xfc003ca8>
 4003ce4:	200d883a 	mov	r6,r4
 4003ce8:	003fee06 	br	4003ca4 <__alt_data_end+0xfc003ca4>

04003cec <memset>:
 4003cec:	20c000cc 	andi	r3,r4,3
 4003cf0:	2005883a 	mov	r2,r4
 4003cf4:	18004426 	beq	r3,zero,4003e08 <memset+0x11c>
 4003cf8:	31ffffc4 	addi	r7,r6,-1
 4003cfc:	30004026 	beq	r6,zero,4003e00 <memset+0x114>
 4003d00:	2813883a 	mov	r9,r5
 4003d04:	200d883a 	mov	r6,r4
 4003d08:	2007883a 	mov	r3,r4
 4003d0c:	00000406 	br	4003d20 <memset+0x34>
 4003d10:	3a3fffc4 	addi	r8,r7,-1
 4003d14:	31800044 	addi	r6,r6,1
 4003d18:	38003926 	beq	r7,zero,4003e00 <memset+0x114>
 4003d1c:	400f883a 	mov	r7,r8
 4003d20:	18c00044 	addi	r3,r3,1
 4003d24:	32400005 	stb	r9,0(r6)
 4003d28:	1a0000cc 	andi	r8,r3,3
 4003d2c:	403ff81e 	bne	r8,zero,4003d10 <__alt_data_end+0xfc003d10>
 4003d30:	010000c4 	movi	r4,3
 4003d34:	21c02d2e 	bgeu	r4,r7,4003dec <memset+0x100>
 4003d38:	29003fcc 	andi	r4,r5,255
 4003d3c:	200c923a 	slli	r6,r4,8
 4003d40:	3108b03a 	or	r4,r6,r4
 4003d44:	200c943a 	slli	r6,r4,16
 4003d48:	218cb03a 	or	r6,r4,r6
 4003d4c:	010003c4 	movi	r4,15
 4003d50:	21c0182e 	bgeu	r4,r7,4003db4 <memset+0xc8>
 4003d54:	3b3ffc04 	addi	r12,r7,-16
 4003d58:	6018d13a 	srli	r12,r12,4
 4003d5c:	1a000104 	addi	r8,r3,4
 4003d60:	1ac00204 	addi	r11,r3,8
 4003d64:	6008913a 	slli	r4,r12,4
 4003d68:	1a800304 	addi	r10,r3,12
 4003d6c:	1813883a 	mov	r9,r3
 4003d70:	21000504 	addi	r4,r4,20
 4003d74:	1909883a 	add	r4,r3,r4
 4003d78:	49800015 	stw	r6,0(r9)
 4003d7c:	41800015 	stw	r6,0(r8)
 4003d80:	59800015 	stw	r6,0(r11)
 4003d84:	51800015 	stw	r6,0(r10)
 4003d88:	42000404 	addi	r8,r8,16
 4003d8c:	4a400404 	addi	r9,r9,16
 4003d90:	5ac00404 	addi	r11,r11,16
 4003d94:	52800404 	addi	r10,r10,16
 4003d98:	413ff71e 	bne	r8,r4,4003d78 <__alt_data_end+0xfc003d78>
 4003d9c:	63000044 	addi	r12,r12,1
 4003da0:	6018913a 	slli	r12,r12,4
 4003da4:	39c003cc 	andi	r7,r7,15
 4003da8:	010000c4 	movi	r4,3
 4003dac:	1b07883a 	add	r3,r3,r12
 4003db0:	21c00e2e 	bgeu	r4,r7,4003dec <memset+0x100>
 4003db4:	1813883a 	mov	r9,r3
 4003db8:	3811883a 	mov	r8,r7
 4003dbc:	010000c4 	movi	r4,3
 4003dc0:	49800015 	stw	r6,0(r9)
 4003dc4:	423fff04 	addi	r8,r8,-4
 4003dc8:	4a400104 	addi	r9,r9,4
 4003dcc:	223ffc36 	bltu	r4,r8,4003dc0 <__alt_data_end+0xfc003dc0>
 4003dd0:	393fff04 	addi	r4,r7,-4
 4003dd4:	2008d0ba 	srli	r4,r4,2
 4003dd8:	39c000cc 	andi	r7,r7,3
 4003ddc:	21000044 	addi	r4,r4,1
 4003de0:	2109883a 	add	r4,r4,r4
 4003de4:	2109883a 	add	r4,r4,r4
 4003de8:	1907883a 	add	r3,r3,r4
 4003dec:	38000526 	beq	r7,zero,4003e04 <memset+0x118>
 4003df0:	19cf883a 	add	r7,r3,r7
 4003df4:	19400005 	stb	r5,0(r3)
 4003df8:	18c00044 	addi	r3,r3,1
 4003dfc:	38fffd1e 	bne	r7,r3,4003df4 <__alt_data_end+0xfc003df4>
 4003e00:	f800283a 	ret
 4003e04:	f800283a 	ret
 4003e08:	2007883a 	mov	r3,r4
 4003e0c:	300f883a 	mov	r7,r6
 4003e10:	003fc706 	br	4003d30 <__alt_data_end+0xfc003d30>

04003e14 <_open_r>:
 4003e14:	defffd04 	addi	sp,sp,-12
 4003e18:	2805883a 	mov	r2,r5
 4003e1c:	dc000015 	stw	r16,0(sp)
 4003e20:	040100b4 	movhi	r16,1026
 4003e24:	dc400115 	stw	r17,4(sp)
 4003e28:	300b883a 	mov	r5,r6
 4003e2c:	84303904 	addi	r16,r16,-16156
 4003e30:	2023883a 	mov	r17,r4
 4003e34:	380d883a 	mov	r6,r7
 4003e38:	1009883a 	mov	r4,r2
 4003e3c:	dfc00215 	stw	ra,8(sp)
 4003e40:	80000015 	stw	zero,0(r16)
 4003e44:	4014ac40 	call	4014ac4 <open>
 4003e48:	00ffffc4 	movi	r3,-1
 4003e4c:	10c00526 	beq	r2,r3,4003e64 <_open_r+0x50>
 4003e50:	dfc00217 	ldw	ra,8(sp)
 4003e54:	dc400117 	ldw	r17,4(sp)
 4003e58:	dc000017 	ldw	r16,0(sp)
 4003e5c:	dec00304 	addi	sp,sp,12
 4003e60:	f800283a 	ret
 4003e64:	80c00017 	ldw	r3,0(r16)
 4003e68:	183ff926 	beq	r3,zero,4003e50 <__alt_data_end+0xfc003e50>
 4003e6c:	88c00015 	stw	r3,0(r17)
 4003e70:	003ff706 	br	4003e50 <__alt_data_end+0xfc003e50>

04003e74 <_puts_r>:
 4003e74:	defff604 	addi	sp,sp,-40
 4003e78:	dc000715 	stw	r16,28(sp)
 4003e7c:	2021883a 	mov	r16,r4
 4003e80:	2809883a 	mov	r4,r5
 4003e84:	dc400815 	stw	r17,32(sp)
 4003e88:	dfc00915 	stw	ra,36(sp)
 4003e8c:	2823883a 	mov	r17,r5
 4003e90:	40044d40 	call	40044d4 <strlen>
 4003e94:	10c00044 	addi	r3,r2,1
 4003e98:	d8800115 	stw	r2,4(sp)
 4003e9c:	008100b4 	movhi	r2,1026
 4003ea0:	10a00404 	addi	r2,r2,-32752
 4003ea4:	d8800215 	stw	r2,8(sp)
 4003ea8:	00800044 	movi	r2,1
 4003eac:	d8800315 	stw	r2,12(sp)
 4003eb0:	00800084 	movi	r2,2
 4003eb4:	dc400015 	stw	r17,0(sp)
 4003eb8:	d8c00615 	stw	r3,24(sp)
 4003ebc:	dec00415 	stw	sp,16(sp)
 4003ec0:	d8800515 	stw	r2,20(sp)
 4003ec4:	80000226 	beq	r16,zero,4003ed0 <_puts_r+0x5c>
 4003ec8:	80800e17 	ldw	r2,56(r16)
 4003ecc:	10001426 	beq	r2,zero,4003f20 <_puts_r+0xac>
 4003ed0:	81400217 	ldw	r5,8(r16)
 4003ed4:	2880030b 	ldhu	r2,12(r5)
 4003ed8:	10c8000c 	andi	r3,r2,8192
 4003edc:	1800061e 	bne	r3,zero,4003ef8 <_puts_r+0x84>
 4003ee0:	29001917 	ldw	r4,100(r5)
 4003ee4:	00f7ffc4 	movi	r3,-8193
 4003ee8:	10880014 	ori	r2,r2,8192
 4003eec:	20c6703a 	and	r3,r4,r3
 4003ef0:	2880030d 	sth	r2,12(r5)
 4003ef4:	28c01915 	stw	r3,100(r5)
 4003ef8:	d9800404 	addi	r6,sp,16
 4003efc:	8009883a 	mov	r4,r16
 4003f00:	40063a80 	call	40063a8 <__sfvwrite_r>
 4003f04:	1000091e 	bne	r2,zero,4003f2c <_puts_r+0xb8>
 4003f08:	00800284 	movi	r2,10
 4003f0c:	dfc00917 	ldw	ra,36(sp)
 4003f10:	dc400817 	ldw	r17,32(sp)
 4003f14:	dc000717 	ldw	r16,28(sp)
 4003f18:	dec00a04 	addi	sp,sp,40
 4003f1c:	f800283a 	ret
 4003f20:	8009883a 	mov	r4,r16
 4003f24:	40021480 	call	4002148 <__sinit>
 4003f28:	003fe906 	br	4003ed0 <__alt_data_end+0xfc003ed0>
 4003f2c:	00bfffc4 	movi	r2,-1
 4003f30:	003ff606 	br	4003f0c <__alt_data_end+0xfc003f0c>

04003f34 <puts>:
 4003f34:	008100b4 	movhi	r2,1026
 4003f38:	10a8dd04 	addi	r2,r2,-23692
 4003f3c:	200b883a 	mov	r5,r4
 4003f40:	11000017 	ldw	r4,0(r2)
 4003f44:	4003e741 	jmpi	4003e74 <_puts_r>

04003f48 <lflush>:
 4003f48:	2080030b 	ldhu	r2,12(r4)
 4003f4c:	00c00244 	movi	r3,9
 4003f50:	1080024c 	andi	r2,r2,9
 4003f54:	10c00226 	beq	r2,r3,4003f60 <lflush+0x18>
 4003f58:	0005883a 	mov	r2,zero
 4003f5c:	f800283a 	ret
 4003f60:	4001db81 	jmpi	4001db8 <fflush>

04003f64 <__srefill_r>:
 4003f64:	defffc04 	addi	sp,sp,-16
 4003f68:	dc400115 	stw	r17,4(sp)
 4003f6c:	dc000015 	stw	r16,0(sp)
 4003f70:	dfc00315 	stw	ra,12(sp)
 4003f74:	dc800215 	stw	r18,8(sp)
 4003f78:	2023883a 	mov	r17,r4
 4003f7c:	2821883a 	mov	r16,r5
 4003f80:	20000226 	beq	r4,zero,4003f8c <__srefill_r+0x28>
 4003f84:	20800e17 	ldw	r2,56(r4)
 4003f88:	10003c26 	beq	r2,zero,400407c <__srefill_r+0x118>
 4003f8c:	80c0030b 	ldhu	r3,12(r16)
 4003f90:	1908000c 	andi	r4,r3,8192
 4003f94:	1805883a 	mov	r2,r3
 4003f98:	2000071e 	bne	r4,zero,4003fb8 <__srefill_r+0x54>
 4003f9c:	81001917 	ldw	r4,100(r16)
 4003fa0:	18880014 	ori	r2,r3,8192
 4003fa4:	00f7ffc4 	movi	r3,-8193
 4003fa8:	20c8703a 	and	r4,r4,r3
 4003fac:	8080030d 	sth	r2,12(r16)
 4003fb0:	1007883a 	mov	r3,r2
 4003fb4:	81001915 	stw	r4,100(r16)
 4003fb8:	80000115 	stw	zero,4(r16)
 4003fbc:	1100080c 	andi	r4,r2,32
 4003fc0:	2000571e 	bne	r4,zero,4004120 <__srefill_r+0x1bc>
 4003fc4:	1100010c 	andi	r4,r2,4
 4003fc8:	20001f26 	beq	r4,zero,4004048 <__srefill_r+0xe4>
 4003fcc:	81400c17 	ldw	r5,48(r16)
 4003fd0:	28000826 	beq	r5,zero,4003ff4 <__srefill_r+0x90>
 4003fd4:	80801004 	addi	r2,r16,64
 4003fd8:	28800226 	beq	r5,r2,4003fe4 <__srefill_r+0x80>
 4003fdc:	8809883a 	mov	r4,r17
 4003fe0:	40026380 	call	4002638 <_free_r>
 4003fe4:	80800f17 	ldw	r2,60(r16)
 4003fe8:	80000c15 	stw	zero,48(r16)
 4003fec:	80800115 	stw	r2,4(r16)
 4003ff0:	1000391e 	bne	r2,zero,40040d8 <__srefill_r+0x174>
 4003ff4:	80800417 	ldw	r2,16(r16)
 4003ff8:	10004b26 	beq	r2,zero,4004128 <__srefill_r+0x1c4>
 4003ffc:	8480030b 	ldhu	r18,12(r16)
 4004000:	908000cc 	andi	r2,r18,3
 4004004:	10001f1e 	bne	r2,zero,4004084 <__srefill_r+0x120>
 4004008:	81800417 	ldw	r6,16(r16)
 400400c:	80800817 	ldw	r2,32(r16)
 4004010:	81c00517 	ldw	r7,20(r16)
 4004014:	81400717 	ldw	r5,28(r16)
 4004018:	81800015 	stw	r6,0(r16)
 400401c:	8809883a 	mov	r4,r17
 4004020:	103ee83a 	callr	r2
 4004024:	80800115 	stw	r2,4(r16)
 4004028:	00800e0e 	bge	zero,r2,4004064 <__srefill_r+0x100>
 400402c:	0005883a 	mov	r2,zero
 4004030:	dfc00317 	ldw	ra,12(sp)
 4004034:	dc800217 	ldw	r18,8(sp)
 4004038:	dc400117 	ldw	r17,4(sp)
 400403c:	dc000017 	ldw	r16,0(sp)
 4004040:	dec00404 	addi	sp,sp,16
 4004044:	f800283a 	ret
 4004048:	1100040c 	andi	r4,r2,16
 400404c:	20003026 	beq	r4,zero,4004110 <__srefill_r+0x1ac>
 4004050:	1080020c 	andi	r2,r2,8
 4004054:	1000241e 	bne	r2,zero,40040e8 <__srefill_r+0x184>
 4004058:	18c00114 	ori	r3,r3,4
 400405c:	80c0030d 	sth	r3,12(r16)
 4004060:	003fe406 	br	4003ff4 <__alt_data_end+0xfc003ff4>
 4004064:	80c0030b 	ldhu	r3,12(r16)
 4004068:	1000161e 	bne	r2,zero,40040c4 <__srefill_r+0x160>
 400406c:	18c00814 	ori	r3,r3,32
 4004070:	00bfffc4 	movi	r2,-1
 4004074:	80c0030d 	sth	r3,12(r16)
 4004078:	003fed06 	br	4004030 <__alt_data_end+0xfc004030>
 400407c:	40021480 	call	4002148 <__sinit>
 4004080:	003fc206 	br	4003f8c <__alt_data_end+0xfc003f8c>
 4004084:	008100b4 	movhi	r2,1026
 4004088:	10a8dc04 	addi	r2,r2,-23696
 400408c:	11000017 	ldw	r4,0(r2)
 4004090:	01410034 	movhi	r5,1024
 4004094:	00800044 	movi	r2,1
 4004098:	294fd204 	addi	r5,r5,16200
 400409c:	8080030d 	sth	r2,12(r16)
 40040a0:	4002e240 	call	4002e24 <_fwalk>
 40040a4:	00800244 	movi	r2,9
 40040a8:	8480030d 	sth	r18,12(r16)
 40040ac:	9480024c 	andi	r18,r18,9
 40040b0:	90bfd51e 	bne	r18,r2,4004008 <__alt_data_end+0xfc004008>
 40040b4:	800b883a 	mov	r5,r16
 40040b8:	8809883a 	mov	r4,r17
 40040bc:	4001b400 	call	4001b40 <__sflush_r>
 40040c0:	003fd106 	br	4004008 <__alt_data_end+0xfc004008>
 40040c4:	18c01014 	ori	r3,r3,64
 40040c8:	80000115 	stw	zero,4(r16)
 40040cc:	00bfffc4 	movi	r2,-1
 40040d0:	80c0030d 	sth	r3,12(r16)
 40040d4:	003fd606 	br	4004030 <__alt_data_end+0xfc004030>
 40040d8:	80c00e17 	ldw	r3,56(r16)
 40040dc:	0005883a 	mov	r2,zero
 40040e0:	80c00015 	stw	r3,0(r16)
 40040e4:	003fd206 	br	4004030 <__alt_data_end+0xfc004030>
 40040e8:	800b883a 	mov	r5,r16
 40040ec:	8809883a 	mov	r4,r17
 40040f0:	4001d5c0 	call	4001d5c <_fflush_r>
 40040f4:	10000a1e 	bne	r2,zero,4004120 <__srefill_r+0x1bc>
 40040f8:	8080030b 	ldhu	r2,12(r16)
 40040fc:	00fffdc4 	movi	r3,-9
 4004100:	80000215 	stw	zero,8(r16)
 4004104:	1886703a 	and	r3,r3,r2
 4004108:	80000615 	stw	zero,24(r16)
 400410c:	003fd206 	br	4004058 <__alt_data_end+0xfc004058>
 4004110:	00800244 	movi	r2,9
 4004114:	88800015 	stw	r2,0(r17)
 4004118:	18c01014 	ori	r3,r3,64
 400411c:	80c0030d 	sth	r3,12(r16)
 4004120:	00bfffc4 	movi	r2,-1
 4004124:	003fc206 	br	4004030 <__alt_data_end+0xfc004030>
 4004128:	800b883a 	mov	r5,r16
 400412c:	8809883a 	mov	r4,r17
 4004130:	40031b40 	call	40031b4 <__smakebuf_r>
 4004134:	003fb106 	br	4003ffc <__alt_data_end+0xfc003ffc>

04004138 <__srget_r>:
 4004138:	defffd04 	addi	sp,sp,-12
 400413c:	dc400115 	stw	r17,4(sp)
 4004140:	dc000015 	stw	r16,0(sp)
 4004144:	dfc00215 	stw	ra,8(sp)
 4004148:	2023883a 	mov	r17,r4
 400414c:	2821883a 	mov	r16,r5
 4004150:	20000226 	beq	r4,zero,400415c <__srget_r+0x24>
 4004154:	20800e17 	ldw	r2,56(r4)
 4004158:	10001026 	beq	r2,zero,400419c <__srget_r+0x64>
 400415c:	800b883a 	mov	r5,r16
 4004160:	8809883a 	mov	r4,r17
 4004164:	4003f640 	call	4003f64 <__srefill_r>
 4004168:	10000e1e 	bne	r2,zero,40041a4 <__srget_r+0x6c>
 400416c:	80c00017 	ldw	r3,0(r16)
 4004170:	80800117 	ldw	r2,4(r16)
 4004174:	19000044 	addi	r4,r3,1
 4004178:	10bfffc4 	addi	r2,r2,-1
 400417c:	80800115 	stw	r2,4(r16)
 4004180:	81000015 	stw	r4,0(r16)
 4004184:	18800003 	ldbu	r2,0(r3)
 4004188:	dfc00217 	ldw	ra,8(sp)
 400418c:	dc400117 	ldw	r17,4(sp)
 4004190:	dc000017 	ldw	r16,0(sp)
 4004194:	dec00304 	addi	sp,sp,12
 4004198:	f800283a 	ret
 400419c:	40021480 	call	4002148 <__sinit>
 40041a0:	003fee06 	br	400415c <__alt_data_end+0xfc00415c>
 40041a4:	00bfffc4 	movi	r2,-1
 40041a8:	003ff706 	br	4004188 <__alt_data_end+0xfc004188>

040041ac <__srget>:
 40041ac:	008100b4 	movhi	r2,1026
 40041b0:	10a8dd04 	addi	r2,r2,-23692
 40041b4:	200b883a 	mov	r5,r4
 40041b8:	11000017 	ldw	r4,0(r2)
 40041bc:	40041381 	jmpi	4004138 <__srget_r>

040041c0 <_sbrk_r>:
 40041c0:	defffd04 	addi	sp,sp,-12
 40041c4:	dc000015 	stw	r16,0(sp)
 40041c8:	040100b4 	movhi	r16,1026
 40041cc:	dc400115 	stw	r17,4(sp)
 40041d0:	84303904 	addi	r16,r16,-16156
 40041d4:	2023883a 	mov	r17,r4
 40041d8:	2809883a 	mov	r4,r5
 40041dc:	dfc00215 	stw	ra,8(sp)
 40041e0:	80000015 	stw	zero,0(r16)
 40041e4:	4014de40 	call	4014de4 <sbrk>
 40041e8:	00ffffc4 	movi	r3,-1
 40041ec:	10c00526 	beq	r2,r3,4004204 <_sbrk_r+0x44>
 40041f0:	dfc00217 	ldw	ra,8(sp)
 40041f4:	dc400117 	ldw	r17,4(sp)
 40041f8:	dc000017 	ldw	r16,0(sp)
 40041fc:	dec00304 	addi	sp,sp,12
 4004200:	f800283a 	ret
 4004204:	80c00017 	ldw	r3,0(r16)
 4004208:	183ff926 	beq	r3,zero,40041f0 <__alt_data_end+0xfc0041f0>
 400420c:	88c00015 	stw	r3,0(r17)
 4004210:	003ff706 	br	40041f0 <__alt_data_end+0xfc0041f0>

04004214 <scanf>:
 4004214:	defffc04 	addi	sp,sp,-16
 4004218:	dfc00015 	stw	ra,0(sp)
 400421c:	d9400115 	stw	r5,4(sp)
 4004220:	d9800215 	stw	r6,8(sp)
 4004224:	d9c00315 	stw	r7,12(sp)
 4004228:	008100b4 	movhi	r2,1026
 400422c:	10a8dd04 	addi	r2,r2,-23692
 4004230:	200d883a 	mov	r6,r4
 4004234:	11000017 	ldw	r4,0(r2)
 4004238:	d9c00104 	addi	r7,sp,4
 400423c:	21400117 	ldw	r5,4(r4)
 4004240:	40061fc0 	call	40061fc <_vfscanf_r>
 4004244:	dfc00017 	ldw	ra,0(sp)
 4004248:	dec00404 	addi	sp,sp,16
 400424c:	f800283a 	ret

04004250 <_scanf_r>:
 4004250:	defffd04 	addi	sp,sp,-12
 4004254:	2805883a 	mov	r2,r5
 4004258:	dfc00015 	stw	ra,0(sp)
 400425c:	d9800115 	stw	r6,4(sp)
 4004260:	d9c00215 	stw	r7,8(sp)
 4004264:	21400117 	ldw	r5,4(r4)
 4004268:	d9c00104 	addi	r7,sp,4
 400426c:	100d883a 	mov	r6,r2
 4004270:	40061fc0 	call	40061fc <_vfscanf_r>
 4004274:	dfc00017 	ldw	ra,0(sp)
 4004278:	dec00304 	addi	sp,sp,12
 400427c:	f800283a 	ret

04004280 <__sread>:
 4004280:	defffe04 	addi	sp,sp,-8
 4004284:	dc000015 	stw	r16,0(sp)
 4004288:	2821883a 	mov	r16,r5
 400428c:	2940038f 	ldh	r5,14(r5)
 4004290:	dfc00115 	stw	ra,4(sp)
 4004294:	4006e940 	call	4006e94 <_read_r>
 4004298:	10000716 	blt	r2,zero,40042b8 <__sread+0x38>
 400429c:	80c01417 	ldw	r3,80(r16)
 40042a0:	1887883a 	add	r3,r3,r2
 40042a4:	80c01415 	stw	r3,80(r16)
 40042a8:	dfc00117 	ldw	ra,4(sp)
 40042ac:	dc000017 	ldw	r16,0(sp)
 40042b0:	dec00204 	addi	sp,sp,8
 40042b4:	f800283a 	ret
 40042b8:	80c0030b 	ldhu	r3,12(r16)
 40042bc:	18fbffcc 	andi	r3,r3,61439
 40042c0:	80c0030d 	sth	r3,12(r16)
 40042c4:	dfc00117 	ldw	ra,4(sp)
 40042c8:	dc000017 	ldw	r16,0(sp)
 40042cc:	dec00204 	addi	sp,sp,8
 40042d0:	f800283a 	ret

040042d4 <__seofread>:
 40042d4:	0005883a 	mov	r2,zero
 40042d8:	f800283a 	ret

040042dc <__swrite>:
 40042dc:	2880030b 	ldhu	r2,12(r5)
 40042e0:	defffb04 	addi	sp,sp,-20
 40042e4:	dcc00315 	stw	r19,12(sp)
 40042e8:	dc800215 	stw	r18,8(sp)
 40042ec:	dc400115 	stw	r17,4(sp)
 40042f0:	dc000015 	stw	r16,0(sp)
 40042f4:	dfc00415 	stw	ra,16(sp)
 40042f8:	10c0400c 	andi	r3,r2,256
 40042fc:	2821883a 	mov	r16,r5
 4004300:	2023883a 	mov	r17,r4
 4004304:	3025883a 	mov	r18,r6
 4004308:	3827883a 	mov	r19,r7
 400430c:	18000526 	beq	r3,zero,4004324 <__swrite+0x48>
 4004310:	2940038f 	ldh	r5,14(r5)
 4004314:	01c00084 	movi	r7,2
 4004318:	000d883a 	mov	r6,zero
 400431c:	40069d00 	call	40069d0 <_lseek_r>
 4004320:	8080030b 	ldhu	r2,12(r16)
 4004324:	8140038f 	ldh	r5,14(r16)
 4004328:	10bbffcc 	andi	r2,r2,61439
 400432c:	980f883a 	mov	r7,r19
 4004330:	900d883a 	mov	r6,r18
 4004334:	8809883a 	mov	r4,r17
 4004338:	8080030d 	sth	r2,12(r16)
 400433c:	dfc00417 	ldw	ra,16(sp)
 4004340:	dcc00317 	ldw	r19,12(sp)
 4004344:	dc800217 	ldw	r18,8(sp)
 4004348:	dc400117 	ldw	r17,4(sp)
 400434c:	dc000017 	ldw	r16,0(sp)
 4004350:	dec00504 	addi	sp,sp,20
 4004354:	40062481 	jmpi	4006248 <_write_r>

04004358 <__sseek>:
 4004358:	defffe04 	addi	sp,sp,-8
 400435c:	dc000015 	stw	r16,0(sp)
 4004360:	2821883a 	mov	r16,r5
 4004364:	2940038f 	ldh	r5,14(r5)
 4004368:	dfc00115 	stw	ra,4(sp)
 400436c:	40069d00 	call	40069d0 <_lseek_r>
 4004370:	00ffffc4 	movi	r3,-1
 4004374:	10c00826 	beq	r2,r3,4004398 <__sseek+0x40>
 4004378:	80c0030b 	ldhu	r3,12(r16)
 400437c:	80801415 	stw	r2,80(r16)
 4004380:	18c40014 	ori	r3,r3,4096
 4004384:	80c0030d 	sth	r3,12(r16)
 4004388:	dfc00117 	ldw	ra,4(sp)
 400438c:	dc000017 	ldw	r16,0(sp)
 4004390:	dec00204 	addi	sp,sp,8
 4004394:	f800283a 	ret
 4004398:	80c0030b 	ldhu	r3,12(r16)
 400439c:	18fbffcc 	andi	r3,r3,61439
 40043a0:	80c0030d 	sth	r3,12(r16)
 40043a4:	dfc00117 	ldw	ra,4(sp)
 40043a8:	dc000017 	ldw	r16,0(sp)
 40043ac:	dec00204 	addi	sp,sp,8
 40043b0:	f800283a 	ret

040043b4 <__sclose>:
 40043b4:	2940038f 	ldh	r5,14(r5)
 40043b8:	40062a81 	jmpi	40062a8 <_close_r>

040043bc <stpcpy>:
 40043bc:	2904b03a 	or	r2,r5,r4
 40043c0:	108000cc 	andi	r2,r2,3
 40043c4:	1000151e 	bne	r2,zero,400441c <stpcpy+0x60>
 40043c8:	28c00017 	ldw	r3,0(r5)
 40043cc:	027fbff4 	movhi	r9,65279
 40043d0:	4a7fbfc4 	addi	r9,r9,-257
 40043d4:	02202074 	movhi	r8,32897
 40043d8:	00c4303a 	nor	r2,zero,r3
 40043dc:	1a4d883a 	add	r6,r3,r9
 40043e0:	42202004 	addi	r8,r8,-32640
 40043e4:	3084703a 	and	r2,r6,r2
 40043e8:	1204703a 	and	r2,r2,r8
 40043ec:	10000b1e 	bne	r2,zero,400441c <stpcpy+0x60>
 40043f0:	200d883a 	mov	r6,r4
 40043f4:	29400104 	addi	r5,r5,4
 40043f8:	30c00015 	stw	r3,0(r6)
 40043fc:	28c00017 	ldw	r3,0(r5)
 4004400:	21000104 	addi	r4,r4,4
 4004404:	200d883a 	mov	r6,r4
 4004408:	1a4f883a 	add	r7,r3,r9
 400440c:	00c4303a 	nor	r2,zero,r3
 4004410:	3884703a 	and	r2,r7,r2
 4004414:	1204703a 	and	r2,r2,r8
 4004418:	103ff626 	beq	r2,zero,40043f4 <__alt_data_end+0xfc0043f4>
 400441c:	28c00003 	ldbu	r3,0(r5)
 4004420:	2005883a 	mov	r2,r4
 4004424:	29400044 	addi	r5,r5,1
 4004428:	20c00005 	stb	r3,0(r4)
 400442c:	18c03fcc 	andi	r3,r3,255
 4004430:	18c0201c 	xori	r3,r3,128
 4004434:	18ffe004 	addi	r3,r3,-128
 4004438:	21000044 	addi	r4,r4,1
 400443c:	183ff71e 	bne	r3,zero,400441c <__alt_data_end+0xfc00441c>
 4004440:	f800283a 	ret

04004444 <strcpy>:
 4004444:	2906b03a 	or	r3,r5,r4
 4004448:	18c000cc 	andi	r3,r3,3
 400444c:	2005883a 	mov	r2,r4
 4004450:	1800161e 	bne	r3,zero,40044ac <strcpy+0x68>
 4004454:	29c00017 	ldw	r7,0(r5)
 4004458:	02ffbff4 	movhi	r11,65279
 400445c:	5affbfc4 	addi	r11,r11,-257
 4004460:	02a02074 	movhi	r10,32897
 4004464:	01c6303a 	nor	r3,zero,r7
 4004468:	3ac9883a 	add	r4,r7,r11
 400446c:	52a02004 	addi	r10,r10,-32640
 4004470:	20c6703a 	and	r3,r4,r3
 4004474:	1a86703a 	and	r3,r3,r10
 4004478:	18000c1e 	bne	r3,zero,40044ac <strcpy+0x68>
 400447c:	1011883a 	mov	r8,r2
 4004480:	41c00015 	stw	r7,0(r8)
 4004484:	29400104 	addi	r5,r5,4
 4004488:	29c00017 	ldw	r7,0(r5)
 400448c:	41800104 	addi	r6,r8,4
 4004490:	3011883a 	mov	r8,r6
 4004494:	3ad3883a 	add	r9,r7,r11
 4004498:	01c6303a 	nor	r3,zero,r7
 400449c:	48c6703a 	and	r3,r9,r3
 40044a0:	1a86703a 	and	r3,r3,r10
 40044a4:	183ff626 	beq	r3,zero,4004480 <__alt_data_end+0xfc004480>
 40044a8:	00000106 	br	40044b0 <strcpy+0x6c>
 40044ac:	100d883a 	mov	r6,r2
 40044b0:	28c00003 	ldbu	r3,0(r5)
 40044b4:	31800044 	addi	r6,r6,1
 40044b8:	29400044 	addi	r5,r5,1
 40044bc:	30ffffc5 	stb	r3,-1(r6)
 40044c0:	18c03fcc 	andi	r3,r3,255
 40044c4:	18c0201c 	xori	r3,r3,128
 40044c8:	18ffe004 	addi	r3,r3,-128
 40044cc:	183ff81e 	bne	r3,zero,40044b0 <__alt_data_end+0xfc0044b0>
 40044d0:	f800283a 	ret

040044d4 <strlen>:
 40044d4:	208000cc 	andi	r2,r4,3
 40044d8:	10002026 	beq	r2,zero,400455c <strlen+0x88>
 40044dc:	20800007 	ldb	r2,0(r4)
 40044e0:	10002026 	beq	r2,zero,4004564 <strlen+0x90>
 40044e4:	2005883a 	mov	r2,r4
 40044e8:	00000206 	br	40044f4 <strlen+0x20>
 40044ec:	10c00007 	ldb	r3,0(r2)
 40044f0:	18001826 	beq	r3,zero,4004554 <strlen+0x80>
 40044f4:	10800044 	addi	r2,r2,1
 40044f8:	10c000cc 	andi	r3,r2,3
 40044fc:	183ffb1e 	bne	r3,zero,40044ec <__alt_data_end+0xfc0044ec>
 4004500:	10c00017 	ldw	r3,0(r2)
 4004504:	01ffbff4 	movhi	r7,65279
 4004508:	39ffbfc4 	addi	r7,r7,-257
 400450c:	00ca303a 	nor	r5,zero,r3
 4004510:	01a02074 	movhi	r6,32897
 4004514:	19c7883a 	add	r3,r3,r7
 4004518:	31a02004 	addi	r6,r6,-32640
 400451c:	1946703a 	and	r3,r3,r5
 4004520:	1986703a 	and	r3,r3,r6
 4004524:	1800091e 	bne	r3,zero,400454c <strlen+0x78>
 4004528:	10800104 	addi	r2,r2,4
 400452c:	10c00017 	ldw	r3,0(r2)
 4004530:	19cb883a 	add	r5,r3,r7
 4004534:	00c6303a 	nor	r3,zero,r3
 4004538:	28c6703a 	and	r3,r5,r3
 400453c:	1986703a 	and	r3,r3,r6
 4004540:	183ff926 	beq	r3,zero,4004528 <__alt_data_end+0xfc004528>
 4004544:	00000106 	br	400454c <strlen+0x78>
 4004548:	10800044 	addi	r2,r2,1
 400454c:	10c00007 	ldb	r3,0(r2)
 4004550:	183ffd1e 	bne	r3,zero,4004548 <__alt_data_end+0xfc004548>
 4004554:	1105c83a 	sub	r2,r2,r4
 4004558:	f800283a 	ret
 400455c:	2005883a 	mov	r2,r4
 4004560:	003fe706 	br	4004500 <__alt_data_end+0xfc004500>
 4004564:	0005883a 	mov	r2,zero
 4004568:	f800283a 	ret

0400456c <__submore>:
 400456c:	defffa04 	addi	sp,sp,-24
 4004570:	dc000015 	stw	r16,0(sp)
 4004574:	2821883a 	mov	r16,r5
 4004578:	29400c17 	ldw	r5,48(r5)
 400457c:	dfc00515 	stw	ra,20(sp)
 4004580:	dd000415 	stw	r20,16(sp)
 4004584:	dcc00315 	stw	r19,12(sp)
 4004588:	dc800215 	stw	r18,8(sp)
 400458c:	dc400115 	stw	r17,4(sp)
 4004590:	80801004 	addi	r2,r16,64
 4004594:	28801726 	beq	r5,r2,40045f4 <__submore+0x88>
 4004598:	84400d17 	ldw	r17,52(r16)
 400459c:	8c67883a 	add	r19,r17,r17
 40045a0:	980d883a 	mov	r6,r19
 40045a4:	4006ef40 	call	4006ef4 <_realloc_r>
 40045a8:	1025883a 	mov	r18,r2
 40045ac:	10002226 	beq	r2,zero,4004638 <__submore+0xcc>
 40045b0:	1469883a 	add	r20,r2,r17
 40045b4:	880d883a 	mov	r6,r17
 40045b8:	100b883a 	mov	r5,r2
 40045bc:	a009883a 	mov	r4,r20
 40045c0:	4003ba40 	call	4003ba4 <memcpy>
 40045c4:	0005883a 	mov	r2,zero
 40045c8:	85000015 	stw	r20,0(r16)
 40045cc:	84800c15 	stw	r18,48(r16)
 40045d0:	84c00d15 	stw	r19,52(r16)
 40045d4:	dfc00517 	ldw	ra,20(sp)
 40045d8:	dd000417 	ldw	r20,16(sp)
 40045dc:	dcc00317 	ldw	r19,12(sp)
 40045e0:	dc800217 	ldw	r18,8(sp)
 40045e4:	dc400117 	ldw	r17,4(sp)
 40045e8:	dc000017 	ldw	r16,0(sp)
 40045ec:	dec00604 	addi	sp,sp,24
 40045f0:	f800283a 	ret
 40045f4:	04410004 	movi	r17,1024
 40045f8:	880b883a 	mov	r5,r17
 40045fc:	40033980 	call	4003398 <_malloc_r>
 4004600:	1007883a 	mov	r3,r2
 4004604:	10000c26 	beq	r2,zero,4004638 <__submore+0xcc>
 4004608:	80801083 	ldbu	r2,66(r16)
 400460c:	80c00c15 	stw	r3,48(r16)
 4004610:	84400d15 	stw	r17,52(r16)
 4004614:	1880ffc5 	stb	r2,1023(r3)
 4004618:	81401043 	ldbu	r5,65(r16)
 400461c:	1900ff44 	addi	r4,r3,1021
 4004620:	0005883a 	mov	r2,zero
 4004624:	1940ff85 	stb	r5,1022(r3)
 4004628:	81401003 	ldbu	r5,64(r16)
 400462c:	1940ff45 	stb	r5,1021(r3)
 4004630:	81000015 	stw	r4,0(r16)
 4004634:	003fe706 	br	40045d4 <__alt_data_end+0xfc0045d4>
 4004638:	00bfffc4 	movi	r2,-1
 400463c:	003fe506 	br	40045d4 <__alt_data_end+0xfc0045d4>

04004640 <_ungetc_r>:
 4004640:	00bfffc4 	movi	r2,-1
 4004644:	28806126 	beq	r5,r2,40047cc <_ungetc_r+0x18c>
 4004648:	defffb04 	addi	sp,sp,-20
 400464c:	dcc00315 	stw	r19,12(sp)
 4004650:	dc400115 	stw	r17,4(sp)
 4004654:	dc000015 	stw	r16,0(sp)
 4004658:	dfc00415 	stw	ra,16(sp)
 400465c:	dc800215 	stw	r18,8(sp)
 4004660:	2023883a 	mov	r17,r4
 4004664:	3021883a 	mov	r16,r6
 4004668:	2827883a 	mov	r19,r5
 400466c:	20000226 	beq	r4,zero,4004678 <_ungetc_r+0x38>
 4004670:	20800e17 	ldw	r2,56(r4)
 4004674:	10002e26 	beq	r2,zero,4004730 <_ungetc_r+0xf0>
 4004678:	80c0030b 	ldhu	r3,12(r16)
 400467c:	1888000c 	andi	r2,r3,8192
 4004680:	1000051e 	bne	r2,zero,4004698 <_ungetc_r+0x58>
 4004684:	81001917 	ldw	r4,100(r16)
 4004688:	00b7ffc4 	movi	r2,-8193
 400468c:	18c80014 	ori	r3,r3,8192
 4004690:	2084703a 	and	r2,r4,r2
 4004694:	80801915 	stw	r2,100(r16)
 4004698:	00bff7c4 	movi	r2,-33
 400469c:	1884703a 	and	r2,r3,r2
 40046a0:	8080030d 	sth	r2,12(r16)
 40046a4:	1900010c 	andi	r4,r3,4
 40046a8:	2000061e 	bne	r4,zero,40046c4 <_ungetc_r+0x84>
 40046ac:	1900040c 	andi	r4,r3,16
 40046b0:	20001d26 	beq	r4,zero,4004728 <_ungetc_r+0xe8>
 40046b4:	18c0020c 	andi	r3,r3,8
 40046b8:	1800331e 	bne	r3,zero,4004788 <_ungetc_r+0x148>
 40046bc:	10800114 	ori	r2,r2,4
 40046c0:	8080030d 	sth	r2,12(r16)
 40046c4:	80800c17 	ldw	r2,48(r16)
 40046c8:	9c803fcc 	andi	r18,r19,255
 40046cc:	10001a26 	beq	r2,zero,4004738 <_ungetc_r+0xf8>
 40046d0:	80c00117 	ldw	r3,4(r16)
 40046d4:	80800d17 	ldw	r2,52(r16)
 40046d8:	18800f0e 	bge	r3,r2,4004718 <_ungetc_r+0xd8>
 40046dc:	80c00017 	ldw	r3,0(r16)
 40046e0:	9005883a 	mov	r2,r18
 40046e4:	193fffc4 	addi	r4,r3,-1
 40046e8:	81000015 	stw	r4,0(r16)
 40046ec:	1cffffc5 	stb	r19,-1(r3)
 40046f0:	80c00117 	ldw	r3,4(r16)
 40046f4:	18c00044 	addi	r3,r3,1
 40046f8:	80c00115 	stw	r3,4(r16)
 40046fc:	dfc00417 	ldw	ra,16(sp)
 4004700:	dcc00317 	ldw	r19,12(sp)
 4004704:	dc800217 	ldw	r18,8(sp)
 4004708:	dc400117 	ldw	r17,4(sp)
 400470c:	dc000017 	ldw	r16,0(sp)
 4004710:	dec00504 	addi	sp,sp,20
 4004714:	f800283a 	ret
 4004718:	800b883a 	mov	r5,r16
 400471c:	8809883a 	mov	r4,r17
 4004720:	400456c0 	call	400456c <__submore>
 4004724:	103fed26 	beq	r2,zero,40046dc <__alt_data_end+0xfc0046dc>
 4004728:	00bfffc4 	movi	r2,-1
 400472c:	003ff306 	br	40046fc <__alt_data_end+0xfc0046fc>
 4004730:	40021480 	call	4002148 <__sinit>
 4004734:	003fd006 	br	4004678 <__alt_data_end+0xfc004678>
 4004738:	80c00417 	ldw	r3,16(r16)
 400473c:	80800017 	ldw	r2,0(r16)
 4004740:	18000326 	beq	r3,zero,4004750 <_ungetc_r+0x110>
 4004744:	1880022e 	bgeu	r3,r2,4004750 <_ungetc_r+0x110>
 4004748:	10ffffc3 	ldbu	r3,-1(r2)
 400474c:	90c01826 	beq	r18,r3,40047b0 <_ungetc_r+0x170>
 4004750:	81400117 	ldw	r5,4(r16)
 4004754:	80800e15 	stw	r2,56(r16)
 4004758:	008000c4 	movi	r2,3
 400475c:	81001004 	addi	r4,r16,64
 4004760:	80c01084 	addi	r3,r16,66
 4004764:	80800d15 	stw	r2,52(r16)
 4004768:	00800044 	movi	r2,1
 400476c:	80800115 	stw	r2,4(r16)
 4004770:	81400f15 	stw	r5,60(r16)
 4004774:	81000c15 	stw	r4,48(r16)
 4004778:	84c01085 	stb	r19,66(r16)
 400477c:	80c00015 	stw	r3,0(r16)
 4004780:	9005883a 	mov	r2,r18
 4004784:	003fdd06 	br	40046fc <__alt_data_end+0xfc0046fc>
 4004788:	800b883a 	mov	r5,r16
 400478c:	8809883a 	mov	r4,r17
 4004790:	4001d5c0 	call	4001d5c <_fflush_r>
 4004794:	103fe41e 	bne	r2,zero,4004728 <__alt_data_end+0xfc004728>
 4004798:	8080030b 	ldhu	r2,12(r16)
 400479c:	00fffdc4 	movi	r3,-9
 40047a0:	80000215 	stw	zero,8(r16)
 40047a4:	1884703a 	and	r2,r3,r2
 40047a8:	80000615 	stw	zero,24(r16)
 40047ac:	003fc306 	br	40046bc <__alt_data_end+0xfc0046bc>
 40047b0:	80c00117 	ldw	r3,4(r16)
 40047b4:	10bfffc4 	addi	r2,r2,-1
 40047b8:	80800015 	stw	r2,0(r16)
 40047bc:	18800044 	addi	r2,r3,1
 40047c0:	80800115 	stw	r2,4(r16)
 40047c4:	9005883a 	mov	r2,r18
 40047c8:	003fcc06 	br	40046fc <__alt_data_end+0xfc0046fc>
 40047cc:	00bfffc4 	movi	r2,-1
 40047d0:	f800283a 	ret

040047d4 <ungetc>:
 40047d4:	008100b4 	movhi	r2,1026
 40047d8:	10a8dd04 	addi	r2,r2,-23692
 40047dc:	280d883a 	mov	r6,r5
 40047e0:	200b883a 	mov	r5,r4
 40047e4:	11000017 	ldw	r4,0(r2)
 40047e8:	40046401 	jmpi	4004640 <_ungetc_r>

040047ec <__svfscanf_r>:
 40047ec:	2880030b 	ldhu	r2,12(r5)
 40047f0:	deff4b04 	addi	sp,sp,-724
 40047f4:	df00b315 	stw	fp,716(sp)
 40047f8:	ddc0b215 	stw	r23,712(sp)
 40047fc:	dfc0b415 	stw	ra,720(sp)
 4004800:	dd80b115 	stw	r22,708(sp)
 4004804:	dd40b015 	stw	r21,704(sp)
 4004808:	dd00af15 	stw	r20,700(sp)
 400480c:	dcc0ae15 	stw	r19,696(sp)
 4004810:	dc80ad15 	stw	r18,692(sp)
 4004814:	dc40ac15 	stw	r17,688(sp)
 4004818:	dc00ab15 	stw	r16,684(sp)
 400481c:	10c8000c 	andi	r3,r2,8192
 4004820:	d9c09c15 	stw	r7,624(sp)
 4004824:	2839883a 	mov	fp,r5
 4004828:	202f883a 	mov	r23,r4
 400482c:	1800061e 	bne	r3,zero,4004848 <__svfscanf_r+0x5c>
 4004830:	29001917 	ldw	r4,100(r5)
 4004834:	00f7ffc4 	movi	r3,-8193
 4004838:	10880014 	ori	r2,r2,8192
 400483c:	20c6703a 	and	r3,r4,r3
 4004840:	2880030d 	sth	r2,12(r5)
 4004844:	28c01915 	stw	r3,100(r5)
 4004848:	30800003 	ldbu	r2,0(r6)
 400484c:	0021883a 	mov	r16,zero
 4004850:	058100b4 	movhi	r22,1026
 4004854:	d800a115 	stw	zero,644(sp)
 4004858:	d8009e15 	stw	zero,632(sp)
 400485c:	d800a015 	stw	zero,640(sp)
 4004860:	d8809b15 	stw	r2,620(sp)
 4004864:	b5a8e004 	addi	r22,r22,-23680
 4004868:	8025883a 	mov	r18,r16
 400486c:	e027883a 	mov	r19,fp
 4004870:	35000044 	addi	r20,r6,1
 4004874:	10001e26 	beq	r2,zero,40048f0 <__svfscanf_r+0x104>
 4004878:	b4000017 	ldw	r16,0(r22)
 400487c:	8087883a 	add	r3,r16,r2
 4004880:	18c00043 	ldbu	r3,1(r3)
 4004884:	18c0020c 	andi	r3,r3,8
 4004888:	18001b26 	beq	r3,zero,40048f8 <__svfscanf_r+0x10c>
 400488c:	98800117 	ldw	r2,4(r19)
 4004890:	00800e0e 	bge	zero,r2,40048cc <__svfscanf_r+0xe0>
 4004894:	98c00017 	ldw	r3,0(r19)
 4004898:	b1000017 	ldw	r4,0(r22)
 400489c:	18800003 	ldbu	r2,0(r3)
 40048a0:	2085883a 	add	r2,r4,r2
 40048a4:	10800043 	ldbu	r2,1(r2)
 40048a8:	1080020c 	andi	r2,r2,8
 40048ac:	10000b26 	beq	r2,zero,40048dc <__svfscanf_r+0xf0>
 40048b0:	98800117 	ldw	r2,4(r19)
 40048b4:	18c00044 	addi	r3,r3,1
 40048b8:	98c00015 	stw	r3,0(r19)
 40048bc:	10bfffc4 	addi	r2,r2,-1
 40048c0:	98800115 	stw	r2,4(r19)
 40048c4:	94800044 	addi	r18,r18,1
 40048c8:	00bff216 	blt	zero,r2,4004894 <__alt_data_end+0xfc004894>
 40048cc:	980b883a 	mov	r5,r19
 40048d0:	b809883a 	mov	r4,r23
 40048d4:	4003f640 	call	4003f64 <__srefill_r>
 40048d8:	103fee26 	beq	r2,zero,4004894 <__alt_data_end+0xfc004894>
 40048dc:	a00d883a 	mov	r6,r20
 40048e0:	30800003 	ldbu	r2,0(r6)
 40048e4:	35000044 	addi	r20,r6,1
 40048e8:	d8809b15 	stw	r2,620(sp)
 40048ec:	103fe21e 	bne	r2,zero,4004878 <__alt_data_end+0xfc004878>
 40048f0:	d880a017 	ldw	r2,640(sp)
 40048f4:	00009a06 	br	4004b60 <__svfscanf_r+0x374>
 40048f8:	00c00944 	movi	r3,37
 40048fc:	10c0891e 	bne	r2,r3,4004b24 <__svfscanf_r+0x338>
 4004900:	0039883a 	mov	fp,zero
 4004904:	35400043 	ldbu	r21,1(r6)
 4004908:	0023883a 	mov	r17,zero
 400490c:	01801e04 	movi	r6,120
 4004910:	00c01b04 	movi	r3,108
 4004914:	e009883a 	mov	r4,fp
 4004918:	a1c00044 	addi	r7,r20,1
 400491c:	3540a236 	bltu	r6,r21,4004ba8 <__svfscanf_r+0x3bc>
 4004920:	a80490ba 	slli	r2,r21,2
 4004924:	01410034 	movhi	r5,1024
 4004928:	29524e04 	addi	r5,r5,18744
 400492c:	1145883a 	add	r2,r2,r5
 4004930:	10800017 	ldw	r2,0(r2)
 4004934:	1000683a 	jmp	r2
 4004938:	04004b5c 	xori	r16,zero,301
 400493c:	04004ba8 	cmpgeui	r16,zero,302
 4004940:	04004ba8 	cmpgeui	r16,zero,302
 4004944:	04004ba8 	cmpgeui	r16,zero,302
 4004948:	04004ba8 	cmpgeui	r16,zero,302
 400494c:	04004ba8 	cmpgeui	r16,zero,302
 4004950:	04004ba8 	cmpgeui	r16,zero,302
 4004954:	04004ba8 	cmpgeui	r16,zero,302
 4004958:	04004ba8 	cmpgeui	r16,zero,302
 400495c:	04004ba8 	cmpgeui	r16,zero,302
 4004960:	04004ba8 	cmpgeui	r16,zero,302
 4004964:	04004ba8 	cmpgeui	r16,zero,302
 4004968:	04004ba8 	cmpgeui	r16,zero,302
 400496c:	04004ba8 	cmpgeui	r16,zero,302
 4004970:	04004ba8 	cmpgeui	r16,zero,302
 4004974:	04004ba8 	cmpgeui	r16,zero,302
 4004978:	04004ba8 	cmpgeui	r16,zero,302
 400497c:	04004ba8 	cmpgeui	r16,zero,302
 4004980:	04004ba8 	cmpgeui	r16,zero,302
 4004984:	04004ba8 	cmpgeui	r16,zero,302
 4004988:	04004ba8 	cmpgeui	r16,zero,302
 400498c:	04004ba8 	cmpgeui	r16,zero,302
 4004990:	04004ba8 	cmpgeui	r16,zero,302
 4004994:	04004ba8 	cmpgeui	r16,zero,302
 4004998:	04004ba8 	cmpgeui	r16,zero,302
 400499c:	04004ba8 	cmpgeui	r16,zero,302
 40049a0:	04004ba8 	cmpgeui	r16,zero,302
 40049a4:	04004ba8 	cmpgeui	r16,zero,302
 40049a8:	04004ba8 	cmpgeui	r16,zero,302
 40049ac:	04004ba8 	cmpgeui	r16,zero,302
 40049b0:	04004ba8 	cmpgeui	r16,zero,302
 40049b4:	04004ba8 	cmpgeui	r16,zero,302
 40049b8:	04004ba8 	cmpgeui	r16,zero,302
 40049bc:	04004ba8 	cmpgeui	r16,zero,302
 40049c0:	04004ba8 	cmpgeui	r16,zero,302
 40049c4:	04004ba8 	cmpgeui	r16,zero,302
 40049c8:	04004ba8 	cmpgeui	r16,zero,302
 40049cc:	04004b1c 	xori	r16,zero,300
 40049d0:	04004ba8 	cmpgeui	r16,zero,302
 40049d4:	04004ba8 	cmpgeui	r16,zero,302
 40049d8:	04004ba8 	cmpgeui	r16,zero,302
 40049dc:	04004ba8 	cmpgeui	r16,zero,302
 40049e0:	04004b90 	cmplti	r16,zero,302
 40049e4:	04004ba8 	cmpgeui	r16,zero,302
 40049e8:	04004ba8 	cmpgeui	r16,zero,302
 40049ec:	04004ba8 	cmpgeui	r16,zero,302
 40049f0:	04004ba8 	cmpgeui	r16,zero,302
 40049f4:	04004ba8 	cmpgeui	r16,zero,302
 40049f8:	04004cf0 	cmpltui	r16,zero,307
 40049fc:	04004cf0 	cmpltui	r16,zero,307
 4004a00:	04004cf0 	cmpltui	r16,zero,307
 4004a04:	04004cf0 	cmpltui	r16,zero,307
 4004a08:	04004cf0 	cmpltui	r16,zero,307
 4004a0c:	04004cf0 	cmpltui	r16,zero,307
 4004a10:	04004cf0 	cmpltui	r16,zero,307
 4004a14:	04004cf0 	cmpltui	r16,zero,307
 4004a18:	04004cf0 	cmpltui	r16,zero,307
 4004a1c:	04004cf0 	cmpltui	r16,zero,307
 4004a20:	04004ba8 	cmpgeui	r16,zero,302
 4004a24:	04004ba8 	cmpgeui	r16,zero,302
 4004a28:	04004ba8 	cmpgeui	r16,zero,302
 4004a2c:	04004ba8 	cmpgeui	r16,zero,302
 4004a30:	04004ba8 	cmpgeui	r16,zero,302
 4004a34:	04004ba8 	cmpgeui	r16,zero,302
 4004a38:	04004ba8 	cmpgeui	r16,zero,302
 4004a3c:	04004ba8 	cmpgeui	r16,zero,302
 4004a40:	04004ba8 	cmpgeui	r16,zero,302
 4004a44:	04004ba8 	cmpgeui	r16,zero,302
 4004a48:	04004cc0 	call	4004cc <__alt_mem_sdram-0x3bffb34>
 4004a4c:	04004d9c 	xori	r16,zero,310
 4004a50:	04004ba8 	cmpgeui	r16,zero,302
 4004a54:	04004d9c 	xori	r16,zero,310
 4004a58:	04004ba8 	cmpgeui	r16,zero,302
 4004a5c:	04004ba8 	cmpgeui	r16,zero,302
 4004a60:	04004ba8 	cmpgeui	r16,zero,302
 4004a64:	04004ba8 	cmpgeui	r16,zero,302
 4004a68:	04004d88 	cmpgei	r16,zero,310
 4004a6c:	04004ba8 	cmpgeui	r16,zero,302
 4004a70:	04004ba8 	cmpgeui	r16,zero,302
 4004a74:	04004d58 	cmpnei	r16,zero,309
 4004a78:	04004ba8 	cmpgeui	r16,zero,302
 4004a7c:	04004ba8 	cmpgeui	r16,zero,302
 4004a80:	04004ba8 	cmpgeui	r16,zero,302
 4004a84:	04004ba8 	cmpgeui	r16,zero,302
 4004a88:	04004ba8 	cmpgeui	r16,zero,302
 4004a8c:	04004ba8 	cmpgeui	r16,zero,302
 4004a90:	04004ba8 	cmpgeui	r16,zero,302
 4004a94:	04004ba8 	cmpgeui	r16,zero,302
 4004a98:	04004d28 	cmpgeui	r16,zero,308
 4004a9c:	04004ba8 	cmpgeui	r16,zero,302
 4004aa0:	04004ba8 	cmpgeui	r16,zero,302
 4004aa4:	04004ee4 	muli	r16,zero,315
 4004aa8:	04004ba8 	cmpgeui	r16,zero,302
 4004aac:	04004ba8 	cmpgeui	r16,zero,302
 4004ab0:	04004ba8 	cmpgeui	r16,zero,302
 4004ab4:	04004ba8 	cmpgeui	r16,zero,302
 4004ab8:	04004ba8 	cmpgeui	r16,zero,302
 4004abc:	04004ba8 	cmpgeui	r16,zero,302
 4004ac0:	04004ba8 	cmpgeui	r16,zero,302
 4004ac4:	04004e64 	muli	r16,zero,313
 4004ac8:	04004e38 	rdprs	r16,zero,312
 4004acc:	04004d9c 	xori	r16,zero,310
 4004ad0:	04004d9c 	xori	r16,zero,310
 4004ad4:	04004d9c 	xori	r16,zero,310
 4004ad8:	04004e24 	muli	r16,zero,312
 4004adc:	04004f74 	movhi	r16,317
 4004ae0:	04004ba8 	cmpgeui	r16,zero,302
 4004ae4:	04004ba8 	cmpgeui	r16,zero,302
 4004ae8:	04004e10 	cmplti	r16,zero,312
 4004aec:	04004ba8 	cmpgeui	r16,zero,302
 4004af0:	04004de0 	cmpeqi	r16,zero,311
 4004af4:	04004db4 	movhi	r16,310
 4004af8:	04004c90 	cmplti	r16,zero,306
 4004afc:	04004ba8 	cmpgeui	r16,zero,302
 4004b00:	04004ba8 	cmpgeui	r16,zero,302
 4004b04:	04004c78 	rdprs	r16,zero,305
 4004b08:	04004ba8 	cmpgeui	r16,zero,302
 4004b0c:	04004bfc 	xorhi	r16,zero,303
 4004b10:	04004ba8 	cmpgeui	r16,zero,302
 4004b14:	04004ba8 	cmpgeui	r16,zero,302
 4004b18:	04004d28 	cmpgeui	r16,zero,308
 4004b1c:	d9c09d15 	stw	r7,628(sp)
 4004b20:	3829883a 	mov	r20,r7
 4004b24:	98800117 	ldw	r2,4(r19)
 4004b28:	0081c60e 	bge	zero,r2,4005244 <__svfscanf_r+0xa58>
 4004b2c:	98800017 	ldw	r2,0(r19)
 4004b30:	a0ffffc3 	ldbu	r3,-1(r20)
 4004b34:	11000003 	ldbu	r4,0(r2)
 4004b38:	20ff6d1e 	bne	r4,r3,40048f0 <__alt_data_end+0xfc0048f0>
 4004b3c:	98c00117 	ldw	r3,4(r19)
 4004b40:	10800044 	addi	r2,r2,1
 4004b44:	98800015 	stw	r2,0(r19)
 4004b48:	18bfffc4 	addi	r2,r3,-1
 4004b4c:	98800115 	stw	r2,4(r19)
 4004b50:	94800044 	addi	r18,r18,1
 4004b54:	a00d883a 	mov	r6,r20
 4004b58:	003f6106 	br	40048e0 <__alt_data_end+0xfc0048e0>
 4004b5c:	00bfffc4 	movi	r2,-1
 4004b60:	dfc0b417 	ldw	ra,720(sp)
 4004b64:	df00b317 	ldw	fp,716(sp)
 4004b68:	ddc0b217 	ldw	r23,712(sp)
 4004b6c:	dd80b117 	ldw	r22,708(sp)
 4004b70:	dd40b017 	ldw	r21,704(sp)
 4004b74:	dd00af17 	ldw	r20,700(sp)
 4004b78:	dcc0ae17 	ldw	r19,696(sp)
 4004b7c:	dc80ad17 	ldw	r18,692(sp)
 4004b80:	dc40ac17 	ldw	r17,688(sp)
 4004b84:	dc00ab17 	ldw	r16,684(sp)
 4004b88:	dec0b504 	addi	sp,sp,724
 4004b8c:	f800283a 	ret
 4004b90:	a1400043 	ldbu	r5,1(r20)
 4004b94:	3829883a 	mov	r20,r7
 4004b98:	8c400414 	ori	r17,r17,16
 4004b9c:	2d403fcc 	andi	r21,r5,255
 4004ba0:	a1c00044 	addi	r7,r20,1
 4004ba4:	357f5e2e 	bgeu	r6,r21,4004920 <__alt_data_end+0xfc004920>
 4004ba8:	856b883a 	add	r21,r16,r21
 4004bac:	a8800043 	ldbu	r2,1(r21)
 4004bb0:	d9c09d15 	stw	r7,628(sp)
 4004bb4:	00c00044 	movi	r3,1
 4004bb8:	108000cc 	andi	r2,r2,3
 4004bbc:	2039883a 	mov	fp,r4
 4004bc0:	10c1a526 	beq	r2,r3,4005258 <__svfscanf_r+0xa6c>
 4004bc4:	98800117 	ldw	r2,4(r19)
 4004bc8:	00804216 	blt	zero,r2,4004cd4 <__svfscanf_r+0x4e8>
 4004bcc:	980b883a 	mov	r5,r19
 4004bd0:	b809883a 	mov	r4,r23
 4004bd4:	4003f640 	call	4003f64 <__srefill_r>
 4004bd8:	10015e1e 	bne	r2,zero,4005154 <__svfscanf_r+0x968>
 4004bdc:	01010074 	movhi	r4,1025
 4004be0:	2123a904 	addi	r4,r4,-29020
 4004be4:	01400284 	movi	r5,10
 4004be8:	b4000017 	ldw	r16,0(r22)
 4004bec:	d900a115 	stw	r4,644(sp)
 4004bf0:	d9409e15 	stw	r5,632(sp)
 4004bf4:	050000c4 	movi	r20,3
 4004bf8:	00000a06 	br	4004c24 <__svfscanf_r+0x438>
 4004bfc:	98800117 	ldw	r2,4(r19)
 4004c00:	d9c09d15 	stw	r7,628(sp)
 4004c04:	2039883a 	mov	fp,r4
 4004c08:	0081e20e 	bge	zero,r2,4005394 <__svfscanf_r+0xba8>
 4004c0c:	00c10074 	movhi	r3,1025
 4004c10:	18e50704 	addi	r3,r3,-27620
 4004c14:	01000284 	movi	r4,10
 4004c18:	d8c0a115 	stw	r3,644(sp)
 4004c1c:	d9009e15 	stw	r4,632(sp)
 4004c20:	050000c4 	movi	r20,3
 4004c24:	98c00017 	ldw	r3,0(r19)
 4004c28:	00000206 	br	4004c34 <__svfscanf_r+0x448>
 4004c2c:	18c00044 	addi	r3,r3,1
 4004c30:	98c00015 	stw	r3,0(r19)
 4004c34:	19000003 	ldbu	r4,0(r3)
 4004c38:	20803fcc 	andi	r2,r4,255
 4004c3c:	8085883a 	add	r2,r16,r2
 4004c40:	10800043 	ldbu	r2,1(r2)
 4004c44:	1140020c 	andi	r5,r2,8
 4004c48:	28020126 	beq	r5,zero,4005450 <__svfscanf_r+0xc64>
 4004c4c:	98800117 	ldw	r2,4(r19)
 4004c50:	94800044 	addi	r18,r18,1
 4004c54:	10bfffc4 	addi	r2,r2,-1
 4004c58:	98800115 	stw	r2,4(r19)
 4004c5c:	00bff316 	blt	zero,r2,4004c2c <__alt_data_end+0xfc004c2c>
 4004c60:	980b883a 	mov	r5,r19
 4004c64:	b809883a 	mov	r4,r23
 4004c68:	4003f640 	call	4003f64 <__srefill_r>
 4004c6c:	1001391e 	bne	r2,zero,4005154 <__svfscanf_r+0x968>
 4004c70:	b4000017 	ldw	r16,0(r22)
 4004c74:	003feb06 	br	4004c24 <__alt_data_end+0xfc004c24>
 4004c78:	98800117 	ldw	r2,4(r19)
 4004c7c:	d9c09d15 	stw	r7,628(sp)
 4004c80:	2039883a 	mov	fp,r4
 4004c84:	0081aa0e 	bge	zero,r2,4005330 <__svfscanf_r+0xb44>
 4004c88:	05000084 	movi	r20,2
 4004c8c:	003fe506 	br	4004c24 <__alt_data_end+0xfc004c24>
 4004c90:	98800117 	ldw	r2,4(r19)
 4004c94:	d9c09d15 	stw	r7,628(sp)
 4004c98:	2039883a 	mov	fp,r4
 4004c9c:	8c408814 	ori	r17,r17,544
 4004ca0:	0081df0e 	bge	zero,r2,4005420 <__svfscanf_r+0xc34>
 4004ca4:	00c10074 	movhi	r3,1025
 4004ca8:	18e50704 	addi	r3,r3,-27620
 4004cac:	01000404 	movi	r4,16
 4004cb0:	d8c0a115 	stw	r3,644(sp)
 4004cb4:	d9009e15 	stw	r4,632(sp)
 4004cb8:	050000c4 	movi	r20,3
 4004cbc:	003fd906 	br	4004c24 <__alt_data_end+0xfc004c24>
 4004cc0:	98800117 	ldw	r2,4(r19)
 4004cc4:	d9c09d15 	stw	r7,628(sp)
 4004cc8:	2039883a 	mov	fp,r4
 4004ccc:	8c400054 	ori	r17,r17,1
 4004cd0:	0081850e 	bge	zero,r2,40052e8 <__svfscanf_r+0xafc>
 4004cd4:	00c10074 	movhi	r3,1025
 4004cd8:	18e3a904 	addi	r3,r3,-29020
 4004cdc:	01000284 	movi	r4,10
 4004ce0:	d8c0a115 	stw	r3,644(sp)
 4004ce4:	d9009e15 	stw	r4,632(sp)
 4004ce8:	050000c4 	movi	r20,3
 4004cec:	003fcd06 	br	4004c24 <__alt_data_end+0xfc004c24>
 4004cf0:	01400284 	movi	r5,10
 4004cf4:	d8c0a615 	stw	r3,664(sp)
 4004cf8:	d980a915 	stw	r6,676(sp)
 4004cfc:	d9c0aa15 	stw	r7,680(sp)
 4004d00:	4001a140 	call	4001a14 <__mulsi3>
 4004d04:	a1400043 	ldbu	r5,1(r20)
 4004d08:	d9c0aa17 	ldw	r7,680(sp)
 4004d0c:	1545883a 	add	r2,r2,r21
 4004d10:	113ff404 	addi	r4,r2,-48
 4004d14:	3829883a 	mov	r20,r7
 4004d18:	2d403fcc 	andi	r21,r5,255
 4004d1c:	d8c0a617 	ldw	r3,664(sp)
 4004d20:	d980a917 	ldw	r6,676(sp)
 4004d24:	003efc06 	br	4004918 <__alt_data_end+0xfc004918>
 4004d28:	98800117 	ldw	r2,4(r19)
 4004d2c:	d9c09d15 	stw	r7,628(sp)
 4004d30:	2039883a 	mov	fp,r4
 4004d34:	8c408014 	ori	r17,r17,512
 4004d38:	0081710e 	bge	zero,r2,4005300 <__svfscanf_r+0xb14>
 4004d3c:	01410074 	movhi	r5,1025
 4004d40:	29650704 	addi	r5,r5,-27620
 4004d44:	00800404 	movi	r2,16
 4004d48:	d940a115 	stw	r5,644(sp)
 4004d4c:	d8809e15 	stw	r2,632(sp)
 4004d50:	050000c4 	movi	r20,3
 4004d54:	003fb306 	br	4004c24 <__alt_data_end+0xfc004c24>
 4004d58:	98800117 	ldw	r2,4(r19)
 4004d5c:	d9c09d15 	stw	r7,628(sp)
 4004d60:	2039883a 	mov	fp,r4
 4004d64:	8c400054 	ori	r17,r17,1
 4004d68:	0081840e 	bge	zero,r2,400537c <__svfscanf_r+0xb90>
 4004d6c:	01410074 	movhi	r5,1025
 4004d70:	29650704 	addi	r5,r5,-27620
 4004d74:	00800204 	movi	r2,8
 4004d78:	d940a115 	stw	r5,644(sp)
 4004d7c:	d8809e15 	stw	r2,632(sp)
 4004d80:	050000c4 	movi	r20,3
 4004d84:	003fa706 	br	4004c24 <__alt_data_end+0xfc004c24>
 4004d88:	a1400043 	ldbu	r5,1(r20)
 4004d8c:	8c400094 	ori	r17,r17,2
 4004d90:	3829883a 	mov	r20,r7
 4004d94:	2d403fcc 	andi	r21,r5,255
 4004d98:	003edf06 	br	4004918 <__alt_data_end+0xfc004918>
 4004d9c:	98800117 	ldw	r2,4(r19)
 4004da0:	d9c09d15 	stw	r7,628(sp)
 4004da4:	2039883a 	mov	fp,r4
 4004da8:	00816d0e 	bge	zero,r2,4005360 <__svfscanf_r+0xb74>
 4004dac:	05000104 	movi	r20,4
 4004db0:	003f9c06 	br	4004c24 <__alt_data_end+0xfc004c24>
 4004db4:	98800117 	ldw	r2,4(r19)
 4004db8:	d9c09d15 	stw	r7,628(sp)
 4004dbc:	2039883a 	mov	fp,r4
 4004dc0:	0081800e 	bge	zero,r2,40053c4 <__svfscanf_r+0xbd8>
 4004dc4:	01010074 	movhi	r4,1025
 4004dc8:	21250704 	addi	r4,r4,-27620
 4004dcc:	01400204 	movi	r5,8
 4004dd0:	d900a115 	stw	r4,644(sp)
 4004dd4:	d9409e15 	stw	r5,632(sp)
 4004dd8:	050000c4 	movi	r20,3
 4004ddc:	003f9106 	br	4004c24 <__alt_data_end+0xfc004c24>
 4004de0:	d9c09d15 	stw	r7,628(sp)
 4004de4:	8880040c 	andi	r2,r17,16
 4004de8:	1000a01e 	bne	r2,zero,400506c <__svfscanf_r+0x880>
 4004dec:	8880010c 	andi	r2,r17,4
 4004df0:	10012826 	beq	r2,zero,4005294 <__svfscanf_r+0xaa8>
 4004df4:	d9009c17 	ldw	r4,624(sp)
 4004df8:	3829883a 	mov	r20,r7
 4004dfc:	20800017 	ldw	r2,0(r4)
 4004e00:	21000104 	addi	r4,r4,4
 4004e04:	d9009c15 	stw	r4,624(sp)
 4004e08:	1480000d 	sth	r18,0(r2)
 4004e0c:	003eb306 	br	40048dc <__alt_data_end+0xfc0048dc>
 4004e10:	a5400043 	ldbu	r21,1(r20)
 4004e14:	a8c11a26 	beq	r21,r3,4005280 <__svfscanf_r+0xa94>
 4004e18:	8c400054 	ori	r17,r17,1
 4004e1c:	3829883a 	mov	r20,r7
 4004e20:	003ebd06 	br	4004918 <__alt_data_end+0xfc004918>
 4004e24:	a1400043 	ldbu	r5,1(r20)
 4004e28:	8c400114 	ori	r17,r17,4
 4004e2c:	3829883a 	mov	r20,r7
 4004e30:	2d403fcc 	andi	r21,r5,255
 4004e34:	003eb806 	br	4004918 <__alt_data_end+0xfc004918>
 4004e38:	98800117 	ldw	r2,4(r19)
 4004e3c:	d9c09d15 	stw	r7,628(sp)
 4004e40:	2039883a 	mov	fp,r4
 4004e44:	00bf610e 	bge	zero,r2,4004bcc <__alt_data_end+0xfc004bcc>
 4004e48:	00810074 	movhi	r2,1025
 4004e4c:	10a3a904 	addi	r2,r2,-29020
 4004e50:	00c00284 	movi	r3,10
 4004e54:	d880a115 	stw	r2,644(sp)
 4004e58:	d8c09e15 	stw	r3,632(sp)
 4004e5c:	050000c4 	movi	r20,3
 4004e60:	003f7006 	br	4004c24 <__alt_data_end+0xfc004c24>
 4004e64:	98800117 	ldw	r2,4(r19)
 4004e68:	d9c09d15 	stw	r7,628(sp)
 4004e6c:	2039883a 	mov	fp,r4
 4004e70:	0080c60e 	bge	zero,r2,400518c <__svfscanf_r+0x9a0>
 4004e74:	e000011e 	bne	fp,zero,4004e7c <__svfscanf_r+0x690>
 4004e78:	07000044 	movi	fp,1
 4004e7c:	8880004c 	andi	r2,r17,1
 4004e80:	1000461e 	bne	r2,zero,4004f9c <__svfscanf_r+0x7b0>
 4004e84:	8c40040c 	andi	r17,r17,16
 4004e88:	8800dc26 	beq	r17,zero,40051fc <__svfscanf_r+0xa10>
 4004e8c:	0021883a 	mov	r16,zero
 4004e90:	00000806 	br	4004eb4 <__svfscanf_r+0x6c8>
 4004e94:	1887883a 	add	r3,r3,r2
 4004e98:	980b883a 	mov	r5,r19
 4004e9c:	b809883a 	mov	r4,r23
 4004ea0:	98c00015 	stw	r3,0(r19)
 4004ea4:	80a1883a 	add	r16,r16,r2
 4004ea8:	e0b9c83a 	sub	fp,fp,r2
 4004eac:	4003f640 	call	4003f64 <__srefill_r>
 4004eb0:	1000cc1e 	bne	r2,zero,40051e4 <__svfscanf_r+0x9f8>
 4004eb4:	98800117 	ldw	r2,4(r19)
 4004eb8:	98c00017 	ldw	r3,0(r19)
 4004ebc:	173ff516 	blt	r2,fp,4004e94 <__alt_data_end+0xfc004e94>
 4004ec0:	1705c83a 	sub	r2,r2,fp
 4004ec4:	1f15883a 	add	r10,r3,fp
 4004ec8:	8721883a 	add	r16,r16,fp
 4004ecc:	98800115 	stw	r2,4(r19)
 4004ed0:	9a800015 	stw	r10,0(r19)
 4004ed4:	dd009d17 	ldw	r20,628(sp)
 4004ed8:	9425883a 	add	r18,r18,r16
 4004edc:	a00d883a 	mov	r6,r20
 4004ee0:	003e7f06 	br	40048e0 <__alt_data_end+0xfc0048e0>
 4004ee4:	2039883a 	mov	fp,r4
 4004ee8:	380b883a 	mov	r5,r7
 4004eec:	d9005884 	addi	r4,sp,354
 4004ef0:	d9c09d15 	stw	r7,628(sp)
 4004ef4:	40074cc0 	call	40074cc <__sccl>
 4004ef8:	1029883a 	mov	r20,r2
 4004efc:	98800117 	ldw	r2,4(r19)
 4004f00:	0081120e 	bge	zero,r2,400534c <__svfscanf_r+0xb60>
 4004f04:	99000017 	ldw	r4,0(r19)
 4004f08:	20800003 	ldbu	r2,0(r4)
 4004f0c:	e0005a26 	beq	fp,zero,4005078 <__svfscanf_r+0x88c>
 4004f10:	8c40040c 	andi	r17,r17,16
 4004f14:	88005b26 	beq	r17,zero,4005084 <__svfscanf_r+0x898>
 4004f18:	e023883a 	mov	r17,fp
 4004f1c:	0021883a 	mov	r16,zero
 4004f20:	00000106 	br	4004f28 <__svfscanf_r+0x73c>
 4004f24:	20800003 	ldbu	r2,0(r4)
 4004f28:	10803fcc 	andi	r2,r2,255
 4004f2c:	d8c05884 	addi	r3,sp,354
 4004f30:	1885883a 	add	r2,r3,r2
 4004f34:	10800007 	ldb	r2,0(r2)
 4004f38:	1000ae26 	beq	r2,zero,40051f4 <__svfscanf_r+0xa08>
 4004f3c:	98800117 	ldw	r2,4(r19)
 4004f40:	21000044 	addi	r4,r4,1
 4004f44:	84000044 	addi	r16,r16,1
 4004f48:	10bfffc4 	addi	r2,r2,-1
 4004f4c:	98800115 	stw	r2,4(r19)
 4004f50:	99000015 	stw	r4,0(r19)
 4004f54:	8700a126 	beq	r16,fp,40051dc <__svfscanf_r+0x9f0>
 4004f58:	00bff216 	blt	zero,r2,4004f24 <__alt_data_end+0xfc004f24>
 4004f5c:	980b883a 	mov	r5,r19
 4004f60:	b809883a 	mov	r4,r23
 4004f64:	4003f640 	call	4003f64 <__srefill_r>
 4004f68:	10009b1e 	bne	r2,zero,40051d8 <__svfscanf_r+0x9ec>
 4004f6c:	99000017 	ldw	r4,0(r19)
 4004f70:	003fec06 	br	4004f24 <__alt_data_end+0xfc004f24>
 4004f74:	98800117 	ldw	r2,4(r19)
 4004f78:	d9c09d15 	stw	r7,628(sp)
 4004f7c:	2039883a 	mov	fp,r4
 4004f80:	00811c0e 	bge	zero,r2,40053f4 <__svfscanf_r+0xc08>
 4004f84:	01410074 	movhi	r5,1025
 4004f88:	2963a904 	addi	r5,r5,-29020
 4004f8c:	d940a115 	stw	r5,644(sp)
 4004f90:	d8009e15 	stw	zero,632(sp)
 4004f94:	050000c4 	movi	r20,3
 4004f98:	003f2206 	br	4004c24 <__alt_data_end+0xfc004c24>
 4004f9c:	dd409904 	addi	r21,sp,612
 4004fa0:	8c40040c 	andi	r17,r17,16
 4004fa4:	01800204 	movi	r6,8
 4004fa8:	000b883a 	mov	r5,zero
 4004fac:	a809883a 	mov	r4,r21
 4004fb0:	dc409f15 	stw	r17,636(sp)
 4004fb4:	4003cec0 	call	4003cec <memset>
 4004fb8:	dc409f17 	ldw	r17,636(sp)
 4004fbc:	88006e26 	beq	r17,zero,4005178 <__svfscanf_r+0x98c>
 4004fc0:	0029883a 	mov	r20,zero
 4004fc4:	0023883a 	mov	r17,zero
 4004fc8:	400697c0 	call	400697c <__locale_mb_cur_max>
 4004fcc:	14406126 	beq	r2,r17,4005154 <__svfscanf_r+0x968>
 4004fd0:	98800017 	ldw	r2,0(r19)
 4004fd4:	98c00117 	ldw	r3,4(r19)
 4004fd8:	d9000104 	addi	r4,sp,4
 4004fdc:	12000003 	ldbu	r8,0(r2)
 4004fe0:	18ffffc4 	addi	r3,r3,-1
 4004fe4:	10800044 	addi	r2,r2,1
 4004fe8:	98c00115 	stw	r3,4(r19)
 4004fec:	98800015 	stw	r2,0(r19)
 4004ff0:	8c000044 	addi	r16,r17,1
 4004ff4:	dd400015 	stw	r21,0(sp)
 4004ff8:	2463883a 	add	r17,r4,r17
 4004ffc:	200d883a 	mov	r6,r4
 4005000:	a00b883a 	mov	r5,r20
 4005004:	800f883a 	mov	r7,r16
 4005008:	b809883a 	mov	r4,r23
 400500c:	8a000005 	stb	r8,0(r17)
 4005010:	4006a300 	call	4006a30 <_mbrtowc_r>
 4005014:	017fffc4 	movi	r5,-1
 4005018:	11404e26 	beq	r2,r5,4005154 <__svfscanf_r+0x968>
 400501c:	1000601e 	bne	r2,zero,40051a0 <__svfscanf_r+0x9b4>
 4005020:	d8c09f17 	ldw	r3,636(sp)
 4005024:	1800641e 	bne	r3,zero,40051b8 <__svfscanf_r+0x9cc>
 4005028:	a0000015 	stw	zero,0(r20)
 400502c:	9425883a 	add	r18,r18,r16
 4005030:	e179883a 	add	fp,fp,r5
 4005034:	a5000104 	addi	r20,r20,4
 4005038:	98800117 	ldw	r2,4(r19)
 400503c:	0023883a 	mov	r17,zero
 4005040:	00804b16 	blt	zero,r2,4005170 <__svfscanf_r+0x984>
 4005044:	980b883a 	mov	r5,r19
 4005048:	b809883a 	mov	r4,r23
 400504c:	4003f640 	call	4003f64 <__srefill_r>
 4005050:	10004726 	beq	r2,zero,4005170 <__svfscanf_r+0x984>
 4005054:	88003f1e 	bne	r17,zero,4005154 <__svfscanf_r+0x968>
 4005058:	d8c09f17 	ldw	r3,636(sp)
 400505c:	1800031e 	bne	r3,zero,400506c <__svfscanf_r+0x880>
 4005060:	d900a017 	ldw	r4,640(sp)
 4005064:	21000044 	addi	r4,r4,1
 4005068:	d900a015 	stw	r4,640(sp)
 400506c:	dd009d17 	ldw	r20,628(sp)
 4005070:	a00d883a 	mov	r6,r20
 4005074:	003e1a06 	br	40048e0 <__alt_data_end+0xfc0048e0>
 4005078:	8c40040c 	andi	r17,r17,16
 400507c:	073fffc4 	movi	fp,-1
 4005080:	883fa51e 	bne	r17,zero,4004f18 <__alt_data_end+0xfc004f18>
 4005084:	d9409c17 	ldw	r5,624(sp)
 4005088:	e2bfffc4 	addi	r10,fp,-1
 400508c:	2c000017 	ldw	r16,0(r5)
 4005090:	2c400104 	addi	r17,r5,4
 4005094:	8007883a 	mov	r3,r16
 4005098:	82ab883a 	add	r21,r16,r10
 400509c:	00000306 	br	40050ac <__svfscanf_r+0x8c0>
 40050a0:	99000017 	ldw	r4,0(r19)
 40050a4:	e007883a 	mov	r3,fp
 40050a8:	20800003 	ldbu	r2,0(r4)
 40050ac:	10803fcc 	andi	r2,r2,255
 40050b0:	d9405884 	addi	r5,sp,354
 40050b4:	2885883a 	add	r2,r5,r2
 40050b8:	10800007 	ldb	r2,0(r2)
 40050bc:	10004b26 	beq	r2,zero,40051ec <__svfscanf_r+0xa00>
 40050c0:	98800117 	ldw	r2,4(r19)
 40050c4:	21400044 	addi	r5,r4,1
 40050c8:	99400015 	stw	r5,0(r19)
 40050cc:	10bfffc4 	addi	r2,r2,-1
 40050d0:	98800115 	stw	r2,4(r19)
 40050d4:	20800003 	ldbu	r2,0(r4)
 40050d8:	1f000044 	addi	fp,r3,1
 40050dc:	18800005 	stb	r2,0(r3)
 40050e0:	1d400726 	beq	r3,r21,4005100 <__svfscanf_r+0x914>
 40050e4:	98800117 	ldw	r2,4(r19)
 40050e8:	00bfed16 	blt	zero,r2,40050a0 <__alt_data_end+0xfc0050a0>
 40050ec:	980b883a 	mov	r5,r19
 40050f0:	b809883a 	mov	r4,r23
 40050f4:	4003f640 	call	4003f64 <__srefill_r>
 40050f8:	103fe926 	beq	r2,zero,40050a0 <__alt_data_end+0xfc0050a0>
 40050fc:	87001526 	beq	r16,fp,4005154 <__svfscanf_r+0x968>
 4005100:	e421c83a 	sub	r16,fp,r16
 4005104:	803dfa26 	beq	r16,zero,40048f0 <__alt_data_end+0xfc0048f0>
 4005108:	d880a017 	ldw	r2,640(sp)
 400510c:	e0000005 	stb	zero,0(fp)
 4005110:	dc409c15 	stw	r17,624(sp)
 4005114:	10800044 	addi	r2,r2,1
 4005118:	d880a015 	stw	r2,640(sp)
 400511c:	9425883a 	add	r18,r18,r16
 4005120:	a00d883a 	mov	r6,r20
 4005124:	003dee06 	br	40048e0 <__alt_data_end+0xfc0048e0>
 4005128:	013fff84 	movi	r4,-2
 400512c:	1103ed1e 	bne	r2,r4,40060e4 <__svfscanf_r+0x18f8>
 4005130:	8821883a 	mov	r16,r17
 4005134:	98800117 	ldw	r2,4(r19)
 4005138:	00834116 	blt	zero,r2,4005e40 <__svfscanf_r+0x1654>
 400513c:	980b883a 	mov	r5,r19
 4005140:	b809883a 	mov	r4,r23
 4005144:	4003f640 	call	4003f64 <__srefill_r>
 4005148:	10033d26 	beq	r2,zero,4005e40 <__svfscanf_r+0x1654>
 400514c:	dc409f17 	ldw	r17,636(sp)
 4005150:	80034426 	beq	r16,zero,4005e64 <__svfscanf_r+0x1678>
 4005154:	d900a017 	ldw	r4,640(sp)
 4005158:	203e8026 	beq	r4,zero,4004b5c <__alt_data_end+0xfc004b5c>
 400515c:	9880030b 	ldhu	r2,12(r19)
 4005160:	1080100c 	andi	r2,r2,64
 4005164:	103e7d1e 	bne	r2,zero,4004b5c <__alt_data_end+0xfc004b5c>
 4005168:	2005883a 	mov	r2,r4
 400516c:	003e7c06 	br	4004b60 <__alt_data_end+0xfc004b60>
 4005170:	e03f951e 	bne	fp,zero,4004fc8 <__alt_data_end+0xfc004fc8>
 4005174:	003fb806 	br	4005058 <__alt_data_end+0xfc005058>
 4005178:	d8809c17 	ldw	r2,624(sp)
 400517c:	15000017 	ldw	r20,0(r2)
 4005180:	10800104 	addi	r2,r2,4
 4005184:	d8809c15 	stw	r2,624(sp)
 4005188:	003f8e06 	br	4004fc4 <__alt_data_end+0xfc004fc4>
 400518c:	980b883a 	mov	r5,r19
 4005190:	b809883a 	mov	r4,r23
 4005194:	4003f640 	call	4003f64 <__srefill_r>
 4005198:	103f3626 	beq	r2,zero,4004e74 <__alt_data_end+0xfc004e74>
 400519c:	003fed06 	br	4005154 <__alt_data_end+0xfc005154>
 40051a0:	013fff84 	movi	r4,-2
 40051a4:	1100071e 	bne	r2,r4,40051c4 <__svfscanf_r+0x9d8>
 40051a8:	98800117 	ldw	r2,4(r19)
 40051ac:	8023883a 	mov	r17,r16
 40051b0:	00bf8516 	blt	zero,r2,4004fc8 <__alt_data_end+0xfc004fc8>
 40051b4:	003fa306 	br	4005044 <__alt_data_end+0xfc005044>
 40051b8:	9425883a 	add	r18,r18,r16
 40051bc:	e73fffc4 	addi	fp,fp,-1
 40051c0:	003f9d06 	br	4005038 <__alt_data_end+0xfc005038>
 40051c4:	d8c09f17 	ldw	r3,636(sp)
 40051c8:	9425883a 	add	r18,r18,r16
 40051cc:	e73fffc4 	addi	fp,fp,-1
 40051d0:	183f9826 	beq	r3,zero,4005034 <__alt_data_end+0xfc005034>
 40051d4:	003f9806 	br	4005038 <__alt_data_end+0xfc005038>
 40051d8:	8023883a 	mov	r17,r16
 40051dc:	8821883a 	mov	r16,r17
 40051e0:	003fce06 	br	400511c <__alt_data_end+0xfc00511c>
 40051e4:	803f3b1e 	bne	r16,zero,4004ed4 <__alt_data_end+0xfc004ed4>
 40051e8:	003fda06 	br	4005154 <__alt_data_end+0xfc005154>
 40051ec:	1839883a 	mov	fp,r3
 40051f0:	003fc306 	br	4005100 <__alt_data_end+0xfc005100>
 40051f4:	803fc91e 	bne	r16,zero,400511c <__alt_data_end+0xfc00511c>
 40051f8:	003dbd06 	br	40048f0 <__alt_data_end+0xfc0048f0>
 40051fc:	d8809c17 	ldw	r2,624(sp)
 4005200:	dcc00015 	stw	r19,0(sp)
 4005204:	b809883a 	mov	r4,r23
 4005208:	11400017 	ldw	r5,0(r2)
 400520c:	e00f883a 	mov	r7,fp
 4005210:	01800044 	movi	r6,1
 4005214:	40022a40 	call	40022a4 <_fread_r>
 4005218:	d9009c17 	ldw	r4,624(sp)
 400521c:	20c00104 	addi	r3,r4,4
 4005220:	103fcc26 	beq	r2,zero,4005154 <__alt_data_end+0xfc005154>
 4005224:	d940a017 	ldw	r5,640(sp)
 4005228:	dd009d17 	ldw	r20,628(sp)
 400522c:	90a5883a 	add	r18,r18,r2
 4005230:	29400044 	addi	r5,r5,1
 4005234:	d940a015 	stw	r5,640(sp)
 4005238:	d8c09c15 	stw	r3,624(sp)
 400523c:	a00d883a 	mov	r6,r20
 4005240:	003da706 	br	40048e0 <__alt_data_end+0xfc0048e0>
 4005244:	980b883a 	mov	r5,r19
 4005248:	b809883a 	mov	r4,r23
 400524c:	4003f640 	call	4003f64 <__srefill_r>
 4005250:	103e3626 	beq	r2,zero,4004b2c <__alt_data_end+0xfc004b2c>
 4005254:	003fbf06 	br	4005154 <__alt_data_end+0xfc005154>
 4005258:	98800117 	ldw	r2,4(r19)
 400525c:	88e2b03a 	or	r17,r17,r3
 4005260:	0080210e 	bge	zero,r2,40052e8 <__svfscanf_r+0xafc>
 4005264:	01410074 	movhi	r5,1025
 4005268:	2963a904 	addi	r5,r5,-29020
 400526c:	00800284 	movi	r2,10
 4005270:	d940a115 	stw	r5,644(sp)
 4005274:	d8809e15 	stw	r2,632(sp)
 4005278:	050000c4 	movi	r20,3
 400527c:	003e6906 	br	4004c24 <__alt_data_end+0xfc004c24>
 4005280:	a1400083 	ldbu	r5,2(r20)
 4005284:	8c400094 	ori	r17,r17,2
 4005288:	a5000084 	addi	r20,r20,2
 400528c:	2d403fcc 	andi	r21,r5,255
 4005290:	003da106 	br	4004918 <__alt_data_end+0xfc004918>
 4005294:	8880004c 	andi	r2,r17,1
 4005298:	10000c1e 	bne	r2,zero,40052cc <__svfscanf_r+0xae0>
 400529c:	8c40008c 	andi	r17,r17,2
 40052a0:	88000a26 	beq	r17,zero,40052cc <__svfscanf_r+0xae0>
 40052a4:	d8c09c17 	ldw	r3,624(sp)
 40052a8:	d9009c17 	ldw	r4,624(sp)
 40052ac:	dd009d17 	ldw	r20,628(sp)
 40052b0:	18800017 	ldw	r2,0(r3)
 40052b4:	9007d7fa 	srai	r3,r18,31
 40052b8:	21000104 	addi	r4,r4,4
 40052bc:	14800015 	stw	r18,0(r2)
 40052c0:	10c00115 	stw	r3,4(r2)
 40052c4:	d9009c15 	stw	r4,624(sp)
 40052c8:	003d8406 	br	40048dc <__alt_data_end+0xfc0048dc>
 40052cc:	d9409c17 	ldw	r5,624(sp)
 40052d0:	dd009d17 	ldw	r20,628(sp)
 40052d4:	28800017 	ldw	r2,0(r5)
 40052d8:	29400104 	addi	r5,r5,4
 40052dc:	d9409c15 	stw	r5,624(sp)
 40052e0:	14800015 	stw	r18,0(r2)
 40052e4:	003d7d06 	br	40048dc <__alt_data_end+0xfc0048dc>
 40052e8:	980b883a 	mov	r5,r19
 40052ec:	b809883a 	mov	r4,r23
 40052f0:	4003f640 	call	4003f64 <__srefill_r>
 40052f4:	103f971e 	bne	r2,zero,4005154 <__alt_data_end+0xfc005154>
 40052f8:	b4000017 	ldw	r16,0(r22)
 40052fc:	003ed206 	br	4004e48 <__alt_data_end+0xfc004e48>
 4005300:	980b883a 	mov	r5,r19
 4005304:	b809883a 	mov	r4,r23
 4005308:	4003f640 	call	4003f64 <__srefill_r>
 400530c:	103f911e 	bne	r2,zero,4005154 <__alt_data_end+0xfc005154>
 4005310:	01010074 	movhi	r4,1025
 4005314:	21250704 	addi	r4,r4,-27620
 4005318:	01400404 	movi	r5,16
 400531c:	b4000017 	ldw	r16,0(r22)
 4005320:	d900a115 	stw	r4,644(sp)
 4005324:	d9409e15 	stw	r5,632(sp)
 4005328:	050000c4 	movi	r20,3
 400532c:	003e3d06 	br	4004c24 <__alt_data_end+0xfc004c24>
 4005330:	980b883a 	mov	r5,r19
 4005334:	b809883a 	mov	r4,r23
 4005338:	4003f640 	call	4003f64 <__srefill_r>
 400533c:	103f851e 	bne	r2,zero,4005154 <__alt_data_end+0xfc005154>
 4005340:	b4000017 	ldw	r16,0(r22)
 4005344:	05000084 	movi	r20,2
 4005348:	003e3606 	br	4004c24 <__alt_data_end+0xfc004c24>
 400534c:	980b883a 	mov	r5,r19
 4005350:	b809883a 	mov	r4,r23
 4005354:	4003f640 	call	4003f64 <__srefill_r>
 4005358:	103eea26 	beq	r2,zero,4004f04 <__alt_data_end+0xfc004f04>
 400535c:	003f7d06 	br	4005154 <__alt_data_end+0xfc005154>
 4005360:	980b883a 	mov	r5,r19
 4005364:	b809883a 	mov	r4,r23
 4005368:	4003f640 	call	4003f64 <__srefill_r>
 400536c:	103f791e 	bne	r2,zero,4005154 <__alt_data_end+0xfc005154>
 4005370:	b4000017 	ldw	r16,0(r22)
 4005374:	05000104 	movi	r20,4
 4005378:	003e2a06 	br	4004c24 <__alt_data_end+0xfc004c24>
 400537c:	980b883a 	mov	r5,r19
 4005380:	b809883a 	mov	r4,r23
 4005384:	4003f640 	call	4003f64 <__srefill_r>
 4005388:	103f721e 	bne	r2,zero,4005154 <__alt_data_end+0xfc005154>
 400538c:	b4000017 	ldw	r16,0(r22)
 4005390:	003e8c06 	br	4004dc4 <__alt_data_end+0xfc004dc4>
 4005394:	980b883a 	mov	r5,r19
 4005398:	b809883a 	mov	r4,r23
 400539c:	4003f640 	call	4003f64 <__srefill_r>
 40053a0:	103f6c1e 	bne	r2,zero,4005154 <__alt_data_end+0xfc005154>
 40053a4:	00810074 	movhi	r2,1025
 40053a8:	10a50704 	addi	r2,r2,-27620
 40053ac:	00c00284 	movi	r3,10
 40053b0:	b4000017 	ldw	r16,0(r22)
 40053b4:	d880a115 	stw	r2,644(sp)
 40053b8:	d8c09e15 	stw	r3,632(sp)
 40053bc:	050000c4 	movi	r20,3
 40053c0:	003e1806 	br	4004c24 <__alt_data_end+0xfc004c24>
 40053c4:	980b883a 	mov	r5,r19
 40053c8:	b809883a 	mov	r4,r23
 40053cc:	4003f640 	call	4003f64 <__srefill_r>
 40053d0:	103f601e 	bne	r2,zero,4005154 <__alt_data_end+0xfc005154>
 40053d4:	00810074 	movhi	r2,1025
 40053d8:	10a50704 	addi	r2,r2,-27620
 40053dc:	00c00204 	movi	r3,8
 40053e0:	b4000017 	ldw	r16,0(r22)
 40053e4:	d880a115 	stw	r2,644(sp)
 40053e8:	d8c09e15 	stw	r3,632(sp)
 40053ec:	050000c4 	movi	r20,3
 40053f0:	003e0c06 	br	4004c24 <__alt_data_end+0xfc004c24>
 40053f4:	980b883a 	mov	r5,r19
 40053f8:	b809883a 	mov	r4,r23
 40053fc:	4003f640 	call	4003f64 <__srefill_r>
 4005400:	103f541e 	bne	r2,zero,4005154 <__alt_data_end+0xfc005154>
 4005404:	00810074 	movhi	r2,1025
 4005408:	10a3a904 	addi	r2,r2,-29020
 400540c:	b4000017 	ldw	r16,0(r22)
 4005410:	d880a115 	stw	r2,644(sp)
 4005414:	d8009e15 	stw	zero,632(sp)
 4005418:	050000c4 	movi	r20,3
 400541c:	003e0106 	br	4004c24 <__alt_data_end+0xfc004c24>
 4005420:	980b883a 	mov	r5,r19
 4005424:	b809883a 	mov	r4,r23
 4005428:	4003f640 	call	4003f64 <__srefill_r>
 400542c:	103f491e 	bne	r2,zero,4005154 <__alt_data_end+0xfc005154>
 4005430:	00810074 	movhi	r2,1025
 4005434:	10a50704 	addi	r2,r2,-27620
 4005438:	00c00404 	movi	r3,16
 400543c:	b4000017 	ldw	r16,0(r22)
 4005440:	d880a115 	stw	r2,644(sp)
 4005444:	d8c09e15 	stw	r3,632(sp)
 4005448:	050000c4 	movi	r20,3
 400544c:	003df506 	br	4004c24 <__alt_data_end+0xfc004c24>
 4005450:	014000c4 	movi	r5,3
 4005454:	a1416726 	beq	r20,r5,40059f4 <__svfscanf_r+0x1208>
 4005458:	01000104 	movi	r4,4
 400545c:	a101491e 	bne	r20,r4,4005984 <__svfscanf_r+0x1198>
 4005460:	b809883a 	mov	r4,r23
 4005464:	40069a00 	call	40069a0 <_localeconv_r>
 4005468:	10800017 	ldw	r2,0(r2)
 400546c:	e0ffffc4 	addi	r3,fp,-1
 4005470:	d880a315 	stw	r2,652(sp)
 4005474:	00805704 	movi	r2,348
 4005478:	10c21e2e 	bgeu	r2,r3,4005cf4 <__svfscanf_r+0x1508>
 400547c:	e73fa8c4 	addi	fp,fp,-349
 4005480:	df00a215 	stw	fp,648(sp)
 4005484:	07005744 	movi	fp,349
 4005488:	8d01e014 	ori	r20,r17,1920
 400548c:	0023883a 	mov	r17,zero
 4005490:	dc000104 	addi	r16,sp,4
 4005494:	002b883a 	mov	r21,zero
 4005498:	8805883a 	mov	r2,r17
 400549c:	0007883a 	mov	r3,zero
 40054a0:	8023883a 	mov	r17,r16
 40054a4:	b80d883a 	mov	r6,r23
 40054a8:	e021883a 	mov	r16,fp
 40054ac:	a82f883a 	mov	r23,r21
 40054b0:	d800a515 	stw	zero,660(sp)
 40054b4:	d800a415 	stw	zero,656(sp)
 40054b8:	d8009f15 	stw	zero,636(sp)
 40054bc:	01c01384 	movi	r7,78
 40054c0:	182b883a 	mov	r21,r3
 40054c4:	1039883a 	mov	fp,r2
 40054c8:	99000017 	ldw	r4,0(r19)
 40054cc:	21400003 	ldbu	r5,0(r4)
 40054d0:	28bff544 	addi	r2,r5,-43
 40054d4:	10803fcc 	andi	r2,r2,255
 40054d8:	38810e36 	bltu	r7,r2,4005914 <__svfscanf_r+0x1128>
 40054dc:	100490ba 	slli	r2,r2,2
 40054e0:	00c10034 	movhi	r3,1024
 40054e4:	18d53d04 	addi	r3,r3,21748
 40054e8:	10c5883a 	add	r2,r2,r3
 40054ec:	10800017 	ldw	r2,0(r2)
 40054f0:	1000683a 	jmp	r2
 40054f4:	040057e8 	cmpgeui	r16,zero,351
 40054f8:	04005914 	movui	r16,356
 40054fc:	040057e8 	cmpgeui	r16,zero,351
 4005500:	04005914 	movui	r16,356
 4005504:	04005914 	movui	r16,356
 4005508:	040057bc 	xorhi	r16,zero,350
 400550c:	04005630 	cmpltui	r16,zero,344
 4005510:	04005630 	cmpltui	r16,zero,344
 4005514:	04005630 	cmpltui	r16,zero,344
 4005518:	04005630 	cmpltui	r16,zero,344
 400551c:	04005630 	cmpltui	r16,zero,344
 4005520:	04005630 	cmpltui	r16,zero,344
 4005524:	04005630 	cmpltui	r16,zero,344
 4005528:	04005630 	cmpltui	r16,zero,344
 400552c:	04005630 	cmpltui	r16,zero,344
 4005530:	04005914 	movui	r16,356
 4005534:	04005914 	movui	r16,356
 4005538:	04005914 	movui	r16,356
 400553c:	04005914 	movui	r16,356
 4005540:	04005914 	movui	r16,356
 4005544:	04005914 	movui	r16,356
 4005548:	04005914 	movui	r16,356
 400554c:	04005904 	movi	r16,356
 4005550:	04005914 	movui	r16,356
 4005554:	04005914 	movui	r16,356
 4005558:	04005914 	movui	r16,356
 400555c:	040058c0 	call	40058c <__alt_mem_sdram-0x3bffa74>
 4005560:	040058a4 	muli	r16,zero,354
 4005564:	04005914 	movui	r16,356
 4005568:	04005914 	movui	r16,356
 400556c:	0400586c 	andhi	r16,zero,353
 4005570:	04005914 	movui	r16,356
 4005574:	04005914 	movui	r16,356
 4005578:	04005914 	movui	r16,356
 400557c:	04005914 	movui	r16,356
 4005580:	04005834 	movhi	r16,352
 4005584:	04005914 	movui	r16,356
 4005588:	04005914 	movui	r16,356
 400558c:	04005914 	movui	r16,356
 4005590:	04005914 	movui	r16,356
 4005594:	04005914 	movui	r16,356
 4005598:	04005818 	cmpnei	r16,zero,352
 400559c:	04005914 	movui	r16,356
 40055a0:	04005914 	movui	r16,356
 40055a4:	04005914 	movui	r16,356
 40055a8:	04005914 	movui	r16,356
 40055ac:	040057fc 	xorhi	r16,zero,351
 40055b0:	04005914 	movui	r16,356
 40055b4:	04005914 	movui	r16,356
 40055b8:	04005914 	movui	r16,356
 40055bc:	04005914 	movui	r16,356
 40055c0:	04005914 	movui	r16,356
 40055c4:	04005914 	movui	r16,356
 40055c8:	04005914 	movui	r16,356
 40055cc:	04005904 	movi	r16,356
 40055d0:	04005914 	movui	r16,356
 40055d4:	04005914 	movui	r16,356
 40055d8:	04005914 	movui	r16,356
 40055dc:	040058c0 	call	40058c <__alt_mem_sdram-0x3bffa74>
 40055e0:	040058a4 	muli	r16,zero,354
 40055e4:	04005914 	movui	r16,356
 40055e8:	04005914 	movui	r16,356
 40055ec:	0400586c 	andhi	r16,zero,353
 40055f0:	04005914 	movui	r16,356
 40055f4:	04005914 	movui	r16,356
 40055f8:	04005914 	movui	r16,356
 40055fc:	04005914 	movui	r16,356
 4005600:	04005834 	movhi	r16,352
 4005604:	04005914 	movui	r16,356
 4005608:	04005914 	movui	r16,356
 400560c:	04005914 	movui	r16,356
 4005610:	04005914 	movui	r16,356
 4005614:	04005914 	movui	r16,356
 4005618:	04005818 	cmpnei	r16,zero,352
 400561c:	04005914 	movui	r16,356
 4005620:	04005914 	movui	r16,356
 4005624:	04005914 	movui	r16,356
 4005628:	04005914 	movui	r16,356
 400562c:	040057fc 	xorhi	r16,zero,351
 4005630:	a8803fcc 	andi	r2,r21,255
 4005634:	1080201c 	xori	r2,r2,128
 4005638:	10bfe004 	addi	r2,r2,-128
 400563c:	b885883a 	add	r2,r23,r2
 4005640:	10000d1e 	bne	r2,zero,4005678 <__svfscanf_r+0xe8c>
 4005644:	00bf9fc4 	movi	r2,-385
 4005648:	a0a8703a 	and	r20,r20,r2
 400564c:	89400005 	stb	r5,0(r17)
 4005650:	8c400044 	addi	r17,r17,1
 4005654:	98800117 	ldw	r2,4(r19)
 4005658:	843fffc4 	addi	r16,r16,-1
 400565c:	94800044 	addi	r18,r18,1
 4005660:	10bfffc4 	addi	r2,r2,-1
 4005664:	98800115 	stw	r2,4(r19)
 4005668:	0080b40e 	bge	zero,r2,400593c <__svfscanf_r+0x1150>
 400566c:	21000044 	addi	r4,r4,1
 4005670:	99000015 	stw	r4,0(r19)
 4005674:	803f941e 	bne	r16,zero,40054c8 <__alt_data_end+0xfc0054c8>
 4005678:	8821883a 	mov	r16,r17
 400567c:	a807883a 	mov	r3,r21
 4005680:	e023883a 	mov	r17,fp
 4005684:	b82b883a 	mov	r21,r23
 4005688:	302f883a 	mov	r23,r6
 400568c:	e001961e 	bne	fp,zero,4005ce8 <__svfscanf_r+0x14fc>
 4005690:	ab3fffc4 	addi	r12,r21,-1
 4005694:	00800044 	movi	r2,1
 4005698:	1302a22e 	bgeu	r2,r12,4006124 <__svfscanf_r+0x1938>
 400569c:	18803fcc 	andi	r2,r3,255
 40056a0:	1080201c 	xori	r2,r2,128
 40056a4:	10bfe004 	addi	r2,r2,-128
 40056a8:	113fffc4 	addi	r4,r2,-1
 40056ac:	01400184 	movi	r5,6
 40056b0:	29001136 	bltu	r5,r4,40056f8 <__svfscanf_r+0xf0c>
 40056b4:	01000084 	movi	r4,2
 40056b8:	2082770e 	bge	r4,r2,4006098 <__svfscanf_r+0x18ac>
 40056bc:	054000c4 	movi	r21,3
 40056c0:	1839883a 	mov	fp,r3
 40056c4:	15400c26 	beq	r2,r21,40056f8 <__svfscanf_r+0xf0c>
 40056c8:	9425c83a 	sub	r18,r18,r16
 40056cc:	843fffc4 	addi	r16,r16,-1
 40056d0:	81400007 	ldb	r5,0(r16)
 40056d4:	980d883a 	mov	r6,r19
 40056d8:	b809883a 	mov	r4,r23
 40056dc:	40046400 	call	4004640 <_ungetc_r>
 40056e0:	e0bfffc4 	addi	r2,fp,-1
 40056e4:	10c03fcc 	andi	r3,r2,255
 40056e8:	8493883a 	add	r9,r16,r18
 40056ec:	1039883a 	mov	fp,r2
 40056f0:	a8fff636 	bltu	r21,r3,40056cc <__alt_data_end+0xfc0056cc>
 40056f4:	4825883a 	mov	r18,r9
 40056f8:	a080400c 	andi	r2,r20,256
 40056fc:	10001426 	beq	r2,zero,4005750 <__svfscanf_r+0xf64>
 4005700:	a081000c 	andi	r2,r20,1024
 4005704:	10027b1e 	bne	r2,zero,40060f4 <__svfscanf_r+0x1908>
 4005708:	817fffc7 	ldb	r5,-1(r16)
 400570c:	00801944 	movi	r2,101
 4005710:	873fffc4 	addi	fp,r16,-1
 4005714:	957fffc4 	addi	r21,r18,-1
 4005718:	28800826 	beq	r5,r2,400573c <__svfscanf_r+0xf50>
 400571c:	00801144 	movi	r2,69
 4005720:	28800626 	beq	r5,r2,400573c <__svfscanf_r+0xf50>
 4005724:	980d883a 	mov	r6,r19
 4005728:	b809883a 	mov	r4,r23
 400572c:	40046400 	call	4004640 <_ungetc_r>
 4005730:	817fff87 	ldb	r5,-2(r16)
 4005734:	873fff84 	addi	fp,r16,-2
 4005738:	957fff84 	addi	r21,r18,-2
 400573c:	980d883a 	mov	r6,r19
 4005740:	b809883a 	mov	r4,r23
 4005744:	40046400 	call	4004640 <_ungetc_r>
 4005748:	a825883a 	mov	r18,r21
 400574c:	e021883a 	mov	r16,fp
 4005750:	a080040c 	andi	r2,r20,16
 4005754:	103e451e 	bne	r2,zero,400506c <__alt_data_end+0xfc00506c>
 4005758:	80000005 	stb	zero,0(r16)
 400575c:	a081800c 	andi	r2,r20,1536
 4005760:	01010004 	movi	r4,1024
 4005764:	1101ea26 	beq	r2,r4,4005f10 <__svfscanf_r+0x1724>
 4005768:	d8c0a417 	ldw	r3,656(sp)
 400576c:	1801f41e 	bne	r3,zero,4005f40 <__svfscanf_r+0x1754>
 4005770:	000d883a 	mov	r6,zero
 4005774:	d9400104 	addi	r5,sp,4
 4005778:	b809883a 	mov	r4,r23
 400577c:	40077a80 	call	40077a8 <_strtod_r>
 4005780:	1021883a 	mov	r16,r2
 4005784:	a080004c 	andi	r2,r20,1
 4005788:	1001b926 	beq	r2,zero,4005e70 <__svfscanf_r+0x1684>
 400578c:	d9009c17 	ldw	r4,624(sp)
 4005790:	20800017 	ldw	r2,0(r4)
 4005794:	21000104 	addi	r4,r4,4
 4005798:	d9009c15 	stw	r4,624(sp)
 400579c:	14000015 	stw	r16,0(r2)
 40057a0:	10c00115 	stw	r3,4(r2)
 40057a4:	d8c0a017 	ldw	r3,640(sp)
 40057a8:	dd009d17 	ldw	r20,628(sp)
 40057ac:	18c00044 	addi	r3,r3,1
 40057b0:	d8c0a015 	stw	r3,640(sp)
 40057b4:	a00d883a 	mov	r6,r20
 40057b8:	003c4906 	br	40048e0 <__alt_data_end+0xfc0048e0>
 40057bc:	a080400c 	andi	r2,r20,256
 40057c0:	103f9b26 	beq	r2,zero,4005630 <__alt_data_end+0xfc005630>
 40057c4:	d8c0a217 	ldw	r3,648(sp)
 40057c8:	00bfdfc4 	movi	r2,-129
 40057cc:	a0a8703a 	and	r20,r20,r2
 40057d0:	e7000044 	addi	fp,fp,1
 40057d4:	183f9f26 	beq	r3,zero,4005654 <__alt_data_end+0xfc005654>
 40057d8:	18ffffc4 	addi	r3,r3,-1
 40057dc:	d8c0a215 	stw	r3,648(sp)
 40057e0:	84000044 	addi	r16,r16,1
 40057e4:	003f9b06 	br	4005654 <__alt_data_end+0xfc005654>
 40057e8:	a080200c 	andi	r2,r20,128
 40057ec:	103fa226 	beq	r2,zero,4005678 <__alt_data_end+0xfc005678>
 40057f0:	00bfdfc4 	movi	r2,-129
 40057f4:	a0a8703a 	and	r20,r20,r2
 40057f8:	003f9406 	br	400564c <__alt_data_end+0xfc00564c>
 40057fc:	a8803fcc 	andi	r2,r21,255
 4005800:	1080201c 	xori	r2,r2,128
 4005804:	10bfe004 	addi	r2,r2,-128
 4005808:	00c001c4 	movi	r3,7
 400580c:	10ff9a1e 	bne	r2,r3,4005678 <__alt_data_end+0xfc005678>
 4005810:	05400204 	movi	r21,8
 4005814:	003f8d06 	br	400564c <__alt_data_end+0xfc00564c>
 4005818:	a8803fcc 	andi	r2,r21,255
 400581c:	1080201c 	xori	r2,r2,128
 4005820:	10bfe004 	addi	r2,r2,-128
 4005824:	02000184 	movi	r8,6
 4005828:	123f931e 	bne	r2,r8,4005678 <__alt_data_end+0xfc005678>
 400582c:	054001c4 	movi	r21,7
 4005830:	003f8606 	br	400564c <__alt_data_end+0xfc00564c>
 4005834:	b8004f1e 	bne	r23,zero,4005974 <__svfscanf_r+0x1188>
 4005838:	e000031e 	bne	fp,zero,4005848 <__svfscanf_r+0x105c>
 400583c:	a081c00c 	andi	r2,r20,1792
 4005840:	0201c004 	movi	r8,1792
 4005844:	1201a226 	beq	r2,r8,4005ed0 <__svfscanf_r+0x16e4>
 4005848:	a8803fcc 	andi	r2,r21,255
 400584c:	1080201c 	xori	r2,r2,128
 4005850:	10bfe004 	addi	r2,r2,-128
 4005854:	02000044 	movi	r8,1
 4005858:	12000226 	beq	r2,r8,4005864 <__svfscanf_r+0x1078>
 400585c:	02000104 	movi	r8,4
 4005860:	123f851e 	bne	r2,r8,4005678 <__alt_data_end+0xfc005678>
 4005864:	ad400044 	addi	r21,r21,1
 4005868:	003f7806 	br	400564c <__alt_data_end+0xfc00564c>
 400586c:	a8803fcc 	andi	r2,r21,255
 4005870:	1080201c 	xori	r2,r2,128
 4005874:	10bfe004 	addi	r2,r2,-128
 4005878:	1000391e 	bne	r2,zero,4005960 <__svfscanf_r+0x1174>
 400587c:	e001151e 	bne	fp,zero,4005cd4 <__svfscanf_r+0x14e8>
 4005880:	a081c00c 	andi	r2,r20,1792
 4005884:	0201c004 	movi	r8,1792
 4005888:	12019b26 	beq	r2,r8,4005ef8 <__svfscanf_r+0x170c>
 400588c:	8821883a 	mov	r16,r17
 4005890:	a807883a 	mov	r3,r21
 4005894:	e023883a 	mov	r17,fp
 4005898:	b82b883a 	mov	r21,r23
 400589c:	302f883a 	mov	r23,r6
 40058a0:	003f7b06 	br	4005690 <__alt_data_end+0xfc005690>
 40058a4:	a8803fcc 	andi	r2,r21,255
 40058a8:	1080201c 	xori	r2,r2,128
 40058ac:	10bfe004 	addi	r2,r2,-128
 40058b0:	02000084 	movi	r8,2
 40058b4:	123f701e 	bne	r2,r8,4005678 <__alt_data_end+0xfc005678>
 40058b8:	054000c4 	movi	r21,3
 40058bc:	003f6306 	br	400564c <__alt_data_end+0xfc00564c>
 40058c0:	a081400c 	andi	r2,r20,1280
 40058c4:	00c10004 	movi	r3,1024
 40058c8:	10c00326 	beq	r2,r3,40058d8 <__svfscanf_r+0x10ec>
 40058cc:	a0c4703a 	and	r2,r20,r3
 40058d0:	103f6926 	beq	r2,zero,4005678 <__alt_data_end+0xfc005678>
 40058d4:	e03fed26 	beq	fp,zero,400588c <__alt_data_end+0xfc00588c>
 40058d8:	a080800c 	andi	r2,r20,512
 40058dc:	1000041e 	bne	r2,zero,40058f0 <__svfscanf_r+0x1104>
 40058e0:	d8c09f17 	ldw	r3,636(sp)
 40058e4:	dc40a515 	stw	r17,660(sp)
 40058e8:	e0f9c83a 	sub	fp,fp,r3
 40058ec:	df00a415 	stw	fp,656(sp)
 40058f0:	00be1fc4 	movi	r2,-1921
 40058f4:	a0a8703a 	and	r20,r20,r2
 40058f8:	a5006014 	ori	r20,r20,384
 40058fc:	0039883a 	mov	fp,zero
 4005900:	003f5206 	br	400564c <__alt_data_end+0xfc00564c>
 4005904:	00800044 	movi	r2,1
 4005908:	b8bf5b1e 	bne	r23,r2,4005678 <__alt_data_end+0xfc005678>
 400590c:	05c00084 	movi	r23,2
 4005910:	003f4e06 	br	400564c <__alt_data_end+0xfc00564c>
 4005914:	d8c0a317 	ldw	r3,652(sp)
 4005918:	2a003fcc 	andi	r8,r5,255
 400591c:	18800003 	ldbu	r2,0(r3)
 4005920:	40bf551e 	bne	r8,r2,4005678 <__alt_data_end+0xfc005678>
 4005924:	a080800c 	andi	r2,r20,512
 4005928:	103f5326 	beq	r2,zero,4005678 <__alt_data_end+0xfc005678>
 400592c:	00bf5fc4 	movi	r2,-641
 4005930:	a0a8703a 	and	r20,r20,r2
 4005934:	df009f15 	stw	fp,636(sp)
 4005938:	003f4406 	br	400564c <__alt_data_end+0xfc00564c>
 400593c:	3009883a 	mov	r4,r6
 4005940:	980b883a 	mov	r5,r19
 4005944:	d980a915 	stw	r6,676(sp)
 4005948:	d9c0aa15 	stw	r7,680(sp)
 400594c:	4003f640 	call	4003f64 <__srefill_r>
 4005950:	d980a917 	ldw	r6,676(sp)
 4005954:	d9c0aa17 	ldw	r7,680(sp)
 4005958:	103f4626 	beq	r2,zero,4005674 <__alt_data_end+0xfc005674>
 400595c:	003f4606 	br	4005678 <__alt_data_end+0xfc005678>
 4005960:	020000c4 	movi	r8,3
 4005964:	123fbf26 	beq	r2,r8,4005864 <__alt_data_end+0xfc005864>
 4005968:	02000144 	movi	r8,5
 400596c:	123fbd26 	beq	r2,r8,4005864 <__alt_data_end+0xfc005864>
 4005970:	003f4106 	br	4005678 <__alt_data_end+0xfc005678>
 4005974:	00800084 	movi	r2,2
 4005978:	b8bfb31e 	bne	r23,r2,4005848 <__alt_data_end+0xfc005848>
 400597c:	05c000c4 	movi	r23,3
 4005980:	003f3206 	br	400564c <__alt_data_end+0xfc00564c>
 4005984:	e000011e 	bne	fp,zero,400598c <__svfscanf_r+0x11a0>
 4005988:	073fffc4 	movi	fp,-1
 400598c:	8900004c 	andi	r4,r17,1
 4005990:	20011d1e 	bne	r4,zero,4005e08 <__svfscanf_r+0x161c>
 4005994:	8c40040c 	andi	r17,r17,16
 4005998:	8800da26 	beq	r17,zero,4005d04 <__svfscanf_r+0x1518>
 400599c:	0023883a 	mov	r17,zero
 40059a0:	00000306 	br	40059b0 <__svfscanf_r+0x11c4>
 40059a4:	18800003 	ldbu	r2,0(r3)
 40059a8:	8085883a 	add	r2,r16,r2
 40059ac:	10800043 	ldbu	r2,1(r2)
 40059b0:	1080020c 	andi	r2,r2,8
 40059b4:	1000fc1e 	bne	r2,zero,4005da8 <__svfscanf_r+0x15bc>
 40059b8:	98800117 	ldw	r2,4(r19)
 40059bc:	18c00044 	addi	r3,r3,1
 40059c0:	8c400044 	addi	r17,r17,1
 40059c4:	10bfffc4 	addi	r2,r2,-1
 40059c8:	98800115 	stw	r2,4(r19)
 40059cc:	98c00015 	stw	r3,0(r19)
 40059d0:	8f00f526 	beq	r17,fp,4005da8 <__svfscanf_r+0x15bc>
 40059d4:	00bff316 	blt	zero,r2,40059a4 <__alt_data_end+0xfc0059a4>
 40059d8:	980b883a 	mov	r5,r19
 40059dc:	b809883a 	mov	r4,r23
 40059e0:	4003f640 	call	4003f64 <__srefill_r>
 40059e4:	1000f01e 	bne	r2,zero,4005da8 <__svfscanf_r+0x15bc>
 40059e8:	b4000017 	ldw	r16,0(r22)
 40059ec:	98c00017 	ldw	r3,0(r19)
 40059f0:	003fec06 	br	40059a4 <__alt_data_end+0xfc0059a4>
 40059f4:	e0bfffc4 	addi	r2,fp,-1
 40059f8:	01405704 	movi	r5,348
 40059fc:	2880bf2e 	bgeu	r5,r2,4005cfc <__svfscanf_r+0x1510>
 4005a00:	e1ffa8c4 	addi	r7,fp,-349
 4005a04:	07005744 	movi	fp,349
 4005a08:	8c436014 	ori	r17,r17,3456
 4005a0c:	9013883a 	mov	r9,r18
 4005a10:	8825883a 	mov	r18,r17
 4005a14:	dc409e17 	ldw	r17,632(sp)
 4005a18:	0029883a 	mov	r20,zero
 4005a1c:	dc000104 	addi	r16,sp,4
 4005a20:	05401344 	movi	r21,77
 4005a24:	02c08004 	movi	r11,512
 4005a28:	01bf7fc4 	movi	r6,-513
 4005a2c:	023fdfc4 	movi	r8,-129
 4005a30:	20bff544 	addi	r2,r4,-43
 4005a34:	10803fcc 	andi	r2,r2,255
 4005a38:	a8807236 	bltu	r21,r2,4005c04 <__svfscanf_r+0x1418>
 4005a3c:	100490ba 	slli	r2,r2,2
 4005a40:	01410034 	movhi	r5,1024
 4005a44:	29569504 	addi	r5,r5,23124
 4005a48:	1145883a 	add	r2,r2,r5
 4005a4c:	10800017 	ldw	r2,0(r2)
 4005a50:	1000683a 	jmp	r2
 4005a54:	04005c88 	cmpgei	r16,zero,370
 4005a58:	04005c04 	movi	r16,368
 4005a5c:	04005c88 	cmpgei	r16,zero,370
 4005a60:	04005c04 	movi	r16,368
 4005a64:	04005c04 	movi	r16,368
 4005a68:	04005c60 	cmpeqi	r16,zero,369
 4005a6c:	04005c40 	call	4005c4 <__alt_mem_sdram-0x3bffa3c>
 4005a70:	04005c40 	call	4005c4 <__alt_mem_sdram-0x3bffa3c>
 4005a74:	04005c40 	call	4005c4 <__alt_mem_sdram-0x3bffa3c>
 4005a78:	04005c40 	call	4005c4 <__alt_mem_sdram-0x3bffa3c>
 4005a7c:	04005c40 	call	4005c4 <__alt_mem_sdram-0x3bffa3c>
 4005a80:	04005c40 	call	4005c4 <__alt_mem_sdram-0x3bffa3c>
 4005a84:	04005c40 	call	4005c4 <__alt_mem_sdram-0x3bffa3c>
 4005a88:	04005be8 	cmpgeui	r16,zero,367
 4005a8c:	04005be8 	cmpgeui	r16,zero,367
 4005a90:	04005c04 	movi	r16,368
 4005a94:	04005c04 	movi	r16,368
 4005a98:	04005c04 	movi	r16,368
 4005a9c:	04005c04 	movi	r16,368
 4005aa0:	04005c04 	movi	r16,368
 4005aa4:	04005c04 	movi	r16,368
 4005aa8:	04005c04 	movi	r16,368
 4005aac:	04005bd4 	movui	r16,367
 4005ab0:	04005bd4 	movui	r16,367
 4005ab4:	04005bd4 	movui	r16,367
 4005ab8:	04005bd4 	movui	r16,367
 4005abc:	04005bd4 	movui	r16,367
 4005ac0:	04005bd4 	movui	r16,367
 4005ac4:	04005c04 	movi	r16,368
 4005ac8:	04005c04 	movi	r16,368
 4005acc:	04005c04 	movi	r16,368
 4005ad0:	04005c04 	movi	r16,368
 4005ad4:	04005c04 	movi	r16,368
 4005ad8:	04005c04 	movi	r16,368
 4005adc:	04005c04 	movi	r16,368
 4005ae0:	04005c04 	movi	r16,368
 4005ae4:	04005c04 	movi	r16,368
 4005ae8:	04005c04 	movi	r16,368
 4005aec:	04005c04 	movi	r16,368
 4005af0:	04005c04 	movi	r16,368
 4005af4:	04005c04 	movi	r16,368
 4005af8:	04005c04 	movi	r16,368
 4005afc:	04005c04 	movi	r16,368
 4005b00:	04005c04 	movi	r16,368
 4005b04:	04005c04 	movi	r16,368
 4005b08:	04005b8c 	andi	r16,zero,366
 4005b0c:	04005c04 	movi	r16,368
 4005b10:	04005c04 	movi	r16,368
 4005b14:	04005c04 	movi	r16,368
 4005b18:	04005c04 	movi	r16,368
 4005b1c:	04005c04 	movi	r16,368
 4005b20:	04005c04 	movi	r16,368
 4005b24:	04005c04 	movi	r16,368
 4005b28:	04005c04 	movi	r16,368
 4005b2c:	04005bd4 	movui	r16,367
 4005b30:	04005bd4 	movui	r16,367
 4005b34:	04005bd4 	movui	r16,367
 4005b38:	04005bd4 	movui	r16,367
 4005b3c:	04005bd4 	movui	r16,367
 4005b40:	04005bd4 	movui	r16,367
 4005b44:	04005c04 	movi	r16,368
 4005b48:	04005c04 	movi	r16,368
 4005b4c:	04005c04 	movi	r16,368
 4005b50:	04005c04 	movi	r16,368
 4005b54:	04005c04 	movi	r16,368
 4005b58:	04005c04 	movi	r16,368
 4005b5c:	04005c04 	movi	r16,368
 4005b60:	04005c04 	movi	r16,368
 4005b64:	04005c04 	movi	r16,368
 4005b68:	04005c04 	movi	r16,368
 4005b6c:	04005c04 	movi	r16,368
 4005b70:	04005c04 	movi	r16,368
 4005b74:	04005c04 	movi	r16,368
 4005b78:	04005c04 	movi	r16,368
 4005b7c:	04005c04 	movi	r16,368
 4005b80:	04005c04 	movi	r16,368
 4005b84:	04005c04 	movi	r16,368
 4005b88:	04005b8c 	andi	r16,zero,366
 4005b8c:	9081800c 	andi	r2,r18,1536
 4005b90:	12c01c1e 	bne	r2,r11,4005c04 <__svfscanf_r+0x1418>
 4005b94:	91a4703a 	and	r18,r18,r6
 4005b98:	94814014 	ori	r18,r18,1280
 4005b9c:	04400404 	movi	r17,16
 4005ba0:	81000005 	stb	r4,0(r16)
 4005ba4:	84000044 	addi	r16,r16,1
 4005ba8:	98800117 	ldw	r2,4(r19)
 4005bac:	10bfffc4 	addi	r2,r2,-1
 4005bb0:	98800115 	stw	r2,4(r19)
 4005bb4:	0080380e 	bge	zero,r2,4005c98 <__svfscanf_r+0x14ac>
 4005bb8:	18c00044 	addi	r3,r3,1
 4005bbc:	98c00015 	stw	r3,0(r19)
 4005bc0:	e73fffc4 	addi	fp,fp,-1
 4005bc4:	e0000f26 	beq	fp,zero,4005c04 <__svfscanf_r+0x1418>
 4005bc8:	98c00017 	ldw	r3,0(r19)
 4005bcc:	19000003 	ldbu	r4,0(r3)
 4005bd0:	003f9706 	br	4005a30 <__alt_data_end+0xfc005a30>
 4005bd4:	00800284 	movi	r2,10
 4005bd8:	14400a0e 	bge	r2,r17,4005c04 <__svfscanf_r+0x1418>
 4005bdc:	00bd1fc4 	movi	r2,-2945
 4005be0:	90a4703a 	and	r18,r18,r2
 4005be4:	003fee06 	br	4005ba0 <__alt_data_end+0xfc005ba0>
 4005be8:	014100b4 	movhi	r5,1026
 4005bec:	8c63883a 	add	r17,r17,r17
 4005bf0:	29600684 	addi	r5,r5,-32742
 4005bf4:	2c45883a 	add	r2,r5,r17
 4005bf8:	1440000f 	ldh	r17,0(r2)
 4005bfc:	00800204 	movi	r2,8
 4005c00:	147ff616 	blt	r2,r17,4005bdc <__alt_data_end+0xfc005bdc>
 4005c04:	dc409e15 	stw	r17,632(sp)
 4005c08:	9023883a 	mov	r17,r18
 4005c0c:	8880400c 	andi	r2,r17,256
 4005c10:	4825883a 	mov	r18,r9
 4005c14:	10000426 	beq	r2,zero,4005c28 <__svfscanf_r+0x143c>
 4005c18:	d8800104 	addi	r2,sp,4
 4005c1c:	1400b036 	bltu	r2,r16,4005ee0 <__svfscanf_r+0x16f4>
 4005c20:	d8c00104 	addi	r3,sp,4
 4005c24:	1c3b3226 	beq	r3,r16,40048f0 <__alt_data_end+0xfc0048f0>
 4005c28:	8880040c 	andi	r2,r17,16
 4005c2c:	10006226 	beq	r2,zero,4005db8 <__svfscanf_r+0x15cc>
 4005c30:	d8800104 	addi	r2,sp,4
 4005c34:	80a1c83a 	sub	r16,r16,r2
 4005c38:	8521883a 	add	r16,r16,r20
 4005c3c:	003ca506 	br	4004ed4 <__alt_data_end+0xfc004ed4>
 4005c40:	014100b4 	movhi	r5,1026
 4005c44:	8c63883a 	add	r17,r17,r17
 4005c48:	29600684 	addi	r5,r5,-32742
 4005c4c:	2c45883a 	add	r2,r5,r17
 4005c50:	1440000f 	ldh	r17,0(r2)
 4005c54:	00bd1fc4 	movi	r2,-2945
 4005c58:	90a4703a 	and	r18,r18,r2
 4005c5c:	003fd006 	br	4005ba0 <__alt_data_end+0xfc005ba0>
 4005c60:	9082000c 	andi	r2,r18,2048
 4005c64:	103fce26 	beq	r2,zero,4005ba0 <__alt_data_end+0xfc005ba0>
 4005c68:	8800021e 	bne	r17,zero,4005c74 <__svfscanf_r+0x1488>
 4005c6c:	94808014 	ori	r18,r18,512
 4005c70:	04400204 	movi	r17,8
 4005c74:	9081000c 	andi	r2,r18,1024
 4005c78:	10008626 	beq	r2,zero,4005e94 <__svfscanf_r+0x16a8>
 4005c7c:	00be9fc4 	movi	r2,-1409
 4005c80:	90a4703a 	and	r18,r18,r2
 4005c84:	003fc606 	br	4005ba0 <__alt_data_end+0xfc005ba0>
 4005c88:	9080200c 	andi	r2,r18,128
 4005c8c:	103fdd26 	beq	r2,zero,4005c04 <__alt_data_end+0xfc005c04>
 4005c90:	9224703a 	and	r18,r18,r8
 4005c94:	003fc206 	br	4005ba0 <__alt_data_end+0xfc005ba0>
 4005c98:	980b883a 	mov	r5,r19
 4005c9c:	b809883a 	mov	r4,r23
 4005ca0:	d980a915 	stw	r6,676(sp)
 4005ca4:	d9c0aa15 	stw	r7,680(sp)
 4005ca8:	da00a715 	stw	r8,668(sp)
 4005cac:	da40a815 	stw	r9,672(sp)
 4005cb0:	dac0a615 	stw	r11,664(sp)
 4005cb4:	4003f640 	call	4003f64 <__srefill_r>
 4005cb8:	d980a917 	ldw	r6,676(sp)
 4005cbc:	d9c0aa17 	ldw	r7,680(sp)
 4005cc0:	da00a717 	ldw	r8,668(sp)
 4005cc4:	da40a817 	ldw	r9,672(sp)
 4005cc8:	dac0a617 	ldw	r11,664(sp)
 4005ccc:	103fbc26 	beq	r2,zero,4005bc0 <__alt_data_end+0xfc005bc0>
 4005cd0:	003fcc06 	br	4005c04 <__alt_data_end+0xfc005c04>
 4005cd4:	8821883a 	mov	r16,r17
 4005cd8:	a807883a 	mov	r3,r21
 4005cdc:	e023883a 	mov	r17,fp
 4005ce0:	b82b883a 	mov	r21,r23
 4005ce4:	302f883a 	mov	r23,r6
 4005ce8:	00bfbfc4 	movi	r2,-257
 4005cec:	a0a8703a 	and	r20,r20,r2
 4005cf0:	003e6706 	br	4005690 <__alt_data_end+0xfc005690>
 4005cf4:	d800a215 	stw	zero,648(sp)
 4005cf8:	003de306 	br	4005488 <__alt_data_end+0xfc005488>
 4005cfc:	000f883a 	mov	r7,zero
 4005d00:	003f4106 	br	4005a08 <__alt_data_end+0xfc005a08>
 4005d04:	d9409c17 	ldw	r5,624(sp)
 4005d08:	e2bfffc4 	addi	r10,fp,-1
 4005d0c:	2c400017 	ldw	r17,0(r5)
 4005d10:	2c000104 	addi	r16,r5,4
 4005d14:	8aa9883a 	add	r20,r17,r10
 4005d18:	880b883a 	mov	r5,r17
 4005d1c:	00000606 	br	4005d38 <__svfscanf_r+0x154c>
 4005d20:	98c00017 	ldw	r3,0(r19)
 4005d24:	b1000017 	ldw	r4,0(r22)
 4005d28:	a80b883a 	mov	r5,r21
 4005d2c:	18800003 	ldbu	r2,0(r3)
 4005d30:	2085883a 	add	r2,r4,r2
 4005d34:	10800043 	ldbu	r2,1(r2)
 4005d38:	1080020c 	andi	r2,r2,8
 4005d3c:	1000621e 	bne	r2,zero,4005ec8 <__svfscanf_r+0x16dc>
 4005d40:	98800117 	ldw	r2,4(r19)
 4005d44:	19000044 	addi	r4,r3,1
 4005d48:	99000015 	stw	r4,0(r19)
 4005d4c:	10bfffc4 	addi	r2,r2,-1
 4005d50:	98800115 	stw	r2,4(r19)
 4005d54:	18800003 	ldbu	r2,0(r3)
 4005d58:	2d400044 	addi	r21,r5,1
 4005d5c:	a839883a 	mov	fp,r21
 4005d60:	28800005 	stb	r2,0(r5)
 4005d64:	2d000626 	beq	r5,r20,4005d80 <__svfscanf_r+0x1594>
 4005d68:	98800117 	ldw	r2,4(r19)
 4005d6c:	00bfec16 	blt	zero,r2,4005d20 <__alt_data_end+0xfc005d20>
 4005d70:	980b883a 	mov	r5,r19
 4005d74:	b809883a 	mov	r4,r23
 4005d78:	4003f640 	call	4003f64 <__srefill_r>
 4005d7c:	103fe826 	beq	r2,zero,4005d20 <__alt_data_end+0xfc005d20>
 4005d80:	d880a017 	ldw	r2,640(sp)
 4005d84:	dd009d17 	ldw	r20,628(sp)
 4005d88:	e463c83a 	sub	r17,fp,r17
 4005d8c:	10800044 	addi	r2,r2,1
 4005d90:	e0000005 	stb	zero,0(fp)
 4005d94:	9465883a 	add	r18,r18,r17
 4005d98:	d880a015 	stw	r2,640(sp)
 4005d9c:	dc009c15 	stw	r16,624(sp)
 4005da0:	a00d883a 	mov	r6,r20
 4005da4:	003ace06 	br	40048e0 <__alt_data_end+0xfc0048e0>
 4005da8:	dd009d17 	ldw	r20,628(sp)
 4005dac:	9465883a 	add	r18,r18,r17
 4005db0:	a00d883a 	mov	r6,r20
 4005db4:	003aca06 	br	40048e0 <__alt_data_end+0xfc0048e0>
 4005db8:	d8c0a117 	ldw	r3,644(sp)
 4005dbc:	d9c09e17 	ldw	r7,632(sp)
 4005dc0:	000d883a 	mov	r6,zero
 4005dc4:	d9400104 	addi	r5,sp,4
 4005dc8:	b809883a 	mov	r4,r23
 4005dcc:	80000005 	stb	zero,0(r16)
 4005dd0:	183ee83a 	callr	r3
 4005dd4:	88c0080c 	andi	r3,r17,32
 4005dd8:	1800351e 	bne	r3,zero,4005eb0 <__svfscanf_r+0x16c4>
 4005ddc:	88c0010c 	andi	r3,r17,4
 4005de0:	18007026 	beq	r3,zero,4005fa4 <__svfscanf_r+0x17b8>
 4005de4:	d9409c17 	ldw	r5,624(sp)
 4005de8:	28c00017 	ldw	r3,0(r5)
 4005dec:	29400104 	addi	r5,r5,4
 4005df0:	d9409c15 	stw	r5,624(sp)
 4005df4:	1880000d 	sth	r2,0(r3)
 4005df8:	d940a017 	ldw	r5,640(sp)
 4005dfc:	29400044 	addi	r5,r5,1
 4005e00:	d940a015 	stw	r5,640(sp)
 4005e04:	003f8a06 	br	4005c30 <__alt_data_end+0xfc005c30>
 4005e08:	dd409904 	addi	r21,sp,612
 4005e0c:	8c40040c 	andi	r17,r17,16
 4005e10:	01800204 	movi	r6,8
 4005e14:	000b883a 	mov	r5,zero
 4005e18:	a809883a 	mov	r4,r21
 4005e1c:	4003cec0 	call	4003cec <memset>
 4005e20:	8800391e 	bne	r17,zero,4005f08 <__svfscanf_r+0x171c>
 4005e24:	d8c09c17 	ldw	r3,624(sp)
 4005e28:	1d000017 	ldw	r20,0(r3)
 4005e2c:	18c00104 	addi	r3,r3,4
 4005e30:	d8c09c15 	stw	r3,624(sp)
 4005e34:	000d883a 	mov	r6,zero
 4005e38:	3021883a 	mov	r16,r6
 4005e3c:	dc409f15 	stw	r17,636(sp)
 4005e40:	98800017 	ldw	r2,0(r19)
 4005e44:	b0c00017 	ldw	r3,0(r22)
 4005e48:	10800003 	ldbu	r2,0(r2)
 4005e4c:	1885883a 	add	r2,r3,r2
 4005e50:	10800043 	ldbu	r2,1(r2)
 4005e54:	1080020c 	andi	r2,r2,8
 4005e58:	1000011e 	bne	r2,zero,4005e60 <__svfscanf_r+0x1674>
 4005e5c:	e000651e 	bne	fp,zero,4005ff4 <__svfscanf_r+0x1808>
 4005e60:	dc409f17 	ldw	r17,636(sp)
 4005e64:	883c811e 	bne	r17,zero,400506c <__alt_data_end+0xfc00506c>
 4005e68:	a0000015 	stw	zero,0(r20)
 4005e6c:	003c7c06 	br	4005060 <__alt_data_end+0xfc005060>
 4005e70:	a2c0008c 	andi	r11,r20,2
 4005e74:	58003c26 	beq	r11,zero,4005f68 <__svfscanf_r+0x177c>
 4005e78:	d9409c17 	ldw	r5,624(sp)
 4005e7c:	28800017 	ldw	r2,0(r5)
 4005e80:	29400104 	addi	r5,r5,4
 4005e84:	d9409c15 	stw	r5,624(sp)
 4005e88:	14000015 	stw	r16,0(r2)
 4005e8c:	10c00115 	stw	r3,4(r2)
 4005e90:	003e4406 	br	40057a4 <__alt_data_end+0xfc0057a4>
 4005e94:	00bf1fc4 	movi	r2,-897
 4005e98:	90a4703a 	and	r18,r18,r2
 4005e9c:	38000226 	beq	r7,zero,4005ea8 <__svfscanf_r+0x16bc>
 4005ea0:	39ffffc4 	addi	r7,r7,-1
 4005ea4:	e7000044 	addi	fp,fp,1
 4005ea8:	a5000044 	addi	r20,r20,1
 4005eac:	003f3e06 	br	4005ba8 <__alt_data_end+0xfc005ba8>
 4005eb0:	d9009c17 	ldw	r4,624(sp)
 4005eb4:	20c00017 	ldw	r3,0(r4)
 4005eb8:	21000104 	addi	r4,r4,4
 4005ebc:	d9009c15 	stw	r4,624(sp)
 4005ec0:	18800015 	stw	r2,0(r3)
 4005ec4:	003fcc06 	br	4005df8 <__alt_data_end+0xfc005df8>
 4005ec8:	2839883a 	mov	fp,r5
 4005ecc:	003fac06 	br	4005d80 <__alt_data_end+0xfc005d80>
 4005ed0:	00be1fc4 	movi	r2,-1921
 4005ed4:	a0a8703a 	and	r20,r20,r2
 4005ed8:	05c00044 	movi	r23,1
 4005edc:	003ddb06 	br	400564c <__alt_data_end+0xfc00564c>
 4005ee0:	817fffc7 	ldb	r5,-1(r16)
 4005ee4:	980d883a 	mov	r6,r19
 4005ee8:	b809883a 	mov	r4,r23
 4005eec:	843fffc4 	addi	r16,r16,-1
 4005ef0:	40046400 	call	4004640 <_ungetc_r>
 4005ef4:	003f4a06 	br	4005c20 <__alt_data_end+0xfc005c20>
 4005ef8:	00fe1fc4 	movi	r3,-1921
 4005efc:	a0e8703a 	and	r20,r20,r3
 4005f00:	05400044 	movi	r21,1
 4005f04:	003dd106 	br	400564c <__alt_data_end+0xfc00564c>
 4005f08:	dd009b04 	addi	r20,sp,620
 4005f0c:	003fc906 	br	4005e34 <__alt_data_end+0xfc005e34>
 4005f10:	d8c09f17 	ldw	r3,636(sp)
 4005f14:	88e3c83a 	sub	r17,r17,r3
 4005f18:	044dc83a 	sub	r6,zero,r17
 4005f1c:	883e1426 	beq	r17,zero,4005770 <__alt_data_end+0xfc005770>
 4005f20:	d88055c4 	addi	r2,sp,343
 4005f24:	80800136 	bltu	r16,r2,4005f2c <__svfscanf_r+0x1740>
 4005f28:	dc005584 	addi	r16,sp,342
 4005f2c:	014100b4 	movhi	r5,1026
 4005f30:	29600504 	addi	r5,r5,-32748
 4005f34:	8009883a 	mov	r4,r16
 4005f38:	40075fc0 	call	40075fc <sprintf>
 4005f3c:	003e0c06 	br	4005770 <__alt_data_end+0xfc005770>
 4005f40:	d8c0a517 	ldw	r3,660(sp)
 4005f44:	000d883a 	mov	r6,zero
 4005f48:	01c00284 	movi	r7,10
 4005f4c:	19400044 	addi	r5,r3,1
 4005f50:	b809883a 	mov	r4,r23
 4005f54:	4008ea40 	call	4008ea4 <_strtol_r>
 4005f58:	d8c0a417 	ldw	r3,656(sp)
 4005f5c:	dc00a517 	ldw	r16,660(sp)
 4005f60:	10cdc83a 	sub	r6,r2,r3
 4005f64:	003fee06 	br	4005f20 <__alt_data_end+0xfc005f20>
 4005f68:	d8809c17 	ldw	r2,624(sp)
 4005f6c:	180b883a 	mov	r5,r3
 4005f70:	8009883a 	mov	r4,r16
 4005f74:	15000017 	ldw	r20,0(r2)
 4005f78:	14400104 	addi	r17,r2,4
 4005f7c:	d8c0a615 	stw	r3,664(sp)
 4005f80:	40074580 	call	4007458 <__fpclassifyd>
 4005f84:	d8c0a617 	ldw	r3,664(sp)
 4005f88:	10007226 	beq	r2,zero,4006154 <__svfscanf_r+0x1968>
 4005f8c:	8009883a 	mov	r4,r16
 4005f90:	180b883a 	mov	r5,r3
 4005f94:	401418c0 	call	401418c <__truncdfsf2>
 4005f98:	a0800015 	stw	r2,0(r20)
 4005f9c:	dc409c15 	stw	r17,624(sp)
 4005fa0:	003e0006 	br	40057a4 <__alt_data_end+0xfc0057a4>
 4005fa4:	88c0004c 	andi	r3,r17,1
 4005fa8:	183fc11e 	bne	r3,zero,4005eb0 <__alt_data_end+0xfc005eb0>
 4005fac:	8c40008c 	andi	r17,r17,2
 4005fb0:	883fbf26 	beq	r17,zero,4005eb0 <__alt_data_end+0xfc005eb0>
 4005fb4:	d940a117 	ldw	r5,644(sp)
 4005fb8:	00810074 	movhi	r2,1025
 4005fbc:	10a50704 	addi	r2,r2,-27620
 4005fc0:	d9c09e17 	ldw	r7,632(sp)
 4005fc4:	000d883a 	mov	r6,zero
 4005fc8:	28806726 	beq	r5,r2,4006168 <__svfscanf_r+0x197c>
 4005fcc:	d9400104 	addi	r5,sp,4
 4005fd0:	b809883a 	mov	r4,r23
 4005fd4:	40091180 	call	4009118 <_strtoll_r>
 4005fd8:	d9409c17 	ldw	r5,624(sp)
 4005fdc:	29000017 	ldw	r4,0(r5)
 4005fe0:	29400104 	addi	r5,r5,4
 4005fe4:	d9409c15 	stw	r5,624(sp)
 4005fe8:	20800015 	stw	r2,0(r4)
 4005fec:	20c00115 	stw	r3,4(r4)
 4005ff0:	003f8106 	br	4005df8 <__alt_data_end+0xfc005df8>
 4005ff4:	400697c0 	call	400697c <__locale_mb_cur_max>
 4005ff8:	80bc5626 	beq	r16,r2,4005154 <__alt_data_end+0xfc005154>
 4005ffc:	98800017 	ldw	r2,0(r19)
 4006000:	99000117 	ldw	r4,4(r19)
 4006004:	d9400104 	addi	r5,sp,4
 4006008:	12000003 	ldbu	r8,0(r2)
 400600c:	213fffc4 	addi	r4,r4,-1
 4006010:	10800044 	addi	r2,r2,1
 4006014:	99000115 	stw	r4,4(r19)
 4006018:	98800015 	stw	r2,0(r19)
 400601c:	84400044 	addi	r17,r16,1
 4006020:	dd400015 	stw	r21,0(sp)
 4006024:	2c21883a 	add	r16,r5,r16
 4006028:	280d883a 	mov	r6,r5
 400602c:	880f883a 	mov	r7,r17
 4006030:	a00b883a 	mov	r5,r20
 4006034:	b809883a 	mov	r4,r23
 4006038:	82000005 	stb	r8,0(r16)
 400603c:	4006a300 	call	4006a30 <_mbrtowc_r>
 4006040:	00ffffc4 	movi	r3,-1
 4006044:	10fc4326 	beq	r2,r3,4005154 <__alt_data_end+0xfc005154>
 4006048:	103c371e 	bne	r2,zero,4005128 <__alt_data_end+0xfc005128>
 400604c:	a0000015 	stw	zero,0(r20)
 4006050:	0009883a 	mov	r4,zero
 4006054:	40068c40 	call	40068c4 <iswspace>
 4006058:	10001b26 	beq	r2,zero,40060c8 <__svfscanf_r+0x18dc>
 400605c:	8821883a 	mov	r16,r17
 4006060:	dc409f17 	ldw	r17,636(sp)
 4006064:	803f7f26 	beq	r16,zero,4005e64 <__alt_data_end+0xfc005e64>
 4006068:	843fffc4 	addi	r16,r16,-1
 400606c:	d9400104 	addi	r5,sp,4
 4006070:	2c2b883a 	add	r21,r5,r16
 4006074:	00000106 	br	400607c <__svfscanf_r+0x1890>
 4006078:	843fffc4 	addi	r16,r16,-1
 400607c:	a9400003 	ldbu	r5,0(r21)
 4006080:	980d883a 	mov	r6,r19
 4006084:	b809883a 	mov	r4,r23
 4006088:	40046400 	call	4004640 <_ungetc_r>
 400608c:	ad7fffc4 	addi	r21,r21,-1
 4006090:	803ff91e 	bne	r16,zero,4006078 <__alt_data_end+0xfc006078>
 4006094:	003f7306 	br	4005e64 <__alt_data_end+0xfc005e64>
 4006098:	d9400104 	addi	r5,sp,4
 400609c:	802b883a 	mov	r21,r16
 40060a0:	9839883a 	mov	fp,r19
 40060a4:	2c3a122e 	bgeu	r5,r16,40048f0 <__alt_data_end+0xfc0048f0>
 40060a8:	ad7fffc4 	addi	r21,r21,-1
 40060ac:	a9400007 	ldb	r5,0(r21)
 40060b0:	e00d883a 	mov	r6,fp
 40060b4:	b809883a 	mov	r4,r23
 40060b8:	40046400 	call	4004640 <_ungetc_r>
 40060bc:	d8800104 	addi	r2,sp,4
 40060c0:	157ff91e 	bne	r2,r21,40060a8 <__alt_data_end+0xfc0060a8>
 40060c4:	003a0a06 	br	40048f0 <__alt_data_end+0xfc0048f0>
 40060c8:	d8c09f17 	ldw	r3,636(sp)
 40060cc:	9465883a 	add	r18,r18,r17
 40060d0:	e73fffc4 	addi	fp,fp,-1
 40060d4:	1800051e 	bne	r3,zero,40060ec <__svfscanf_r+0x1900>
 40060d8:	a5000104 	addi	r20,r20,4
 40060dc:	0021883a 	mov	r16,zero
 40060e0:	003c1406 	br	4005134 <__alt_data_end+0xfc005134>
 40060e4:	a1000017 	ldw	r4,0(r20)
 40060e8:	003fda06 	br	4006054 <__alt_data_end+0xfc006054>
 40060ec:	0021883a 	mov	r16,zero
 40060f0:	003c1006 	br	4005134 <__alt_data_end+0xfc005134>
 40060f4:	d8c00104 	addi	r3,sp,4
 40060f8:	802b883a 	mov	r21,r16
 40060fc:	9839883a 	mov	fp,r19
 4006100:	1c39fb2e 	bgeu	r3,r16,40048f0 <__alt_data_end+0xfc0048f0>
 4006104:	ad7fffc4 	addi	r21,r21,-1
 4006108:	a9400007 	ldb	r5,0(r21)
 400610c:	b809883a 	mov	r4,r23
 4006110:	e00d883a 	mov	r6,fp
 4006114:	40046400 	call	4004640 <_ungetc_r>
 4006118:	d9000104 	addi	r4,sp,4
 400611c:	257ff91e 	bne	r4,r21,4006104 <__alt_data_end+0xfc006104>
 4006120:	0039f306 	br	40048f0 <__alt_data_end+0xfc0048f0>
 4006124:	d8c00104 	addi	r3,sp,4
 4006128:	802b883a 	mov	r21,r16
 400612c:	9839883a 	mov	fp,r19
 4006130:	1c39ef2e 	bgeu	r3,r16,40048f0 <__alt_data_end+0xfc0048f0>
 4006134:	ad7fffc4 	addi	r21,r21,-1
 4006138:	a9400007 	ldb	r5,0(r21)
 400613c:	b809883a 	mov	r4,r23
 4006140:	e00d883a 	mov	r6,fp
 4006144:	40046400 	call	4004640 <_ungetc_r>
 4006148:	d9000104 	addi	r4,sp,4
 400614c:	257ff91e 	bne	r4,r21,4006134 <__alt_data_end+0xfc006134>
 4006150:	0039e706 	br	40048f0 <__alt_data_end+0xfc0048f0>
 4006154:	0009883a 	mov	r4,zero
 4006158:	400759c0 	call	400759c <nanf>
 400615c:	a0800015 	stw	r2,0(r20)
 4006160:	dc409c15 	stw	r17,624(sp)
 4006164:	003d8f06 	br	40057a4 <__alt_data_end+0xfc0057a4>
 4006168:	d9400104 	addi	r5,sp,4
 400616c:	b809883a 	mov	r4,r23
 4006170:	40096b00 	call	40096b0 <_strtoull_r>
 4006174:	003f9806 	br	4005fd8 <__alt_data_end+0xfc005fd8>

04006178 <vfscanf>:
 4006178:	008100b4 	movhi	r2,1026
 400617c:	defffb04 	addi	sp,sp,-20
 4006180:	10a8dd04 	addi	r2,r2,-23692
 4006184:	dc000215 	stw	r16,8(sp)
 4006188:	14000017 	ldw	r16,0(r2)
 400618c:	dc400315 	stw	r17,12(sp)
 4006190:	dfc00415 	stw	ra,16(sp)
 4006194:	2023883a 	mov	r17,r4
 4006198:	80000826 	beq	r16,zero,40061bc <vfscanf+0x44>
 400619c:	80800e17 	ldw	r2,56(r16)
 40061a0:	1000061e 	bne	r2,zero,40061bc <vfscanf+0x44>
 40061a4:	8009883a 	mov	r4,r16
 40061a8:	d9400015 	stw	r5,0(sp)
 40061ac:	d9800115 	stw	r6,4(sp)
 40061b0:	40021480 	call	4002148 <__sinit>
 40061b4:	d9800117 	ldw	r6,4(sp)
 40061b8:	d9400017 	ldw	r5,0(sp)
 40061bc:	300f883a 	mov	r7,r6
 40061c0:	8009883a 	mov	r4,r16
 40061c4:	280d883a 	mov	r6,r5
 40061c8:	880b883a 	mov	r5,r17
 40061cc:	dfc00417 	ldw	ra,16(sp)
 40061d0:	dc400317 	ldw	r17,12(sp)
 40061d4:	dc000217 	ldw	r16,8(sp)
 40061d8:	dec00504 	addi	sp,sp,20
 40061dc:	40047ec1 	jmpi	40047ec <__svfscanf_r>

040061e0 <__svfscanf>:
 40061e0:	008100b4 	movhi	r2,1026
 40061e4:	10a8dd04 	addi	r2,r2,-23692
 40061e8:	300f883a 	mov	r7,r6
 40061ec:	280d883a 	mov	r6,r5
 40061f0:	200b883a 	mov	r5,r4
 40061f4:	11000017 	ldw	r4,0(r2)
 40061f8:	40047ec1 	jmpi	40047ec <__svfscanf_r>

040061fc <_vfscanf_r>:
 40061fc:	defffb04 	addi	sp,sp,-20
 4006200:	dc000315 	stw	r16,12(sp)
 4006204:	dfc00415 	stw	ra,16(sp)
 4006208:	2021883a 	mov	r16,r4
 400620c:	20000926 	beq	r4,zero,4006234 <_vfscanf_r+0x38>
 4006210:	20800e17 	ldw	r2,56(r4)
 4006214:	1000071e 	bne	r2,zero,4006234 <_vfscanf_r+0x38>
 4006218:	d9400015 	stw	r5,0(sp)
 400621c:	d9800115 	stw	r6,4(sp)
 4006220:	d9c00215 	stw	r7,8(sp)
 4006224:	40021480 	call	4002148 <__sinit>
 4006228:	d9c00217 	ldw	r7,8(sp)
 400622c:	d9800117 	ldw	r6,4(sp)
 4006230:	d9400017 	ldw	r5,0(sp)
 4006234:	8009883a 	mov	r4,r16
 4006238:	dfc00417 	ldw	ra,16(sp)
 400623c:	dc000317 	ldw	r16,12(sp)
 4006240:	dec00504 	addi	sp,sp,20
 4006244:	40047ec1 	jmpi	40047ec <__svfscanf_r>

04006248 <_write_r>:
 4006248:	defffd04 	addi	sp,sp,-12
 400624c:	2805883a 	mov	r2,r5
 4006250:	dc000015 	stw	r16,0(sp)
 4006254:	040100b4 	movhi	r16,1026
 4006258:	dc400115 	stw	r17,4(sp)
 400625c:	300b883a 	mov	r5,r6
 4006260:	84303904 	addi	r16,r16,-16156
 4006264:	2023883a 	mov	r17,r4
 4006268:	380d883a 	mov	r6,r7
 400626c:	1009883a 	mov	r4,r2
 4006270:	dfc00215 	stw	ra,8(sp)
 4006274:	80000015 	stw	zero,0(r16)
 4006278:	4014ed00 	call	4014ed0 <write>
 400627c:	00ffffc4 	movi	r3,-1
 4006280:	10c00526 	beq	r2,r3,4006298 <_write_r+0x50>
 4006284:	dfc00217 	ldw	ra,8(sp)
 4006288:	dc400117 	ldw	r17,4(sp)
 400628c:	dc000017 	ldw	r16,0(sp)
 4006290:	dec00304 	addi	sp,sp,12
 4006294:	f800283a 	ret
 4006298:	80c00017 	ldw	r3,0(r16)
 400629c:	183ff926 	beq	r3,zero,4006284 <__alt_data_end+0xfc006284>
 40062a0:	88c00015 	stw	r3,0(r17)
 40062a4:	003ff706 	br	4006284 <__alt_data_end+0xfc006284>

040062a8 <_close_r>:
 40062a8:	defffd04 	addi	sp,sp,-12
 40062ac:	dc000015 	stw	r16,0(sp)
 40062b0:	040100b4 	movhi	r16,1026
 40062b4:	dc400115 	stw	r17,4(sp)
 40062b8:	84303904 	addi	r16,r16,-16156
 40062bc:	2023883a 	mov	r17,r4
 40062c0:	2809883a 	mov	r4,r5
 40062c4:	dfc00215 	stw	ra,8(sp)
 40062c8:	80000015 	stw	zero,0(r16)
 40062cc:	40143d40 	call	40143d4 <close>
 40062d0:	00ffffc4 	movi	r3,-1
 40062d4:	10c00526 	beq	r2,r3,40062ec <_close_r+0x44>
 40062d8:	dfc00217 	ldw	ra,8(sp)
 40062dc:	dc400117 	ldw	r17,4(sp)
 40062e0:	dc000017 	ldw	r16,0(sp)
 40062e4:	dec00304 	addi	sp,sp,12
 40062e8:	f800283a 	ret
 40062ec:	80c00017 	ldw	r3,0(r16)
 40062f0:	183ff926 	beq	r3,zero,40062d8 <__alt_data_end+0xfc0062d8>
 40062f4:	88c00015 	stw	r3,0(r17)
 40062f8:	003ff706 	br	40062d8 <__alt_data_end+0xfc0062d8>

040062fc <__sflags>:
 40062fc:	28800007 	ldb	r2,0(r5)
 4006300:	00c01c84 	movi	r3,114
 4006304:	10c02426 	beq	r2,r3,4006398 <__sflags+0x9c>
 4006308:	00c01dc4 	movi	r3,119
 400630c:	10c01e26 	beq	r2,r3,4006388 <__sflags+0x8c>
 4006310:	00c01844 	movi	r3,97
 4006314:	10c00426 	beq	r2,r3,4006328 <__sflags+0x2c>
 4006318:	00800584 	movi	r2,22
 400631c:	20800015 	stw	r2,0(r4)
 4006320:	0005883a 	mov	r2,zero
 4006324:	f800283a 	ret
 4006328:	02c08204 	movi	r11,520
 400632c:	01000044 	movi	r4,1
 4006330:	00804204 	movi	r2,264
 4006334:	01c00ac4 	movi	r7,43
 4006338:	02bff8c4 	movi	r10,-29
 400633c:	027fff04 	movi	r9,-4
 4006340:	02001e04 	movi	r8,120
 4006344:	29400044 	addi	r5,r5,1
 4006348:	28c00007 	ldb	r3,0(r5)
 400634c:	18000626 	beq	r3,zero,4006368 <__sflags+0x6c>
 4006350:	19c00826 	beq	r3,r7,4006374 <__sflags+0x78>
 4006354:	1a3ffb1e 	bne	r3,r8,4006344 <__alt_data_end+0xfc006344>
 4006358:	29400044 	addi	r5,r5,1
 400635c:	28c00007 	ldb	r3,0(r5)
 4006360:	21020014 	ori	r4,r4,2048
 4006364:	183ffa1e 	bne	r3,zero,4006350 <__alt_data_end+0xfc006350>
 4006368:	22c8b03a 	or	r4,r4,r11
 400636c:	31000015 	stw	r4,0(r6)
 4006370:	f800283a 	ret
 4006374:	1284703a 	and	r2,r2,r10
 4006378:	2248703a 	and	r4,r4,r9
 400637c:	10800414 	ori	r2,r2,16
 4006380:	21000094 	ori	r4,r4,2
 4006384:	003fef06 	br	4006344 <__alt_data_end+0xfc006344>
 4006388:	02c18004 	movi	r11,1536
 400638c:	01000044 	movi	r4,1
 4006390:	00800204 	movi	r2,8
 4006394:	003fe706 	br	4006334 <__alt_data_end+0xfc006334>
 4006398:	0017883a 	mov	r11,zero
 400639c:	0009883a 	mov	r4,zero
 40063a0:	00800104 	movi	r2,4
 40063a4:	003fe306 	br	4006334 <__alt_data_end+0xfc006334>

040063a8 <__sfvwrite_r>:
 40063a8:	30800217 	ldw	r2,8(r6)
 40063ac:	10006726 	beq	r2,zero,400654c <__sfvwrite_r+0x1a4>
 40063b0:	28c0030b 	ldhu	r3,12(r5)
 40063b4:	defff404 	addi	sp,sp,-48
 40063b8:	dd400715 	stw	r21,28(sp)
 40063bc:	dd000615 	stw	r20,24(sp)
 40063c0:	dc000215 	stw	r16,8(sp)
 40063c4:	dfc00b15 	stw	ra,44(sp)
 40063c8:	df000a15 	stw	fp,40(sp)
 40063cc:	ddc00915 	stw	r23,36(sp)
 40063d0:	dd800815 	stw	r22,32(sp)
 40063d4:	dcc00515 	stw	r19,20(sp)
 40063d8:	dc800415 	stw	r18,16(sp)
 40063dc:	dc400315 	stw	r17,12(sp)
 40063e0:	1880020c 	andi	r2,r3,8
 40063e4:	2821883a 	mov	r16,r5
 40063e8:	202b883a 	mov	r21,r4
 40063ec:	3029883a 	mov	r20,r6
 40063f0:	10002726 	beq	r2,zero,4006490 <__sfvwrite_r+0xe8>
 40063f4:	28800417 	ldw	r2,16(r5)
 40063f8:	10002526 	beq	r2,zero,4006490 <__sfvwrite_r+0xe8>
 40063fc:	1880008c 	andi	r2,r3,2
 4006400:	a4400017 	ldw	r17,0(r20)
 4006404:	10002a26 	beq	r2,zero,40064b0 <__sfvwrite_r+0x108>
 4006408:	05a00034 	movhi	r22,32768
 400640c:	0027883a 	mov	r19,zero
 4006410:	0025883a 	mov	r18,zero
 4006414:	b5bf0004 	addi	r22,r22,-1024
 4006418:	980d883a 	mov	r6,r19
 400641c:	a809883a 	mov	r4,r21
 4006420:	90004626 	beq	r18,zero,400653c <__sfvwrite_r+0x194>
 4006424:	900f883a 	mov	r7,r18
 4006428:	b480022e 	bgeu	r22,r18,4006434 <__sfvwrite_r+0x8c>
 400642c:	01e00034 	movhi	r7,32768
 4006430:	39ff0004 	addi	r7,r7,-1024
 4006434:	80800917 	ldw	r2,36(r16)
 4006438:	81400717 	ldw	r5,28(r16)
 400643c:	103ee83a 	callr	r2
 4006440:	00805a0e 	bge	zero,r2,40065ac <__sfvwrite_r+0x204>
 4006444:	a0c00217 	ldw	r3,8(r20)
 4006448:	98a7883a 	add	r19,r19,r2
 400644c:	90a5c83a 	sub	r18,r18,r2
 4006450:	1885c83a 	sub	r2,r3,r2
 4006454:	a0800215 	stw	r2,8(r20)
 4006458:	103fef1e 	bne	r2,zero,4006418 <__alt_data_end+0xfc006418>
 400645c:	0005883a 	mov	r2,zero
 4006460:	dfc00b17 	ldw	ra,44(sp)
 4006464:	df000a17 	ldw	fp,40(sp)
 4006468:	ddc00917 	ldw	r23,36(sp)
 400646c:	dd800817 	ldw	r22,32(sp)
 4006470:	dd400717 	ldw	r21,28(sp)
 4006474:	dd000617 	ldw	r20,24(sp)
 4006478:	dcc00517 	ldw	r19,20(sp)
 400647c:	dc800417 	ldw	r18,16(sp)
 4006480:	dc400317 	ldw	r17,12(sp)
 4006484:	dc000217 	ldw	r16,8(sp)
 4006488:	dec00c04 	addi	sp,sp,48
 400648c:	f800283a 	ret
 4006490:	800b883a 	mov	r5,r16
 4006494:	a809883a 	mov	r4,r21
 4006498:	400bc8c0 	call	400bc8c <__swsetup_r>
 400649c:	1000ee1e 	bne	r2,zero,4006858 <__sfvwrite_r+0x4b0>
 40064a0:	80c0030b 	ldhu	r3,12(r16)
 40064a4:	a4400017 	ldw	r17,0(r20)
 40064a8:	1880008c 	andi	r2,r3,2
 40064ac:	103fd61e 	bne	r2,zero,4006408 <__alt_data_end+0xfc006408>
 40064b0:	1880004c 	andi	r2,r3,1
 40064b4:	1000421e 	bne	r2,zero,40065c0 <__sfvwrite_r+0x218>
 40064b8:	0039883a 	mov	fp,zero
 40064bc:	0025883a 	mov	r18,zero
 40064c0:	90001a26 	beq	r18,zero,400652c <__sfvwrite_r+0x184>
 40064c4:	1880800c 	andi	r2,r3,512
 40064c8:	84c00217 	ldw	r19,8(r16)
 40064cc:	10002126 	beq	r2,zero,4006554 <__sfvwrite_r+0x1ac>
 40064d0:	982f883a 	mov	r23,r19
 40064d4:	94c09636 	bltu	r18,r19,4006730 <__sfvwrite_r+0x388>
 40064d8:	1881200c 	andi	r2,r3,1152
 40064dc:	1000a11e 	bne	r2,zero,4006764 <__sfvwrite_r+0x3bc>
 40064e0:	81000017 	ldw	r4,0(r16)
 40064e4:	b80d883a 	mov	r6,r23
 40064e8:	e00b883a 	mov	r5,fp
 40064ec:	4006d380 	call	4006d38 <memmove>
 40064f0:	80c00217 	ldw	r3,8(r16)
 40064f4:	81000017 	ldw	r4,0(r16)
 40064f8:	9005883a 	mov	r2,r18
 40064fc:	1ce7c83a 	sub	r19,r3,r19
 4006500:	25cf883a 	add	r7,r4,r23
 4006504:	84c00215 	stw	r19,8(r16)
 4006508:	81c00015 	stw	r7,0(r16)
 400650c:	a0c00217 	ldw	r3,8(r20)
 4006510:	e0b9883a 	add	fp,fp,r2
 4006514:	90a5c83a 	sub	r18,r18,r2
 4006518:	18a7c83a 	sub	r19,r3,r2
 400651c:	a4c00215 	stw	r19,8(r20)
 4006520:	983fce26 	beq	r19,zero,400645c <__alt_data_end+0xfc00645c>
 4006524:	80c0030b 	ldhu	r3,12(r16)
 4006528:	903fe61e 	bne	r18,zero,40064c4 <__alt_data_end+0xfc0064c4>
 400652c:	8f000017 	ldw	fp,0(r17)
 4006530:	8c800117 	ldw	r18,4(r17)
 4006534:	8c400204 	addi	r17,r17,8
 4006538:	003fe106 	br	40064c0 <__alt_data_end+0xfc0064c0>
 400653c:	8cc00017 	ldw	r19,0(r17)
 4006540:	8c800117 	ldw	r18,4(r17)
 4006544:	8c400204 	addi	r17,r17,8
 4006548:	003fb306 	br	4006418 <__alt_data_end+0xfc006418>
 400654c:	0005883a 	mov	r2,zero
 4006550:	f800283a 	ret
 4006554:	81000017 	ldw	r4,0(r16)
 4006558:	80800417 	ldw	r2,16(r16)
 400655c:	11005a36 	bltu	r2,r4,40066c8 <__sfvwrite_r+0x320>
 4006560:	85c00517 	ldw	r23,20(r16)
 4006564:	95c05836 	bltu	r18,r23,40066c8 <__sfvwrite_r+0x320>
 4006568:	00a00034 	movhi	r2,32768
 400656c:	10bfffc4 	addi	r2,r2,-1
 4006570:	9009883a 	mov	r4,r18
 4006574:	1480012e 	bgeu	r2,r18,400657c <__sfvwrite_r+0x1d4>
 4006578:	1009883a 	mov	r4,r2
 400657c:	b80b883a 	mov	r5,r23
 4006580:	40018600 	call	4001860 <__divsi3>
 4006584:	b80b883a 	mov	r5,r23
 4006588:	1009883a 	mov	r4,r2
 400658c:	4001a140 	call	4001a14 <__mulsi3>
 4006590:	81400717 	ldw	r5,28(r16)
 4006594:	80c00917 	ldw	r3,36(r16)
 4006598:	100f883a 	mov	r7,r2
 400659c:	e00d883a 	mov	r6,fp
 40065a0:	a809883a 	mov	r4,r21
 40065a4:	183ee83a 	callr	r3
 40065a8:	00bfd816 	blt	zero,r2,400650c <__alt_data_end+0xfc00650c>
 40065ac:	8080030b 	ldhu	r2,12(r16)
 40065b0:	10801014 	ori	r2,r2,64
 40065b4:	8080030d 	sth	r2,12(r16)
 40065b8:	00bfffc4 	movi	r2,-1
 40065bc:	003fa806 	br	4006460 <__alt_data_end+0xfc006460>
 40065c0:	0027883a 	mov	r19,zero
 40065c4:	0011883a 	mov	r8,zero
 40065c8:	0039883a 	mov	fp,zero
 40065cc:	0025883a 	mov	r18,zero
 40065d0:	90001f26 	beq	r18,zero,4006650 <__sfvwrite_r+0x2a8>
 40065d4:	40005a26 	beq	r8,zero,4006740 <__sfvwrite_r+0x398>
 40065d8:	982d883a 	mov	r22,r19
 40065dc:	94c0012e 	bgeu	r18,r19,40065e4 <__sfvwrite_r+0x23c>
 40065e0:	902d883a 	mov	r22,r18
 40065e4:	81000017 	ldw	r4,0(r16)
 40065e8:	80800417 	ldw	r2,16(r16)
 40065ec:	b02f883a 	mov	r23,r22
 40065f0:	81c00517 	ldw	r7,20(r16)
 40065f4:	1100032e 	bgeu	r2,r4,4006604 <__sfvwrite_r+0x25c>
 40065f8:	80c00217 	ldw	r3,8(r16)
 40065fc:	38c7883a 	add	r3,r7,r3
 4006600:	1d801816 	blt	r3,r22,4006664 <__sfvwrite_r+0x2bc>
 4006604:	b1c03e16 	blt	r22,r7,4006700 <__sfvwrite_r+0x358>
 4006608:	80800917 	ldw	r2,36(r16)
 400660c:	81400717 	ldw	r5,28(r16)
 4006610:	e00d883a 	mov	r6,fp
 4006614:	da000115 	stw	r8,4(sp)
 4006618:	a809883a 	mov	r4,r21
 400661c:	103ee83a 	callr	r2
 4006620:	102f883a 	mov	r23,r2
 4006624:	da000117 	ldw	r8,4(sp)
 4006628:	00bfe00e 	bge	zero,r2,40065ac <__alt_data_end+0xfc0065ac>
 400662c:	9de7c83a 	sub	r19,r19,r23
 4006630:	98001f26 	beq	r19,zero,40066b0 <__sfvwrite_r+0x308>
 4006634:	a0800217 	ldw	r2,8(r20)
 4006638:	e5f9883a 	add	fp,fp,r23
 400663c:	95e5c83a 	sub	r18,r18,r23
 4006640:	15efc83a 	sub	r23,r2,r23
 4006644:	a5c00215 	stw	r23,8(r20)
 4006648:	b83f8426 	beq	r23,zero,400645c <__alt_data_end+0xfc00645c>
 400664c:	903fe11e 	bne	r18,zero,40065d4 <__alt_data_end+0xfc0065d4>
 4006650:	8f000017 	ldw	fp,0(r17)
 4006654:	8c800117 	ldw	r18,4(r17)
 4006658:	0011883a 	mov	r8,zero
 400665c:	8c400204 	addi	r17,r17,8
 4006660:	003fdb06 	br	40065d0 <__alt_data_end+0xfc0065d0>
 4006664:	180d883a 	mov	r6,r3
 4006668:	e00b883a 	mov	r5,fp
 400666c:	da000115 	stw	r8,4(sp)
 4006670:	d8c00015 	stw	r3,0(sp)
 4006674:	4006d380 	call	4006d38 <memmove>
 4006678:	d8c00017 	ldw	r3,0(sp)
 400667c:	80800017 	ldw	r2,0(r16)
 4006680:	800b883a 	mov	r5,r16
 4006684:	a809883a 	mov	r4,r21
 4006688:	10c5883a 	add	r2,r2,r3
 400668c:	80800015 	stw	r2,0(r16)
 4006690:	d8c00015 	stw	r3,0(sp)
 4006694:	4001d5c0 	call	4001d5c <_fflush_r>
 4006698:	d8c00017 	ldw	r3,0(sp)
 400669c:	da000117 	ldw	r8,4(sp)
 40066a0:	103fc21e 	bne	r2,zero,40065ac <__alt_data_end+0xfc0065ac>
 40066a4:	182f883a 	mov	r23,r3
 40066a8:	9de7c83a 	sub	r19,r19,r23
 40066ac:	983fe11e 	bne	r19,zero,4006634 <__alt_data_end+0xfc006634>
 40066b0:	800b883a 	mov	r5,r16
 40066b4:	a809883a 	mov	r4,r21
 40066b8:	4001d5c0 	call	4001d5c <_fflush_r>
 40066bc:	103fbb1e 	bne	r2,zero,40065ac <__alt_data_end+0xfc0065ac>
 40066c0:	0011883a 	mov	r8,zero
 40066c4:	003fdb06 	br	4006634 <__alt_data_end+0xfc006634>
 40066c8:	94c0012e 	bgeu	r18,r19,40066d0 <__sfvwrite_r+0x328>
 40066cc:	9027883a 	mov	r19,r18
 40066d0:	980d883a 	mov	r6,r19
 40066d4:	e00b883a 	mov	r5,fp
 40066d8:	4006d380 	call	4006d38 <memmove>
 40066dc:	80800217 	ldw	r2,8(r16)
 40066e0:	80c00017 	ldw	r3,0(r16)
 40066e4:	14c5c83a 	sub	r2,r2,r19
 40066e8:	1cc7883a 	add	r3,r3,r19
 40066ec:	80800215 	stw	r2,8(r16)
 40066f0:	80c00015 	stw	r3,0(r16)
 40066f4:	10004326 	beq	r2,zero,4006804 <__sfvwrite_r+0x45c>
 40066f8:	9805883a 	mov	r2,r19
 40066fc:	003f8306 	br	400650c <__alt_data_end+0xfc00650c>
 4006700:	b00d883a 	mov	r6,r22
 4006704:	e00b883a 	mov	r5,fp
 4006708:	da000115 	stw	r8,4(sp)
 400670c:	4006d380 	call	4006d38 <memmove>
 4006710:	80800217 	ldw	r2,8(r16)
 4006714:	80c00017 	ldw	r3,0(r16)
 4006718:	da000117 	ldw	r8,4(sp)
 400671c:	1585c83a 	sub	r2,r2,r22
 4006720:	1dad883a 	add	r22,r3,r22
 4006724:	80800215 	stw	r2,8(r16)
 4006728:	85800015 	stw	r22,0(r16)
 400672c:	003fbf06 	br	400662c <__alt_data_end+0xfc00662c>
 4006730:	81000017 	ldw	r4,0(r16)
 4006734:	9027883a 	mov	r19,r18
 4006738:	902f883a 	mov	r23,r18
 400673c:	003f6906 	br	40064e4 <__alt_data_end+0xfc0064e4>
 4006740:	900d883a 	mov	r6,r18
 4006744:	01400284 	movi	r5,10
 4006748:	e009883a 	mov	r4,fp
 400674c:	4006c540 	call	4006c54 <memchr>
 4006750:	10003e26 	beq	r2,zero,400684c <__sfvwrite_r+0x4a4>
 4006754:	10800044 	addi	r2,r2,1
 4006758:	1727c83a 	sub	r19,r2,fp
 400675c:	02000044 	movi	r8,1
 4006760:	003f9d06 	br	40065d8 <__alt_data_end+0xfc0065d8>
 4006764:	80800517 	ldw	r2,20(r16)
 4006768:	81400417 	ldw	r5,16(r16)
 400676c:	81c00017 	ldw	r7,0(r16)
 4006770:	10a7883a 	add	r19,r2,r2
 4006774:	9885883a 	add	r2,r19,r2
 4006778:	1026d7fa 	srli	r19,r2,31
 400677c:	396dc83a 	sub	r22,r7,r5
 4006780:	b1000044 	addi	r4,r22,1
 4006784:	9885883a 	add	r2,r19,r2
 4006788:	1027d07a 	srai	r19,r2,1
 400678c:	2485883a 	add	r2,r4,r18
 4006790:	980d883a 	mov	r6,r19
 4006794:	9880022e 	bgeu	r19,r2,40067a0 <__sfvwrite_r+0x3f8>
 4006798:	1027883a 	mov	r19,r2
 400679c:	100d883a 	mov	r6,r2
 40067a0:	18c1000c 	andi	r3,r3,1024
 40067a4:	18001c26 	beq	r3,zero,4006818 <__sfvwrite_r+0x470>
 40067a8:	300b883a 	mov	r5,r6
 40067ac:	a809883a 	mov	r4,r21
 40067b0:	40033980 	call	4003398 <_malloc_r>
 40067b4:	102f883a 	mov	r23,r2
 40067b8:	10002926 	beq	r2,zero,4006860 <__sfvwrite_r+0x4b8>
 40067bc:	81400417 	ldw	r5,16(r16)
 40067c0:	b00d883a 	mov	r6,r22
 40067c4:	1009883a 	mov	r4,r2
 40067c8:	4003ba40 	call	4003ba4 <memcpy>
 40067cc:	8080030b 	ldhu	r2,12(r16)
 40067d0:	00fedfc4 	movi	r3,-1153
 40067d4:	10c4703a 	and	r2,r2,r3
 40067d8:	10802014 	ori	r2,r2,128
 40067dc:	8080030d 	sth	r2,12(r16)
 40067e0:	bd89883a 	add	r4,r23,r22
 40067e4:	9d8fc83a 	sub	r7,r19,r22
 40067e8:	85c00415 	stw	r23,16(r16)
 40067ec:	84c00515 	stw	r19,20(r16)
 40067f0:	81000015 	stw	r4,0(r16)
 40067f4:	9027883a 	mov	r19,r18
 40067f8:	81c00215 	stw	r7,8(r16)
 40067fc:	902f883a 	mov	r23,r18
 4006800:	003f3806 	br	40064e4 <__alt_data_end+0xfc0064e4>
 4006804:	800b883a 	mov	r5,r16
 4006808:	a809883a 	mov	r4,r21
 400680c:	4001d5c0 	call	4001d5c <_fflush_r>
 4006810:	103fb926 	beq	r2,zero,40066f8 <__alt_data_end+0xfc0066f8>
 4006814:	003f6506 	br	40065ac <__alt_data_end+0xfc0065ac>
 4006818:	a809883a 	mov	r4,r21
 400681c:	4006ef40 	call	4006ef4 <_realloc_r>
 4006820:	102f883a 	mov	r23,r2
 4006824:	103fee1e 	bne	r2,zero,40067e0 <__alt_data_end+0xfc0067e0>
 4006828:	81400417 	ldw	r5,16(r16)
 400682c:	a809883a 	mov	r4,r21
 4006830:	40026380 	call	4002638 <_free_r>
 4006834:	8080030b 	ldhu	r2,12(r16)
 4006838:	00ffdfc4 	movi	r3,-129
 400683c:	1884703a 	and	r2,r3,r2
 4006840:	00c00304 	movi	r3,12
 4006844:	a8c00015 	stw	r3,0(r21)
 4006848:	003f5906 	br	40065b0 <__alt_data_end+0xfc0065b0>
 400684c:	94c00044 	addi	r19,r18,1
 4006850:	02000044 	movi	r8,1
 4006854:	003f6006 	br	40065d8 <__alt_data_end+0xfc0065d8>
 4006858:	00bfffc4 	movi	r2,-1
 400685c:	003f0006 	br	4006460 <__alt_data_end+0xfc006460>
 4006860:	00800304 	movi	r2,12
 4006864:	a8800015 	stw	r2,0(r21)
 4006868:	8080030b 	ldhu	r2,12(r16)
 400686c:	003f5006 	br	40065b0 <__alt_data_end+0xfc0065b0>

04006870 <_isatty_r>:
 4006870:	defffd04 	addi	sp,sp,-12
 4006874:	dc000015 	stw	r16,0(sp)
 4006878:	040100b4 	movhi	r16,1026
 400687c:	dc400115 	stw	r17,4(sp)
 4006880:	84303904 	addi	r16,r16,-16156
 4006884:	2023883a 	mov	r17,r4
 4006888:	2809883a 	mov	r4,r5
 400688c:	dfc00215 	stw	ra,8(sp)
 4006890:	80000015 	stw	zero,0(r16)
 4006894:	40146280 	call	4014628 <isatty>
 4006898:	00ffffc4 	movi	r3,-1
 400689c:	10c00526 	beq	r2,r3,40068b4 <_isatty_r+0x44>
 40068a0:	dfc00217 	ldw	ra,8(sp)
 40068a4:	dc400117 	ldw	r17,4(sp)
 40068a8:	dc000017 	ldw	r16,0(sp)
 40068ac:	dec00304 	addi	sp,sp,12
 40068b0:	f800283a 	ret
 40068b4:	80c00017 	ldw	r3,0(r16)
 40068b8:	183ff926 	beq	r3,zero,40068a0 <__alt_data_end+0xfc0068a0>
 40068bc:	88c00015 	stw	r3,0(r17)
 40068c0:	003ff706 	br	40068a0 <__alt_data_end+0xfc0068a0>

040068c4 <iswspace>:
 40068c4:	00803fc4 	movi	r2,255
 40068c8:	11000836 	bltu	r2,r4,40068ec <iswspace+0x28>
 40068cc:	008100b4 	movhi	r2,1026
 40068d0:	10a8e004 	addi	r2,r2,-23680
 40068d4:	10800017 	ldw	r2,0(r2)
 40068d8:	1109883a 	add	r4,r2,r4
 40068dc:	20800043 	ldbu	r2,1(r4)
 40068e0:	1080020c 	andi	r2,r2,8
 40068e4:	10803fcc 	andi	r2,r2,255
 40068e8:	f800283a 	ret
 40068ec:	0005883a 	mov	r2,zero
 40068f0:	f800283a 	ret

040068f4 <_setlocale_r>:
 40068f4:	30001b26 	beq	r6,zero,4006964 <_setlocale_r+0x70>
 40068f8:	014100b4 	movhi	r5,1026
 40068fc:	defffe04 	addi	sp,sp,-8
 4006900:	2960b004 	addi	r5,r5,-32064
 4006904:	3009883a 	mov	r4,r6
 4006908:	dc000015 	stw	r16,0(sp)
 400690c:	dfc00115 	stw	ra,4(sp)
 4006910:	3021883a 	mov	r16,r6
 4006914:	40076680 	call	4007668 <strcmp>
 4006918:	1000061e 	bne	r2,zero,4006934 <_setlocale_r+0x40>
 400691c:	008100b4 	movhi	r2,1026
 4006920:	10a00304 	addi	r2,r2,-32756
 4006924:	dfc00117 	ldw	ra,4(sp)
 4006928:	dc000017 	ldw	r16,0(sp)
 400692c:	dec00204 	addi	sp,sp,8
 4006930:	f800283a 	ret
 4006934:	014100b4 	movhi	r5,1026
 4006938:	29600304 	addi	r5,r5,-32756
 400693c:	8009883a 	mov	r4,r16
 4006940:	40076680 	call	4007668 <strcmp>
 4006944:	103ff526 	beq	r2,zero,400691c <__alt_data_end+0xfc00691c>
 4006948:	01410074 	movhi	r5,1025
 400694c:	295f8304 	addi	r5,r5,32268
 4006950:	8009883a 	mov	r4,r16
 4006954:	40076680 	call	4007668 <strcmp>
 4006958:	103ff026 	beq	r2,zero,400691c <__alt_data_end+0xfc00691c>
 400695c:	0005883a 	mov	r2,zero
 4006960:	003ff006 	br	4006924 <__alt_data_end+0xfc006924>
 4006964:	008100b4 	movhi	r2,1026
 4006968:	10a00304 	addi	r2,r2,-32756
 400696c:	f800283a 	ret

04006970 <__locale_charset>:
 4006970:	008100b4 	movhi	r2,1026
 4006974:	10a42204 	addi	r2,r2,-28536
 4006978:	f800283a 	ret

0400697c <__locale_mb_cur_max>:
 400697c:	008100b4 	movhi	r2,1026
 4006980:	10a8e104 	addi	r2,r2,-23676
 4006984:	10800017 	ldw	r2,0(r2)
 4006988:	f800283a 	ret

0400698c <__locale_msgcharset>:
 400698c:	008100b4 	movhi	r2,1026
 4006990:	10a41a04 	addi	r2,r2,-28568
 4006994:	f800283a 	ret

04006998 <__locale_cjk_lang>:
 4006998:	0005883a 	mov	r2,zero
 400699c:	f800283a 	ret

040069a0 <_localeconv_r>:
 40069a0:	008100b4 	movhi	r2,1026
 40069a4:	10a42a04 	addi	r2,r2,-28504
 40069a8:	f800283a 	ret

040069ac <setlocale>:
 40069ac:	008100b4 	movhi	r2,1026
 40069b0:	10a8dd04 	addi	r2,r2,-23692
 40069b4:	280d883a 	mov	r6,r5
 40069b8:	200b883a 	mov	r5,r4
 40069bc:	11000017 	ldw	r4,0(r2)
 40069c0:	40068f41 	jmpi	40068f4 <_setlocale_r>

040069c4 <localeconv>:
 40069c4:	008100b4 	movhi	r2,1026
 40069c8:	10a42a04 	addi	r2,r2,-28504
 40069cc:	f800283a 	ret

040069d0 <_lseek_r>:
 40069d0:	defffd04 	addi	sp,sp,-12
 40069d4:	2805883a 	mov	r2,r5
 40069d8:	dc000015 	stw	r16,0(sp)
 40069dc:	040100b4 	movhi	r16,1026
 40069e0:	dc400115 	stw	r17,4(sp)
 40069e4:	300b883a 	mov	r5,r6
 40069e8:	84303904 	addi	r16,r16,-16156
 40069ec:	2023883a 	mov	r17,r4
 40069f0:	380d883a 	mov	r6,r7
 40069f4:	1009883a 	mov	r4,r2
 40069f8:	dfc00215 	stw	ra,8(sp)
 40069fc:	80000015 	stw	zero,0(r16)
 4006a00:	40147fc0 	call	40147fc <lseek>
 4006a04:	00ffffc4 	movi	r3,-1
 4006a08:	10c00526 	beq	r2,r3,4006a20 <_lseek_r+0x50>
 4006a0c:	dfc00217 	ldw	ra,8(sp)
 4006a10:	dc400117 	ldw	r17,4(sp)
 4006a14:	dc000017 	ldw	r16,0(sp)
 4006a18:	dec00304 	addi	sp,sp,12
 4006a1c:	f800283a 	ret
 4006a20:	80c00017 	ldw	r3,0(r16)
 4006a24:	183ff926 	beq	r3,zero,4006a0c <__alt_data_end+0xfc006a0c>
 4006a28:	88c00015 	stw	r3,0(r17)
 4006a2c:	003ff706 	br	4006a0c <__alt_data_end+0xfc006a0c>

04006a30 <_mbrtowc_r>:
 4006a30:	defff704 	addi	sp,sp,-36
 4006a34:	008100b4 	movhi	r2,1026
 4006a38:	dc800715 	stw	r18,28(sp)
 4006a3c:	dc400615 	stw	r17,24(sp)
 4006a40:	dc000515 	stw	r16,20(sp)
 4006a44:	10a8e204 	addi	r2,r2,-23672
 4006a48:	dfc00815 	stw	ra,32(sp)
 4006a4c:	2021883a 	mov	r16,r4
 4006a50:	dc400917 	ldw	r17,36(sp)
 4006a54:	14800017 	ldw	r18,0(r2)
 4006a58:	30001626 	beq	r6,zero,4006ab4 <_mbrtowc_r+0x84>
 4006a5c:	d9400215 	stw	r5,8(sp)
 4006a60:	d9800315 	stw	r6,12(sp)
 4006a64:	d9c00415 	stw	r7,16(sp)
 4006a68:	40069700 	call	4006970 <__locale_charset>
 4006a6c:	d9c00417 	ldw	r7,16(sp)
 4006a70:	d9800317 	ldw	r6,12(sp)
 4006a74:	d9400217 	ldw	r5,8(sp)
 4006a78:	d8800015 	stw	r2,0(sp)
 4006a7c:	dc400115 	stw	r17,4(sp)
 4006a80:	8009883a 	mov	r4,r16
 4006a84:	903ee83a 	callr	r18
 4006a88:	00ffffc4 	movi	r3,-1
 4006a8c:	10c0031e 	bne	r2,r3,4006a9c <_mbrtowc_r+0x6c>
 4006a90:	88000015 	stw	zero,0(r17)
 4006a94:	00c02284 	movi	r3,138
 4006a98:	80c00015 	stw	r3,0(r16)
 4006a9c:	dfc00817 	ldw	ra,32(sp)
 4006aa0:	dc800717 	ldw	r18,28(sp)
 4006aa4:	dc400617 	ldw	r17,24(sp)
 4006aa8:	dc000517 	ldw	r16,20(sp)
 4006aac:	dec00904 	addi	sp,sp,36
 4006ab0:	f800283a 	ret
 4006ab4:	40069700 	call	4006970 <__locale_charset>
 4006ab8:	01810074 	movhi	r6,1025
 4006abc:	319f8304 	addi	r6,r6,32268
 4006ac0:	dc400115 	stw	r17,4(sp)
 4006ac4:	d8800015 	stw	r2,0(sp)
 4006ac8:	01c00044 	movi	r7,1
 4006acc:	000b883a 	mov	r5,zero
 4006ad0:	8009883a 	mov	r4,r16
 4006ad4:	903ee83a 	callr	r18
 4006ad8:	003feb06 	br	4006a88 <__alt_data_end+0xfc006a88>

04006adc <mbrtowc>:
 4006adc:	defff704 	addi	sp,sp,-36
 4006ae0:	008100b4 	movhi	r2,1026
 4006ae4:	dc800415 	stw	r18,16(sp)
 4006ae8:	dc400315 	stw	r17,12(sp)
 4006aec:	10a8dd04 	addi	r2,r2,-23692
 4006af0:	dfc00815 	stw	ra,32(sp)
 4006af4:	dd400715 	stw	r21,28(sp)
 4006af8:	dd000615 	stw	r20,24(sp)
 4006afc:	dcc00515 	stw	r19,20(sp)
 4006b00:	dc000215 	stw	r16,8(sp)
 4006b04:	3825883a 	mov	r18,r7
 4006b08:	14400017 	ldw	r17,0(r2)
 4006b0c:	28001c26 	beq	r5,zero,4006b80 <mbrtowc+0xa4>
 4006b10:	008100b4 	movhi	r2,1026
 4006b14:	10a8e204 	addi	r2,r2,-23672
 4006b18:	15400017 	ldw	r21,0(r2)
 4006b1c:	2821883a 	mov	r16,r5
 4006b20:	2027883a 	mov	r19,r4
 4006b24:	3029883a 	mov	r20,r6
 4006b28:	40069700 	call	4006970 <__locale_charset>
 4006b2c:	d8800015 	stw	r2,0(sp)
 4006b30:	dc800115 	stw	r18,4(sp)
 4006b34:	a00f883a 	mov	r7,r20
 4006b38:	800d883a 	mov	r6,r16
 4006b3c:	980b883a 	mov	r5,r19
 4006b40:	8809883a 	mov	r4,r17
 4006b44:	a83ee83a 	callr	r21
 4006b48:	00ffffc4 	movi	r3,-1
 4006b4c:	10c0031e 	bne	r2,r3,4006b5c <mbrtowc+0x80>
 4006b50:	90000015 	stw	zero,0(r18)
 4006b54:	00c02284 	movi	r3,138
 4006b58:	88c00015 	stw	r3,0(r17)
 4006b5c:	dfc00817 	ldw	ra,32(sp)
 4006b60:	dd400717 	ldw	r21,28(sp)
 4006b64:	dd000617 	ldw	r20,24(sp)
 4006b68:	dcc00517 	ldw	r19,20(sp)
 4006b6c:	dc800417 	ldw	r18,16(sp)
 4006b70:	dc400317 	ldw	r17,12(sp)
 4006b74:	dc000217 	ldw	r16,8(sp)
 4006b78:	dec00904 	addi	sp,sp,36
 4006b7c:	f800283a 	ret
 4006b80:	008100b4 	movhi	r2,1026
 4006b84:	10a8e204 	addi	r2,r2,-23672
 4006b88:	14000017 	ldw	r16,0(r2)
 4006b8c:	40069700 	call	4006970 <__locale_charset>
 4006b90:	01810074 	movhi	r6,1025
 4006b94:	319f8304 	addi	r6,r6,32268
 4006b98:	dc800115 	stw	r18,4(sp)
 4006b9c:	d8800015 	stw	r2,0(sp)
 4006ba0:	01c00044 	movi	r7,1
 4006ba4:	000b883a 	mov	r5,zero
 4006ba8:	8809883a 	mov	r4,r17
 4006bac:	803ee83a 	callr	r16
 4006bb0:	003fe506 	br	4006b48 <__alt_data_end+0xfc006b48>

04006bb4 <__ascii_mbtowc>:
 4006bb4:	deffff04 	addi	sp,sp,-4
 4006bb8:	28000826 	beq	r5,zero,4006bdc <__ascii_mbtowc+0x28>
 4006bbc:	30000926 	beq	r6,zero,4006be4 <__ascii_mbtowc+0x30>
 4006bc0:	38000b26 	beq	r7,zero,4006bf0 <__ascii_mbtowc+0x3c>
 4006bc4:	30800003 	ldbu	r2,0(r6)
 4006bc8:	28800015 	stw	r2,0(r5)
 4006bcc:	30800003 	ldbu	r2,0(r6)
 4006bd0:	1004c03a 	cmpne	r2,r2,zero
 4006bd4:	dec00104 	addi	sp,sp,4
 4006bd8:	f800283a 	ret
 4006bdc:	d80b883a 	mov	r5,sp
 4006be0:	303ff71e 	bne	r6,zero,4006bc0 <__alt_data_end+0xfc006bc0>
 4006be4:	0005883a 	mov	r2,zero
 4006be8:	dec00104 	addi	sp,sp,4
 4006bec:	f800283a 	ret
 4006bf0:	00bfff84 	movi	r2,-2
 4006bf4:	003ff706 	br	4006bd4 <__alt_data_end+0xfc006bd4>

04006bf8 <_mbtowc_r>:
 4006bf8:	008100b4 	movhi	r2,1026
 4006bfc:	defff804 	addi	sp,sp,-32
 4006c00:	10a8e204 	addi	r2,r2,-23672
 4006c04:	dfc00715 	stw	ra,28(sp)
 4006c08:	dc000615 	stw	r16,24(sp)
 4006c0c:	14000017 	ldw	r16,0(r2)
 4006c10:	d9000215 	stw	r4,8(sp)
 4006c14:	d9400315 	stw	r5,12(sp)
 4006c18:	d9800415 	stw	r6,16(sp)
 4006c1c:	d9c00515 	stw	r7,20(sp)
 4006c20:	40069700 	call	4006970 <__locale_charset>
 4006c24:	d8800015 	stw	r2,0(sp)
 4006c28:	d8800817 	ldw	r2,32(sp)
 4006c2c:	d9c00517 	ldw	r7,20(sp)
 4006c30:	d9800417 	ldw	r6,16(sp)
 4006c34:	d9400317 	ldw	r5,12(sp)
 4006c38:	d9000217 	ldw	r4,8(sp)
 4006c3c:	d8800115 	stw	r2,4(sp)
 4006c40:	803ee83a 	callr	r16
 4006c44:	dfc00717 	ldw	ra,28(sp)
 4006c48:	dc000617 	ldw	r16,24(sp)
 4006c4c:	dec00804 	addi	sp,sp,32
 4006c50:	f800283a 	ret

04006c54 <memchr>:
 4006c54:	208000cc 	andi	r2,r4,3
 4006c58:	280f883a 	mov	r7,r5
 4006c5c:	10003426 	beq	r2,zero,4006d30 <memchr+0xdc>
 4006c60:	30bfffc4 	addi	r2,r6,-1
 4006c64:	30001a26 	beq	r6,zero,4006cd0 <memchr+0x7c>
 4006c68:	20c00003 	ldbu	r3,0(r4)
 4006c6c:	29803fcc 	andi	r6,r5,255
 4006c70:	30c0051e 	bne	r6,r3,4006c88 <memchr+0x34>
 4006c74:	00001806 	br	4006cd8 <memchr+0x84>
 4006c78:	10001526 	beq	r2,zero,4006cd0 <memchr+0x7c>
 4006c7c:	20c00003 	ldbu	r3,0(r4)
 4006c80:	10bfffc4 	addi	r2,r2,-1
 4006c84:	30c01426 	beq	r6,r3,4006cd8 <memchr+0x84>
 4006c88:	21000044 	addi	r4,r4,1
 4006c8c:	20c000cc 	andi	r3,r4,3
 4006c90:	183ff91e 	bne	r3,zero,4006c78 <__alt_data_end+0xfc006c78>
 4006c94:	020000c4 	movi	r8,3
 4006c98:	40801136 	bltu	r8,r2,4006ce0 <memchr+0x8c>
 4006c9c:	10000c26 	beq	r2,zero,4006cd0 <memchr+0x7c>
 4006ca0:	20c00003 	ldbu	r3,0(r4)
 4006ca4:	29403fcc 	andi	r5,r5,255
 4006ca8:	28c00b26 	beq	r5,r3,4006cd8 <memchr+0x84>
 4006cac:	20c00044 	addi	r3,r4,1
 4006cb0:	39803fcc 	andi	r6,r7,255
 4006cb4:	2089883a 	add	r4,r4,r2
 4006cb8:	00000306 	br	4006cc8 <memchr+0x74>
 4006cbc:	18c00044 	addi	r3,r3,1
 4006cc0:	197fffc3 	ldbu	r5,-1(r3)
 4006cc4:	31400526 	beq	r6,r5,4006cdc <memchr+0x88>
 4006cc8:	1805883a 	mov	r2,r3
 4006ccc:	20fffb1e 	bne	r4,r3,4006cbc <__alt_data_end+0xfc006cbc>
 4006cd0:	0005883a 	mov	r2,zero
 4006cd4:	f800283a 	ret
 4006cd8:	2005883a 	mov	r2,r4
 4006cdc:	f800283a 	ret
 4006ce0:	28c03fcc 	andi	r3,r5,255
 4006ce4:	1812923a 	slli	r9,r3,8
 4006ce8:	02ffbff4 	movhi	r11,65279
 4006cec:	02a02074 	movhi	r10,32897
 4006cf0:	48d2b03a 	or	r9,r9,r3
 4006cf4:	4806943a 	slli	r3,r9,16
 4006cf8:	5affbfc4 	addi	r11,r11,-257
 4006cfc:	52a02004 	addi	r10,r10,-32640
 4006d00:	48d2b03a 	or	r9,r9,r3
 4006d04:	20c00017 	ldw	r3,0(r4)
 4006d08:	48c6f03a 	xor	r3,r9,r3
 4006d0c:	1acd883a 	add	r6,r3,r11
 4006d10:	00c6303a 	nor	r3,zero,r3
 4006d14:	30c6703a 	and	r3,r6,r3
 4006d18:	1a86703a 	and	r3,r3,r10
 4006d1c:	183fe01e 	bne	r3,zero,4006ca0 <__alt_data_end+0xfc006ca0>
 4006d20:	10bfff04 	addi	r2,r2,-4
 4006d24:	21000104 	addi	r4,r4,4
 4006d28:	40bff636 	bltu	r8,r2,4006d04 <__alt_data_end+0xfc006d04>
 4006d2c:	003fdb06 	br	4006c9c <__alt_data_end+0xfc006c9c>
 4006d30:	3005883a 	mov	r2,r6
 4006d34:	003fd706 	br	4006c94 <__alt_data_end+0xfc006c94>

04006d38 <memmove>:
 4006d38:	2005883a 	mov	r2,r4
 4006d3c:	29000b2e 	bgeu	r5,r4,4006d6c <memmove+0x34>
 4006d40:	298f883a 	add	r7,r5,r6
 4006d44:	21c0092e 	bgeu	r4,r7,4006d6c <memmove+0x34>
 4006d48:	2187883a 	add	r3,r4,r6
 4006d4c:	198bc83a 	sub	r5,r3,r6
 4006d50:	30004826 	beq	r6,zero,4006e74 <memmove+0x13c>
 4006d54:	39ffffc4 	addi	r7,r7,-1
 4006d58:	39000003 	ldbu	r4,0(r7)
 4006d5c:	18ffffc4 	addi	r3,r3,-1
 4006d60:	19000005 	stb	r4,0(r3)
 4006d64:	28fffb1e 	bne	r5,r3,4006d54 <__alt_data_end+0xfc006d54>
 4006d68:	f800283a 	ret
 4006d6c:	00c003c4 	movi	r3,15
 4006d70:	1980412e 	bgeu	r3,r6,4006e78 <memmove+0x140>
 4006d74:	2886b03a 	or	r3,r5,r2
 4006d78:	18c000cc 	andi	r3,r3,3
 4006d7c:	1800401e 	bne	r3,zero,4006e80 <memmove+0x148>
 4006d80:	33fffc04 	addi	r15,r6,-16
 4006d84:	781ed13a 	srli	r15,r15,4
 4006d88:	28c00104 	addi	r3,r5,4
 4006d8c:	13400104 	addi	r13,r2,4
 4006d90:	781c913a 	slli	r14,r15,4
 4006d94:	2b000204 	addi	r12,r5,8
 4006d98:	12c00204 	addi	r11,r2,8
 4006d9c:	73800504 	addi	r14,r14,20
 4006da0:	2a800304 	addi	r10,r5,12
 4006da4:	12400304 	addi	r9,r2,12
 4006da8:	2b9d883a 	add	r14,r5,r14
 4006dac:	2811883a 	mov	r8,r5
 4006db0:	100f883a 	mov	r7,r2
 4006db4:	41000017 	ldw	r4,0(r8)
 4006db8:	39c00404 	addi	r7,r7,16
 4006dbc:	18c00404 	addi	r3,r3,16
 4006dc0:	393ffc15 	stw	r4,-16(r7)
 4006dc4:	193ffc17 	ldw	r4,-16(r3)
 4006dc8:	6b400404 	addi	r13,r13,16
 4006dcc:	5ac00404 	addi	r11,r11,16
 4006dd0:	693ffc15 	stw	r4,-16(r13)
 4006dd4:	61000017 	ldw	r4,0(r12)
 4006dd8:	4a400404 	addi	r9,r9,16
 4006ddc:	42000404 	addi	r8,r8,16
 4006de0:	593ffc15 	stw	r4,-16(r11)
 4006de4:	51000017 	ldw	r4,0(r10)
 4006de8:	63000404 	addi	r12,r12,16
 4006dec:	52800404 	addi	r10,r10,16
 4006df0:	493ffc15 	stw	r4,-16(r9)
 4006df4:	1bbfef1e 	bne	r3,r14,4006db4 <__alt_data_end+0xfc006db4>
 4006df8:	79000044 	addi	r4,r15,1
 4006dfc:	2008913a 	slli	r4,r4,4
 4006e00:	328003cc 	andi	r10,r6,15
 4006e04:	02c000c4 	movi	r11,3
 4006e08:	1107883a 	add	r3,r2,r4
 4006e0c:	290b883a 	add	r5,r5,r4
 4006e10:	5a801e2e 	bgeu	r11,r10,4006e8c <memmove+0x154>
 4006e14:	1813883a 	mov	r9,r3
 4006e18:	2811883a 	mov	r8,r5
 4006e1c:	500f883a 	mov	r7,r10
 4006e20:	41000017 	ldw	r4,0(r8)
 4006e24:	4a400104 	addi	r9,r9,4
 4006e28:	39ffff04 	addi	r7,r7,-4
 4006e2c:	493fff15 	stw	r4,-4(r9)
 4006e30:	42000104 	addi	r8,r8,4
 4006e34:	59fffa36 	bltu	r11,r7,4006e20 <__alt_data_end+0xfc006e20>
 4006e38:	513fff04 	addi	r4,r10,-4
 4006e3c:	2008d0ba 	srli	r4,r4,2
 4006e40:	318000cc 	andi	r6,r6,3
 4006e44:	21000044 	addi	r4,r4,1
 4006e48:	2109883a 	add	r4,r4,r4
 4006e4c:	2109883a 	add	r4,r4,r4
 4006e50:	1907883a 	add	r3,r3,r4
 4006e54:	290b883a 	add	r5,r5,r4
 4006e58:	30000b26 	beq	r6,zero,4006e88 <memmove+0x150>
 4006e5c:	198d883a 	add	r6,r3,r6
 4006e60:	29c00003 	ldbu	r7,0(r5)
 4006e64:	18c00044 	addi	r3,r3,1
 4006e68:	29400044 	addi	r5,r5,1
 4006e6c:	19ffffc5 	stb	r7,-1(r3)
 4006e70:	19bffb1e 	bne	r3,r6,4006e60 <__alt_data_end+0xfc006e60>
 4006e74:	f800283a 	ret
 4006e78:	1007883a 	mov	r3,r2
 4006e7c:	003ff606 	br	4006e58 <__alt_data_end+0xfc006e58>
 4006e80:	1007883a 	mov	r3,r2
 4006e84:	003ff506 	br	4006e5c <__alt_data_end+0xfc006e5c>
 4006e88:	f800283a 	ret
 4006e8c:	500d883a 	mov	r6,r10
 4006e90:	003ff106 	br	4006e58 <__alt_data_end+0xfc006e58>

04006e94 <_read_r>:
 4006e94:	defffd04 	addi	sp,sp,-12
 4006e98:	2805883a 	mov	r2,r5
 4006e9c:	dc000015 	stw	r16,0(sp)
 4006ea0:	040100b4 	movhi	r16,1026
 4006ea4:	dc400115 	stw	r17,4(sp)
 4006ea8:	300b883a 	mov	r5,r6
 4006eac:	84303904 	addi	r16,r16,-16156
 4006eb0:	2023883a 	mov	r17,r4
 4006eb4:	380d883a 	mov	r6,r7
 4006eb8:	1009883a 	mov	r4,r2
 4006ebc:	dfc00215 	stw	ra,8(sp)
 4006ec0:	80000015 	stw	zero,0(r16)
 4006ec4:	4014c5c0 	call	4014c5c <read>
 4006ec8:	00ffffc4 	movi	r3,-1
 4006ecc:	10c00526 	beq	r2,r3,4006ee4 <_read_r+0x50>
 4006ed0:	dfc00217 	ldw	ra,8(sp)
 4006ed4:	dc400117 	ldw	r17,4(sp)
 4006ed8:	dc000017 	ldw	r16,0(sp)
 4006edc:	dec00304 	addi	sp,sp,12
 4006ee0:	f800283a 	ret
 4006ee4:	80c00017 	ldw	r3,0(r16)
 4006ee8:	183ff926 	beq	r3,zero,4006ed0 <__alt_data_end+0xfc006ed0>
 4006eec:	88c00015 	stw	r3,0(r17)
 4006ef0:	003ff706 	br	4006ed0 <__alt_data_end+0xfc006ed0>

04006ef4 <_realloc_r>:
 4006ef4:	defff604 	addi	sp,sp,-40
 4006ef8:	dc800215 	stw	r18,8(sp)
 4006efc:	dfc00915 	stw	ra,36(sp)
 4006f00:	df000815 	stw	fp,32(sp)
 4006f04:	ddc00715 	stw	r23,28(sp)
 4006f08:	dd800615 	stw	r22,24(sp)
 4006f0c:	dd400515 	stw	r21,20(sp)
 4006f10:	dd000415 	stw	r20,16(sp)
 4006f14:	dcc00315 	stw	r19,12(sp)
 4006f18:	dc400115 	stw	r17,4(sp)
 4006f1c:	dc000015 	stw	r16,0(sp)
 4006f20:	3025883a 	mov	r18,r6
 4006f24:	2800b726 	beq	r5,zero,4007204 <_realloc_r+0x310>
 4006f28:	282b883a 	mov	r21,r5
 4006f2c:	2029883a 	mov	r20,r4
 4006f30:	40149540 	call	4014954 <__malloc_lock>
 4006f34:	a8bfff17 	ldw	r2,-4(r21)
 4006f38:	043fff04 	movi	r16,-4
 4006f3c:	90c002c4 	addi	r3,r18,11
 4006f40:	01000584 	movi	r4,22
 4006f44:	acfffe04 	addi	r19,r21,-8
 4006f48:	1420703a 	and	r16,r2,r16
 4006f4c:	20c0332e 	bgeu	r4,r3,400701c <_realloc_r+0x128>
 4006f50:	047ffe04 	movi	r17,-8
 4006f54:	1c62703a 	and	r17,r3,r17
 4006f58:	8807883a 	mov	r3,r17
 4006f5c:	88005816 	blt	r17,zero,40070c0 <_realloc_r+0x1cc>
 4006f60:	8c805736 	bltu	r17,r18,40070c0 <_realloc_r+0x1cc>
 4006f64:	80c0300e 	bge	r16,r3,4007028 <_realloc_r+0x134>
 4006f68:	070100b4 	movhi	fp,1026
 4006f6c:	e7231804 	addi	fp,fp,-29600
 4006f70:	e1c00217 	ldw	r7,8(fp)
 4006f74:	9c09883a 	add	r4,r19,r16
 4006f78:	22000117 	ldw	r8,4(r4)
 4006f7c:	21c06326 	beq	r4,r7,400710c <_realloc_r+0x218>
 4006f80:	017fff84 	movi	r5,-2
 4006f84:	414a703a 	and	r5,r8,r5
 4006f88:	214b883a 	add	r5,r4,r5
 4006f8c:	29800117 	ldw	r6,4(r5)
 4006f90:	3180004c 	andi	r6,r6,1
 4006f94:	30003f26 	beq	r6,zero,4007094 <_realloc_r+0x1a0>
 4006f98:	1080004c 	andi	r2,r2,1
 4006f9c:	10008326 	beq	r2,zero,40071ac <_realloc_r+0x2b8>
 4006fa0:	900b883a 	mov	r5,r18
 4006fa4:	a009883a 	mov	r4,r20
 4006fa8:	40033980 	call	4003398 <_malloc_r>
 4006fac:	1025883a 	mov	r18,r2
 4006fb0:	10011e26 	beq	r2,zero,400742c <_realloc_r+0x538>
 4006fb4:	a93fff17 	ldw	r4,-4(r21)
 4006fb8:	10fffe04 	addi	r3,r2,-8
 4006fbc:	00bfff84 	movi	r2,-2
 4006fc0:	2084703a 	and	r2,r4,r2
 4006fc4:	9885883a 	add	r2,r19,r2
 4006fc8:	1880ee26 	beq	r3,r2,4007384 <_realloc_r+0x490>
 4006fcc:	81bfff04 	addi	r6,r16,-4
 4006fd0:	00800904 	movi	r2,36
 4006fd4:	1180b836 	bltu	r2,r6,40072b8 <_realloc_r+0x3c4>
 4006fd8:	00c004c4 	movi	r3,19
 4006fdc:	19809636 	bltu	r3,r6,4007238 <_realloc_r+0x344>
 4006fe0:	9005883a 	mov	r2,r18
 4006fe4:	a807883a 	mov	r3,r21
 4006fe8:	19000017 	ldw	r4,0(r3)
 4006fec:	11000015 	stw	r4,0(r2)
 4006ff0:	19000117 	ldw	r4,4(r3)
 4006ff4:	11000115 	stw	r4,4(r2)
 4006ff8:	18c00217 	ldw	r3,8(r3)
 4006ffc:	10c00215 	stw	r3,8(r2)
 4007000:	a80b883a 	mov	r5,r21
 4007004:	a009883a 	mov	r4,r20
 4007008:	40026380 	call	4002638 <_free_r>
 400700c:	a009883a 	mov	r4,r20
 4007010:	40149780 	call	4014978 <__malloc_unlock>
 4007014:	9005883a 	mov	r2,r18
 4007018:	00001206 	br	4007064 <_realloc_r+0x170>
 400701c:	00c00404 	movi	r3,16
 4007020:	1823883a 	mov	r17,r3
 4007024:	003fce06 	br	4006f60 <__alt_data_end+0xfc006f60>
 4007028:	a825883a 	mov	r18,r21
 400702c:	8445c83a 	sub	r2,r16,r17
 4007030:	00c003c4 	movi	r3,15
 4007034:	18802636 	bltu	r3,r2,40070d0 <_realloc_r+0x1dc>
 4007038:	99800117 	ldw	r6,4(r19)
 400703c:	9c07883a 	add	r3,r19,r16
 4007040:	3180004c 	andi	r6,r6,1
 4007044:	3420b03a 	or	r16,r6,r16
 4007048:	9c000115 	stw	r16,4(r19)
 400704c:	18800117 	ldw	r2,4(r3)
 4007050:	10800054 	ori	r2,r2,1
 4007054:	18800115 	stw	r2,4(r3)
 4007058:	a009883a 	mov	r4,r20
 400705c:	40149780 	call	4014978 <__malloc_unlock>
 4007060:	9005883a 	mov	r2,r18
 4007064:	dfc00917 	ldw	ra,36(sp)
 4007068:	df000817 	ldw	fp,32(sp)
 400706c:	ddc00717 	ldw	r23,28(sp)
 4007070:	dd800617 	ldw	r22,24(sp)
 4007074:	dd400517 	ldw	r21,20(sp)
 4007078:	dd000417 	ldw	r20,16(sp)
 400707c:	dcc00317 	ldw	r19,12(sp)
 4007080:	dc800217 	ldw	r18,8(sp)
 4007084:	dc400117 	ldw	r17,4(sp)
 4007088:	dc000017 	ldw	r16,0(sp)
 400708c:	dec00a04 	addi	sp,sp,40
 4007090:	f800283a 	ret
 4007094:	017fff04 	movi	r5,-4
 4007098:	414a703a 	and	r5,r8,r5
 400709c:	814d883a 	add	r6,r16,r5
 40070a0:	30c01f16 	blt	r6,r3,4007120 <_realloc_r+0x22c>
 40070a4:	20800317 	ldw	r2,12(r4)
 40070a8:	20c00217 	ldw	r3,8(r4)
 40070ac:	a825883a 	mov	r18,r21
 40070b0:	3021883a 	mov	r16,r6
 40070b4:	18800315 	stw	r2,12(r3)
 40070b8:	10c00215 	stw	r3,8(r2)
 40070bc:	003fdb06 	br	400702c <__alt_data_end+0xfc00702c>
 40070c0:	00800304 	movi	r2,12
 40070c4:	a0800015 	stw	r2,0(r20)
 40070c8:	0005883a 	mov	r2,zero
 40070cc:	003fe506 	br	4007064 <__alt_data_end+0xfc007064>
 40070d0:	98c00117 	ldw	r3,4(r19)
 40070d4:	9c4b883a 	add	r5,r19,r17
 40070d8:	11000054 	ori	r4,r2,1
 40070dc:	18c0004c 	andi	r3,r3,1
 40070e0:	1c62b03a 	or	r17,r3,r17
 40070e4:	9c400115 	stw	r17,4(r19)
 40070e8:	29000115 	stw	r4,4(r5)
 40070ec:	2885883a 	add	r2,r5,r2
 40070f0:	10c00117 	ldw	r3,4(r2)
 40070f4:	29400204 	addi	r5,r5,8
 40070f8:	a009883a 	mov	r4,r20
 40070fc:	18c00054 	ori	r3,r3,1
 4007100:	10c00115 	stw	r3,4(r2)
 4007104:	40026380 	call	4002638 <_free_r>
 4007108:	003fd306 	br	4007058 <__alt_data_end+0xfc007058>
 400710c:	017fff04 	movi	r5,-4
 4007110:	414a703a 	and	r5,r8,r5
 4007114:	89800404 	addi	r6,r17,16
 4007118:	8151883a 	add	r8,r16,r5
 400711c:	4180590e 	bge	r8,r6,4007284 <_realloc_r+0x390>
 4007120:	1080004c 	andi	r2,r2,1
 4007124:	103f9e1e 	bne	r2,zero,4006fa0 <__alt_data_end+0xfc006fa0>
 4007128:	adbffe17 	ldw	r22,-8(r21)
 400712c:	00bfff04 	movi	r2,-4
 4007130:	9dadc83a 	sub	r22,r19,r22
 4007134:	b1800117 	ldw	r6,4(r22)
 4007138:	3084703a 	and	r2,r6,r2
 400713c:	20002026 	beq	r4,zero,40071c0 <_realloc_r+0x2cc>
 4007140:	80af883a 	add	r23,r16,r2
 4007144:	b96f883a 	add	r23,r23,r5
 4007148:	21c05f26 	beq	r4,r7,40072c8 <_realloc_r+0x3d4>
 400714c:	b8c01c16 	blt	r23,r3,40071c0 <_realloc_r+0x2cc>
 4007150:	20800317 	ldw	r2,12(r4)
 4007154:	20c00217 	ldw	r3,8(r4)
 4007158:	81bfff04 	addi	r6,r16,-4
 400715c:	01000904 	movi	r4,36
 4007160:	18800315 	stw	r2,12(r3)
 4007164:	10c00215 	stw	r3,8(r2)
 4007168:	b0c00217 	ldw	r3,8(r22)
 400716c:	b0800317 	ldw	r2,12(r22)
 4007170:	b4800204 	addi	r18,r22,8
 4007174:	18800315 	stw	r2,12(r3)
 4007178:	10c00215 	stw	r3,8(r2)
 400717c:	21801b36 	bltu	r4,r6,40071ec <_realloc_r+0x2f8>
 4007180:	008004c4 	movi	r2,19
 4007184:	1180352e 	bgeu	r2,r6,400725c <_realloc_r+0x368>
 4007188:	a8800017 	ldw	r2,0(r21)
 400718c:	b0800215 	stw	r2,8(r22)
 4007190:	a8800117 	ldw	r2,4(r21)
 4007194:	b0800315 	stw	r2,12(r22)
 4007198:	008006c4 	movi	r2,27
 400719c:	11807f36 	bltu	r2,r6,400739c <_realloc_r+0x4a8>
 40071a0:	b0800404 	addi	r2,r22,16
 40071a4:	ad400204 	addi	r21,r21,8
 40071a8:	00002d06 	br	4007260 <_realloc_r+0x36c>
 40071ac:	adbffe17 	ldw	r22,-8(r21)
 40071b0:	00bfff04 	movi	r2,-4
 40071b4:	9dadc83a 	sub	r22,r19,r22
 40071b8:	b1000117 	ldw	r4,4(r22)
 40071bc:	2084703a 	and	r2,r4,r2
 40071c0:	b03f7726 	beq	r22,zero,4006fa0 <__alt_data_end+0xfc006fa0>
 40071c4:	80af883a 	add	r23,r16,r2
 40071c8:	b8ff7516 	blt	r23,r3,4006fa0 <__alt_data_end+0xfc006fa0>
 40071cc:	b0800317 	ldw	r2,12(r22)
 40071d0:	b0c00217 	ldw	r3,8(r22)
 40071d4:	81bfff04 	addi	r6,r16,-4
 40071d8:	01000904 	movi	r4,36
 40071dc:	18800315 	stw	r2,12(r3)
 40071e0:	10c00215 	stw	r3,8(r2)
 40071e4:	b4800204 	addi	r18,r22,8
 40071e8:	21bfe52e 	bgeu	r4,r6,4007180 <__alt_data_end+0xfc007180>
 40071ec:	a80b883a 	mov	r5,r21
 40071f0:	9009883a 	mov	r4,r18
 40071f4:	4006d380 	call	4006d38 <memmove>
 40071f8:	b821883a 	mov	r16,r23
 40071fc:	b027883a 	mov	r19,r22
 4007200:	003f8a06 	br	400702c <__alt_data_end+0xfc00702c>
 4007204:	300b883a 	mov	r5,r6
 4007208:	dfc00917 	ldw	ra,36(sp)
 400720c:	df000817 	ldw	fp,32(sp)
 4007210:	ddc00717 	ldw	r23,28(sp)
 4007214:	dd800617 	ldw	r22,24(sp)
 4007218:	dd400517 	ldw	r21,20(sp)
 400721c:	dd000417 	ldw	r20,16(sp)
 4007220:	dcc00317 	ldw	r19,12(sp)
 4007224:	dc800217 	ldw	r18,8(sp)
 4007228:	dc400117 	ldw	r17,4(sp)
 400722c:	dc000017 	ldw	r16,0(sp)
 4007230:	dec00a04 	addi	sp,sp,40
 4007234:	40033981 	jmpi	4003398 <_malloc_r>
 4007238:	a8c00017 	ldw	r3,0(r21)
 400723c:	90c00015 	stw	r3,0(r18)
 4007240:	a8c00117 	ldw	r3,4(r21)
 4007244:	90c00115 	stw	r3,4(r18)
 4007248:	00c006c4 	movi	r3,27
 400724c:	19804536 	bltu	r3,r6,4007364 <_realloc_r+0x470>
 4007250:	90800204 	addi	r2,r18,8
 4007254:	a8c00204 	addi	r3,r21,8
 4007258:	003f6306 	br	4006fe8 <__alt_data_end+0xfc006fe8>
 400725c:	9005883a 	mov	r2,r18
 4007260:	a8c00017 	ldw	r3,0(r21)
 4007264:	b821883a 	mov	r16,r23
 4007268:	b027883a 	mov	r19,r22
 400726c:	10c00015 	stw	r3,0(r2)
 4007270:	a8c00117 	ldw	r3,4(r21)
 4007274:	10c00115 	stw	r3,4(r2)
 4007278:	a8c00217 	ldw	r3,8(r21)
 400727c:	10c00215 	stw	r3,8(r2)
 4007280:	003f6a06 	br	400702c <__alt_data_end+0xfc00702c>
 4007284:	9c67883a 	add	r19,r19,r17
 4007288:	4445c83a 	sub	r2,r8,r17
 400728c:	e4c00215 	stw	r19,8(fp)
 4007290:	10800054 	ori	r2,r2,1
 4007294:	98800115 	stw	r2,4(r19)
 4007298:	a8bfff17 	ldw	r2,-4(r21)
 400729c:	a009883a 	mov	r4,r20
 40072a0:	1080004c 	andi	r2,r2,1
 40072a4:	1462b03a 	or	r17,r2,r17
 40072a8:	ac7fff15 	stw	r17,-4(r21)
 40072ac:	40149780 	call	4014978 <__malloc_unlock>
 40072b0:	a805883a 	mov	r2,r21
 40072b4:	003f6b06 	br	4007064 <__alt_data_end+0xfc007064>
 40072b8:	a80b883a 	mov	r5,r21
 40072bc:	9009883a 	mov	r4,r18
 40072c0:	4006d380 	call	4006d38 <memmove>
 40072c4:	003f4e06 	br	4007000 <__alt_data_end+0xfc007000>
 40072c8:	89000404 	addi	r4,r17,16
 40072cc:	b93fbc16 	blt	r23,r4,40071c0 <__alt_data_end+0xfc0071c0>
 40072d0:	b0800317 	ldw	r2,12(r22)
 40072d4:	b0c00217 	ldw	r3,8(r22)
 40072d8:	81bfff04 	addi	r6,r16,-4
 40072dc:	01000904 	movi	r4,36
 40072e0:	18800315 	stw	r2,12(r3)
 40072e4:	10c00215 	stw	r3,8(r2)
 40072e8:	b4800204 	addi	r18,r22,8
 40072ec:	21804336 	bltu	r4,r6,40073fc <_realloc_r+0x508>
 40072f0:	008004c4 	movi	r2,19
 40072f4:	11803f2e 	bgeu	r2,r6,40073f4 <_realloc_r+0x500>
 40072f8:	a8800017 	ldw	r2,0(r21)
 40072fc:	b0800215 	stw	r2,8(r22)
 4007300:	a8800117 	ldw	r2,4(r21)
 4007304:	b0800315 	stw	r2,12(r22)
 4007308:	008006c4 	movi	r2,27
 400730c:	11803f36 	bltu	r2,r6,400740c <_realloc_r+0x518>
 4007310:	b0800404 	addi	r2,r22,16
 4007314:	ad400204 	addi	r21,r21,8
 4007318:	a8c00017 	ldw	r3,0(r21)
 400731c:	10c00015 	stw	r3,0(r2)
 4007320:	a8c00117 	ldw	r3,4(r21)
 4007324:	10c00115 	stw	r3,4(r2)
 4007328:	a8c00217 	ldw	r3,8(r21)
 400732c:	10c00215 	stw	r3,8(r2)
 4007330:	b447883a 	add	r3,r22,r17
 4007334:	bc45c83a 	sub	r2,r23,r17
 4007338:	e0c00215 	stw	r3,8(fp)
 400733c:	10800054 	ori	r2,r2,1
 4007340:	18800115 	stw	r2,4(r3)
 4007344:	b0800117 	ldw	r2,4(r22)
 4007348:	a009883a 	mov	r4,r20
 400734c:	1080004c 	andi	r2,r2,1
 4007350:	1462b03a 	or	r17,r2,r17
 4007354:	b4400115 	stw	r17,4(r22)
 4007358:	40149780 	call	4014978 <__malloc_unlock>
 400735c:	9005883a 	mov	r2,r18
 4007360:	003f4006 	br	4007064 <__alt_data_end+0xfc007064>
 4007364:	a8c00217 	ldw	r3,8(r21)
 4007368:	90c00215 	stw	r3,8(r18)
 400736c:	a8c00317 	ldw	r3,12(r21)
 4007370:	90c00315 	stw	r3,12(r18)
 4007374:	30801126 	beq	r6,r2,40073bc <_realloc_r+0x4c8>
 4007378:	90800404 	addi	r2,r18,16
 400737c:	a8c00404 	addi	r3,r21,16
 4007380:	003f1906 	br	4006fe8 <__alt_data_end+0xfc006fe8>
 4007384:	90ffff17 	ldw	r3,-4(r18)
 4007388:	00bfff04 	movi	r2,-4
 400738c:	a825883a 	mov	r18,r21
 4007390:	1884703a 	and	r2,r3,r2
 4007394:	80a1883a 	add	r16,r16,r2
 4007398:	003f2406 	br	400702c <__alt_data_end+0xfc00702c>
 400739c:	a8800217 	ldw	r2,8(r21)
 40073a0:	b0800415 	stw	r2,16(r22)
 40073a4:	a8800317 	ldw	r2,12(r21)
 40073a8:	b0800515 	stw	r2,20(r22)
 40073ac:	31000a26 	beq	r6,r4,40073d8 <_realloc_r+0x4e4>
 40073b0:	b0800604 	addi	r2,r22,24
 40073b4:	ad400404 	addi	r21,r21,16
 40073b8:	003fa906 	br	4007260 <__alt_data_end+0xfc007260>
 40073bc:	a9000417 	ldw	r4,16(r21)
 40073c0:	90800604 	addi	r2,r18,24
 40073c4:	a8c00604 	addi	r3,r21,24
 40073c8:	91000415 	stw	r4,16(r18)
 40073cc:	a9000517 	ldw	r4,20(r21)
 40073d0:	91000515 	stw	r4,20(r18)
 40073d4:	003f0406 	br	4006fe8 <__alt_data_end+0xfc006fe8>
 40073d8:	a8c00417 	ldw	r3,16(r21)
 40073dc:	ad400604 	addi	r21,r21,24
 40073e0:	b0800804 	addi	r2,r22,32
 40073e4:	b0c00615 	stw	r3,24(r22)
 40073e8:	a8ffff17 	ldw	r3,-4(r21)
 40073ec:	b0c00715 	stw	r3,28(r22)
 40073f0:	003f9b06 	br	4007260 <__alt_data_end+0xfc007260>
 40073f4:	9005883a 	mov	r2,r18
 40073f8:	003fc706 	br	4007318 <__alt_data_end+0xfc007318>
 40073fc:	a80b883a 	mov	r5,r21
 4007400:	9009883a 	mov	r4,r18
 4007404:	4006d380 	call	4006d38 <memmove>
 4007408:	003fc906 	br	4007330 <__alt_data_end+0xfc007330>
 400740c:	a8800217 	ldw	r2,8(r21)
 4007410:	b0800415 	stw	r2,16(r22)
 4007414:	a8800317 	ldw	r2,12(r21)
 4007418:	b0800515 	stw	r2,20(r22)
 400741c:	31000726 	beq	r6,r4,400743c <_realloc_r+0x548>
 4007420:	b0800604 	addi	r2,r22,24
 4007424:	ad400404 	addi	r21,r21,16
 4007428:	003fbb06 	br	4007318 <__alt_data_end+0xfc007318>
 400742c:	a009883a 	mov	r4,r20
 4007430:	40149780 	call	4014978 <__malloc_unlock>
 4007434:	0005883a 	mov	r2,zero
 4007438:	003f0a06 	br	4007064 <__alt_data_end+0xfc007064>
 400743c:	a8c00417 	ldw	r3,16(r21)
 4007440:	ad400604 	addi	r21,r21,24
 4007444:	b0800804 	addi	r2,r22,32
 4007448:	b0c00615 	stw	r3,24(r22)
 400744c:	a8ffff17 	ldw	r3,-4(r21)
 4007450:	b0c00715 	stw	r3,28(r22)
 4007454:	003fb006 	br	4007318 <__alt_data_end+0xfc007318>

04007458 <__fpclassifyd>:
 4007458:	00a00034 	movhi	r2,32768
 400745c:	10bfffc4 	addi	r2,r2,-1
 4007460:	2884703a 	and	r2,r5,r2
 4007464:	10000726 	beq	r2,zero,4007484 <__fpclassifyd+0x2c>
 4007468:	00fffc34 	movhi	r3,65520
 400746c:	019ff834 	movhi	r6,32736
 4007470:	28c7883a 	add	r3,r5,r3
 4007474:	31bfffc4 	addi	r6,r6,-1
 4007478:	30c00536 	bltu	r6,r3,4007490 <__fpclassifyd+0x38>
 400747c:	00800104 	movi	r2,4
 4007480:	f800283a 	ret
 4007484:	2000021e 	bne	r4,zero,4007490 <__fpclassifyd+0x38>
 4007488:	00800084 	movi	r2,2
 400748c:	f800283a 	ret
 4007490:	00dffc34 	movhi	r3,32752
 4007494:	019ff834 	movhi	r6,32736
 4007498:	28cb883a 	add	r5,r5,r3
 400749c:	31bfffc4 	addi	r6,r6,-1
 40074a0:	317ff62e 	bgeu	r6,r5,400747c <__alt_data_end+0xfc00747c>
 40074a4:	01400434 	movhi	r5,16
 40074a8:	297fffc4 	addi	r5,r5,-1
 40074ac:	28800236 	bltu	r5,r2,40074b8 <__fpclassifyd+0x60>
 40074b0:	008000c4 	movi	r2,3
 40074b4:	f800283a 	ret
 40074b8:	10c00226 	beq	r2,r3,40074c4 <__fpclassifyd+0x6c>
 40074bc:	0005883a 	mov	r2,zero
 40074c0:	f800283a 	ret
 40074c4:	2005003a 	cmpeq	r2,r4,zero
 40074c8:	f800283a 	ret

040074cc <__sccl>:
 40074cc:	2a000003 	ldbu	r8,0(r5)
 40074d0:	00801784 	movi	r2,94
 40074d4:	40802a26 	beq	r8,r2,4007580 <__sccl+0xb4>
 40074d8:	29400044 	addi	r5,r5,1
 40074dc:	000f883a 	mov	r7,zero
 40074e0:	0013883a 	mov	r9,zero
 40074e4:	2007883a 	mov	r3,r4
 40074e8:	21804004 	addi	r6,r4,256
 40074ec:	19c00005 	stb	r7,0(r3)
 40074f0:	18c00044 	addi	r3,r3,1
 40074f4:	19bffd1e 	bne	r3,r6,40074ec <__alt_data_end+0xfc0074ec>
 40074f8:	40001126 	beq	r8,zero,4007540 <__sccl+0x74>
 40074fc:	00800044 	movi	r2,1
 4007500:	124fc83a 	sub	r7,r2,r9
 4007504:	02800b44 	movi	r10,45
 4007508:	02c01744 	movi	r11,93
 400750c:	2205883a 	add	r2,r4,r8
 4007510:	11c00005 	stb	r7,0(r2)
 4007514:	28800044 	addi	r2,r5,1
 4007518:	28c00003 	ldbu	r3,0(r5)
 400751c:	1a800a26 	beq	r3,r10,4007548 <__sccl+0x7c>
 4007520:	1ac00426 	beq	r3,r11,4007534 <__sccl+0x68>
 4007524:	18000426 	beq	r3,zero,4007538 <__sccl+0x6c>
 4007528:	1811883a 	mov	r8,r3
 400752c:	100b883a 	mov	r5,r2
 4007530:	003ff606 	br	400750c <__alt_data_end+0xfc00750c>
 4007534:	f800283a 	ret
 4007538:	2805883a 	mov	r2,r5
 400753c:	f800283a 	ret
 4007540:	28bfffc4 	addi	r2,r5,-1
 4007544:	f800283a 	ret
 4007548:	12400003 	ldbu	r9,0(r2)
 400754c:	4ac01126 	beq	r9,r11,4007594 <__sccl+0xc8>
 4007550:	4a001016 	blt	r9,r8,4007594 <__sccl+0xc8>
 4007554:	41800044 	addi	r6,r8,1
 4007558:	29400084 	addi	r5,r5,2
 400755c:	2187883a 	add	r3,r4,r6
 4007560:	00000106 	br	4007568 <__sccl+0x9c>
 4007564:	31800044 	addi	r6,r6,1
 4007568:	19c00005 	stb	r7,0(r3)
 400756c:	3011883a 	mov	r8,r6
 4007570:	18c00044 	addi	r3,r3,1
 4007574:	327ffb16 	blt	r6,r9,4007564 <__alt_data_end+0xfc007564>
 4007578:	10800084 	addi	r2,r2,2
 400757c:	003fe606 	br	4007518 <__alt_data_end+0xfc007518>
 4007580:	2a000043 	ldbu	r8,1(r5)
 4007584:	01c00044 	movi	r7,1
 4007588:	29400084 	addi	r5,r5,2
 400758c:	02400044 	movi	r9,1
 4007590:	003fd406 	br	40074e4 <__alt_data_end+0xfc0074e4>
 4007594:	5011883a 	mov	r8,r10
 4007598:	003fe406 	br	400752c <__alt_data_end+0xfc00752c>

0400759c <nanf>:
 400759c:	009ff034 	movhi	r2,32704
 40075a0:	f800283a 	ret

040075a4 <_sprintf_r>:
 40075a4:	deffe404 	addi	sp,sp,-112
 40075a8:	2807883a 	mov	r3,r5
 40075ac:	dfc01a15 	stw	ra,104(sp)
 40075b0:	d9c01b15 	stw	r7,108(sp)
 40075b4:	00a00034 	movhi	r2,32768
 40075b8:	10bfffc4 	addi	r2,r2,-1
 40075bc:	02008204 	movi	r8,520
 40075c0:	d8800215 	stw	r2,8(sp)
 40075c4:	d8800515 	stw	r2,20(sp)
 40075c8:	d9c01b04 	addi	r7,sp,108
 40075cc:	d80b883a 	mov	r5,sp
 40075d0:	00bfffc4 	movi	r2,-1
 40075d4:	d8c00015 	stw	r3,0(sp)
 40075d8:	d8c00415 	stw	r3,16(sp)
 40075dc:	da00030d 	sth	r8,12(sp)
 40075e0:	d880038d 	sth	r2,14(sp)
 40075e4:	40099d00 	call	40099d0 <___svfprintf_internal_r>
 40075e8:	d8c00017 	ldw	r3,0(sp)
 40075ec:	18000005 	stb	zero,0(r3)
 40075f0:	dfc01a17 	ldw	ra,104(sp)
 40075f4:	dec01c04 	addi	sp,sp,112
 40075f8:	f800283a 	ret

040075fc <sprintf>:
 40075fc:	deffe304 	addi	sp,sp,-116
 4007600:	2007883a 	mov	r3,r4
 4007604:	dfc01a15 	stw	ra,104(sp)
 4007608:	d9801b15 	stw	r6,108(sp)
 400760c:	d9c01c15 	stw	r7,112(sp)
 4007610:	010100b4 	movhi	r4,1026
 4007614:	2128dd04 	addi	r4,r4,-23692
 4007618:	21000017 	ldw	r4,0(r4)
 400761c:	00a00034 	movhi	r2,32768
 4007620:	10bfffc4 	addi	r2,r2,-1
 4007624:	280d883a 	mov	r6,r5
 4007628:	02008204 	movi	r8,520
 400762c:	d8800215 	stw	r2,8(sp)
 4007630:	d8800515 	stw	r2,20(sp)
 4007634:	d9c01b04 	addi	r7,sp,108
 4007638:	d80b883a 	mov	r5,sp
 400763c:	00bfffc4 	movi	r2,-1
 4007640:	d8c00015 	stw	r3,0(sp)
 4007644:	d8c00415 	stw	r3,16(sp)
 4007648:	da00030d 	sth	r8,12(sp)
 400764c:	d880038d 	sth	r2,14(sp)
 4007650:	40099d00 	call	40099d0 <___svfprintf_internal_r>
 4007654:	d8c00017 	ldw	r3,0(sp)
 4007658:	18000005 	stb	zero,0(r3)
 400765c:	dfc01a17 	ldw	ra,104(sp)
 4007660:	dec01d04 	addi	sp,sp,116
 4007664:	f800283a 	ret

04007668 <strcmp>:
 4007668:	2144b03a 	or	r2,r4,r5
 400766c:	108000cc 	andi	r2,r2,3
 4007670:	1000171e 	bne	r2,zero,40076d0 <strcmp+0x68>
 4007674:	20800017 	ldw	r2,0(r4)
 4007678:	28c00017 	ldw	r3,0(r5)
 400767c:	10c0141e 	bne	r2,r3,40076d0 <strcmp+0x68>
 4007680:	027fbff4 	movhi	r9,65279
 4007684:	4a7fbfc4 	addi	r9,r9,-257
 4007688:	0086303a 	nor	r3,zero,r2
 400768c:	02202074 	movhi	r8,32897
 4007690:	1245883a 	add	r2,r2,r9
 4007694:	42202004 	addi	r8,r8,-32640
 4007698:	10c4703a 	and	r2,r2,r3
 400769c:	1204703a 	and	r2,r2,r8
 40076a0:	10000226 	beq	r2,zero,40076ac <strcmp+0x44>
 40076a4:	00002306 	br	4007734 <strcmp+0xcc>
 40076a8:	1000221e 	bne	r2,zero,4007734 <strcmp+0xcc>
 40076ac:	21000104 	addi	r4,r4,4
 40076b0:	20c00017 	ldw	r3,0(r4)
 40076b4:	29400104 	addi	r5,r5,4
 40076b8:	29800017 	ldw	r6,0(r5)
 40076bc:	1a4f883a 	add	r7,r3,r9
 40076c0:	00c4303a 	nor	r2,zero,r3
 40076c4:	3884703a 	and	r2,r7,r2
 40076c8:	1204703a 	and	r2,r2,r8
 40076cc:	19bff626 	beq	r3,r6,40076a8 <__alt_data_end+0xfc0076a8>
 40076d0:	20800003 	ldbu	r2,0(r4)
 40076d4:	10c03fcc 	andi	r3,r2,255
 40076d8:	18c0201c 	xori	r3,r3,128
 40076dc:	18ffe004 	addi	r3,r3,-128
 40076e0:	18000c26 	beq	r3,zero,4007714 <strcmp+0xac>
 40076e4:	29800007 	ldb	r6,0(r5)
 40076e8:	19800326 	beq	r3,r6,40076f8 <strcmp+0x90>
 40076ec:	00001306 	br	400773c <strcmp+0xd4>
 40076f0:	29800007 	ldb	r6,0(r5)
 40076f4:	11800b1e 	bne	r2,r6,4007724 <strcmp+0xbc>
 40076f8:	21000044 	addi	r4,r4,1
 40076fc:	20c00003 	ldbu	r3,0(r4)
 4007700:	29400044 	addi	r5,r5,1
 4007704:	18803fcc 	andi	r2,r3,255
 4007708:	1080201c 	xori	r2,r2,128
 400770c:	10bfe004 	addi	r2,r2,-128
 4007710:	103ff71e 	bne	r2,zero,40076f0 <__alt_data_end+0xfc0076f0>
 4007714:	0007883a 	mov	r3,zero
 4007718:	28800003 	ldbu	r2,0(r5)
 400771c:	1885c83a 	sub	r2,r3,r2
 4007720:	f800283a 	ret
 4007724:	28800003 	ldbu	r2,0(r5)
 4007728:	18c03fcc 	andi	r3,r3,255
 400772c:	1885c83a 	sub	r2,r3,r2
 4007730:	f800283a 	ret
 4007734:	0005883a 	mov	r2,zero
 4007738:	f800283a 	ret
 400773c:	10c03fcc 	andi	r3,r2,255
 4007740:	003ff506 	br	4007718 <__alt_data_end+0xfc007718>

04007744 <sulp>:
 4007744:	defffd04 	addi	sp,sp,-12
 4007748:	dc400115 	stw	r17,4(sp)
 400774c:	3023883a 	mov	r17,r6
 4007750:	dc000015 	stw	r16,0(sp)
 4007754:	dfc00215 	stw	ra,8(sp)
 4007758:	2821883a 	mov	r16,r5
 400775c:	400ee1c0 	call	400ee1c <__ulp>
 4007760:	88000c26 	beq	r17,zero,4007794 <sulp+0x50>
 4007764:	841ffc2c 	andhi	r16,r16,32752
 4007768:	8020d53a 	srli	r16,r16,20
 400776c:	01c01ac4 	movi	r7,107
 4007770:	3c21c83a 	sub	r16,r7,r16
 4007774:	0400070e 	bge	zero,r16,4007794 <sulp+0x50>
 4007778:	8020953a 	slli	r16,r16,20
 400777c:	01cffc34 	movhi	r7,16368
 4007780:	000d883a 	mov	r6,zero
 4007784:	81cf883a 	add	r7,r16,r7
 4007788:	1009883a 	mov	r4,r2
 400778c:	180b883a 	mov	r5,r3
 4007790:	4012e200 	call	4012e20 <__muldf3>
 4007794:	dfc00217 	ldw	ra,8(sp)
 4007798:	dc400117 	ldw	r17,4(sp)
 400779c:	dc000017 	ldw	r16,0(sp)
 40077a0:	dec00304 	addi	sp,sp,12
 40077a4:	f800283a 	ret

040077a8 <_strtod_r>:
 40077a8:	deffe204 	addi	sp,sp,-120
 40077ac:	ddc01b15 	stw	r23,108(sp)
 40077b0:	dd801a15 	stw	r22,104(sp)
 40077b4:	dc401515 	stw	r17,84(sp)
 40077b8:	dfc01d15 	stw	ra,116(sp)
 40077bc:	df001c15 	stw	fp,112(sp)
 40077c0:	dd401915 	stw	r21,100(sp)
 40077c4:	dd001815 	stw	r20,96(sp)
 40077c8:	dcc01715 	stw	r19,92(sp)
 40077cc:	dc801615 	stw	r18,88(sp)
 40077d0:	dc001415 	stw	r16,80(sp)
 40077d4:	d8000515 	stw	zero,20(sp)
 40077d8:	d9400615 	stw	r5,24(sp)
 40077dc:	2807883a 	mov	r3,r5
 40077e0:	1f000003 	ldbu	fp,0(r3)
 40077e4:	01c10034 	movhi	r7,1024
 40077e8:	2023883a 	mov	r17,r4
 40077ec:	d9400715 	stw	r5,28(sp)
 40077f0:	d9800915 	stw	r6,36(sp)
 40077f4:	01000b44 	movi	r4,45
 40077f8:	e0803fcc 	andi	r2,fp,255
 40077fc:	39de0704 	addi	r7,r7,30748
 4007800:	002f883a 	mov	r23,zero
 4007804:	002d883a 	mov	r22,zero
 4007808:	20809c36 	bltu	r4,r2,4007a7c <_strtod_r+0x2d4>
 400780c:	100490ba 	slli	r2,r2,2
 4007810:	11c5883a 	add	r2,r2,r7
 4007814:	10800017 	ldw	r2,0(r2)
 4007818:	1000683a 	jmp	r2
 400781c:	040078dc 	xori	r16,zero,483
 4007820:	04007a7c 	xorhi	r16,zero,489
 4007824:	04007a7c 	xorhi	r16,zero,489
 4007828:	04007a7c 	xorhi	r16,zero,489
 400782c:	04007a7c 	xorhi	r16,zero,489
 4007830:	04007a7c 	xorhi	r16,zero,489
 4007834:	04007a7c 	xorhi	r16,zero,489
 4007838:	04007a7c 	xorhi	r16,zero,489
 400783c:	04007a7c 	xorhi	r16,zero,489
 4007840:	04007a68 	cmpgeui	r16,zero,489
 4007844:	04007a68 	cmpgeui	r16,zero,489
 4007848:	04007a68 	cmpgeui	r16,zero,489
 400784c:	04007a68 	cmpgeui	r16,zero,489
 4007850:	04007a68 	cmpgeui	r16,zero,489
 4007854:	04007a7c 	xorhi	r16,zero,489
 4007858:	04007a7c 	xorhi	r16,zero,489
 400785c:	04007a7c 	xorhi	r16,zero,489
 4007860:	04007a7c 	xorhi	r16,zero,489
 4007864:	04007a7c 	xorhi	r16,zero,489
 4007868:	04007a7c 	xorhi	r16,zero,489
 400786c:	04007a7c 	xorhi	r16,zero,489
 4007870:	04007a7c 	xorhi	r16,zero,489
 4007874:	04007a7c 	xorhi	r16,zero,489
 4007878:	04007a7c 	xorhi	r16,zero,489
 400787c:	04007a7c 	xorhi	r16,zero,489
 4007880:	04007a7c 	xorhi	r16,zero,489
 4007884:	04007a7c 	xorhi	r16,zero,489
 4007888:	04007a7c 	xorhi	r16,zero,489
 400788c:	04007a7c 	xorhi	r16,zero,489
 4007890:	04007a7c 	xorhi	r16,zero,489
 4007894:	04007a7c 	xorhi	r16,zero,489
 4007898:	04007a7c 	xorhi	r16,zero,489
 400789c:	04007a68 	cmpgeui	r16,zero,489
 40078a0:	04007a7c 	xorhi	r16,zero,489
 40078a4:	04007a7c 	xorhi	r16,zero,489
 40078a8:	04007a7c 	xorhi	r16,zero,489
 40078ac:	04007a7c 	xorhi	r16,zero,489
 40078b0:	04007a7c 	xorhi	r16,zero,489
 40078b4:	04007a7c 	xorhi	r16,zero,489
 40078b8:	04007a7c 	xorhi	r16,zero,489
 40078bc:	04007a7c 	xorhi	r16,zero,489
 40078c0:	04007a7c 	xorhi	r16,zero,489
 40078c4:	04007a7c 	xorhi	r16,zero,489
 40078c8:	04007940 	call	400794 <__alt_mem_sdram-0x3bff86c>
 40078cc:	04007a7c 	xorhi	r16,zero,489
 40078d0:	04007a5c 	xori	r16,zero,489
 40078d4:	00801244 	movi	r2,73
 40078d8:	b8844726 	beq	r23,r2,40089f8 <_strtod_r+0x1250>
 40078dc:	d9000917 	ldw	r4,36(sp)
 40078e0:	d8000815 	stw	zero,32(sp)
 40078e4:	0039883a 	mov	fp,zero
 40078e8:	20000726 	beq	r4,zero,4007908 <_strtod_r+0x160>
 40078ec:	dc800717 	ldw	r18,28(sp)
 40078f0:	d8000a15 	stw	zero,40(sp)
 40078f4:	d9400917 	ldw	r5,36(sp)
 40078f8:	2c800015 	stw	r18,0(r5)
 40078fc:	d8800a17 	ldw	r2,40(sp)
 4007900:	10000126 	beq	r2,zero,4007908 <_strtod_r+0x160>
 4007904:	e720003c 	xorhi	fp,fp,32768
 4007908:	d8800817 	ldw	r2,32(sp)
 400790c:	e007883a 	mov	r3,fp
 4007910:	dfc01d17 	ldw	ra,116(sp)
 4007914:	df001c17 	ldw	fp,112(sp)
 4007918:	ddc01b17 	ldw	r23,108(sp)
 400791c:	dd801a17 	ldw	r22,104(sp)
 4007920:	dd401917 	ldw	r21,100(sp)
 4007924:	dd001817 	ldw	r20,96(sp)
 4007928:	dcc01717 	ldw	r19,92(sp)
 400792c:	dc801617 	ldw	r18,88(sp)
 4007930:	dc401517 	ldw	r17,84(sp)
 4007934:	dc001417 	ldw	r16,80(sp)
 4007938:	dec01e04 	addi	sp,sp,120
 400793c:	f800283a 	ret
 4007940:	d8000a15 	stw	zero,40(sp)
 4007944:	1c000044 	addi	r16,r3,1
 4007948:	dc000615 	stw	r16,24(sp)
 400794c:	1f000043 	ldbu	fp,1(r3)
 4007950:	e0803fcc 	andi	r2,fp,255
 4007954:	1080201c 	xori	r2,r2,128
 4007958:	10bfe004 	addi	r2,r2,-128
 400795c:	103fdf26 	beq	r2,zero,40078dc <__alt_data_end+0xfc0078dc>
 4007960:	e1003fcc 	andi	r4,fp,255
 4007964:	2100201c 	xori	r4,r4,128
 4007968:	213fe004 	addi	r4,r4,-128
 400796c:	00800c04 	movi	r2,48
 4007970:	2080d426 	beq	r4,r2,4007cc4 <_strtod_r+0x51c>
 4007974:	dc000815 	stw	r16,32(sp)
 4007978:	d8000c15 	stw	zero,48(sp)
 400797c:	e0bff404 	addi	r2,fp,-48
 4007980:	10803fcc 	andi	r2,r2,255
 4007984:	05400244 	movi	r21,9
 4007988:	a8837836 	bltu	r21,r2,400876c <_strtod_r+0xfc4>
 400798c:	dc800817 	ldw	r18,32(sp)
 4007990:	0029883a 	mov	r20,zero
 4007994:	0027883a 	mov	r19,zero
 4007998:	0021883a 	mov	r16,zero
 400799c:	05800204 	movi	r22,8
 40079a0:	b4003916 	blt	r22,r16,4007a88 <_strtod_r+0x2e0>
 40079a4:	e7003fcc 	andi	fp,fp,255
 40079a8:	9809883a 	mov	r4,r19
 40079ac:	01400284 	movi	r5,10
 40079b0:	e700201c 	xori	fp,fp,128
 40079b4:	4001a140 	call	4001a14 <__mulsi3>
 40079b8:	e73fe004 	addi	fp,fp,-128
 40079bc:	1705883a 	add	r2,r2,fp
 40079c0:	14fff404 	addi	r19,r2,-48
 40079c4:	94800044 	addi	r18,r18,1
 40079c8:	dc800615 	stw	r18,24(sp)
 40079cc:	97000003 	ldbu	fp,0(r18)
 40079d0:	84000044 	addi	r16,r16,1
 40079d4:	e0bff404 	addi	r2,fp,-48
 40079d8:	10803fcc 	andi	r2,r2,255
 40079dc:	a8bff02e 	bgeu	r21,r2,40079a0 <__alt_data_end+0xfc0079a0>
 40079e0:	e5c03fcc 	andi	r23,fp,255
 40079e4:	bdc0201c 	xori	r23,r23,128
 40079e8:	bdffe004 	addi	r23,r23,-128
 40079ec:	8809883a 	mov	r4,r17
 40079f0:	40069a00 	call	40069a0 <_localeconv_r>
 40079f4:	8809883a 	mov	r4,r17
 40079f8:	15400017 	ldw	r21,0(r2)
 40079fc:	40069a00 	call	40069a0 <_localeconv_r>
 4007a00:	11000017 	ldw	r4,0(r2)
 4007a04:	40044d40 	call	40044d4 <strlen>
 4007a08:	100d883a 	mov	r6,r2
 4007a0c:	a80b883a 	mov	r5,r21
 4007a10:	9009883a 	mov	r4,r18
 4007a14:	400f2f40 	call	400f2f4 <strncmp>
 4007a18:	1000bd26 	beq	r2,zero,4007d10 <_strtod_r+0x568>
 4007a1c:	8039883a 	mov	fp,r16
 4007a20:	002d883a 	mov	r22,zero
 4007a24:	d8000b15 	stw	zero,44(sp)
 4007a28:	0025883a 	mov	r18,zero
 4007a2c:	00801944 	movi	r2,101
 4007a30:	b8806026 	beq	r23,r2,4007bb4 <_strtod_r+0x40c>
 4007a34:	00801144 	movi	r2,69
 4007a38:	b8805e26 	beq	r23,r2,4007bb4 <_strtod_r+0x40c>
 4007a3c:	0009883a 	mov	r4,zero
 4007a40:	e0001a1e 	bne	fp,zero,4007aac <_strtod_r+0x304>
 4007a44:	b000cd26 	beq	r22,zero,4007d7c <_strtod_r+0x5d4>
 4007a48:	d8000815 	stw	zero,32(sp)
 4007a4c:	d9000917 	ldw	r4,36(sp)
 4007a50:	203faa26 	beq	r4,zero,40078fc <__alt_data_end+0xfc0078fc>
 4007a54:	dc800617 	ldw	r18,24(sp)
 4007a58:	003fa606 	br	40078f4 <__alt_data_end+0xfc0078f4>
 4007a5c:	00800044 	movi	r2,1
 4007a60:	d8800a15 	stw	r2,40(sp)
 4007a64:	003fb706 	br	4007944 <__alt_data_end+0xfc007944>
 4007a68:	18c00044 	addi	r3,r3,1
 4007a6c:	d8c00615 	stw	r3,24(sp)
 4007a70:	1f000003 	ldbu	fp,0(r3)
 4007a74:	e0803fcc 	andi	r2,fp,255
 4007a78:	20bf642e 	bgeu	r4,r2,400780c <__alt_data_end+0xfc00780c>
 4007a7c:	1821883a 	mov	r16,r3
 4007a80:	d8000a15 	stw	zero,40(sp)
 4007a84:	003fb606 	br	4007960 <__alt_data_end+0xfc007960>
 4007a88:	e7003fcc 	andi	fp,fp,255
 4007a8c:	a009883a 	mov	r4,r20
 4007a90:	01400284 	movi	r5,10
 4007a94:	e700201c 	xori	fp,fp,128
 4007a98:	4001a140 	call	4001a14 <__mulsi3>
 4007a9c:	e73fe004 	addi	fp,fp,-128
 4007aa0:	1705883a 	add	r2,r2,fp
 4007aa4:	153ff404 	addi	r20,r2,-48
 4007aa8:	003fc606 	br	40079c4 <__alt_data_end+0xfc0079c4>
 4007aac:	d8c00b17 	ldw	r3,44(sp)
 4007ab0:	20ebc83a 	sub	r21,r4,r3
 4007ab4:	8000011e 	bne	r16,zero,4007abc <_strtod_r+0x314>
 4007ab8:	e021883a 	mov	r16,fp
 4007abc:	00800404 	movi	r2,16
 4007ac0:	e025883a 	mov	r18,fp
 4007ac4:	1700010e 	bge	r2,fp,4007acc <_strtod_r+0x324>
 4007ac8:	1025883a 	mov	r18,r2
 4007acc:	9809883a 	mov	r4,r19
 4007ad0:	40140e40 	call	40140e4 <__floatunsidf>
 4007ad4:	102f883a 	mov	r23,r2
 4007ad8:	00800244 	movi	r2,9
 4007adc:	182d883a 	mov	r22,r3
 4007ae0:	1480150e 	bge	r2,r18,4007b38 <_strtod_r+0x390>
 4007ae4:	90bffdc4 	addi	r2,r18,-9
 4007ae8:	100490fa 	slli	r2,r2,3
 4007aec:	180b883a 	mov	r5,r3
 4007af0:	00c100b4 	movhi	r3,1026
 4007af4:	18e13f04 	addi	r3,r3,-31492
 4007af8:	1885883a 	add	r2,r3,r2
 4007afc:	11800017 	ldw	r6,0(r2)
 4007b00:	11c00117 	ldw	r7,4(r2)
 4007b04:	b809883a 	mov	r4,r23
 4007b08:	4012e200 	call	4012e20 <__muldf3>
 4007b0c:	a009883a 	mov	r4,r20
 4007b10:	102f883a 	mov	r23,r2
 4007b14:	182d883a 	mov	r22,r3
 4007b18:	40140e40 	call	40140e4 <__floatunsidf>
 4007b1c:	b809883a 	mov	r4,r23
 4007b20:	b00b883a 	mov	r5,r22
 4007b24:	100d883a 	mov	r6,r2
 4007b28:	180f883a 	mov	r7,r3
 4007b2c:	401194c0 	call	401194c <__adddf3>
 4007b30:	102f883a 	mov	r23,r2
 4007b34:	182d883a 	mov	r22,r3
 4007b38:	008003c4 	movi	r2,15
 4007b3c:	17009416 	blt	r2,fp,4007d90 <_strtod_r+0x5e8>
 4007b40:	a8001926 	beq	r21,zero,4007ba8 <_strtod_r+0x400>
 4007b44:	05439c0e 	bge	zero,r21,40089b8 <_strtod_r+0x1210>
 4007b48:	00c00584 	movi	r3,22
 4007b4c:	1d430f16 	blt	r3,r21,400878c <_strtod_r+0xfe4>
 4007b50:	a82a90fa 	slli	r21,r21,3
 4007b54:	008100b4 	movhi	r2,1026
 4007b58:	10a13f04 	addi	r2,r2,-31492
 4007b5c:	1545883a 	add	r2,r2,r21
 4007b60:	11000017 	ldw	r4,0(r2)
 4007b64:	11400117 	ldw	r5,4(r2)
 4007b68:	b80d883a 	mov	r6,r23
 4007b6c:	b00f883a 	mov	r7,r22
 4007b70:	4012e200 	call	4012e20 <__muldf3>
 4007b74:	d8800815 	stw	r2,32(sp)
 4007b78:	1839883a 	mov	fp,r3
 4007b7c:	003fb306 	br	4007a4c <__alt_data_end+0xfc007a4c>
 4007b80:	014100b4 	movhi	r5,1026
 4007b84:	2960b704 	addi	r5,r5,-32036
 4007b88:	d9800204 	addi	r6,sp,8
 4007b8c:	d9000604 	addi	r4,sp,24
 4007b90:	400dfe00 	call	400dfe0 <__hexnan>
 4007b94:	00c00144 	movi	r3,5
 4007b98:	10c2161e 	bne	r2,r3,40083f4 <_strtod_r+0xc4c>
 4007b9c:	dd800317 	ldw	r22,12(sp)
 4007ba0:	ddc00217 	ldw	r23,8(sp)
 4007ba4:	b59ffc34 	orhi	r22,r22,32752
 4007ba8:	ddc00815 	stw	r23,32(sp)
 4007bac:	b039883a 	mov	fp,r22
 4007bb0:	003fa606 	br	4007a4c <__alt_data_end+0xfc007a4c>
 4007bb4:	e001a926 	beq	fp,zero,400825c <_strtod_r+0xab4>
 4007bb8:	d8c00617 	ldw	r3,24(sp)
 4007bbc:	18800044 	addi	r2,r3,1
 4007bc0:	d8800615 	stw	r2,24(sp)
 4007bc4:	d8c00715 	stw	r3,28(sp)
 4007bc8:	18c00047 	ldb	r3,1(r3)
 4007bcc:	00800ac4 	movi	r2,43
 4007bd0:	1881e526 	beq	r3,r2,4008368 <_strtod_r+0xbc0>
 4007bd4:	00800b44 	movi	r2,45
 4007bd8:	1881dc26 	beq	r3,r2,400834c <_strtod_r+0xba4>
 4007bdc:	182f883a 	mov	r23,r3
 4007be0:	d8000e15 	stw	zero,56(sp)
 4007be4:	b8bff404 	addi	r2,r23,-48
 4007be8:	01000244 	movi	r4,9
 4007bec:	2081ab36 	bltu	r4,r2,400829c <_strtod_r+0xaf4>
 4007bf0:	00800c04 	movi	r2,48
 4007bf4:	b880071e 	bne	r23,r2,4007c14 <_strtod_r+0x46c>
 4007bf8:	d8800617 	ldw	r2,24(sp)
 4007bfc:	b809883a 	mov	r4,r23
 4007c00:	10800044 	addi	r2,r2,1
 4007c04:	d8800615 	stw	r2,24(sp)
 4007c08:	15c00007 	ldb	r23,0(r2)
 4007c0c:	10800044 	addi	r2,r2,1
 4007c10:	b93ffc26 	beq	r23,r4,4007c04 <__alt_data_end+0xfc007c04>
 4007c14:	b8bff3c4 	addi	r2,r23,-49
 4007c18:	01000204 	movi	r4,8
 4007c1c:	20bf8736 	bltu	r4,r2,4007a3c <__alt_data_end+0xfc007a3c>
 4007c20:	d8c00617 	ldw	r3,24(sp)
 4007c24:	b93ff404 	addi	r4,r23,-48
 4007c28:	01400244 	movi	r5,9
 4007c2c:	1ac00044 	addi	r11,r3,1
 4007c30:	dac00615 	stw	r11,24(sp)
 4007c34:	d8c00d15 	stw	r3,52(sp)
 4007c38:	18c00043 	ldbu	r3,1(r3)
 4007c3c:	18bff404 	addi	r2,r3,-48
 4007c40:	1dc03fcc 	andi	r23,r3,255
 4007c44:	bdc0201c 	xori	r23,r23,128
 4007c48:	10803fcc 	andi	r2,r2,255
 4007c4c:	bdffe004 	addi	r23,r23,-128
 4007c50:	28801136 	bltu	r5,r2,4007c98 <_strtod_r+0x4f0>
 4007c54:	d8c00d17 	ldw	r3,52(sp)
 4007c58:	1d400084 	addi	r21,r3,2
 4007c5c:	01400284 	movi	r5,10
 4007c60:	4001a140 	call	4001a14 <__mulsi3>
 4007c64:	dd400615 	stw	r21,24(sp)
 4007c68:	a9400003 	ldbu	r5,0(r21)
 4007c6c:	15c5883a 	add	r2,r2,r23
 4007c70:	a817883a 	mov	r11,r21
 4007c74:	28fff404 	addi	r3,r5,-48
 4007c78:	2dc03fcc 	andi	r23,r5,255
 4007c7c:	bdc0201c 	xori	r23,r23,128
 4007c80:	18c03fcc 	andi	r3,r3,255
 4007c84:	01400244 	movi	r5,9
 4007c88:	113ff404 	addi	r4,r2,-48
 4007c8c:	bdffe004 	addi	r23,r23,-128
 4007c90:	ad400044 	addi	r21,r21,1
 4007c94:	28fff12e 	bgeu	r5,r3,4007c5c <__alt_data_end+0xfc007c5c>
 4007c98:	d8c00d17 	ldw	r3,52(sp)
 4007c9c:	00800204 	movi	r2,8
 4007ca0:	58d7c83a 	sub	r11,r11,r3
 4007ca4:	12c2ab16 	blt	r2,r11,4008754 <_strtod_r+0xfac>
 4007ca8:	009387c4 	movi	r2,19999
 4007cac:	1100010e 	bge	r2,r4,4007cb4 <_strtod_r+0x50c>
 4007cb0:	1009883a 	mov	r4,r2
 4007cb4:	d8c00e17 	ldw	r3,56(sp)
 4007cb8:	183f6126 	beq	r3,zero,4007a40 <__alt_data_end+0xfc007a40>
 4007cbc:	0109c83a 	sub	r4,zero,r4
 4007cc0:	003f5f06 	br	4007a40 <__alt_data_end+0xfc007a40>
 4007cc4:	80800047 	ldb	r2,1(r16)
 4007cc8:	00c01604 	movi	r3,88
 4007ccc:	10c20026 	beq	r2,r3,40084d0 <_strtod_r+0xd28>
 4007cd0:	00c01e04 	movi	r3,120
 4007cd4:	10c1fe26 	beq	r2,r3,40084d0 <_strtod_r+0xd28>
 4007cd8:	80800044 	addi	r2,r16,1
 4007cdc:	1021883a 	mov	r16,r2
 4007ce0:	d8800615 	stw	r2,24(sp)
 4007ce4:	10800044 	addi	r2,r2,1
 4007ce8:	173fffc3 	ldbu	fp,-1(r2)
 4007cec:	e0c03fcc 	andi	r3,fp,255
 4007cf0:	18c0201c 	xori	r3,r3,128
 4007cf4:	18ffe004 	addi	r3,r3,-128
 4007cf8:	193ff826 	beq	r3,r4,4007cdc <__alt_data_end+0xfc007cdc>
 4007cfc:	18002126 	beq	r3,zero,4007d84 <_strtod_r+0x5dc>
 4007d00:	00c00044 	movi	r3,1
 4007d04:	dc000815 	stw	r16,32(sp)
 4007d08:	d8c00c15 	stw	r3,48(sp)
 4007d0c:	003f1b06 	br	400797c <__alt_data_end+0xfc00797c>
 4007d10:	8809883a 	mov	r4,r17
 4007d14:	40069a00 	call	40069a0 <_localeconv_r>
 4007d18:	11000017 	ldw	r4,0(r2)
 4007d1c:	40044d40 	call	40044d4 <strlen>
 4007d20:	d8c00617 	ldw	r3,24(sp)
 4007d24:	1885883a 	add	r2,r3,r2
 4007d28:	d8800615 	stw	r2,24(sp)
 4007d2c:	15c00007 	ldb	r23,0(r2)
 4007d30:	8001771e 	bne	r16,zero,4008310 <_strtod_r+0xb68>
 4007d34:	01000c04 	movi	r4,48
 4007d38:	b903581e 	bne	r23,r4,4008a9c <_strtod_r+0x12f4>
 4007d3c:	11000044 	addi	r4,r2,1
 4007d40:	b80b883a 	mov	r5,r23
 4007d44:	d9000615 	stw	r4,24(sp)
 4007d48:	25c00007 	ldb	r23,0(r4)
 4007d4c:	20adc83a 	sub	r22,r4,r2
 4007d50:	21000044 	addi	r4,r4,1
 4007d54:	b97ffb26 	beq	r23,r5,4007d44 <__alt_data_end+0xfc007d44>
 4007d58:	b8bff3c4 	addi	r2,r23,-49
 4007d5c:	01000204 	movi	r4,8
 4007d60:	2083002e 	bgeu	r4,r2,4008964 <_strtod_r+0x11bc>
 4007d64:	00801944 	movi	r2,101
 4007d68:	b8813a26 	beq	r23,r2,4008254 <_strtod_r+0xaac>
 4007d6c:	0039883a 	mov	fp,zero
 4007d70:	d8000b15 	stw	zero,44(sp)
 4007d74:	04800044 	movi	r18,1
 4007d78:	003f2e06 	br	4007a34 <__alt_data_end+0xfc007a34>
 4007d7c:	d8c00c17 	ldw	r3,48(sp)
 4007d80:	18017d26 	beq	r3,zero,4008378 <_strtod_r+0xbd0>
 4007d84:	d8000815 	stw	zero,32(sp)
 4007d88:	0039883a 	mov	fp,zero
 4007d8c:	003f2f06 	br	4007a4c <__alt_data_end+0xfc007a4c>
 4007d90:	e4a5c83a 	sub	r18,fp,r18
 4007d94:	9565883a 	add	r18,r18,r21
 4007d98:	0482370e 	bge	zero,r18,4008678 <_strtod_r+0xed0>
 4007d9c:	908003cc 	andi	r2,r18,15
 4007da0:	10000b26 	beq	r2,zero,4007dd0 <_strtod_r+0x628>
 4007da4:	100490fa 	slli	r2,r2,3
 4007da8:	00c100b4 	movhi	r3,1026
 4007dac:	18e13f04 	addi	r3,r3,-31492
 4007db0:	1885883a 	add	r2,r3,r2
 4007db4:	11000017 	ldw	r4,0(r2)
 4007db8:	11400117 	ldw	r5,4(r2)
 4007dbc:	b80d883a 	mov	r6,r23
 4007dc0:	b00f883a 	mov	r7,r22
 4007dc4:	4012e200 	call	4012e20 <__muldf3>
 4007dc8:	102f883a 	mov	r23,r2
 4007dcc:	182d883a 	mov	r22,r3
 4007dd0:	053ffc04 	movi	r20,-16
 4007dd4:	9524703a 	and	r18,r18,r20
 4007dd8:	90003826 	beq	r18,zero,4007ebc <_strtod_r+0x714>
 4007ddc:	00804d04 	movi	r2,308
 4007de0:	1481eb16 	blt	r2,r18,4008590 <_strtod_r+0xde8>
 4007de4:	9029d13a 	srai	r20,r18,4
 4007de8:	02c00044 	movi	r11,1
 4007dec:	5d03900e 	bge	r11,r20,4008c30 <_strtod_r+0x1488>
 4007df0:	010100b4 	movhi	r4,1026
 4007df4:	21213504 	addi	r4,r4,-31532
 4007df8:	2011883a 	mov	r8,r4
 4007dfc:	0025883a 	mov	r18,zero
 4007e00:	880b883a 	mov	r5,r17
 4007e04:	d9000715 	stw	r4,28(sp)
 4007e08:	dc000b15 	stw	r16,44(sp)
 4007e0c:	9023883a 	mov	r17,r18
 4007e10:	b805883a 	mov	r2,r23
 4007e14:	b007883a 	mov	r3,r22
 4007e18:	0009883a 	mov	r4,zero
 4007e1c:	4021883a 	mov	r16,r8
 4007e20:	2825883a 	mov	r18,r5
 4007e24:	a180004c 	andi	r6,r20,1
 4007e28:	30000826 	beq	r6,zero,4007e4c <_strtod_r+0x6a4>
 4007e2c:	81800017 	ldw	r6,0(r16)
 4007e30:	81c00117 	ldw	r7,4(r16)
 4007e34:	1009883a 	mov	r4,r2
 4007e38:	180b883a 	mov	r5,r3
 4007e3c:	dac01315 	stw	r11,76(sp)
 4007e40:	4012e200 	call	4012e20 <__muldf3>
 4007e44:	dac01317 	ldw	r11,76(sp)
 4007e48:	01000044 	movi	r4,1
 4007e4c:	a029d07a 	srai	r20,r20,1
 4007e50:	8c400044 	addi	r17,r17,1
 4007e54:	84000204 	addi	r16,r16,8
 4007e58:	a2fff21e 	bne	r20,r11,4007e24 <__alt_data_end+0xfc007e24>
 4007e5c:	900b883a 	mov	r5,r18
 4007e60:	21003fcc 	andi	r4,r4,255
 4007e64:	8825883a 	mov	r18,r17
 4007e68:	dc000b17 	ldw	r16,44(sp)
 4007e6c:	2823883a 	mov	r17,r5
 4007e70:	2003c01e 	bne	r4,zero,4008d74 <_strtod_r+0x15cc>
 4007e74:	901490fa 	slli	r10,r18,3
 4007e78:	d8800717 	ldw	r2,28(sp)
 4007e7c:	01ff2c34 	movhi	r7,64688
 4007e80:	b80d883a 	mov	r6,r23
 4007e84:	12a5883a 	add	r18,r2,r10
 4007e88:	91000017 	ldw	r4,0(r18)
 4007e8c:	91400117 	ldw	r5,4(r18)
 4007e90:	b1cf883a 	add	r7,r22,r7
 4007e94:	4012e200 	call	4012e20 <__muldf3>
 4007e98:	102f883a 	mov	r23,r2
 4007e9c:	011f2834 	movhi	r4,31904
 4007ea0:	189ffc2c 	andhi	r2,r3,32752
 4007ea4:	2081ba36 	bltu	r4,r2,4008590 <_strtod_r+0xde8>
 4007ea8:	011f2434 	movhi	r4,31888
 4007eac:	20834a2e 	bgeu	r4,r2,4008bd8 <_strtod_r+0x1430>
 4007eb0:	059ffc34 	movhi	r22,32752
 4007eb4:	b5bfffc4 	addi	r22,r22,-1
 4007eb8:	05ffffc4 	movi	r23,-1
 4007ebc:	d8000715 	stw	zero,28(sp)
 4007ec0:	d9400817 	ldw	r5,32(sp)
 4007ec4:	dcc00015 	stw	r19,0(sp)
 4007ec8:	e00f883a 	mov	r7,fp
 4007ecc:	800d883a 	mov	r6,r16
 4007ed0:	8809883a 	mov	r4,r17
 4007ed4:	400e4540 	call	400e454 <__s2b>
 4007ed8:	d8800b15 	stw	r2,44(sp)
 4007edc:	1001ac26 	beq	r2,zero,4008590 <_strtod_r+0xde8>
 4007ee0:	a807d7fa 	srai	r3,r21,31
 4007ee4:	0545c83a 	sub	r2,zero,r21
 4007ee8:	dd400c15 	stw	r21,48(sp)
 4007eec:	1886703a 	and	r3,r3,r2
 4007ef0:	d8c00e15 	stw	r3,56(sp)
 4007ef4:	a8015916 	blt	r21,zero,400845c <_strtod_r+0xcb4>
 4007ef8:	d9400b17 	ldw	r5,44(sp)
 4007efc:	0011883a 	mov	r8,zero
 4007f00:	0021883a 	mov	r16,zero
 4007f04:	29400304 	addi	r5,r5,12
 4007f08:	d9401115 	stw	r5,68(sp)
 4007f0c:	4025883a 	mov	r18,r8
 4007f10:	d8800b17 	ldw	r2,44(sp)
 4007f14:	8809883a 	mov	r4,r17
 4007f18:	11400117 	ldw	r5,4(r2)
 4007f1c:	400e23c0 	call	400e23c <_Balloc>
 4007f20:	1027883a 	mov	r19,r2
 4007f24:	10015226 	beq	r2,zero,4008470 <_strtod_r+0xcc8>
 4007f28:	d8c00b17 	ldw	r3,44(sp)
 4007f2c:	d9401117 	ldw	r5,68(sp)
 4007f30:	11000304 	addi	r4,r2,12
 4007f34:	19800417 	ldw	r6,16(r3)
 4007f38:	31800084 	addi	r6,r6,2
 4007f3c:	318d883a 	add	r6,r6,r6
 4007f40:	318d883a 	add	r6,r6,r6
 4007f44:	4003ba40 	call	4003ba4 <memcpy>
 4007f48:	d9000204 	addi	r4,sp,8
 4007f4c:	d9000015 	stw	r4,0(sp)
 4007f50:	d9c00404 	addi	r7,sp,16
 4007f54:	b80b883a 	mov	r5,r23
 4007f58:	b00d883a 	mov	r6,r22
 4007f5c:	8809883a 	mov	r4,r17
 4007f60:	400ef8c0 	call	400ef8c <__d2b>
 4007f64:	d8800515 	stw	r2,20(sp)
 4007f68:	ddc00815 	stw	r23,32(sp)
 4007f6c:	dd801215 	stw	r22,72(sp)
 4007f70:	10029f26 	beq	r2,zero,40089f0 <_strtod_r+0x1248>
 4007f74:	01400044 	movi	r5,1
 4007f78:	8809883a 	mov	r4,r17
 4007f7c:	400e6700 	call	400e670 <__i2b>
 4007f80:	1021883a 	mov	r16,r2
 4007f84:	10013a26 	beq	r2,zero,4008470 <_strtod_r+0xcc8>
 4007f88:	d8800417 	ldw	r2,16(sp)
 4007f8c:	1000b816 	blt	r2,zero,4008270 <_strtod_r+0xac8>
 4007f90:	d9400e17 	ldw	r5,56(sp)
 4007f94:	d9000c17 	ldw	r4,48(sp)
 4007f98:	28a9883a 	add	r20,r5,r2
 4007f9c:	d9400717 	ldw	r5,28(sp)
 4007fa0:	dd400217 	ldw	r21,8(sp)
 4007fa4:	073f0084 	movi	fp,-1022
 4007fa8:	1147c83a 	sub	r3,r2,r5
 4007fac:	1d47883a 	add	r3,r3,r21
 4007fb0:	00800d84 	movi	r2,54
 4007fb4:	18ffffc4 	addi	r3,r3,-1
 4007fb8:	156bc83a 	sub	r21,r2,r21
 4007fbc:	1f00950e 	bge	r3,fp,4008214 <_strtod_r+0xa6c>
 4007fc0:	e0f9c83a 	sub	fp,fp,r3
 4007fc4:	008007c4 	movi	r2,31
 4007fc8:	af2bc83a 	sub	r21,r21,fp
 4007fcc:	1700ac16 	blt	r2,fp,4008280 <_strtod_r+0xad8>
 4007fd0:	00800044 	movi	r2,1
 4007fd4:	1704983a 	sll	r2,r2,fp
 4007fd8:	d8000d15 	stw	zero,52(sp)
 4007fdc:	d8800f15 	stw	r2,60(sp)
 4007fe0:	2547883a 	add	r3,r4,r21
 4007fe4:	d9000717 	ldw	r4,28(sp)
 4007fe8:	a56b883a 	add	r21,r20,r21
 4007fec:	20f9883a 	add	fp,r4,r3
 4007ff0:	a009883a 	mov	r4,r20
 4007ff4:	ad00010e 	bge	r21,r20,4007ffc <_strtod_r+0x854>
 4007ff8:	a809883a 	mov	r4,r21
 4007ffc:	e005883a 	mov	r2,fp
 4008000:	2700010e 	bge	r4,fp,4008008 <_strtod_r+0x860>
 4008004:	2005883a 	mov	r2,r4
 4008008:	0080030e 	bge	zero,r2,4008018 <_strtod_r+0x870>
 400800c:	a8abc83a 	sub	r21,r21,r2
 4008010:	e0b9c83a 	sub	fp,fp,r2
 4008014:	a0a9c83a 	sub	r20,r20,r2
 4008018:	d9400e17 	ldw	r5,56(sp)
 400801c:	28001126 	beq	r5,zero,4008064 <_strtod_r+0x8bc>
 4008020:	280d883a 	mov	r6,r5
 4008024:	8809883a 	mov	r4,r17
 4008028:	800b883a 	mov	r5,r16
 400802c:	400e9380 	call	400e938 <__pow5mult>
 4008030:	1021883a 	mov	r16,r2
 4008034:	10010e26 	beq	r2,zero,4008470 <_strtod_r+0xcc8>
 4008038:	d9800517 	ldw	r6,20(sp)
 400803c:	100b883a 	mov	r5,r2
 4008040:	8809883a 	mov	r4,r17
 4008044:	400e6ac0 	call	400e6ac <__multiply>
 4008048:	10010926 	beq	r2,zero,4008470 <_strtod_r+0xcc8>
 400804c:	d9400517 	ldw	r5,20(sp)
 4008050:	8809883a 	mov	r4,r17
 4008054:	d8801315 	stw	r2,76(sp)
 4008058:	400e2e40 	call	400e2e4 <_Bfree>
 400805c:	d8801317 	ldw	r2,76(sp)
 4008060:	d8800515 	stw	r2,20(sp)
 4008064:	0540060e 	bge	zero,r21,4008080 <_strtod_r+0x8d8>
 4008068:	d9400517 	ldw	r5,20(sp)
 400806c:	a80d883a 	mov	r6,r21
 4008070:	8809883a 	mov	r4,r17
 4008074:	400ea780 	call	400ea78 <__lshift>
 4008078:	d8800515 	stw	r2,20(sp)
 400807c:	10025c26 	beq	r2,zero,40089f0 <_strtod_r+0x1248>
 4008080:	d8800c17 	ldw	r2,48(sp)
 4008084:	10000626 	beq	r2,zero,40080a0 <_strtod_r+0x8f8>
 4008088:	d9800c17 	ldw	r6,48(sp)
 400808c:	980b883a 	mov	r5,r19
 4008090:	8809883a 	mov	r4,r17
 4008094:	400e9380 	call	400e938 <__pow5mult>
 4008098:	1027883a 	mov	r19,r2
 400809c:	1000f426 	beq	r2,zero,4008470 <_strtod_r+0xcc8>
 40080a0:	0700060e 	bge	zero,fp,40080bc <_strtod_r+0x914>
 40080a4:	980b883a 	mov	r5,r19
 40080a8:	e00d883a 	mov	r6,fp
 40080ac:	8809883a 	mov	r4,r17
 40080b0:	400ea780 	call	400ea78 <__lshift>
 40080b4:	1027883a 	mov	r19,r2
 40080b8:	1000ed26 	beq	r2,zero,4008470 <_strtod_r+0xcc8>
 40080bc:	0500060e 	bge	zero,r20,40080d8 <_strtod_r+0x930>
 40080c0:	800b883a 	mov	r5,r16
 40080c4:	a00d883a 	mov	r6,r20
 40080c8:	8809883a 	mov	r4,r17
 40080cc:	400ea780 	call	400ea78 <__lshift>
 40080d0:	1021883a 	mov	r16,r2
 40080d4:	1000e626 	beq	r2,zero,4008470 <_strtod_r+0xcc8>
 40080d8:	d9400517 	ldw	r5,20(sp)
 40080dc:	980d883a 	mov	r6,r19
 40080e0:	8809883a 	mov	r4,r17
 40080e4:	400ec200 	call	400ec20 <__mdiff>
 40080e8:	1025883a 	mov	r18,r2
 40080ec:	1000e026 	beq	r2,zero,4008470 <_strtod_r+0xcc8>
 40080f0:	15400317 	ldw	r21,12(r2)
 40080f4:	800b883a 	mov	r5,r16
 40080f8:	10000315 	stw	zero,12(r2)
 40080fc:	1009883a 	mov	r4,r2
 4008100:	400ebc00 	call	400ebc0 <__mcmp>
 4008104:	10026716 	blt	r2,zero,4008aa4 <_strtod_r+0x12fc>
 4008108:	10029626 	beq	r2,zero,4008b64 <_strtod_r+0x13bc>
 400810c:	800b883a 	mov	r5,r16
 4008110:	9009883a 	mov	r4,r18
 4008114:	400f0d80 	call	400f0d8 <__ratio>
 4008118:	000d883a 	mov	r6,zero
 400811c:	01d00034 	movhi	r7,16384
 4008120:	1009883a 	mov	r4,r2
 4008124:	180b883a 	mov	r5,r3
 4008128:	1039883a 	mov	fp,r2
 400812c:	1829883a 	mov	r20,r3
 4008130:	4012d2c0 	call	4012d2c <__ledf2>
 4008134:	00803b16 	blt	zero,r2,4008224 <_strtod_r+0xa7c>
 4008138:	a8005e26 	beq	r21,zero,40082b4 <_strtod_r+0xb0c>
 400813c:	050ffc34 	movhi	r20,16368
 4008140:	d8000f15 	stw	zero,60(sp)
 4008144:	d8001015 	stw	zero,64(sp)
 4008148:	dd000d15 	stw	r20,52(sp)
 400814c:	b71ffc2c 	andhi	fp,r22,32752
 4008150:	009ff834 	movhi	r2,32736
 4008154:	e080f226 	beq	fp,r2,4008520 <_strtod_r+0xd78>
 4008158:	d9000717 	ldw	r4,28(sp)
 400815c:	20000c26 	beq	r4,zero,4008190 <_strtod_r+0x9e8>
 4008160:	0081a834 	movhi	r2,1696
 4008164:	17000a36 	bltu	r2,fp,4008190 <_strtod_r+0x9e8>
 4008168:	d9001017 	ldw	r4,64(sp)
 400816c:	d9400d17 	ldw	r5,52(sp)
 4008170:	01d07834 	movhi	r7,16864
 4008174:	39ffffc4 	addi	r7,r7,-1
 4008178:	01bff034 	movhi	r6,65472
 400817c:	4012d2c0 	call	4012d2c <__ledf2>
 4008180:	0080a70e 	bge	zero,r2,4008420 <_strtod_r+0xc78>
 4008184:	0081ac34 	movhi	r2,1712
 4008188:	a091883a 	add	r8,r20,r2
 400818c:	4729c83a 	sub	r20,r8,fp
 4008190:	b809883a 	mov	r4,r23
 4008194:	b00b883a 	mov	r5,r22
 4008198:	400ee1c0 	call	400ee1c <__ulp>
 400819c:	d9000f17 	ldw	r4,60(sp)
 40081a0:	a00b883a 	mov	r5,r20
 40081a4:	100d883a 	mov	r6,r2
 40081a8:	180f883a 	mov	r7,r3
 40081ac:	4012e200 	call	4012e20 <__muldf3>
 40081b0:	b80d883a 	mov	r6,r23
 40081b4:	b00f883a 	mov	r7,r22
 40081b8:	1009883a 	mov	r4,r2
 40081bc:	180b883a 	mov	r5,r3
 40081c0:	401194c0 	call	401194c <__adddf3>
 40081c4:	102f883a 	mov	r23,r2
 40081c8:	182d883a 	mov	r22,r3
 40081cc:	1829883a 	mov	r20,r3
 40081d0:	d9000717 	ldw	r4,28(sp)
 40081d4:	2000021e 	bne	r4,zero,40081e0 <_strtod_r+0xa38>
 40081d8:	a09ffc2c 	andhi	r2,r20,32752
 40081dc:	e080f126 	beq	fp,r2,40085a4 <_strtod_r+0xdfc>
 40081e0:	d9400517 	ldw	r5,20(sp)
 40081e4:	8809883a 	mov	r4,r17
 40081e8:	400e2e40 	call	400e2e4 <_Bfree>
 40081ec:	980b883a 	mov	r5,r19
 40081f0:	8809883a 	mov	r4,r17
 40081f4:	400e2e40 	call	400e2e4 <_Bfree>
 40081f8:	800b883a 	mov	r5,r16
 40081fc:	8809883a 	mov	r4,r17
 4008200:	400e2e40 	call	400e2e4 <_Bfree>
 4008204:	900b883a 	mov	r5,r18
 4008208:	8809883a 	mov	r4,r17
 400820c:	400e2e40 	call	400e2e4 <_Bfree>
 4008210:	003f3f06 	br	4007f10 <__alt_data_end+0xfc007f10>
 4008214:	00c00044 	movi	r3,1
 4008218:	d8000d15 	stw	zero,52(sp)
 400821c:	d8c00f15 	stw	r3,60(sp)
 4008220:	003f6f06 	br	4007fe0 <__alt_data_end+0xfc007fe0>
 4008224:	000d883a 	mov	r6,zero
 4008228:	01cff834 	movhi	r7,16352
 400822c:	e009883a 	mov	r4,fp
 4008230:	a00b883a 	mov	r5,r20
 4008234:	4012e200 	call	4012e20 <__muldf3>
 4008238:	d8801015 	stw	r2,64(sp)
 400823c:	d8c00d15 	stw	r3,52(sp)
 4008240:	a8001a1e 	bne	r21,zero,40082ac <_strtod_r+0xb04>
 4008244:	1a20003c 	xorhi	r8,r3,32768
 4008248:	d8800f15 	stw	r2,60(sp)
 400824c:	4029883a 	mov	r20,r8
 4008250:	003fbe06 	br	400814c <__alt_data_end+0xfc00814c>
 4008254:	d8000b15 	stw	zero,44(sp)
 4008258:	04800044 	movi	r18,1
 400825c:	b000021e 	bne	r22,zero,4008268 <_strtod_r+0xac0>
 4008260:	d8c00c17 	ldw	r3,48(sp)
 4008264:	183d9d26 	beq	r3,zero,40078dc <__alt_data_end+0xfc0078dc>
 4008268:	0039883a 	mov	fp,zero
 400826c:	003e5206 	br	4007bb8 <__alt_data_end+0xfc007bb8>
 4008270:	d8c00c17 	ldw	r3,48(sp)
 4008274:	dd000e17 	ldw	r20,56(sp)
 4008278:	1889c83a 	sub	r4,r3,r2
 400827c:	003f4706 	br	4007f9c <__alt_data_end+0xfc007f9c>
 4008280:	00bef884 	movi	r2,-1054
 4008284:	07000044 	movi	fp,1
 4008288:	10c5c83a 	sub	r2,r2,r3
 400828c:	e084983a 	sll	r2,fp,r2
 4008290:	df000f15 	stw	fp,60(sp)
 4008294:	d8800d15 	stw	r2,52(sp)
 4008298:	003f5106 	br	4007fe0 <__alt_data_end+0xfc007fe0>
 400829c:	d8c00717 	ldw	r3,28(sp)
 40082a0:	0009883a 	mov	r4,zero
 40082a4:	d8c00615 	stw	r3,24(sp)
 40082a8:	003de506 	br	4007a40 <__alt_data_end+0xfc007a40>
 40082ac:	da000d17 	ldw	r8,52(sp)
 40082b0:	003fe506 	br	4008248 <__alt_data_end+0xfc008248>
 40082b4:	b800521e 	bne	r23,zero,4008400 <_strtod_r+0xc58>
 40082b8:	01000434 	movhi	r4,16
 40082bc:	213fffc4 	addi	r4,r4,-1
 40082c0:	b104703a 	and	r2,r22,r4
 40082c4:	1000501e 	bne	r2,zero,4008408 <_strtod_r+0xc60>
 40082c8:	000d883a 	mov	r6,zero
 40082cc:	01cffc34 	movhi	r7,16368
 40082d0:	e009883a 	mov	r4,fp
 40082d4:	a00b883a 	mov	r5,r20
 40082d8:	4012d2c0 	call	4012d2c <__ledf2>
 40082dc:	10024216 	blt	r2,zero,4008be8 <_strtod_r+0x1440>
 40082e0:	a00b883a 	mov	r5,r20
 40082e4:	000d883a 	mov	r6,zero
 40082e8:	01cff834 	movhi	r7,16352
 40082ec:	e009883a 	mov	r4,fp
 40082f0:	4012e200 	call	4012e20 <__muldf3>
 40082f4:	d8801015 	stw	r2,64(sp)
 40082f8:	d8c00d15 	stw	r3,52(sp)
 40082fc:	1029883a 	mov	r20,r2
 4008300:	1a20003c 	xorhi	r8,r3,32768
 4008304:	dd000f15 	stw	r20,60(sp)
 4008308:	4029883a 	mov	r20,r8
 400830c:	003f8f06 	br	400814c <__alt_data_end+0xfc00814c>
 4008310:	8039883a 	mov	fp,r16
 4008314:	002d883a 	mov	r22,zero
 4008318:	d8000b15 	stw	zero,44(sp)
 400831c:	bd7ff404 	addi	r21,r23,-48
 4008320:	00800244 	movi	r2,9
 4008324:	15401236 	bltu	r2,r21,4008370 <_strtod_r+0xbc8>
 4008328:	dd400e15 	stw	r21,56(sp)
 400832c:	b0800044 	addi	r2,r22,1
 4008330:	a801701e 	bne	r21,zero,40088f4 <_strtod_r+0x114c>
 4008334:	ddc00617 	ldw	r23,24(sp)
 4008338:	102d883a 	mov	r22,r2
 400833c:	b8800044 	addi	r2,r23,1
 4008340:	d8800615 	stw	r2,24(sp)
 4008344:	bdc00047 	ldb	r23,1(r23)
 4008348:	003ff406 	br	400831c <__alt_data_end+0xfc00831c>
 400834c:	00c00044 	movi	r3,1
 4008350:	d8c00e15 	stw	r3,56(sp)
 4008354:	d8c00717 	ldw	r3,28(sp)
 4008358:	18800084 	addi	r2,r3,2
 400835c:	d8800615 	stw	r2,24(sp)
 4008360:	1dc00087 	ldb	r23,2(r3)
 4008364:	003e1f06 	br	4007be4 <__alt_data_end+0xfc007be4>
 4008368:	d8000e15 	stw	zero,56(sp)
 400836c:	003ff906 	br	4008354 <__alt_data_end+0xfc008354>
 4008370:	04800044 	movi	r18,1
 4008374:	003dad06 	br	4007a2c <__alt_data_end+0xfc007a2c>
 4008378:	903d581e 	bne	r18,zero,40078dc <__alt_data_end+0xfc0078dc>
 400837c:	00801384 	movi	r2,78
 4008380:	b8800526 	beq	r23,r2,4008398 <_strtod_r+0xbf0>
 4008384:	15fd530e 	bge	r2,r23,40078d4 <__alt_data_end+0xfc0078d4>
 4008388:	00801a44 	movi	r2,105
 400838c:	b8819a26 	beq	r23,r2,40089f8 <_strtod_r+0x1250>
 4008390:	00801b84 	movi	r2,110
 4008394:	b8bd511e 	bne	r23,r2,40078dc <__alt_data_end+0xfc0078dc>
 4008398:	014100b4 	movhi	r5,1026
 400839c:	d9000617 	ldw	r4,24(sp)
 40083a0:	2960b604 	addi	r5,r5,-32040
 40083a4:	01c00644 	movi	r7,25
 40083a8:	00000b06 	br	40083d8 <_strtod_r+0xc30>
 40083ac:	21000044 	addi	r4,r4,1
 40083b0:	20800003 	ldbu	r2,0(r4)
 40083b4:	10ffefc4 	addi	r3,r2,-65
 40083b8:	10803fcc 	andi	r2,r2,255
 40083bc:	1080201c 	xori	r2,r2,128
 40083c0:	18c03fcc 	andi	r3,r3,255
 40083c4:	10bfe004 	addi	r2,r2,-128
 40083c8:	38c00136 	bltu	r7,r3,40083d0 <_strtod_r+0xc28>
 40083cc:	10800804 	addi	r2,r2,32
 40083d0:	29400044 	addi	r5,r5,1
 40083d4:	11bd411e 	bne	r2,r6,40078dc <__alt_data_end+0xfc0078dc>
 40083d8:	29800007 	ldb	r6,0(r5)
 40083dc:	303ff31e 	bne	r6,zero,40083ac <__alt_data_end+0xfc0083ac>
 40083e0:	20800044 	addi	r2,r4,1
 40083e4:	d8800615 	stw	r2,24(sp)
 40083e8:	20c00047 	ldb	r3,1(r4)
 40083ec:	00800a04 	movi	r2,40
 40083f0:	18bde326 	beq	r3,r2,4007b80 <__alt_data_end+0xfc007b80>
 40083f4:	05bffe34 	movhi	r22,65528
 40083f8:	002f883a 	mov	r23,zero
 40083fc:	003dea06 	br	4007ba8 <__alt_data_end+0xfc007ba8>
 4008400:	00800044 	movi	r2,1
 4008404:	b880ff26 	beq	r23,r2,4008804 <_strtod_r+0x105c>
 4008408:	014ffc34 	movhi	r5,16368
 400840c:	d8000f15 	stw	zero,60(sp)
 4008410:	052ffc34 	movhi	r20,49136
 4008414:	d8001015 	stw	zero,64(sp)
 4008418:	d9400d15 	stw	r5,52(sp)
 400841c:	003f4b06 	br	400814c <__alt_data_end+0xfc00814c>
 4008420:	d9001017 	ldw	r4,64(sp)
 4008424:	d9400d17 	ldw	r5,52(sp)
 4008428:	4010b1c0 	call	4010b1c <__fixunsdfsi>
 400842c:	1000f126 	beq	r2,zero,40087f4 <_strtod_r+0x104c>
 4008430:	1009883a 	mov	r4,r2
 4008434:	40140e40 	call	40140e4 <__floatunsidf>
 4008438:	d8801015 	stw	r2,64(sp)
 400843c:	d8c00d15 	stw	r3,52(sp)
 4008440:	a800ea1e 	bne	r21,zero,40087ec <_strtod_r+0x1044>
 4008444:	d8800d17 	ldw	r2,52(sp)
 4008448:	1220003c 	xorhi	r8,r2,32768
 400844c:	d8c01017 	ldw	r3,64(sp)
 4008450:	4029883a 	mov	r20,r8
 4008454:	d8c00f15 	stw	r3,60(sp)
 4008458:	003f4a06 	br	4008184 <__alt_data_end+0xfc008184>
 400845c:	d8000c15 	stw	zero,48(sp)
 4008460:	003ea506 	br	4007ef8 <__alt_data_end+0xfc007ef8>
 4008464:	d8c00817 	ldw	r3,32(sp)
 4008468:	00bfffc4 	movi	r2,-1
 400846c:	1880441e 	bne	r3,r2,4008580 <_strtod_r+0xdd8>
 4008470:	9011883a 	mov	r8,r18
 4008474:	d8800517 	ldw	r2,20(sp)
 4008478:	00c00884 	movi	r3,34
 400847c:	88c00015 	stw	r3,0(r17)
 4008480:	d8000815 	stw	zero,32(sp)
 4008484:	071ffc34 	movhi	fp,32752
 4008488:	100b883a 	mov	r5,r2
 400848c:	8809883a 	mov	r4,r17
 4008490:	da001315 	stw	r8,76(sp)
 4008494:	400e2e40 	call	400e2e4 <_Bfree>
 4008498:	980b883a 	mov	r5,r19
 400849c:	8809883a 	mov	r4,r17
 40084a0:	400e2e40 	call	400e2e4 <_Bfree>
 40084a4:	800b883a 	mov	r5,r16
 40084a8:	8809883a 	mov	r4,r17
 40084ac:	400e2e40 	call	400e2e4 <_Bfree>
 40084b0:	d9400b17 	ldw	r5,44(sp)
 40084b4:	8809883a 	mov	r4,r17
 40084b8:	400e2e40 	call	400e2e4 <_Bfree>
 40084bc:	da001317 	ldw	r8,76(sp)
 40084c0:	8809883a 	mov	r4,r17
 40084c4:	400b883a 	mov	r5,r8
 40084c8:	400e2e40 	call	400e2e4 <_Bfree>
 40084cc:	003d5f06 	br	4007a4c <__alt_data_end+0xfc007a4c>
 40084d0:	d8c00a17 	ldw	r3,40(sp)
 40084d4:	d8800504 	addi	r2,sp,20
 40084d8:	018100b4 	movhi	r6,1026
 40084dc:	31a0bc04 	addi	r6,r6,-32016
 40084e0:	d8c00115 	stw	r3,4(sp)
 40084e4:	d8800015 	stw	r2,0(sp)
 40084e8:	d9c00404 	addi	r7,sp,16
 40084ec:	d9400604 	addi	r5,sp,24
 40084f0:	8809883a 	mov	r4,r17
 40084f4:	400d7900 	call	400d790 <__gethex>
 40084f8:	148001cc 	andi	r18,r2,7
 40084fc:	903e2126 	beq	r18,zero,4007d84 <__alt_data_end+0xfc007d84>
 4008500:	00c00184 	movi	r3,6
 4008504:	90c0c71e 	bne	r18,r3,4008824 <_strtod_r+0x107c>
 4008508:	84000044 	addi	r16,r16,1
 400850c:	dc000615 	stw	r16,24(sp)
 4008510:	d8000815 	stw	zero,32(sp)
 4008514:	0039883a 	mov	fp,zero
 4008518:	d8000a15 	stw	zero,40(sp)
 400851c:	003d4b06 	br	4007a4c <__alt_data_end+0xfc007a4c>
 4008520:	00bf2c34 	movhi	r2,64688
 4008524:	b0ad883a 	add	r22,r22,r2
 4008528:	b809883a 	mov	r4,r23
 400852c:	b00b883a 	mov	r5,r22
 4008530:	400ee1c0 	call	400ee1c <__ulp>
 4008534:	d9000f17 	ldw	r4,60(sp)
 4008538:	100d883a 	mov	r6,r2
 400853c:	180f883a 	mov	r7,r3
 4008540:	a00b883a 	mov	r5,r20
 4008544:	4012e200 	call	4012e20 <__muldf3>
 4008548:	b80d883a 	mov	r6,r23
 400854c:	1009883a 	mov	r4,r2
 4008550:	b00f883a 	mov	r7,r22
 4008554:	180b883a 	mov	r5,r3
 4008558:	401194c0 	call	401194c <__adddf3>
 400855c:	011f2834 	movhi	r4,31904
 4008560:	102f883a 	mov	r23,r2
 4008564:	213fffc4 	addi	r4,r4,-1
 4008568:	189ffc2c 	andhi	r2,r3,32752
 400856c:	20807b2e 	bgeu	r4,r2,400875c <_strtod_r+0xfb4>
 4008570:	d9401217 	ldw	r5,72(sp)
 4008574:	009ffc34 	movhi	r2,32752
 4008578:	10bfffc4 	addi	r2,r2,-1
 400857c:	28bfb926 	beq	r5,r2,4008464 <__alt_data_end+0xfc008464>
 4008580:	059ffc34 	movhi	r22,32752
 4008584:	b5bfffc4 	addi	r22,r22,-1
 4008588:	05ffffc4 	movi	r23,-1
 400858c:	003f1406 	br	40081e0 <__alt_data_end+0xfc0081e0>
 4008590:	00800884 	movi	r2,34
 4008594:	88800015 	stw	r2,0(r17)
 4008598:	d8000815 	stw	zero,32(sp)
 400859c:	071ffc34 	movhi	fp,32752
 40085a0:	003d2a06 	br	4007a4c <__alt_data_end+0xfc007a4c>
 40085a4:	d9400d17 	ldw	r5,52(sp)
 40085a8:	d9001017 	ldw	r4,64(sp)
 40085ac:	4013f880 	call	4013f88 <__fixdfsi>
 40085b0:	1009883a 	mov	r4,r2
 40085b4:	40140080 	call	4014008 <__floatsidf>
 40085b8:	d9001017 	ldw	r4,64(sp)
 40085bc:	d9400d17 	ldw	r5,52(sp)
 40085c0:	100d883a 	mov	r6,r2
 40085c4:	180f883a 	mov	r7,r3
 40085c8:	401368c0 	call	401368c <__subdf3>
 40085cc:	1011883a 	mov	r8,r2
 40085d0:	1839883a 	mov	fp,r3
 40085d4:	a800121e 	bne	r21,zero,4008620 <_strtod_r+0xe78>
 40085d8:	b800111e 	bne	r23,zero,4008620 <_strtod_r+0xe78>
 40085dc:	01400434 	movhi	r5,16
 40085e0:	297fffc4 	addi	r5,r5,-1
 40085e4:	a168703a 	and	r20,r20,r5
 40085e8:	a0000d1e 	bne	r20,zero,4008620 <_strtod_r+0xe78>
 40085ec:	01a52834 	movhi	r6,38048
 40085f0:	01cff434 	movhi	r7,16336
 40085f4:	318d6544 	addi	r6,r6,13717
 40085f8:	39ffffc4 	addi	r7,r7,-1
 40085fc:	1009883a 	mov	r4,r2
 4008600:	180b883a 	mov	r5,r3
 4008604:	4012d2c0 	call	4012d2c <__ledf2>
 4008608:	103ef50e 	bge	r2,zero,40081e0 <__alt_data_end+0xfc0081e0>
 400860c:	9011883a 	mov	r8,r18
 4008610:	d8800517 	ldw	r2,20(sp)
 4008614:	d8000815 	stw	zero,32(sp)
 4008618:	b039883a 	mov	fp,r22
 400861c:	003f9a06 	br	4008488 <__alt_data_end+0xfc008488>
 4008620:	01a52834 	movhi	r6,38048
 4008624:	01cff834 	movhi	r7,16352
 4008628:	4009883a 	mov	r4,r8
 400862c:	318d6544 	addi	r6,r6,13717
 4008630:	39ffffc4 	addi	r7,r7,-1
 4008634:	e00b883a 	mov	r5,fp
 4008638:	da001315 	stw	r8,76(sp)
 400863c:	4012d2c0 	call	4012d2c <__ledf2>
 4008640:	da001317 	ldw	r8,76(sp)
 4008644:	10000716 	blt	r2,zero,4008664 <_strtod_r+0xebc>
 4008648:	018d6c34 	movhi	r6,13744
 400864c:	31b94d44 	addi	r6,r6,-6859
 4008650:	01cff834 	movhi	r7,16352
 4008654:	4009883a 	mov	r4,r8
 4008658:	e00b883a 	mov	r5,fp
 400865c:	4012c500 	call	4012c50 <__gedf2>
 4008660:	00bedf0e 	bge	zero,r2,40081e0 <__alt_data_end+0xfc0081e0>
 4008664:	9011883a 	mov	r8,r18
 4008668:	d8800517 	ldw	r2,20(sp)
 400866c:	ddc00815 	stw	r23,32(sp)
 4008670:	b039883a 	mov	fp,r22
 4008674:	003f8406 	br	4008488 <__alt_data_end+0xfc008488>
 4008678:	903e1026 	beq	r18,zero,4007ebc <__alt_data_end+0xfc007ebc>
 400867c:	04a5c83a 	sub	r18,zero,r18
 4008680:	908003cc 	andi	r2,r18,15
 4008684:	10000b26 	beq	r2,zero,40086b4 <_strtod_r+0xf0c>
 4008688:	100490fa 	slli	r2,r2,3
 400868c:	00c100b4 	movhi	r3,1026
 4008690:	18e13f04 	addi	r3,r3,-31492
 4008694:	1885883a 	add	r2,r3,r2
 4008698:	11800017 	ldw	r6,0(r2)
 400869c:	11c00117 	ldw	r7,4(r2)
 40086a0:	b809883a 	mov	r4,r23
 40086a4:	b00b883a 	mov	r5,r22
 40086a8:	40121f80 	call	40121f8 <__divdf3>
 40086ac:	102f883a 	mov	r23,r2
 40086b0:	182d883a 	mov	r22,r3
 40086b4:	9025d13a 	srai	r18,r18,4
 40086b8:	903e0026 	beq	r18,zero,4007ebc <__alt_data_end+0xfc007ebc>
 40086bc:	008007c4 	movi	r2,31
 40086c0:	14801f16 	blt	r2,r18,4008740 <_strtod_r+0xf98>
 40086c4:	9080040c 	andi	r2,r18,16
 40086c8:	10018d26 	beq	r2,zero,4008d00 <_strtod_r+0x1558>
 40086cc:	00c01a84 	movi	r3,106
 40086d0:	d8c00715 	stw	r3,28(sp)
 40086d4:	04817e0e 	bge	zero,r18,4008cd0 <_strtod_r+0x1528>
 40086d8:	050100b4 	movhi	r20,1026
 40086dc:	a520c104 	addi	r20,r20,-31996
 40086e0:	b805883a 	mov	r2,r23
 40086e4:	b007883a 	mov	r3,r22
 40086e8:	0009883a 	mov	r4,zero
 40086ec:	9180004c 	andi	r6,r18,1
 40086f0:	30000626 	beq	r6,zero,400870c <_strtod_r+0xf64>
 40086f4:	a1800017 	ldw	r6,0(r20)
 40086f8:	a1c00117 	ldw	r7,4(r20)
 40086fc:	1009883a 	mov	r4,r2
 4008700:	180b883a 	mov	r5,r3
 4008704:	4012e200 	call	4012e20 <__muldf3>
 4008708:	01000044 	movi	r4,1
 400870c:	9025d07a 	srai	r18,r18,1
 4008710:	a5000204 	addi	r20,r20,8
 4008714:	903ff51e 	bne	r18,zero,40086ec <__alt_data_end+0xfc0086ec>
 4008718:	21003fcc 	andi	r4,r4,255
 400871c:	2001891e 	bne	r4,zero,4008d44 <_strtod_r+0x159c>
 4008720:	d9000717 	ldw	r4,28(sp)
 4008724:	20016a1e 	bne	r4,zero,4008cd0 <_strtod_r+0x1528>
 4008728:	000d883a 	mov	r6,zero
 400872c:	000f883a 	mov	r7,zero
 4008730:	b809883a 	mov	r4,r23
 4008734:	b00b883a 	mov	r5,r22
 4008738:	4012bc80 	call	4012bc8 <__eqdf2>
 400873c:	103de01e 	bne	r2,zero,4007ec0 <__alt_data_end+0xfc007ec0>
 4008740:	00800884 	movi	r2,34
 4008744:	88800015 	stw	r2,0(r17)
 4008748:	d8000815 	stw	zero,32(sp)
 400874c:	0039883a 	mov	fp,zero
 4008750:	003cbe06 	br	4007a4c <__alt_data_end+0xfc007a4c>
 4008754:	011387c4 	movi	r4,19999
 4008758:	003d5606 	br	4007cb4 <__alt_data_end+0xfc007cb4>
 400875c:	0580d434 	movhi	r22,848
 4008760:	1dad883a 	add	r22,r3,r22
 4008764:	b029883a 	mov	r20,r22
 4008768:	003e9906 	br	40081d0 <__alt_data_end+0xfc0081d0>
 400876c:	e5c03fcc 	andi	r23,fp,255
 4008770:	bdc0201c 	xori	r23,r23,128
 4008774:	bdffe004 	addi	r23,r23,-128
 4008778:	dc800817 	ldw	r18,32(sp)
 400877c:	0029883a 	mov	r20,zero
 4008780:	0027883a 	mov	r19,zero
 4008784:	0021883a 	mov	r16,zero
 4008788:	003c9806 	br	40079ec <__alt_data_end+0xfc0079ec>
 400878c:	00c00944 	movi	r3,37
 4008790:	1f07c83a 	sub	r3,r3,fp
 4008794:	1d7d7e16 	blt	r3,r21,4007d90 <__alt_data_end+0xfc007d90>
 4008798:	1721c83a 	sub	r16,r2,fp
 400879c:	800490fa 	slli	r2,r16,3
 40087a0:	044100b4 	movhi	r17,1026
 40087a4:	8c613f04 	addi	r17,r17,-31492
 40087a8:	8885883a 	add	r2,r17,r2
 40087ac:	11000017 	ldw	r4,0(r2)
 40087b0:	11400117 	ldw	r5,4(r2)
 40087b4:	b80d883a 	mov	r6,r23
 40087b8:	b00f883a 	mov	r7,r22
 40087bc:	4012e200 	call	4012e20 <__muldf3>
 40087c0:	ac2bc83a 	sub	r21,r21,r16
 40087c4:	a80c90fa 	slli	r6,r21,3
 40087c8:	1009883a 	mov	r4,r2
 40087cc:	180b883a 	mov	r5,r3
 40087d0:	8985883a 	add	r2,r17,r6
 40087d4:	11800017 	ldw	r6,0(r2)
 40087d8:	11c00117 	ldw	r7,4(r2)
 40087dc:	4012e200 	call	4012e20 <__muldf3>
 40087e0:	d8800815 	stw	r2,32(sp)
 40087e4:	1839883a 	mov	fp,r3
 40087e8:	003c9806 	br	4007a4c <__alt_data_end+0xfc007a4c>
 40087ec:	da000d17 	ldw	r8,52(sp)
 40087f0:	003f1606 	br	400844c <__alt_data_end+0xfc00844c>
 40087f4:	014ffc34 	movhi	r5,16368
 40087f8:	d8001015 	stw	zero,64(sp)
 40087fc:	d9400d15 	stw	r5,52(sp)
 4008800:	003f0f06 	br	4008440 <__alt_data_end+0xfc008440>
 4008804:	b03f001e 	bne	r22,zero,4008408 <__alt_data_end+0xfc008408>
 4008808:	9011883a 	mov	r8,r18
 400880c:	00800884 	movi	r2,34
 4008810:	88800015 	stw	r2,0(r17)
 4008814:	d8000815 	stw	zero,32(sp)
 4008818:	d8800517 	ldw	r2,20(sp)
 400881c:	0039883a 	mov	fp,zero
 4008820:	003f1906 	br	4008488 <__alt_data_end+0xfc008488>
 4008824:	d9800517 	ldw	r6,20(sp)
 4008828:	30000826 	beq	r6,zero,400884c <_strtod_r+0x10a4>
 400882c:	01400d44 	movi	r5,53
 4008830:	d9000204 	addi	r4,sp,8
 4008834:	d8801315 	stw	r2,76(sp)
 4008838:	400f1f00 	call	400f1f0 <__copybits>
 400883c:	d9400517 	ldw	r5,20(sp)
 4008840:	8809883a 	mov	r4,r17
 4008844:	400e2e40 	call	400e2e4 <_Bfree>
 4008848:	d8801317 	ldw	r2,76(sp)
 400884c:	00c00184 	movi	r3,6
 4008850:	1c800f36 	bltu	r3,r18,4008890 <_strtod_r+0x10e8>
 4008854:	902490ba 	slli	r18,r18,2
 4008858:	00c10074 	movhi	r3,1025
 400885c:	18e21b04 	addi	r3,r3,-30612
 4008860:	90e5883a 	add	r18,r18,r3
 4008864:	90c00017 	ldw	r3,0(r18)
 4008868:	1800683a 	jmp	r3
 400886c:	040088e8 	cmpgeui	r16,zero,547
 4008870:	040088c0 	call	40088c <__alt_mem_sdram-0x3bff774>
 4008874:	040088a4 	muli	r16,zero,546
 4008878:	04008888 	cmpgei	r16,zero,546
 400887c:	040088b0 	cmpltui	r16,zero,546
 4008880:	040088c0 	call	40088c <__alt_mem_sdram-0x3bff774>
 4008884:	040088e8 	cmpgeui	r16,zero,547
 4008888:	059ffc34 	movhi	r22,32752
 400888c:	002f883a 	mov	r23,zero
 4008890:	1080020c 	andi	r2,r2,8
 4008894:	ddc00815 	stw	r23,32(sp)
 4008898:	103cc426 	beq	r2,zero,4007bac <__alt_data_end+0xfc007bac>
 400889c:	b7200034 	orhi	fp,r22,32768
 40088a0:	003c6a06 	br	4007a4c <__alt_data_end+0xfc007a4c>
 40088a4:	ddc00217 	ldw	r23,8(sp)
 40088a8:	dd800317 	ldw	r22,12(sp)
 40088ac:	003ff806 	br	4008890 <__alt_data_end+0xfc008890>
 40088b0:	05a00034 	movhi	r22,32768
 40088b4:	b5bfffc4 	addi	r22,r22,-1
 40088b8:	05ffffc4 	movi	r23,-1
 40088bc:	003ff406 	br	4008890 <__alt_data_end+0xfc008890>
 40088c0:	d8c00417 	ldw	r3,16(sp)
 40088c4:	dd800317 	ldw	r22,12(sp)
 40088c8:	013ffc34 	movhi	r4,65520
 40088cc:	18c10cc4 	addi	r3,r3,1075
 40088d0:	1806953a 	slli	r3,r3,20
 40088d4:	213fffc4 	addi	r4,r4,-1
 40088d8:	b12c703a 	and	r22,r22,r4
 40088dc:	ddc00217 	ldw	r23,8(sp)
 40088e0:	b0ecb03a 	or	r22,r22,r3
 40088e4:	003fea06 	br	4008890 <__alt_data_end+0xfc008890>
 40088e8:	002d883a 	mov	r22,zero
 40088ec:	002f883a 	mov	r23,zero
 40088f0:	003fe706 	br	4008890 <__alt_data_end+0xfc008890>
 40088f4:	d8c00b17 	ldw	r3,44(sp)
 40088f8:	b72d883a 	add	r22,r22,fp
 40088fc:	1887883a 	add	r3,r3,r2
 4008900:	d8c00b15 	stw	r3,44(sp)
 4008904:	00c00044 	movi	r3,1
 4008908:	10c11126 	beq	r2,r3,4008d50 <_strtod_r+0x15a8>
 400890c:	05c00204 	movi	r23,8
 4008910:	04800404 	movi	r18,16
 4008914:	e7000044 	addi	fp,fp,1
 4008918:	e0bfffc4 	addi	r2,fp,-1
 400891c:	b8802016 	blt	r23,r2,40089a0 <_strtod_r+0x11f8>
 4008920:	9809883a 	mov	r4,r19
 4008924:	01400284 	movi	r5,10
 4008928:	4001a140 	call	4001a14 <__mulsi3>
 400892c:	1027883a 	mov	r19,r2
 4008930:	e5bff81e 	bne	fp,r22,4008914 <__alt_data_end+0xfc008914>
 4008934:	ddc00617 	ldw	r23,24(sp)
 4008938:	e7000044 	addi	fp,fp,1
 400893c:	00800204 	movi	r2,8
 4008940:	1580100e 	bge	r2,r22,4008984 <_strtod_r+0x11dc>
 4008944:	00800404 	movi	r2,16
 4008948:	002d883a 	mov	r22,zero
 400894c:	173e7b16 	blt	r2,fp,400833c <__alt_data_end+0xfc00833c>
 4008950:	a009883a 	mov	r4,r20
 4008954:	01400284 	movi	r5,10
 4008958:	4001a140 	call	4001a14 <__mulsi3>
 400895c:	a8a9883a 	add	r20,r21,r2
 4008960:	003e7606 	br	400833c <__alt_data_end+0xfc00833c>
 4008964:	d9000617 	ldw	r4,24(sp)
 4008968:	bdfff404 	addi	r23,r23,-48
 400896c:	b5800044 	addi	r22,r22,1
 4008970:	ddc00e15 	stw	r23,56(sp)
 4008974:	d9000815 	stw	r4,32(sp)
 4008978:	dd800b15 	stw	r22,44(sp)
 400897c:	202f883a 	mov	r23,r4
 4008980:	07000044 	movi	fp,1
 4008984:	9809883a 	mov	r4,r19
 4008988:	01400284 	movi	r5,10
 400898c:	4001a140 	call	4001a14 <__mulsi3>
 4008990:	d8c00e17 	ldw	r3,56(sp)
 4008994:	002d883a 	mov	r22,zero
 4008998:	18a7883a 	add	r19,r3,r2
 400899c:	003e6706 	br	400833c <__alt_data_end+0xfc00833c>
 40089a0:	973fe316 	blt	r18,fp,4008930 <__alt_data_end+0xfc008930>
 40089a4:	a009883a 	mov	r4,r20
 40089a8:	01400284 	movi	r5,10
 40089ac:	4001a140 	call	4001a14 <__mulsi3>
 40089b0:	1029883a 	mov	r20,r2
 40089b4:	003fde06 	br	4008930 <__alt_data_end+0xfc008930>
 40089b8:	00bffa84 	movi	r2,-22
 40089bc:	a8bcf416 	blt	r21,r2,4007d90 <__alt_data_end+0xfc007d90>
 40089c0:	a82a90fa 	slli	r21,r21,3
 40089c4:	008100b4 	movhi	r2,1026
 40089c8:	10a13f04 	addi	r2,r2,-31492
 40089cc:	1545c83a 	sub	r2,r2,r21
 40089d0:	11800017 	ldw	r6,0(r2)
 40089d4:	11c00117 	ldw	r7,4(r2)
 40089d8:	b809883a 	mov	r4,r23
 40089dc:	b00b883a 	mov	r5,r22
 40089e0:	40121f80 	call	40121f8 <__divdf3>
 40089e4:	d8800815 	stw	r2,32(sp)
 40089e8:	1839883a 	mov	fp,r3
 40089ec:	003c1706 	br	4007a4c <__alt_data_end+0xfc007a4c>
 40089f0:	9011883a 	mov	r8,r18
 40089f4:	003ea006 	br	4008478 <__alt_data_end+0xfc008478>
 40089f8:	014100b4 	movhi	r5,1026
 40089fc:	d9000617 	ldw	r4,24(sp)
 4008a00:	2960b304 	addi	r5,r5,-32052
 4008a04:	01c00644 	movi	r7,25
 4008a08:	00000b06 	br	4008a38 <_strtod_r+0x1290>
 4008a0c:	21000044 	addi	r4,r4,1
 4008a10:	20800003 	ldbu	r2,0(r4)
 4008a14:	10ffefc4 	addi	r3,r2,-65
 4008a18:	10803fcc 	andi	r2,r2,255
 4008a1c:	1080201c 	xori	r2,r2,128
 4008a20:	18c03fcc 	andi	r3,r3,255
 4008a24:	10bfe004 	addi	r2,r2,-128
 4008a28:	38c00136 	bltu	r7,r3,4008a30 <_strtod_r+0x1288>
 4008a2c:	10800804 	addi	r2,r2,32
 4008a30:	29400044 	addi	r5,r5,1
 4008a34:	11bba91e 	bne	r2,r6,40078dc <__alt_data_end+0xfc0078dc>
 4008a38:	29800007 	ldb	r6,0(r5)
 4008a3c:	303ff31e 	bne	r6,zero,4008a0c <__alt_data_end+0xfc008a0c>
 4008a40:	018100b4 	movhi	r6,1026
 4008a44:	d9000615 	stw	r4,24(sp)
 4008a48:	31a0b404 	addi	r6,r6,-32048
 4008a4c:	200b883a 	mov	r5,r4
 4008a50:	02000644 	movi	r8,25
 4008a54:	00000a06 	br	4008a80 <_strtod_r+0x12d8>
 4008a58:	28800003 	ldbu	r2,0(r5)
 4008a5c:	10ffefc4 	addi	r3,r2,-65
 4008a60:	10803fcc 	andi	r2,r2,255
 4008a64:	1080201c 	xori	r2,r2,128
 4008a68:	18c03fcc 	andi	r3,r3,255
 4008a6c:	10bfe004 	addi	r2,r2,-128
 4008a70:	40c00136 	bltu	r8,r3,4008a78 <_strtod_r+0x12d0>
 4008a74:	10800804 	addi	r2,r2,32
 4008a78:	31800044 	addi	r6,r6,1
 4008a7c:	11c0691e 	bne	r2,r7,4008c24 <_strtod_r+0x147c>
 4008a80:	31c00007 	ldb	r7,0(r6)
 4008a84:	29400044 	addi	r5,r5,1
 4008a88:	383ff31e 	bne	r7,zero,4008a58 <__alt_data_end+0xfc008a58>
 4008a8c:	d9400615 	stw	r5,24(sp)
 4008a90:	059ffc34 	movhi	r22,32752
 4008a94:	002f883a 	mov	r23,zero
 4008a98:	003c4306 	br	4007ba8 <__alt_data_end+0xfc007ba8>
 4008a9c:	002d883a 	mov	r22,zero
 4008aa0:	003cad06 	br	4007d58 <__alt_data_end+0xfc007d58>
 4008aa4:	9011883a 	mov	r8,r18
 4008aa8:	df001217 	ldw	fp,72(sp)
 4008aac:	a800461e 	bne	r21,zero,4008bc8 <_strtod_r+0x1420>
 4008ab0:	b800451e 	bne	r23,zero,4008bc8 <_strtod_r+0x1420>
 4008ab4:	00800434 	movhi	r2,16
 4008ab8:	10bfffc4 	addi	r2,r2,-1
 4008abc:	b084703a 	and	r2,r22,r2
 4008ac0:	1000411e 	bne	r2,zero,4008bc8 <_strtod_r+0x1420>
 4008ac4:	b49ffc2c 	andhi	r18,r22,32752
 4008ac8:	0081ac34 	movhi	r2,1712
 4008acc:	14803e2e 	bgeu	r2,r18,4008bc8 <_strtod_r+0x1420>
 4008ad0:	40800517 	ldw	r2,20(r8)
 4008ad4:	1000031e 	bne	r2,zero,4008ae4 <_strtod_r+0x133c>
 4008ad8:	40800417 	ldw	r2,16(r8)
 4008adc:	00c00044 	movi	r3,1
 4008ae0:	1880390e 	bge	r3,r2,4008bc8 <_strtod_r+0x1420>
 4008ae4:	400b883a 	mov	r5,r8
 4008ae8:	01800044 	movi	r6,1
 4008aec:	8809883a 	mov	r4,r17
 4008af0:	400ea780 	call	400ea78 <__lshift>
 4008af4:	800b883a 	mov	r5,r16
 4008af8:	1009883a 	mov	r4,r2
 4008afc:	d8801315 	stw	r2,76(sp)
 4008b00:	400ebc00 	call	400ebc0 <__mcmp>
 4008b04:	da001317 	ldw	r8,76(sp)
 4008b08:	00802f0e 	bge	zero,r2,4008bc8 <_strtod_r+0x1420>
 4008b0c:	d9000717 	ldw	r4,28(sp)
 4008b10:	20008026 	beq	r4,zero,4008d14 <_strtod_r+0x156c>
 4008b14:	0081ac34 	movhi	r2,1712
 4008b18:	14807e16 	blt	r2,r18,4008d14 <_strtod_r+0x156c>
 4008b1c:	0080dc34 	movhi	r2,880
 4008b20:	14bf3a0e 	bge	r2,r18,400880c <__alt_data_end+0xfc00880c>
 4008b24:	d9000817 	ldw	r4,32(sp)
 4008b28:	e00b883a 	mov	r5,fp
 4008b2c:	000d883a 	mov	r6,zero
 4008b30:	01ce5434 	movhi	r7,14672
 4008b34:	da001315 	stw	r8,76(sp)
 4008b38:	4012e200 	call	4012e20 <__muldf3>
 4008b3c:	d8800815 	stw	r2,32(sp)
 4008b40:	1839883a 	mov	fp,r3
 4008b44:	da001317 	ldw	r8,76(sp)
 4008b48:	1800211e 	bne	r3,zero,4008bd0 <_strtod_r+0x1428>
 4008b4c:	d8c00817 	ldw	r3,32(sp)
 4008b50:	d8800517 	ldw	r2,20(sp)
 4008b54:	183e4c1e 	bne	r3,zero,4008488 <__alt_data_end+0xfc008488>
 4008b58:	00c00884 	movi	r3,34
 4008b5c:	88c00015 	stw	r3,0(r17)
 4008b60:	003e4906 	br	4008488 <__alt_data_end+0xfc008488>
 4008b64:	00800434 	movhi	r2,16
 4008b68:	9011883a 	mov	r8,r18
 4008b6c:	df001217 	ldw	fp,72(sp)
 4008b70:	10bfffc4 	addi	r2,r2,-1
 4008b74:	a8002226 	beq	r21,zero,4008c00 <_strtod_r+0x1458>
 4008b78:	b086703a 	and	r3,r22,r2
 4008b7c:	18804126 	beq	r3,r2,4008c84 <_strtod_r+0x14dc>
 4008b80:	d8c00d17 	ldw	r3,52(sp)
 4008b84:	18002326 	beq	r3,zero,4008c14 <_strtod_r+0x146c>
 4008b88:	1da4703a 	and	r18,r3,r22
 4008b8c:	90000e26 	beq	r18,zero,4008bc8 <_strtod_r+0x1420>
 4008b90:	da001315 	stw	r8,76(sp)
 4008b94:	d9800717 	ldw	r6,28(sp)
 4008b98:	b809883a 	mov	r4,r23
 4008b9c:	b00b883a 	mov	r5,r22
 4008ba0:	a8002826 	beq	r21,zero,4008c44 <_strtod_r+0x149c>
 4008ba4:	40077440 	call	4007744 <sulp>
 4008ba8:	100d883a 	mov	r6,r2
 4008bac:	180f883a 	mov	r7,r3
 4008bb0:	b809883a 	mov	r4,r23
 4008bb4:	b00b883a 	mov	r5,r22
 4008bb8:	401194c0 	call	401194c <__adddf3>
 4008bbc:	da001317 	ldw	r8,76(sp)
 4008bc0:	d8800815 	stw	r2,32(sp)
 4008bc4:	1839883a 	mov	fp,r3
 4008bc8:	d8800717 	ldw	r2,28(sp)
 4008bcc:	103fd51e 	bne	r2,zero,4008b24 <__alt_data_end+0xfc008b24>
 4008bd0:	d8800517 	ldw	r2,20(sp)
 4008bd4:	003e2c06 	br	4008488 <__alt_data_end+0xfc008488>
 4008bd8:	0580d434 	movhi	r22,848
 4008bdc:	1dad883a 	add	r22,r3,r22
 4008be0:	d8000715 	stw	zero,28(sp)
 4008be4:	003cb606 	br	4007ec0 <__alt_data_end+0xfc007ec0>
 4008be8:	008ff834 	movhi	r2,16352
 4008bec:	0029883a 	mov	r20,zero
 4008bf0:	022ff834 	movhi	r8,49120
 4008bf4:	d8001015 	stw	zero,64(sp)
 4008bf8:	d8800d15 	stw	r2,52(sp)
 4008bfc:	003dc106 	br	4008304 <__alt_data_end+0xfc008304>
 4008c00:	b084703a 	and	r2,r22,r2
 4008c04:	103fde1e 	bne	r2,zero,4008b80 <__alt_data_end+0xfc008b80>
 4008c08:	b83fdd1e 	bne	r23,zero,4008b80 <__alt_data_end+0xfc008b80>
 4008c0c:	b49ffc2c 	andhi	r18,r22,32752
 4008c10:	003fbe06 	br	4008b0c <__alt_data_end+0xfc008b0c>
 4008c14:	d8c00f17 	ldw	r3,60(sp)
 4008c18:	1de8703a 	and	r20,r3,r23
 4008c1c:	a03fea26 	beq	r20,zero,4008bc8 <__alt_data_end+0xfc008bc8>
 4008c20:	003fdb06 	br	4008b90 <__alt_data_end+0xfc008b90>
 4008c24:	21000044 	addi	r4,r4,1
 4008c28:	d9000615 	stw	r4,24(sp)
 4008c2c:	003f9806 	br	4008a90 <__alt_data_end+0xfc008a90>
 4008c30:	014100b4 	movhi	r5,1026
 4008c34:	29613504 	addi	r5,r5,-31532
 4008c38:	d9400715 	stw	r5,28(sp)
 4008c3c:	0025883a 	mov	r18,zero
 4008c40:	003c8c06 	br	4007e74 <__alt_data_end+0xfc007e74>
 4008c44:	40077440 	call	4007744 <sulp>
 4008c48:	100d883a 	mov	r6,r2
 4008c4c:	180f883a 	mov	r7,r3
 4008c50:	b809883a 	mov	r4,r23
 4008c54:	b00b883a 	mov	r5,r22
 4008c58:	401368c0 	call	401368c <__subdf3>
 4008c5c:	000d883a 	mov	r6,zero
 4008c60:	000f883a 	mov	r7,zero
 4008c64:	1009883a 	mov	r4,r2
 4008c68:	180b883a 	mov	r5,r3
 4008c6c:	d8800815 	stw	r2,32(sp)
 4008c70:	1839883a 	mov	fp,r3
 4008c74:	4012bc80 	call	4012bc8 <__eqdf2>
 4008c78:	da001317 	ldw	r8,76(sp)
 4008c7c:	103ee326 	beq	r2,zero,400880c <__alt_data_end+0xfc00880c>
 4008c80:	003fd106 	br	4008bc8 <__alt_data_end+0xfc008bc8>
 4008c84:	d8c00717 	ldw	r3,28(sp)
 4008c88:	18002026 	beq	r3,zero,4008d0c <_strtod_r+0x1564>
 4008c8c:	b09ffc2c 	andhi	r2,r22,32752
 4008c90:	00c1a834 	movhi	r3,1696
 4008c94:	18801d36 	bltu	r3,r2,4008d0c <_strtod_r+0x1564>
 4008c98:	1004d53a 	srli	r2,r2,20
 4008c9c:	00c01ac4 	movi	r3,107
 4008ca0:	1887c83a 	sub	r3,r3,r2
 4008ca4:	00bfffc4 	movi	r2,-1
 4008ca8:	10c4983a 	sll	r2,r2,r3
 4008cac:	15ffb41e 	bne	r2,r23,4008b80 <__alt_data_end+0xfc008b80>
 4008cb0:	00dffc34 	movhi	r3,32752
 4008cb4:	18ffffc4 	addi	r3,r3,-1
 4008cb8:	b0c03126 	beq	r22,r3,4008d80 <_strtod_r+0x15d8>
 4008cbc:	b59ffc2c 	andhi	r22,r22,32752
 4008cc0:	00800434 	movhi	r2,16
 4008cc4:	d8000815 	stw	zero,32(sp)
 4008cc8:	b0b9883a 	add	fp,r22,r2
 4008ccc:	003fbe06 	br	4008bc8 <__alt_data_end+0xfc008bc8>
 4008cd0:	b49ffc2c 	andhi	r18,r22,32752
 4008cd4:	9024d53a 	srli	r18,r18,20
 4008cd8:	00801ac4 	movi	r2,107
 4008cdc:	14a5c83a 	sub	r18,r2,r18
 4008ce0:	04be910e 	bge	zero,r18,4008728 <__alt_data_end+0xfc008728>
 4008ce4:	008007c4 	movi	r2,31
 4008ce8:	1480120e 	bge	r2,r18,4008d34 <_strtod_r+0x158c>
 4008cec:	00800d04 	movi	r2,52
 4008cf0:	002f883a 	mov	r23,zero
 4008cf4:	14801a0e 	bge	r2,r18,4008d60 <_strtod_r+0x15b8>
 4008cf8:	0580dc34 	movhi	r22,880
 4008cfc:	003e8a06 	br	4008728 <__alt_data_end+0xfc008728>
 4008d00:	d8000715 	stw	zero,28(sp)
 4008d04:	04be7416 	blt	zero,r18,40086d8 <__alt_data_end+0xfc0086d8>
 4008d08:	003e8706 	br	4008728 <__alt_data_end+0xfc008728>
 4008d0c:	00bfffc4 	movi	r2,-1
 4008d10:	003fe606 	br	4008cac <__alt_data_end+0xfc008cac>
 4008d14:	073ffc34 	movhi	fp,65520
 4008d18:	9725883a 	add	r18,r18,fp
 4008d1c:	017fffc4 	movi	r5,-1
 4008d20:	07000434 	movhi	fp,16
 4008d24:	e179883a 	add	fp,fp,r5
 4008d28:	d9400815 	stw	r5,32(sp)
 4008d2c:	9738b03a 	or	fp,r18,fp
 4008d30:	003fa506 	br	4008bc8 <__alt_data_end+0xfc008bc8>
 4008d34:	00bfffc4 	movi	r2,-1
 4008d38:	14a4983a 	sll	r18,r2,r18
 4008d3c:	95ee703a 	and	r23,r18,r23
 4008d40:	003e7906 	br	4008728 <__alt_data_end+0xfc008728>
 4008d44:	102f883a 	mov	r23,r2
 4008d48:	182d883a 	mov	r22,r3
 4008d4c:	003e7406 	br	4008720 <__alt_data_end+0xfc008720>
 4008d50:	e02d883a 	mov	r22,fp
 4008d54:	ddc00617 	ldw	r23,24(sp)
 4008d58:	e0f9883a 	add	fp,fp,r3
 4008d5c:	003ef706 	br	400893c <__alt_data_end+0xfc00893c>
 4008d60:	94bff804 	addi	r18,r18,-32
 4008d64:	00bfffc4 	movi	r2,-1
 4008d68:	14a4983a 	sll	r18,r2,r18
 4008d6c:	95ac703a 	and	r22,r18,r22
 4008d70:	003e6d06 	br	4008728 <__alt_data_end+0xfc008728>
 4008d74:	102f883a 	mov	r23,r2
 4008d78:	182d883a 	mov	r22,r3
 4008d7c:	003c3d06 	br	4007e74 <__alt_data_end+0xfc007e74>
 4008d80:	00ffffc4 	movi	r3,-1
 4008d84:	10ffcd1e 	bne	r2,r3,4008cbc <__alt_data_end+0xfc008cbc>
 4008d88:	003dba06 	br	4008474 <__alt_data_end+0xfc008474>

04008d8c <strtod>:
 4008d8c:	008100b4 	movhi	r2,1026
 4008d90:	10a8dd04 	addi	r2,r2,-23692
 4008d94:	280d883a 	mov	r6,r5
 4008d98:	200b883a 	mov	r5,r4
 4008d9c:	11000017 	ldw	r4,0(r2)
 4008da0:	40077a81 	jmpi	40077a8 <_strtod_r>

04008da4 <strtof>:
 4008da4:	defffb04 	addi	sp,sp,-20
 4008da8:	dcc00315 	stw	r19,12(sp)
 4008dac:	04c100b4 	movhi	r19,1026
 4008db0:	9ce8dd04 	addi	r19,r19,-23692
 4008db4:	280d883a 	mov	r6,r5
 4008db8:	200b883a 	mov	r5,r4
 4008dbc:	99000017 	ldw	r4,0(r19)
 4008dc0:	dfc00415 	stw	ra,16(sp)
 4008dc4:	dc800215 	stw	r18,8(sp)
 4008dc8:	dc400115 	stw	r17,4(sp)
 4008dcc:	dc000015 	stw	r16,0(sp)
 4008dd0:	40077a80 	call	40077a8 <_strtod_r>
 4008dd4:	1009883a 	mov	r4,r2
 4008dd8:	180b883a 	mov	r5,r3
 4008ddc:	1025883a 	mov	r18,r2
 4008de0:	1823883a 	mov	r17,r3
 4008de4:	401418c0 	call	401418c <__truncdfsf2>
 4008de8:	000b883a 	mov	r5,zero
 4008dec:	1009883a 	mov	r4,r2
 4008df0:	1021883a 	mov	r16,r2
 4008df4:	40117500 	call	4011750 <__eqsf2>
 4008df8:	1000111e 	bne	r2,zero,4008e40 <strtof+0x9c>
 4008dfc:	000d883a 	mov	r6,zero
 4008e00:	000f883a 	mov	r7,zero
 4008e04:	9009883a 	mov	r4,r18
 4008e08:	880b883a 	mov	r5,r17
 4008e0c:	4012bc80 	call	4012bc8 <__eqdf2>
 4008e10:	10000b26 	beq	r2,zero,4008e40 <strtof+0x9c>
 4008e14:	98800017 	ldw	r2,0(r19)
 4008e18:	00c00884 	movi	r3,34
 4008e1c:	10c00015 	stw	r3,0(r2)
 4008e20:	8005883a 	mov	r2,r16
 4008e24:	dfc00417 	ldw	ra,16(sp)
 4008e28:	dcc00317 	ldw	r19,12(sp)
 4008e2c:	dc800217 	ldw	r18,8(sp)
 4008e30:	dc400117 	ldw	r17,4(sp)
 4008e34:	dc000017 	ldw	r16,0(sp)
 4008e38:	dec00504 	addi	sp,sp,20
 4008e3c:	f800283a 	ret
 4008e40:	015fe034 	movhi	r5,32640
 4008e44:	297fffc4 	addi	r5,r5,-1
 4008e48:	8009883a 	mov	r4,r16
 4008e4c:	40117c80 	call	40117c8 <__gesf2>
 4008e50:	0080070e 	bge	zero,r2,4008e70 <strtof+0xcc>
 4008e54:	01dffc34 	movhi	r7,32752
 4008e58:	39ffffc4 	addi	r7,r7,-1
 4008e5c:	01bfffc4 	movi	r6,-1
 4008e60:	9009883a 	mov	r4,r18
 4008e64:	880b883a 	mov	r5,r17
 4008e68:	4012c500 	call	4012c50 <__gedf2>
 4008e6c:	00bfe90e 	bge	zero,r2,4008e14 <__alt_data_end+0xfc008e14>
 4008e70:	017fe034 	movhi	r5,65408
 4008e74:	297fffc4 	addi	r5,r5,-1
 4008e78:	8009883a 	mov	r4,r16
 4008e7c:	40118840 	call	4011884 <__lesf2>
 4008e80:	103fe70e 	bge	r2,zero,4008e20 <__alt_data_end+0xfc008e20>
 4008e84:	01fffc34 	movhi	r7,65520
 4008e88:	39ffffc4 	addi	r7,r7,-1
 4008e8c:	01bfffc4 	movi	r6,-1
 4008e90:	9009883a 	mov	r4,r18
 4008e94:	880b883a 	mov	r5,r17
 4008e98:	4012d2c0 	call	4012d2c <__ledf2>
 4008e9c:	103fdd0e 	bge	r2,zero,4008e14 <__alt_data_end+0xfc008e14>
 4008ea0:	003fdf06 	br	4008e20 <__alt_data_end+0xfc008e20>

04008ea4 <_strtol_r>:
 4008ea4:	008100b4 	movhi	r2,1026
 4008ea8:	defff204 	addi	sp,sp,-56
 4008eac:	10a8e004 	addi	r2,r2,-23680
 4008eb0:	dd800a15 	stw	r22,40(sp)
 4008eb4:	15800017 	ldw	r22,0(r2)
 4008eb8:	df000c15 	stw	fp,48(sp)
 4008ebc:	d9000315 	stw	r4,12(sp)
 4008ec0:	dfc00d15 	stw	ra,52(sp)
 4008ec4:	ddc00b15 	stw	r23,44(sp)
 4008ec8:	dd400915 	stw	r21,36(sp)
 4008ecc:	dd000815 	stw	r20,32(sp)
 4008ed0:	dcc00715 	stw	r19,28(sp)
 4008ed4:	dc800615 	stw	r18,24(sp)
 4008ed8:	dc400515 	stw	r17,20(sp)
 4008edc:	dc000415 	stw	r16,16(sp)
 4008ee0:	d9400215 	stw	r5,8(sp)
 4008ee4:	d9800015 	stw	r6,0(sp)
 4008ee8:	3839883a 	mov	fp,r7
 4008eec:	2809883a 	mov	r4,r5
 4008ef0:	24000003 	ldbu	r16,0(r4)
 4008ef4:	24400044 	addi	r17,r4,1
 4008ef8:	2007883a 	mov	r3,r4
 4008efc:	b405883a 	add	r2,r22,r16
 4008f00:	10800043 	ldbu	r2,1(r2)
 4008f04:	8809883a 	mov	r4,r17
 4008f08:	1080020c 	andi	r2,r2,8
 4008f0c:	103ff81e 	bne	r2,zero,4008ef0 <__alt_data_end+0xfc008ef0>
 4008f10:	00800b44 	movi	r2,45
 4008f14:	80805526 	beq	r16,r2,400906c <_strtol_r+0x1c8>
 4008f18:	00800ac4 	movi	r2,43
 4008f1c:	80806026 	beq	r16,r2,40090a0 <_strtol_r+0x1fc>
 4008f20:	0029883a 	mov	r20,zero
 4008f24:	e0004726 	beq	fp,zero,4009044 <_strtol_r+0x1a0>
 4008f28:	00800404 	movi	r2,16
 4008f2c:	e0806626 	beq	fp,r2,40090c8 <_strtol_r+0x224>
 4008f30:	e027883a 	mov	r19,fp
 4008f34:	00a00034 	movhi	r2,32768
 4008f38:	a025003a 	cmpeq	r18,r20,zero
 4008f3c:	14a5c83a 	sub	r18,r2,r18
 4008f40:	9009883a 	mov	r4,r18
 4008f44:	980b883a 	mov	r5,r19
 4008f48:	40019bc0 	call	40019bc <__umodsi3>
 4008f4c:	9009883a 	mov	r4,r18
 4008f50:	980b883a 	mov	r5,r19
 4008f54:	d8800115 	stw	r2,4(sp)
 4008f58:	40019580 	call	4001958 <__udivsi3>
 4008f5c:	b407883a 	add	r3,r22,r16
 4008f60:	18c00043 	ldbu	r3,1(r3)
 4008f64:	102b883a 	mov	r21,r2
 4008f68:	0009883a 	mov	r4,zero
 4008f6c:	1940010c 	andi	r5,r3,4
 4008f70:	0005883a 	mov	r2,zero
 4008f74:	04800044 	movi	r18,1
 4008f78:	05ffffc4 	movi	r23,-1
 4008f7c:	28000f26 	beq	r5,zero,4008fbc <_strtol_r+0x118>
 4008f80:	843ff404 	addi	r16,r16,-48
 4008f84:	8700130e 	bge	r16,fp,4008fd4 <_strtol_r+0x130>
 4008f88:	15c00626 	beq	r2,r23,4008fa4 <_strtol_r+0x100>
 4008f8c:	a9002936 	bltu	r21,r4,4009034 <_strtol_r+0x190>
 4008f90:	25402626 	beq	r4,r21,400902c <_strtol_r+0x188>
 4008f94:	980b883a 	mov	r5,r19
 4008f98:	4001a140 	call	4001a14 <__mulsi3>
 4008f9c:	8089883a 	add	r4,r16,r2
 4008fa0:	00800044 	movi	r2,1
 4008fa4:	8c000003 	ldbu	r16,0(r17)
 4008fa8:	8c400044 	addi	r17,r17,1
 4008fac:	b407883a 	add	r3,r22,r16
 4008fb0:	18c00043 	ldbu	r3,1(r3)
 4008fb4:	1940010c 	andi	r5,r3,4
 4008fb8:	283ff11e 	bne	r5,zero,4008f80 <__alt_data_end+0xfc008f80>
 4008fbc:	18c000cc 	andi	r3,r3,3
 4008fc0:	18000426 	beq	r3,zero,4008fd4 <_strtol_r+0x130>
 4008fc4:	1c801d26 	beq	r3,r18,400903c <_strtol_r+0x198>
 4008fc8:	00c015c4 	movi	r3,87
 4008fcc:	80e1c83a 	sub	r16,r16,r3
 4008fd0:	873fed16 	blt	r16,fp,4008f88 <__alt_data_end+0xfc008f88>
 4008fd4:	00ffffc4 	movi	r3,-1
 4008fd8:	10c02826 	beq	r2,r3,400907c <_strtol_r+0x1d8>
 4008fdc:	a0001e1e 	bne	r20,zero,4009058 <_strtol_r+0x1b4>
 4008fe0:	d8c00017 	ldw	r3,0(sp)
 4008fe4:	18004326 	beq	r3,zero,40090f4 <_strtol_r+0x250>
 4008fe8:	10001d1e 	bne	r2,zero,4009060 <_strtol_r+0x1bc>
 4008fec:	dd800217 	ldw	r22,8(sp)
 4008ff0:	2005883a 	mov	r2,r4
 4008ff4:	d8c00017 	ldw	r3,0(sp)
 4008ff8:	1d800015 	stw	r22,0(r3)
 4008ffc:	dfc00d17 	ldw	ra,52(sp)
 4009000:	df000c17 	ldw	fp,48(sp)
 4009004:	ddc00b17 	ldw	r23,44(sp)
 4009008:	dd800a17 	ldw	r22,40(sp)
 400900c:	dd400917 	ldw	r21,36(sp)
 4009010:	dd000817 	ldw	r20,32(sp)
 4009014:	dcc00717 	ldw	r19,28(sp)
 4009018:	dc800617 	ldw	r18,24(sp)
 400901c:	dc400517 	ldw	r17,20(sp)
 4009020:	dc000417 	ldw	r16,16(sp)
 4009024:	dec00e04 	addi	sp,sp,56
 4009028:	f800283a 	ret
 400902c:	d8c00117 	ldw	r3,4(sp)
 4009030:	1c3fd80e 	bge	r3,r16,4008f94 <__alt_data_end+0xfc008f94>
 4009034:	00bfffc4 	movi	r2,-1
 4009038:	003fda06 	br	4008fa4 <__alt_data_end+0xfc008fa4>
 400903c:	00c00dc4 	movi	r3,55
 4009040:	003fe206 	br	4008fcc <__alt_data_end+0xfc008fcc>
 4009044:	00800c04 	movi	r2,48
 4009048:	80801926 	beq	r16,r2,40090b0 <_strtol_r+0x20c>
 400904c:	07000284 	movi	fp,10
 4009050:	e027883a 	mov	r19,fp
 4009054:	003fb706 	br	4008f34 <__alt_data_end+0xfc008f34>
 4009058:	0109c83a 	sub	r4,zero,r4
 400905c:	003fe006 	br	4008fe0 <__alt_data_end+0xfc008fe0>
 4009060:	2005883a 	mov	r2,r4
 4009064:	8dbfffc4 	addi	r22,r17,-1
 4009068:	003fe206 	br	4008ff4 <__alt_data_end+0xfc008ff4>
 400906c:	1c400084 	addi	r17,r3,2
 4009070:	1c000043 	ldbu	r16,1(r3)
 4009074:	05000044 	movi	r20,1
 4009078:	003faa06 	br	4008f24 <__alt_data_end+0xfc008f24>
 400907c:	d9000317 	ldw	r4,12(sp)
 4009080:	00c00884 	movi	r3,34
 4009084:	a005003a 	cmpeq	r2,r20,zero
 4009088:	20c00015 	stw	r3,0(r4)
 400908c:	00e00034 	movhi	r3,32768
 4009090:	1885c83a 	sub	r2,r3,r2
 4009094:	d8c00017 	ldw	r3,0(sp)
 4009098:	183ff21e 	bne	r3,zero,4009064 <__alt_data_end+0xfc009064>
 400909c:	003fd706 	br	4008ffc <__alt_data_end+0xfc008ffc>
 40090a0:	1c400084 	addi	r17,r3,2
 40090a4:	1c000043 	ldbu	r16,1(r3)
 40090a8:	0029883a 	mov	r20,zero
 40090ac:	003f9d06 	br	4008f24 <__alt_data_end+0xfc008f24>
 40090b0:	88800003 	ldbu	r2,0(r17)
 40090b4:	00c01604 	movi	r3,88
 40090b8:	108037cc 	andi	r2,r2,223
 40090bc:	10c00826 	beq	r2,r3,40090e0 <_strtol_r+0x23c>
 40090c0:	07000204 	movi	fp,8
 40090c4:	003f9a06 	br	4008f30 <__alt_data_end+0xfc008f30>
 40090c8:	00800c04 	movi	r2,48
 40090cc:	80bf981e 	bne	r16,r2,4008f30 <__alt_data_end+0xfc008f30>
 40090d0:	88800003 	ldbu	r2,0(r17)
 40090d4:	00c01604 	movi	r3,88
 40090d8:	108037cc 	andi	r2,r2,223
 40090dc:	10ff941e 	bne	r2,r3,4008f30 <__alt_data_end+0xfc008f30>
 40090e0:	04c00404 	movi	r19,16
 40090e4:	8c000043 	ldbu	r16,1(r17)
 40090e8:	9839883a 	mov	fp,r19
 40090ec:	8c400084 	addi	r17,r17,2
 40090f0:	003f9006 	br	4008f34 <__alt_data_end+0xfc008f34>
 40090f4:	2005883a 	mov	r2,r4
 40090f8:	003fc006 	br	4008ffc <__alt_data_end+0xfc008ffc>

040090fc <strtol>:
 40090fc:	008100b4 	movhi	r2,1026
 4009100:	10a8dd04 	addi	r2,r2,-23692
 4009104:	300f883a 	mov	r7,r6
 4009108:	280d883a 	mov	r6,r5
 400910c:	200b883a 	mov	r5,r4
 4009110:	11000017 	ldw	r4,0(r2)
 4009114:	4008ea41 	jmpi	4008ea4 <_strtol_r>

04009118 <_strtoll_r>:
 4009118:	008100b4 	movhi	r2,1026
 400911c:	deffef04 	addi	sp,sp,-68
 4009120:	10a8e004 	addi	r2,r2,-23680
 4009124:	dd800d15 	stw	r22,52(sp)
 4009128:	15800017 	ldw	r22,0(r2)
 400912c:	df000f15 	stw	fp,60(sp)
 4009130:	d9000515 	stw	r4,20(sp)
 4009134:	dfc01015 	stw	ra,64(sp)
 4009138:	ddc00e15 	stw	r23,56(sp)
 400913c:	dd400c15 	stw	r21,48(sp)
 4009140:	dd000b15 	stw	r20,44(sp)
 4009144:	dcc00a15 	stw	r19,40(sp)
 4009148:	dc800915 	stw	r18,36(sp)
 400914c:	dc400815 	stw	r17,32(sp)
 4009150:	dc000715 	stw	r16,28(sp)
 4009154:	d9400415 	stw	r5,16(sp)
 4009158:	d9800215 	stw	r6,8(sp)
 400915c:	3839883a 	mov	fp,r7
 4009160:	2809883a 	mov	r4,r5
 4009164:	22000003 	ldbu	r8,0(r4)
 4009168:	24400044 	addi	r17,r4,1
 400916c:	2007883a 	mov	r3,r4
 4009170:	b205883a 	add	r2,r22,r8
 4009174:	10800043 	ldbu	r2,1(r2)
 4009178:	8809883a 	mov	r4,r17
 400917c:	1080020c 	andi	r2,r2,8
 4009180:	103ff81e 	bne	r2,zero,4009164 <__alt_data_end+0xfc009164>
 4009184:	00800b44 	movi	r2,45
 4009188:	40807e26 	beq	r8,r2,4009384 <_strtoll_r+0x26c>
 400918c:	00800ac4 	movi	r2,43
 4009190:	40808126 	beq	r8,r2,4009398 <_strtoll_r+0x280>
 4009194:	d8000115 	stw	zero,4(sp)
 4009198:	e0000b26 	beq	fp,zero,40091c8 <_strtoll_r+0xb0>
 400919c:	00800404 	movi	r2,16
 40091a0:	e0808926 	beq	fp,r2,40093c8 <_strtoll_r+0x2b0>
 40091a4:	e00bd7fa 	srai	r5,fp,31
 40091a8:	d9000117 	ldw	r4,4(sp)
 40091ac:	e025883a 	mov	r18,fp
 40091b0:	d9400015 	stw	r5,0(sp)
 40091b4:	20000b1e 	bne	r4,zero,40091e4 <_strtoll_r+0xcc>
 40091b8:	04200034 	movhi	r16,32768
 40091bc:	843fffc4 	addi	r16,r16,-1
 40091c0:	053fffc4 	movi	r20,-1
 40091c4:	00000906 	br	40091ec <_strtoll_r+0xd4>
 40091c8:	00800c04 	movi	r2,48
 40091cc:	40807626 	beq	r8,r2,40093a8 <_strtoll_r+0x290>
 40091d0:	04800284 	movi	r18,10
 40091d4:	d8000015 	stw	zero,0(sp)
 40091d8:	9039883a 	mov	fp,r18
 40091dc:	d9000117 	ldw	r4,4(sp)
 40091e0:	203ff526 	beq	r4,zero,40091b8 <__alt_data_end+0xfc0091b8>
 40091e4:	0029883a 	mov	r20,zero
 40091e8:	04200034 	movhi	r16,32768
 40091ec:	d9c00017 	ldw	r7,0(sp)
 40091f0:	a009883a 	mov	r4,r20
 40091f4:	800b883a 	mov	r5,r16
 40091f8:	900d883a 	mov	r6,r18
 40091fc:	da000615 	stw	r8,24(sp)
 4009200:	401118c0 	call	401118c <__umoddi3>
 4009204:	d9c00017 	ldw	r7,0(sp)
 4009208:	a009883a 	mov	r4,r20
 400920c:	800b883a 	mov	r5,r16
 4009210:	900d883a 	mov	r6,r18
 4009214:	d8800315 	stw	r2,12(sp)
 4009218:	4010b900 	call	4010b90 <__udivdi3>
 400921c:	da000617 	ldw	r8,24(sp)
 4009220:	1829883a 	mov	r20,r3
 4009224:	882f883a 	mov	r23,r17
 4009228:	b207883a 	add	r3,r22,r8
 400922c:	19800043 	ldbu	r6,1(r3)
 4009230:	1021883a 	mov	r16,r2
 4009234:	000f883a 	mov	r7,zero
 4009238:	30c0010c 	andi	r3,r6,4
 400923c:	0009883a 	mov	r4,zero
 4009240:	000b883a 	mov	r5,zero
 4009244:	04400044 	movi	r17,1
 4009248:	057fffc4 	movi	r21,-1
 400924c:	18000d26 	beq	r3,zero,4009284 <_strtoll_r+0x16c>
 4009250:	44fff404 	addi	r19,r8,-48
 4009254:	9f00110e 	bge	r19,fp,400929c <_strtoll_r+0x184>
 4009258:	3d400426 	beq	r7,r21,400926c <_strtoll_r+0x154>
 400925c:	a1400236 	bltu	r20,r5,4009268 <_strtoll_r+0x150>
 4009260:	2d002a1e 	bne	r5,r20,400930c <_strtoll_r+0x1f4>
 4009264:	8100292e 	bgeu	r16,r4,400930c <_strtoll_r+0x1f4>
 4009268:	01ffffc4 	movi	r7,-1
 400926c:	ba000003 	ldbu	r8,0(r23)
 4009270:	bdc00044 	addi	r23,r23,1
 4009274:	b207883a 	add	r3,r22,r8
 4009278:	19800043 	ldbu	r6,1(r3)
 400927c:	30c0010c 	andi	r3,r6,4
 4009280:	183ff31e 	bne	r3,zero,4009250 <__alt_data_end+0xfc009250>
 4009284:	318000cc 	andi	r6,r6,3
 4009288:	30000426 	beq	r6,zero,400929c <_strtoll_r+0x184>
 400928c:	34402b26 	beq	r6,r17,400933c <_strtoll_r+0x224>
 4009290:	00c015c4 	movi	r3,87
 4009294:	40e7c83a 	sub	r19,r8,r3
 4009298:	9f3fef16 	blt	r19,fp,4009258 <__alt_data_end+0xfc009258>
 400929c:	00bfffc4 	movi	r2,-1
 40092a0:	38802c26 	beq	r7,r2,4009354 <_strtoll_r+0x23c>
 40092a4:	d8800117 	ldw	r2,4(sp)
 40092a8:	10000426 	beq	r2,zero,40092bc <_strtoll_r+0x1a4>
 40092ac:	0109c83a 	sub	r4,zero,r4
 40092b0:	2004c03a 	cmpne	r2,r4,zero
 40092b4:	0151c83a 	sub	r8,zero,r5
 40092b8:	408bc83a 	sub	r5,r8,r2
 40092bc:	d8800217 	ldw	r2,8(sp)
 40092c0:	10005026 	beq	r2,zero,4009404 <_strtoll_r+0x2ec>
 40092c4:	2005883a 	mov	r2,r4
 40092c8:	2807883a 	mov	r3,r5
 40092cc:	38002b1e 	bne	r7,zero,400937c <_strtoll_r+0x264>
 40092d0:	dd800417 	ldw	r22,16(sp)
 40092d4:	d9000217 	ldw	r4,8(sp)
 40092d8:	25800015 	stw	r22,0(r4)
 40092dc:	dfc01017 	ldw	ra,64(sp)
 40092e0:	df000f17 	ldw	fp,60(sp)
 40092e4:	ddc00e17 	ldw	r23,56(sp)
 40092e8:	dd800d17 	ldw	r22,52(sp)
 40092ec:	dd400c17 	ldw	r21,48(sp)
 40092f0:	dd000b17 	ldw	r20,44(sp)
 40092f4:	dcc00a17 	ldw	r19,40(sp)
 40092f8:	dc800917 	ldw	r18,36(sp)
 40092fc:	dc400817 	ldw	r17,32(sp)
 4009300:	dc000717 	ldw	r16,28(sp)
 4009304:	dec01104 	addi	sp,sp,68
 4009308:	f800283a 	ret
 400930c:	24000d26 	beq	r4,r16,4009344 <_strtoll_r+0x22c>
 4009310:	d9c00017 	ldw	r7,0(sp)
 4009314:	900d883a 	mov	r6,r18
 4009318:	4010a100 	call	4010a10 <__muldi3>
 400931c:	980bd7fa 	srai	r5,r19,31
 4009320:	9885883a 	add	r2,r19,r2
 4009324:	14d1803a 	cmpltu	r8,r2,r19
 4009328:	28c7883a 	add	r3,r5,r3
 400932c:	1009883a 	mov	r4,r2
 4009330:	40cb883a 	add	r5,r8,r3
 4009334:	01c00044 	movi	r7,1
 4009338:	003fcc06 	br	400926c <__alt_data_end+0xfc00926c>
 400933c:	00c00dc4 	movi	r3,55
 4009340:	003fd406 	br	4009294 <__alt_data_end+0xfc009294>
 4009344:	2d3ff21e 	bne	r5,r20,4009310 <__alt_data_end+0xfc009310>
 4009348:	d8800317 	ldw	r2,12(sp)
 400934c:	14ffc616 	blt	r2,r19,4009268 <__alt_data_end+0xfc009268>
 4009350:	003fef06 	br	4009310 <__alt_data_end+0xfc009310>
 4009354:	d9000117 	ldw	r4,4(sp)
 4009358:	2000271e 	bne	r4,zero,40093f8 <_strtoll_r+0x2e0>
 400935c:	00e00034 	movhi	r3,32768
 4009360:	18ffffc4 	addi	r3,r3,-1
 4009364:	3805883a 	mov	r2,r7
 4009368:	d9400517 	ldw	r5,20(sp)
 400936c:	01000884 	movi	r4,34
 4009370:	29000015 	stw	r4,0(r5)
 4009374:	d9000217 	ldw	r4,8(sp)
 4009378:	203fd826 	beq	r4,zero,40092dc <__alt_data_end+0xfc0092dc>
 400937c:	bdbfffc4 	addi	r22,r23,-1
 4009380:	003fd406 	br	40092d4 <__alt_data_end+0xfc0092d4>
 4009384:	00800044 	movi	r2,1
 4009388:	1c400084 	addi	r17,r3,2
 400938c:	1a000043 	ldbu	r8,1(r3)
 4009390:	d8800115 	stw	r2,4(sp)
 4009394:	003f8006 	br	4009198 <__alt_data_end+0xfc009198>
 4009398:	1c400084 	addi	r17,r3,2
 400939c:	1a000043 	ldbu	r8,1(r3)
 40093a0:	d8000115 	stw	zero,4(sp)
 40093a4:	003f7c06 	br	4009198 <__alt_data_end+0xfc009198>
 40093a8:	88800003 	ldbu	r2,0(r17)
 40093ac:	00c01604 	movi	r3,88
 40093b0:	108037cc 	andi	r2,r2,223
 40093b4:	10c00a26 	beq	r2,r3,40093e0 <_strtoll_r+0x2c8>
 40093b8:	04800204 	movi	r18,8
 40093bc:	d8000015 	stw	zero,0(sp)
 40093c0:	9039883a 	mov	fp,r18
 40093c4:	003f8506 	br	40091dc <__alt_data_end+0xfc0091dc>
 40093c8:	00800c04 	movi	r2,48
 40093cc:	4080101e 	bne	r8,r2,4009410 <_strtoll_r+0x2f8>
 40093d0:	88800003 	ldbu	r2,0(r17)
 40093d4:	00c01604 	movi	r3,88
 40093d8:	108037cc 	andi	r2,r2,223
 40093dc:	10c00c1e 	bne	r2,r3,4009410 <_strtoll_r+0x2f8>
 40093e0:	04800404 	movi	r18,16
 40093e4:	8a000043 	ldbu	r8,1(r17)
 40093e8:	d8000015 	stw	zero,0(sp)
 40093ec:	8c400084 	addi	r17,r17,2
 40093f0:	9039883a 	mov	fp,r18
 40093f4:	003f7906 	br	40091dc <__alt_data_end+0xfc0091dc>
 40093f8:	0005883a 	mov	r2,zero
 40093fc:	00e00034 	movhi	r3,32768
 4009400:	003fd906 	br	4009368 <__alt_data_end+0xfc009368>
 4009404:	2005883a 	mov	r2,r4
 4009408:	2807883a 	mov	r3,r5
 400940c:	003fb306 	br	40092dc <__alt_data_end+0xfc0092dc>
 4009410:	e025883a 	mov	r18,fp
 4009414:	d8000015 	stw	zero,0(sp)
 4009418:	003f7006 	br	40091dc <__alt_data_end+0xfc0091dc>

0400941c <_strtoul_r>:
 400941c:	008100b4 	movhi	r2,1026
 4009420:	defff204 	addi	sp,sp,-56
 4009424:	10a8e004 	addi	r2,r2,-23680
 4009428:	dd800a15 	stw	r22,40(sp)
 400942c:	15800017 	ldw	r22,0(r2)
 4009430:	df000c15 	stw	fp,48(sp)
 4009434:	dd400915 	stw	r21,36(sp)
 4009438:	d9000315 	stw	r4,12(sp)
 400943c:	dfc00d15 	stw	ra,52(sp)
 4009440:	ddc00b15 	stw	r23,44(sp)
 4009444:	dd000815 	stw	r20,32(sp)
 4009448:	dcc00715 	stw	r19,28(sp)
 400944c:	dc800615 	stw	r18,24(sp)
 4009450:	dc400515 	stw	r17,20(sp)
 4009454:	dc000415 	stw	r16,16(sp)
 4009458:	d9400015 	stw	r5,0(sp)
 400945c:	302b883a 	mov	r21,r6
 4009460:	3839883a 	mov	fp,r7
 4009464:	2809883a 	mov	r4,r5
 4009468:	24000003 	ldbu	r16,0(r4)
 400946c:	24400044 	addi	r17,r4,1
 4009470:	2007883a 	mov	r3,r4
 4009474:	b405883a 	add	r2,r22,r16
 4009478:	10800043 	ldbu	r2,1(r2)
 400947c:	8809883a 	mov	r4,r17
 4009480:	1080020c 	andi	r2,r2,8
 4009484:	103ff81e 	bne	r2,zero,4009468 <__alt_data_end+0xfc009468>
 4009488:	00800b44 	movi	r2,45
 400948c:	80805826 	beq	r16,r2,40095f0 <_strtoul_r+0x1d4>
 4009490:	00800ac4 	movi	r2,43
 4009494:	80805b26 	beq	r16,r2,4009604 <_strtoul_r+0x1e8>
 4009498:	d8000215 	stw	zero,8(sp)
 400949c:	e0000d26 	beq	fp,zero,40094d4 <_strtoul_r+0xb8>
 40094a0:	00800404 	movi	r2,16
 40094a4:	e0806626 	beq	fp,r2,4009640 <_strtoul_r+0x224>
 40094a8:	013fffc4 	movi	r4,-1
 40094ac:	e00b883a 	mov	r5,fp
 40094b0:	40019580 	call	4001958 <__udivsi3>
 40094b4:	e00b883a 	mov	r5,fp
 40094b8:	013fffc4 	movi	r4,-1
 40094bc:	1025883a 	mov	r18,r2
 40094c0:	40019bc0 	call	40019bc <__umodsi3>
 40094c4:	d8800115 	stw	r2,4(sp)
 40094c8:	e027883a 	mov	r19,fp
 40094cc:	902f883a 	mov	r23,r18
 40094d0:	00000806 	br	40094f4 <_strtoul_r+0xd8>
 40094d4:	00800c04 	movi	r2,48
 40094d8:	80804e26 	beq	r16,r2,4009614 <_strtoul_r+0x1f8>
 40094dc:	07000284 	movi	fp,10
 40094e0:	00c00144 	movi	r3,5
 40094e4:	05c666b4 	movhi	r23,6554
 40094e8:	d8c00115 	stw	r3,4(sp)
 40094ec:	bde66644 	addi	r23,r23,-26215
 40094f0:	e027883a 	mov	r19,fp
 40094f4:	b407883a 	add	r3,r22,r16
 40094f8:	18c00043 	ldbu	r3,1(r3)
 40094fc:	0005883a 	mov	r2,zero
 4009500:	0009883a 	mov	r4,zero
 4009504:	1940010c 	andi	r5,r3,4
 4009508:	04800044 	movi	r18,1
 400950c:	053fffc4 	movi	r20,-1
 4009510:	28000f26 	beq	r5,zero,4009550 <_strtoul_r+0x134>
 4009514:	843ff404 	addi	r16,r16,-48
 4009518:	8700130e 	bge	r16,fp,4009568 <_strtoul_r+0x14c>
 400951c:	15000626 	beq	r2,r20,4009538 <_strtoul_r+0x11c>
 4009520:	b9002836 	bltu	r23,r4,40095c4 <_strtoul_r+0x1a8>
 4009524:	25c02526 	beq	r4,r23,40095bc <_strtoul_r+0x1a0>
 4009528:	980b883a 	mov	r5,r19
 400952c:	4001a140 	call	4001a14 <__mulsi3>
 4009530:	8089883a 	add	r4,r16,r2
 4009534:	00800044 	movi	r2,1
 4009538:	8c000003 	ldbu	r16,0(r17)
 400953c:	8c400044 	addi	r17,r17,1
 4009540:	b407883a 	add	r3,r22,r16
 4009544:	18c00043 	ldbu	r3,1(r3)
 4009548:	1940010c 	andi	r5,r3,4
 400954c:	283ff11e 	bne	r5,zero,4009514 <__alt_data_end+0xfc009514>
 4009550:	18c000cc 	andi	r3,r3,3
 4009554:	18000426 	beq	r3,zero,4009568 <_strtoul_r+0x14c>
 4009558:	1c801c26 	beq	r3,r18,40095cc <_strtoul_r+0x1b0>
 400955c:	00c015c4 	movi	r3,87
 4009560:	80e1c83a 	sub	r16,r16,r3
 4009564:	873fed16 	blt	r16,fp,400951c <__alt_data_end+0xfc00951c>
 4009568:	10001a16 	blt	r2,zero,40095d4 <_strtoul_r+0x1b8>
 400956c:	d8c00217 	ldw	r3,8(sp)
 4009570:	18000126 	beq	r3,zero,4009578 <_strtoul_r+0x15c>
 4009574:	0109c83a 	sub	r4,zero,r4
 4009578:	a8000326 	beq	r21,zero,4009588 <_strtoul_r+0x16c>
 400957c:	dd000017 	ldw	r20,0(sp)
 4009580:	1000191e 	bne	r2,zero,40095e8 <_strtoul_r+0x1cc>
 4009584:	ad000015 	stw	r20,0(r21)
 4009588:	2005883a 	mov	r2,r4
 400958c:	dfc00d17 	ldw	ra,52(sp)
 4009590:	df000c17 	ldw	fp,48(sp)
 4009594:	ddc00b17 	ldw	r23,44(sp)
 4009598:	dd800a17 	ldw	r22,40(sp)
 400959c:	dd400917 	ldw	r21,36(sp)
 40095a0:	dd000817 	ldw	r20,32(sp)
 40095a4:	dcc00717 	ldw	r19,28(sp)
 40095a8:	dc800617 	ldw	r18,24(sp)
 40095ac:	dc400517 	ldw	r17,20(sp)
 40095b0:	dc000417 	ldw	r16,16(sp)
 40095b4:	dec00e04 	addi	sp,sp,56
 40095b8:	f800283a 	ret
 40095bc:	d8c00117 	ldw	r3,4(sp)
 40095c0:	1c3fd90e 	bge	r3,r16,4009528 <__alt_data_end+0xfc009528>
 40095c4:	00bfffc4 	movi	r2,-1
 40095c8:	003fdb06 	br	4009538 <__alt_data_end+0xfc009538>
 40095cc:	00c00dc4 	movi	r3,55
 40095d0:	003fe306 	br	4009560 <__alt_data_end+0xfc009560>
 40095d4:	d8c00317 	ldw	r3,12(sp)
 40095d8:	00800884 	movi	r2,34
 40095dc:	013fffc4 	movi	r4,-1
 40095e0:	18800015 	stw	r2,0(r3)
 40095e4:	a83fe826 	beq	r21,zero,4009588 <__alt_data_end+0xfc009588>
 40095e8:	8d3fffc4 	addi	r20,r17,-1
 40095ec:	003fe506 	br	4009584 <__alt_data_end+0xfc009584>
 40095f0:	1c400084 	addi	r17,r3,2
 40095f4:	1c000043 	ldbu	r16,1(r3)
 40095f8:	00c00044 	movi	r3,1
 40095fc:	d8c00215 	stw	r3,8(sp)
 4009600:	003fa606 	br	400949c <__alt_data_end+0xfc00949c>
 4009604:	1c400084 	addi	r17,r3,2
 4009608:	1c000043 	ldbu	r16,1(r3)
 400960c:	d8000215 	stw	zero,8(sp)
 4009610:	003fa206 	br	400949c <__alt_data_end+0xfc00949c>
 4009614:	88800003 	ldbu	r2,0(r17)
 4009618:	00c01604 	movi	r3,88
 400961c:	108037cc 	andi	r2,r2,223
 4009620:	10c00d26 	beq	r2,r3,4009658 <_strtoul_r+0x23c>
 4009624:	07000204 	movi	fp,8
 4009628:	00c001c4 	movi	r3,7
 400962c:	05c80034 	movhi	r23,8192
 4009630:	d8c00115 	stw	r3,4(sp)
 4009634:	bdffffc4 	addi	r23,r23,-1
 4009638:	e027883a 	mov	r19,fp
 400963c:	003fad06 	br	40094f4 <__alt_data_end+0xfc0094f4>
 4009640:	00800c04 	movi	r2,48
 4009644:	80800d1e 	bne	r16,r2,400967c <_strtoul_r+0x260>
 4009648:	88800003 	ldbu	r2,0(r17)
 400964c:	00c01604 	movi	r3,88
 4009650:	108037cc 	andi	r2,r2,223
 4009654:	10c0091e 	bne	r2,r3,400967c <_strtoul_r+0x260>
 4009658:	04c00404 	movi	r19,16
 400965c:	00c003c4 	movi	r3,15
 4009660:	04840034 	movhi	r18,4096
 4009664:	8c000043 	ldbu	r16,1(r17)
 4009668:	d8c00115 	stw	r3,4(sp)
 400966c:	8c400084 	addi	r17,r17,2
 4009670:	94bfffc4 	addi	r18,r18,-1
 4009674:	9839883a 	mov	fp,r19
 4009678:	003f9406 	br	40094cc <__alt_data_end+0xfc0094cc>
 400967c:	00c003c4 	movi	r3,15
 4009680:	05c40034 	movhi	r23,4096
 4009684:	d8c00115 	stw	r3,4(sp)
 4009688:	bdffffc4 	addi	r23,r23,-1
 400968c:	e027883a 	mov	r19,fp
 4009690:	003f9806 	br	40094f4 <__alt_data_end+0xfc0094f4>

04009694 <strtoul>:
 4009694:	008100b4 	movhi	r2,1026
 4009698:	10a8dd04 	addi	r2,r2,-23692
 400969c:	300f883a 	mov	r7,r6
 40096a0:	280d883a 	mov	r6,r5
 40096a4:	200b883a 	mov	r5,r4
 40096a8:	11000017 	ldw	r4,0(r2)
 40096ac:	400941c1 	jmpi	400941c <_strtoul_r>

040096b0 <_strtoull_r>:
 40096b0:	008100b4 	movhi	r2,1026
 40096b4:	deffef04 	addi	sp,sp,-68
 40096b8:	10a8e004 	addi	r2,r2,-23680
 40096bc:	dd800d15 	stw	r22,52(sp)
 40096c0:	15800017 	ldw	r22,0(r2)
 40096c4:	df000f15 	stw	fp,60(sp)
 40096c8:	d9000515 	stw	r4,20(sp)
 40096cc:	dfc01015 	stw	ra,64(sp)
 40096d0:	ddc00e15 	stw	r23,56(sp)
 40096d4:	dd400c15 	stw	r21,48(sp)
 40096d8:	dd000b15 	stw	r20,44(sp)
 40096dc:	dcc00a15 	stw	r19,40(sp)
 40096e0:	dc800915 	stw	r18,36(sp)
 40096e4:	dc400815 	stw	r17,32(sp)
 40096e8:	dc000715 	stw	r16,28(sp)
 40096ec:	d9400215 	stw	r5,8(sp)
 40096f0:	d9800115 	stw	r6,4(sp)
 40096f4:	3839883a 	mov	fp,r7
 40096f8:	2809883a 	mov	r4,r5
 40096fc:	22000003 	ldbu	r8,0(r4)
 4009700:	24400044 	addi	r17,r4,1
 4009704:	2007883a 	mov	r3,r4
 4009708:	b205883a 	add	r2,r22,r8
 400970c:	10800043 	ldbu	r2,1(r2)
 4009710:	8809883a 	mov	r4,r17
 4009714:	1080020c 	andi	r2,r2,8
 4009718:	103ff81e 	bne	r2,zero,40096fc <__alt_data_end+0xfc0096fc>
 400971c:	00800b44 	movi	r2,45
 4009720:	40807726 	beq	r8,r2,4009900 <_strtoull_r+0x250>
 4009724:	00800ac4 	movi	r2,43
 4009728:	40807a26 	beq	r8,r2,4009914 <_strtoull_r+0x264>
 400972c:	d8000415 	stw	zero,16(sp)
 4009730:	e0001426 	beq	fp,zero,4009784 <_strtoull_r+0xd4>
 4009734:	00800404 	movi	r2,16
 4009738:	e0808826 	beq	fp,r2,400995c <_strtoull_r+0x2ac>
 400973c:	e025d7fa 	srai	r18,fp,31
 4009740:	013fffc4 	movi	r4,-1
 4009744:	200b883a 	mov	r5,r4
 4009748:	e00d883a 	mov	r6,fp
 400974c:	900f883a 	mov	r7,r18
 4009750:	da000615 	stw	r8,24(sp)
 4009754:	4010b900 	call	4010b90 <__udivdi3>
 4009758:	013fffc4 	movi	r4,-1
 400975c:	e00d883a 	mov	r6,fp
 4009760:	900f883a 	mov	r7,r18
 4009764:	200b883a 	mov	r5,r4
 4009768:	1021883a 	mov	r16,r2
 400976c:	182f883a 	mov	r23,r3
 4009770:	401118c0 	call	401118c <__umoddi3>
 4009774:	d8800315 	stw	r2,12(sp)
 4009778:	df000015 	stw	fp,0(sp)
 400977c:	da000617 	ldw	r8,24(sp)
 4009780:	00000c06 	br	40097b4 <_strtoull_r+0x104>
 4009784:	00800c04 	movi	r2,48
 4009788:	40806626 	beq	r8,r2,4009924 <_strtoull_r+0x274>
 400978c:	00800284 	movi	r2,10
 4009790:	00c00144 	movi	r3,5
 4009794:	042666b4 	movhi	r16,39322
 4009798:	05c666b4 	movhi	r23,6554
 400979c:	d8800015 	stw	r2,0(sp)
 40097a0:	d8c00315 	stw	r3,12(sp)
 40097a4:	84266644 	addi	r16,r16,-26215
 40097a8:	bde66644 	addi	r23,r23,-26215
 40097ac:	0025883a 	mov	r18,zero
 40097b0:	1039883a 	mov	fp,r2
 40097b4:	b205883a 	add	r2,r22,r8
 40097b8:	11800043 	ldbu	r6,1(r2)
 40097bc:	882b883a 	mov	r21,r17
 40097c0:	000f883a 	mov	r7,zero
 40097c4:	3080010c 	andi	r2,r6,4
 40097c8:	0009883a 	mov	r4,zero
 40097cc:	000b883a 	mov	r5,zero
 40097d0:	04400044 	movi	r17,1
 40097d4:	053fffc4 	movi	r20,-1
 40097d8:	10000d26 	beq	r2,zero,4009810 <_strtoull_r+0x160>
 40097dc:	44fff404 	addi	r19,r8,-48
 40097e0:	9f00110e 	bge	r19,fp,4009828 <_strtoull_r+0x178>
 40097e4:	3d000426 	beq	r7,r20,40097f8 <_strtoull_r+0x148>
 40097e8:	b9400236 	bltu	r23,r5,40097f4 <_strtoull_r+0x144>
 40097ec:	2dc0291e 	bne	r5,r23,4009894 <_strtoull_r+0x1e4>
 40097f0:	8100282e 	bgeu	r16,r4,4009894 <_strtoull_r+0x1e4>
 40097f4:	01ffffc4 	movi	r7,-1
 40097f8:	aa000003 	ldbu	r8,0(r21)
 40097fc:	ad400044 	addi	r21,r21,1
 4009800:	b205883a 	add	r2,r22,r8
 4009804:	11800043 	ldbu	r6,1(r2)
 4009808:	3080010c 	andi	r2,r6,4
 400980c:	103ff31e 	bne	r2,zero,40097dc <__alt_data_end+0xfc0097dc>
 4009810:	318000cc 	andi	r6,r6,3
 4009814:	30000426 	beq	r6,zero,4009828 <_strtoull_r+0x178>
 4009818:	34402a26 	beq	r6,r17,40098c4 <_strtoull_r+0x214>
 400981c:	00c015c4 	movi	r3,87
 4009820:	40e7c83a 	sub	r19,r8,r3
 4009824:	9f3fef16 	blt	r19,fp,40097e4 <__alt_data_end+0xfc0097e4>
 4009828:	38002c16 	blt	r7,zero,40098dc <_strtoull_r+0x22c>
 400982c:	d8c00417 	ldw	r3,16(sp)
 4009830:	18000426 	beq	r3,zero,4009844 <_strtoull_r+0x194>
 4009834:	0109c83a 	sub	r4,zero,r4
 4009838:	2004c03a 	cmpne	r2,r4,zero
 400983c:	0151c83a 	sub	r8,zero,r5
 4009840:	408bc83a 	sub	r5,r8,r2
 4009844:	d8800117 	ldw	r2,4(sp)
 4009848:	10000426 	beq	r2,zero,400985c <_strtoull_r+0x1ac>
 400984c:	dd000217 	ldw	r20,8(sp)
 4009850:	3800291e 	bne	r7,zero,40098f8 <_strtoull_r+0x248>
 4009854:	d8c00117 	ldw	r3,4(sp)
 4009858:	1d000015 	stw	r20,0(r3)
 400985c:	2005883a 	mov	r2,r4
 4009860:	2807883a 	mov	r3,r5
 4009864:	dfc01017 	ldw	ra,64(sp)
 4009868:	df000f17 	ldw	fp,60(sp)
 400986c:	ddc00e17 	ldw	r23,56(sp)
 4009870:	dd800d17 	ldw	r22,52(sp)
 4009874:	dd400c17 	ldw	r21,48(sp)
 4009878:	dd000b17 	ldw	r20,44(sp)
 400987c:	dcc00a17 	ldw	r19,40(sp)
 4009880:	dc800917 	ldw	r18,36(sp)
 4009884:	dc400817 	ldw	r17,32(sp)
 4009888:	dc000717 	ldw	r16,28(sp)
 400988c:	dec01104 	addi	sp,sp,68
 4009890:	f800283a 	ret
 4009894:	24000d26 	beq	r4,r16,40098cc <_strtoull_r+0x21c>
 4009898:	d9800017 	ldw	r6,0(sp)
 400989c:	900f883a 	mov	r7,r18
 40098a0:	4010a100 	call	4010a10 <__muldi3>
 40098a4:	980bd7fa 	srai	r5,r19,31
 40098a8:	9885883a 	add	r2,r19,r2
 40098ac:	14d1803a 	cmpltu	r8,r2,r19
 40098b0:	28c7883a 	add	r3,r5,r3
 40098b4:	1009883a 	mov	r4,r2
 40098b8:	40cb883a 	add	r5,r8,r3
 40098bc:	01c00044 	movi	r7,1
 40098c0:	003fcd06 	br	40097f8 <__alt_data_end+0xfc0097f8>
 40098c4:	00c00dc4 	movi	r3,55
 40098c8:	003fd506 	br	4009820 <__alt_data_end+0xfc009820>
 40098cc:	2dfff21e 	bne	r5,r23,4009898 <__alt_data_end+0xfc009898>
 40098d0:	d8c00317 	ldw	r3,12(sp)
 40098d4:	1cffc716 	blt	r3,r19,40097f4 <__alt_data_end+0xfc0097f4>
 40098d8:	003fef06 	br	4009898 <__alt_data_end+0xfc009898>
 40098dc:	d8c00517 	ldw	r3,20(sp)
 40098e0:	00800884 	movi	r2,34
 40098e4:	013fffc4 	movi	r4,-1
 40098e8:	18800015 	stw	r2,0(r3)
 40098ec:	d8800117 	ldw	r2,4(sp)
 40098f0:	200b883a 	mov	r5,r4
 40098f4:	103fd926 	beq	r2,zero,400985c <__alt_data_end+0xfc00985c>
 40098f8:	ad3fffc4 	addi	r20,r21,-1
 40098fc:	003fd506 	br	4009854 <__alt_data_end+0xfc009854>
 4009900:	00800044 	movi	r2,1
 4009904:	1c400084 	addi	r17,r3,2
 4009908:	1a000043 	ldbu	r8,1(r3)
 400990c:	d8800415 	stw	r2,16(sp)
 4009910:	003f8706 	br	4009730 <__alt_data_end+0xfc009730>
 4009914:	1c400084 	addi	r17,r3,2
 4009918:	1a000043 	ldbu	r8,1(r3)
 400991c:	d8000415 	stw	zero,16(sp)
 4009920:	003f8306 	br	4009730 <__alt_data_end+0xfc009730>
 4009924:	88800003 	ldbu	r2,0(r17)
 4009928:	00c01604 	movi	r3,88
 400992c:	108037cc 	andi	r2,r2,223
 4009930:	10c01026 	beq	r2,r3,4009974 <_strtoull_r+0x2c4>
 4009934:	00c00204 	movi	r3,8
 4009938:	008001c4 	movi	r2,7
 400993c:	043fffc4 	movi	r16,-1
 4009940:	05c80034 	movhi	r23,8192
 4009944:	d8c00015 	stw	r3,0(sp)
 4009948:	d8800315 	stw	r2,12(sp)
 400994c:	bc2f883a 	add	r23,r23,r16
 4009950:	0025883a 	mov	r18,zero
 4009954:	1839883a 	mov	fp,r3
 4009958:	003f9606 	br	40097b4 <__alt_data_end+0xfc0097b4>
 400995c:	00800c04 	movi	r2,48
 4009960:	4080101e 	bne	r8,r2,40099a4 <_strtoull_r+0x2f4>
 4009964:	88800003 	ldbu	r2,0(r17)
 4009968:	00c01604 	movi	r3,88
 400996c:	108037cc 	andi	r2,r2,223
 4009970:	10c0141e 	bne	r2,r3,40099c4 <_strtoull_r+0x314>
 4009974:	00c00404 	movi	r3,16
 4009978:	008003c4 	movi	r2,15
 400997c:	043fffc4 	movi	r16,-1
 4009980:	05c40034 	movhi	r23,4096
 4009984:	8a000043 	ldbu	r8,1(r17)
 4009988:	d8c00015 	stw	r3,0(sp)
 400998c:	d8800315 	stw	r2,12(sp)
 4009990:	8c400084 	addi	r17,r17,2
 4009994:	bc2f883a 	add	r23,r23,r16
 4009998:	0025883a 	mov	r18,zero
 400999c:	1839883a 	mov	fp,r3
 40099a0:	003f8406 	br	40097b4 <__alt_data_end+0xfc0097b4>
 40099a4:	008003c4 	movi	r2,15
 40099a8:	d8800315 	stw	r2,12(sp)
 40099ac:	043fffc4 	movi	r16,-1
 40099b0:	05c40034 	movhi	r23,4096
 40099b4:	bc2f883a 	add	r23,r23,r16
 40099b8:	df000015 	stw	fp,0(sp)
 40099bc:	0025883a 	mov	r18,zero
 40099c0:	003f7c06 	br	40097b4 <__alt_data_end+0xfc0097b4>
 40099c4:	00c003c4 	movi	r3,15
 40099c8:	d8c00315 	stw	r3,12(sp)
 40099cc:	003ff706 	br	40099ac <__alt_data_end+0xfc0099ac>

040099d0 <___svfprintf_internal_r>:
 40099d0:	deffb704 	addi	sp,sp,-292
 40099d4:	dfc04815 	stw	ra,288(sp)
 40099d8:	ddc04615 	stw	r23,280(sp)
 40099dc:	d9402d15 	stw	r5,180(sp)
 40099e0:	d9003915 	stw	r4,228(sp)
 40099e4:	302f883a 	mov	r23,r6
 40099e8:	d9c02e15 	stw	r7,184(sp)
 40099ec:	df004715 	stw	fp,284(sp)
 40099f0:	dd804515 	stw	r22,276(sp)
 40099f4:	dd404415 	stw	r21,272(sp)
 40099f8:	dd004315 	stw	r20,268(sp)
 40099fc:	dcc04215 	stw	r19,264(sp)
 4009a00:	dc804115 	stw	r18,260(sp)
 4009a04:	dc404015 	stw	r17,256(sp)
 4009a08:	dc003f15 	stw	r16,252(sp)
 4009a0c:	40069a00 	call	40069a0 <_localeconv_r>
 4009a10:	10800017 	ldw	r2,0(r2)
 4009a14:	1009883a 	mov	r4,r2
 4009a18:	d8803415 	stw	r2,208(sp)
 4009a1c:	40044d40 	call	40044d4 <strlen>
 4009a20:	d8c02d17 	ldw	r3,180(sp)
 4009a24:	d8803815 	stw	r2,224(sp)
 4009a28:	1880030b 	ldhu	r2,12(r3)
 4009a2c:	1080200c 	andi	r2,r2,128
 4009a30:	10000226 	beq	r2,zero,4009a3c <___svfprintf_internal_r+0x6c>
 4009a34:	18800417 	ldw	r2,16(r3)
 4009a38:	1006b126 	beq	r2,zero,400b500 <___svfprintf_internal_r+0x1b30>
 4009a3c:	dcc03917 	ldw	r19,228(sp)
 4009a40:	d8c00404 	addi	r3,sp,16
 4009a44:	054100b4 	movhi	r21,1026
 4009a48:	d9001e04 	addi	r4,sp,120
 4009a4c:	ad60db84 	addi	r21,r21,-31890
 4009a50:	d8c01e15 	stw	r3,120(sp)
 4009a54:	d8002015 	stw	zero,128(sp)
 4009a58:	d8001f15 	stw	zero,124(sp)
 4009a5c:	d8003315 	stw	zero,204(sp)
 4009a60:	d8003615 	stw	zero,216(sp)
 4009a64:	d8003715 	stw	zero,220(sp)
 4009a68:	1811883a 	mov	r8,r3
 4009a6c:	d8003a15 	stw	zero,232(sp)
 4009a70:	d8003b15 	stw	zero,236(sp)
 4009a74:	d8002f15 	stw	zero,188(sp)
 4009a78:	d9002815 	stw	r4,160(sp)
 4009a7c:	b8800007 	ldb	r2,0(r23)
 4009a80:	10027726 	beq	r2,zero,400a460 <___svfprintf_internal_r+0xa90>
 4009a84:	00c00944 	movi	r3,37
 4009a88:	b823883a 	mov	r17,r23
 4009a8c:	10c0021e 	bne	r2,r3,4009a98 <___svfprintf_internal_r+0xc8>
 4009a90:	00001406 	br	4009ae4 <___svfprintf_internal_r+0x114>
 4009a94:	10c00326 	beq	r2,r3,4009aa4 <___svfprintf_internal_r+0xd4>
 4009a98:	8c400044 	addi	r17,r17,1
 4009a9c:	88800007 	ldb	r2,0(r17)
 4009aa0:	103ffc1e 	bne	r2,zero,4009a94 <__alt_data_end+0xfc009a94>
 4009aa4:	8de1c83a 	sub	r16,r17,r23
 4009aa8:	80000e26 	beq	r16,zero,4009ae4 <___svfprintf_internal_r+0x114>
 4009aac:	d8c02017 	ldw	r3,128(sp)
 4009ab0:	d8801f17 	ldw	r2,124(sp)
 4009ab4:	45c00015 	stw	r23,0(r8)
 4009ab8:	1c07883a 	add	r3,r3,r16
 4009abc:	10800044 	addi	r2,r2,1
 4009ac0:	d8c02015 	stw	r3,128(sp)
 4009ac4:	44000115 	stw	r16,4(r8)
 4009ac8:	d8801f15 	stw	r2,124(sp)
 4009acc:	00c001c4 	movi	r3,7
 4009ad0:	18809916 	blt	r3,r2,4009d38 <___svfprintf_internal_r+0x368>
 4009ad4:	42000204 	addi	r8,r8,8
 4009ad8:	d9402f17 	ldw	r5,188(sp)
 4009adc:	2c0b883a 	add	r5,r5,r16
 4009ae0:	d9402f15 	stw	r5,188(sp)
 4009ae4:	88800007 	ldb	r2,0(r17)
 4009ae8:	10009a26 	beq	r2,zero,4009d54 <___svfprintf_internal_r+0x384>
 4009aec:	8dc00044 	addi	r23,r17,1
 4009af0:	8c400047 	ldb	r17,1(r17)
 4009af4:	0021883a 	mov	r16,zero
 4009af8:	00bfffc4 	movi	r2,-1
 4009afc:	0025883a 	mov	r18,zero
 4009b00:	dc002905 	stb	r16,164(sp)
 4009b04:	d8002785 	stb	zero,158(sp)
 4009b08:	d8002b05 	stb	zero,172(sp)
 4009b0c:	d8802a15 	stw	r2,168(sp)
 4009b10:	d8003115 	stw	zero,196(sp)
 4009b14:	05001604 	movi	r20,88
 4009b18:	05800244 	movi	r22,9
 4009b1c:	4039883a 	mov	fp,r8
 4009b20:	9021883a 	mov	r16,r18
 4009b24:	bdc00044 	addi	r23,r23,1
 4009b28:	88bff804 	addi	r2,r17,-32
 4009b2c:	a0831e36 	bltu	r20,r2,400a7a8 <___svfprintf_internal_r+0xdd8>
 4009b30:	100490ba 	slli	r2,r2,2
 4009b34:	00c10074 	movhi	r3,1025
 4009b38:	18e6d204 	addi	r3,r3,-25784
 4009b3c:	10c5883a 	add	r2,r2,r3
 4009b40:	10800017 	ldw	r2,0(r2)
 4009b44:	1000683a 	jmp	r2
 4009b48:	0400a6f0 	cmpltui	r16,zero,667
 4009b4c:	0400a7a8 	cmpgeui	r16,zero,670
 4009b50:	0400a7a8 	cmpgeui	r16,zero,670
 4009b54:	0400a6e4 	muli	r16,zero,667
 4009b58:	0400a7a8 	cmpgeui	r16,zero,670
 4009b5c:	0400a7a8 	cmpgeui	r16,zero,670
 4009b60:	0400a7a8 	cmpgeui	r16,zero,670
 4009b64:	0400a7a8 	cmpgeui	r16,zero,670
 4009b68:	0400a7a8 	cmpgeui	r16,zero,670
 4009b6c:	0400a7a8 	cmpgeui	r16,zero,670
 4009b70:	04009db0 	cmpltui	r16,zero,630
 4009b74:	0400a5f4 	movhi	r16,663
 4009b78:	0400a7a8 	cmpgeui	r16,zero,670
 4009b7c:	04009cbc 	xorhi	r16,zero,626
 4009b80:	04009dd4 	movui	r16,631
 4009b84:	0400a7a8 	cmpgeui	r16,zero,670
 4009b88:	04009e60 	cmpeqi	r16,zero,633
 4009b8c:	04009e24 	muli	r16,zero,632
 4009b90:	04009e24 	muli	r16,zero,632
 4009b94:	04009e24 	muli	r16,zero,632
 4009b98:	04009e24 	muli	r16,zero,632
 4009b9c:	04009e24 	muli	r16,zero,632
 4009ba0:	04009e24 	muli	r16,zero,632
 4009ba4:	04009e24 	muli	r16,zero,632
 4009ba8:	04009e24 	muli	r16,zero,632
 4009bac:	04009e24 	muli	r16,zero,632
 4009bb0:	0400a7a8 	cmpgeui	r16,zero,670
 4009bb4:	0400a7a8 	cmpgeui	r16,zero,670
 4009bb8:	0400a7a8 	cmpgeui	r16,zero,670
 4009bbc:	0400a7a8 	cmpgeui	r16,zero,670
 4009bc0:	0400a7a8 	cmpgeui	r16,zero,670
 4009bc4:	0400a7a8 	cmpgeui	r16,zero,670
 4009bc8:	0400a7a8 	cmpgeui	r16,zero,670
 4009bcc:	0400a7a8 	cmpgeui	r16,zero,670
 4009bd0:	0400a7a8 	cmpgeui	r16,zero,670
 4009bd4:	0400a7a8 	cmpgeui	r16,zero,670
 4009bd8:	04009f24 	muli	r16,zero,636
 4009bdc:	04009e6c 	andhi	r16,zero,633
 4009be0:	0400a7a8 	cmpgeui	r16,zero,670
 4009be4:	04009e6c 	andhi	r16,zero,633
 4009be8:	0400a7a8 	cmpgeui	r16,zero,670
 4009bec:	0400a7a8 	cmpgeui	r16,zero,670
 4009bf0:	0400a7a8 	cmpgeui	r16,zero,670
 4009bf4:	0400a7a8 	cmpgeui	r16,zero,670
 4009bf8:	04009f18 	cmpnei	r16,zero,636
 4009bfc:	0400a7a8 	cmpgeui	r16,zero,670
 4009c00:	0400a7a8 	cmpgeui	r16,zero,670
 4009c04:	04009fec 	andhi	r16,zero,639
 4009c08:	0400a7a8 	cmpgeui	r16,zero,670
 4009c0c:	0400a7a8 	cmpgeui	r16,zero,670
 4009c10:	0400a7a8 	cmpgeui	r16,zero,670
 4009c14:	0400a7a8 	cmpgeui	r16,zero,670
 4009c18:	0400a7a8 	cmpgeui	r16,zero,670
 4009c1c:	0400a468 	cmpgeui	r16,zero,657
 4009c20:	0400a7a8 	cmpgeui	r16,zero,670
 4009c24:	0400a7a8 	cmpgeui	r16,zero,670
 4009c28:	0400a4d4 	movui	r16,659
 4009c2c:	0400a7a8 	cmpgeui	r16,zero,670
 4009c30:	0400a7a8 	cmpgeui	r16,zero,670
 4009c34:	0400a7a8 	cmpgeui	r16,zero,670
 4009c38:	0400a7a8 	cmpgeui	r16,zero,670
 4009c3c:	0400a7a8 	cmpgeui	r16,zero,670
 4009c40:	0400a7a8 	cmpgeui	r16,zero,670
 4009c44:	0400a7a8 	cmpgeui	r16,zero,670
 4009c48:	0400a7a8 	cmpgeui	r16,zero,670
 4009c4c:	0400a7a8 	cmpgeui	r16,zero,670
 4009c50:	0400a7a8 	cmpgeui	r16,zero,670
 4009c54:	0400a590 	cmplti	r16,zero,662
 4009c58:	0400a710 	cmplti	r16,zero,668
 4009c5c:	04009e6c 	andhi	r16,zero,633
 4009c60:	04009e6c 	andhi	r16,zero,633
 4009c64:	04009e6c 	andhi	r16,zero,633
 4009c68:	0400a784 	movi	r16,670
 4009c6c:	0400a710 	cmplti	r16,zero,668
 4009c70:	0400a7a8 	cmpgeui	r16,zero,670
 4009c74:	0400a7a8 	cmpgeui	r16,zero,670
 4009c78:	0400a730 	cmpltui	r16,zero,668
 4009c7c:	0400a7a8 	cmpgeui	r16,zero,670
 4009c80:	0400a744 	movi	r16,669
 4009c84:	0400a5d4 	movui	r16,663
 4009c88:	04009cc8 	cmpgei	r16,zero,627
 4009c8c:	0400a60c 	andi	r16,zero,664
 4009c90:	0400a7a8 	cmpgeui	r16,zero,670
 4009c94:	0400a618 	cmpnei	r16,zero,664
 4009c98:	0400a7a8 	cmpgeui	r16,zero,670
 4009c9c:	0400a67c 	xorhi	r16,zero,665
 4009ca0:	0400a7a8 	cmpgeui	r16,zero,670
 4009ca4:	0400a7a8 	cmpgeui	r16,zero,670
 4009ca8:	0400a69c 	xori	r16,zero,666
 4009cac:	d8c03117 	ldw	r3,196(sp)
 4009cb0:	d8802e15 	stw	r2,184(sp)
 4009cb4:	00c7c83a 	sub	r3,zero,r3
 4009cb8:	d8c03115 	stw	r3,196(sp)
 4009cbc:	84000114 	ori	r16,r16,4
 4009cc0:	bc400007 	ldb	r17,0(r23)
 4009cc4:	003f9706 	br	4009b24 <__alt_data_end+0xfc009b24>
 4009cc8:	00800c04 	movi	r2,48
 4009ccc:	d8802705 	stb	r2,156(sp)
 4009cd0:	00801e04 	movi	r2,120
 4009cd4:	d8802745 	stb	r2,157(sp)
 4009cd8:	d9002a17 	ldw	r4,168(sp)
 4009cdc:	d8802e17 	ldw	r2,184(sp)
 4009ce0:	d8002785 	stb	zero,158(sp)
 4009ce4:	e011883a 	mov	r8,fp
 4009ce8:	10c00104 	addi	r3,r2,4
 4009cec:	15000017 	ldw	r20,0(r2)
 4009cf0:	002d883a 	mov	r22,zero
 4009cf4:	80800094 	ori	r2,r16,2
 4009cf8:	2002b616 	blt	r4,zero,400a7d4 <___svfprintf_internal_r+0xe04>
 4009cfc:	00bfdfc4 	movi	r2,-129
 4009d00:	80a4703a 	and	r18,r16,r2
 4009d04:	d8c02e15 	stw	r3,184(sp)
 4009d08:	94800094 	ori	r18,r18,2
 4009d0c:	a002a01e 	bne	r20,zero,400a790 <___svfprintf_internal_r+0xdc0>
 4009d10:	014100b4 	movhi	r5,1026
 4009d14:	2960d404 	addi	r5,r5,-31920
 4009d18:	d9403a15 	stw	r5,232(sp)
 4009d1c:	04401e04 	movi	r17,120
 4009d20:	d8c02a17 	ldw	r3,168(sp)
 4009d24:	0039883a 	mov	fp,zero
 4009d28:	1801e626 	beq	r3,zero,400a4c4 <___svfprintf_internal_r+0xaf4>
 4009d2c:	0029883a 	mov	r20,zero
 4009d30:	002d883a 	mov	r22,zero
 4009d34:	00020506 	br	400a54c <___svfprintf_internal_r+0xb7c>
 4009d38:	d9402d17 	ldw	r5,180(sp)
 4009d3c:	d9801e04 	addi	r6,sp,120
 4009d40:	9809883a 	mov	r4,r19
 4009d44:	400f3c40 	call	400f3c4 <__ssprint_r>
 4009d48:	1000081e 	bne	r2,zero,4009d6c <___svfprintf_internal_r+0x39c>
 4009d4c:	da000404 	addi	r8,sp,16
 4009d50:	003f6106 	br	4009ad8 <__alt_data_end+0xfc009ad8>
 4009d54:	d8802017 	ldw	r2,128(sp)
 4009d58:	10000426 	beq	r2,zero,4009d6c <___svfprintf_internal_r+0x39c>
 4009d5c:	d9402d17 	ldw	r5,180(sp)
 4009d60:	d9003917 	ldw	r4,228(sp)
 4009d64:	d9801e04 	addi	r6,sp,120
 4009d68:	400f3c40 	call	400f3c4 <__ssprint_r>
 4009d6c:	d8802d17 	ldw	r2,180(sp)
 4009d70:	10c0030b 	ldhu	r3,12(r2)
 4009d74:	d8802f17 	ldw	r2,188(sp)
 4009d78:	18c0100c 	andi	r3,r3,64
 4009d7c:	1806251e 	bne	r3,zero,400b614 <___svfprintf_internal_r+0x1c44>
 4009d80:	dfc04817 	ldw	ra,288(sp)
 4009d84:	df004717 	ldw	fp,284(sp)
 4009d88:	ddc04617 	ldw	r23,280(sp)
 4009d8c:	dd804517 	ldw	r22,276(sp)
 4009d90:	dd404417 	ldw	r21,272(sp)
 4009d94:	dd004317 	ldw	r20,268(sp)
 4009d98:	dcc04217 	ldw	r19,264(sp)
 4009d9c:	dc804117 	ldw	r18,260(sp)
 4009da0:	dc404017 	ldw	r17,256(sp)
 4009da4:	dc003f17 	ldw	r16,252(sp)
 4009da8:	dec04904 	addi	sp,sp,292
 4009dac:	f800283a 	ret
 4009db0:	d9002e17 	ldw	r4,184(sp)
 4009db4:	d9402e17 	ldw	r5,184(sp)
 4009db8:	21000017 	ldw	r4,0(r4)
 4009dbc:	28800104 	addi	r2,r5,4
 4009dc0:	d9003115 	stw	r4,196(sp)
 4009dc4:	203fb916 	blt	r4,zero,4009cac <__alt_data_end+0xfc009cac>
 4009dc8:	d8802e15 	stw	r2,184(sp)
 4009dcc:	bc400007 	ldb	r17,0(r23)
 4009dd0:	003f5406 	br	4009b24 <__alt_data_end+0xfc009b24>
 4009dd4:	bc400007 	ldb	r17,0(r23)
 4009dd8:	01000a84 	movi	r4,42
 4009ddc:	b8c00044 	addi	r3,r23,1
 4009de0:	89076926 	beq	r17,r4,400bb88 <___svfprintf_internal_r+0x21b8>
 4009de4:	8cbff404 	addi	r18,r17,-48
 4009de8:	b486b936 	bltu	r22,r18,400b8d0 <___svfprintf_internal_r+0x1f00>
 4009dec:	0009883a 	mov	r4,zero
 4009df0:	1823883a 	mov	r17,r3
 4009df4:	01400284 	movi	r5,10
 4009df8:	4001a140 	call	4001a14 <__mulsi3>
 4009dfc:	88c00007 	ldb	r3,0(r17)
 4009e00:	1489883a 	add	r4,r2,r18
 4009e04:	8dc00044 	addi	r23,r17,1
 4009e08:	1cbff404 	addi	r18,r3,-48
 4009e0c:	b823883a 	mov	r17,r23
 4009e10:	b4bff82e 	bgeu	r22,r18,4009df4 <__alt_data_end+0xfc009df4>
 4009e14:	1823883a 	mov	r17,r3
 4009e18:	20060416 	blt	r4,zero,400b62c <___svfprintf_internal_r+0x1c5c>
 4009e1c:	d9002a15 	stw	r4,168(sp)
 4009e20:	003f4106 	br	4009b28 <__alt_data_end+0xfc009b28>
 4009e24:	8cbff404 	addi	r18,r17,-48
 4009e28:	d8003115 	stw	zero,196(sp)
 4009e2c:	0009883a 	mov	r4,zero
 4009e30:	b823883a 	mov	r17,r23
 4009e34:	01400284 	movi	r5,10
 4009e38:	4001a140 	call	4001a14 <__mulsi3>
 4009e3c:	88c00007 	ldb	r3,0(r17)
 4009e40:	9089883a 	add	r4,r18,r2
 4009e44:	bdc00044 	addi	r23,r23,1
 4009e48:	1cbff404 	addi	r18,r3,-48
 4009e4c:	b823883a 	mov	r17,r23
 4009e50:	b4bff82e 	bgeu	r22,r18,4009e34 <__alt_data_end+0xfc009e34>
 4009e54:	1823883a 	mov	r17,r3
 4009e58:	d9003115 	stw	r4,196(sp)
 4009e5c:	003f3206 	br	4009b28 <__alt_data_end+0xfc009b28>
 4009e60:	84002014 	ori	r16,r16,128
 4009e64:	bc400007 	ldb	r17,0(r23)
 4009e68:	003f2e06 	br	4009b24 <__alt_data_end+0xfc009b24>
 4009e6c:	8025883a 	mov	r18,r16
 4009e70:	dc002903 	ldbu	r16,164(sp)
 4009e74:	e011883a 	mov	r8,fp
 4009e78:	84003fcc 	andi	r16,r16,255
 4009e7c:	8007721e 	bne	r16,zero,400bc48 <___svfprintf_internal_r+0x2278>
 4009e80:	9080020c 	andi	r2,r18,8
 4009e84:	1004a526 	beq	r2,zero,400b11c <___svfprintf_internal_r+0x174c>
 4009e88:	d9002e17 	ldw	r4,184(sp)
 4009e8c:	d9402e17 	ldw	r5,184(sp)
 4009e90:	d8802e17 	ldw	r2,184(sp)
 4009e94:	21000017 	ldw	r4,0(r4)
 4009e98:	29400117 	ldw	r5,4(r5)
 4009e9c:	10800204 	addi	r2,r2,8
 4009ea0:	d9003615 	stw	r4,216(sp)
 4009ea4:	d9403715 	stw	r5,220(sp)
 4009ea8:	d8802e15 	stw	r2,184(sp)
 4009eac:	d9003617 	ldw	r4,216(sp)
 4009eb0:	d9403717 	ldw	r5,220(sp)
 4009eb4:	da003e15 	stw	r8,248(sp)
 4009eb8:	04000044 	movi	r16,1
 4009ebc:	40074580 	call	4007458 <__fpclassifyd>
 4009ec0:	da003e17 	ldw	r8,248(sp)
 4009ec4:	1404731e 	bne	r2,r16,400b094 <___svfprintf_internal_r+0x16c4>
 4009ec8:	d9003617 	ldw	r4,216(sp)
 4009ecc:	d9403717 	ldw	r5,220(sp)
 4009ed0:	000d883a 	mov	r6,zero
 4009ed4:	000f883a 	mov	r7,zero
 4009ed8:	4012d2c0 	call	4012d2c <__ledf2>
 4009edc:	da003e17 	ldw	r8,248(sp)
 4009ee0:	10061b16 	blt	r2,zero,400b750 <___svfprintf_internal_r+0x1d80>
 4009ee4:	df002783 	ldbu	fp,158(sp)
 4009ee8:	008011c4 	movi	r2,71
 4009eec:	1445810e 	bge	r2,r17,400b4f4 <___svfprintf_internal_r+0x1b24>
 4009ef0:	040100b4 	movhi	r16,1026
 4009ef4:	8420cc04 	addi	r16,r16,-31952
 4009ef8:	00c000c4 	movi	r3,3
 4009efc:	00bfdfc4 	movi	r2,-129
 4009f00:	d8c02915 	stw	r3,164(sp)
 4009f04:	90a4703a 	and	r18,r18,r2
 4009f08:	d8c02b15 	stw	r3,172(sp)
 4009f0c:	d8002a15 	stw	zero,168(sp)
 4009f10:	d8003215 	stw	zero,200(sp)
 4009f14:	00006c06 	br	400a0c8 <___svfprintf_internal_r+0x6f8>
 4009f18:	84000214 	ori	r16,r16,8
 4009f1c:	bc400007 	ldb	r17,0(r23)
 4009f20:	003f0006 	br	4009b24 <__alt_data_end+0xfc009b24>
 4009f24:	8025883a 	mov	r18,r16
 4009f28:	dc002903 	ldbu	r16,164(sp)
 4009f2c:	e011883a 	mov	r8,fp
 4009f30:	84003fcc 	andi	r16,r16,255
 4009f34:	80073f1e 	bne	r16,zero,400bc34 <___svfprintf_internal_r+0x2264>
 4009f38:	94800414 	ori	r18,r18,16
 4009f3c:	9080080c 	andi	r2,r18,32
 4009f40:	1003bb26 	beq	r2,zero,400ae30 <___svfprintf_internal_r+0x1460>
 4009f44:	d9002e17 	ldw	r4,184(sp)
 4009f48:	20800117 	ldw	r2,4(r4)
 4009f4c:	25000017 	ldw	r20,0(r4)
 4009f50:	21000204 	addi	r4,r4,8
 4009f54:	d9002e15 	stw	r4,184(sp)
 4009f58:	102d883a 	mov	r22,r2
 4009f5c:	1003bd16 	blt	r2,zero,400ae54 <___svfprintf_internal_r+0x1484>
 4009f60:	d9002a17 	ldw	r4,168(sp)
 4009f64:	df002783 	ldbu	fp,158(sp)
 4009f68:	2003d016 	blt	r4,zero,400aeac <___svfprintf_internal_r+0x14dc>
 4009f6c:	00ffdfc4 	movi	r3,-129
 4009f70:	a584b03a 	or	r2,r20,r22
 4009f74:	90e4703a 	and	r18,r18,r3
 4009f78:	10015026 	beq	r2,zero,400a4bc <___svfprintf_internal_r+0xaec>
 4009f7c:	b0037026 	beq	r22,zero,400ad40 <___svfprintf_internal_r+0x1370>
 4009f80:	dc402915 	stw	r17,164(sp)
 4009f84:	dc001e04 	addi	r16,sp,120
 4009f88:	b023883a 	mov	r17,r22
 4009f8c:	402d883a 	mov	r22,r8
 4009f90:	a009883a 	mov	r4,r20
 4009f94:	880b883a 	mov	r5,r17
 4009f98:	01800284 	movi	r6,10
 4009f9c:	000f883a 	mov	r7,zero
 4009fa0:	401118c0 	call	401118c <__umoddi3>
 4009fa4:	10800c04 	addi	r2,r2,48
 4009fa8:	843fffc4 	addi	r16,r16,-1
 4009fac:	a009883a 	mov	r4,r20
 4009fb0:	880b883a 	mov	r5,r17
 4009fb4:	80800005 	stb	r2,0(r16)
 4009fb8:	01800284 	movi	r6,10
 4009fbc:	000f883a 	mov	r7,zero
 4009fc0:	4010b900 	call	4010b90 <__udivdi3>
 4009fc4:	1029883a 	mov	r20,r2
 4009fc8:	10c4b03a 	or	r2,r2,r3
 4009fcc:	1823883a 	mov	r17,r3
 4009fd0:	103fef1e 	bne	r2,zero,4009f90 <__alt_data_end+0xfc009f90>
 4009fd4:	d8c02817 	ldw	r3,160(sp)
 4009fd8:	dc402917 	ldw	r17,164(sp)
 4009fdc:	b011883a 	mov	r8,r22
 4009fe0:	1c07c83a 	sub	r3,r3,r16
 4009fe4:	d8c02b15 	stw	r3,172(sp)
 4009fe8:	00003106 	br	400a0b0 <___svfprintf_internal_r+0x6e0>
 4009fec:	8025883a 	mov	r18,r16
 4009ff0:	dc002903 	ldbu	r16,164(sp)
 4009ff4:	e011883a 	mov	r8,fp
 4009ff8:	84003fcc 	andi	r16,r16,255
 4009ffc:	80070a1e 	bne	r16,zero,400bc28 <___svfprintf_internal_r+0x2258>
 400a000:	94800414 	ori	r18,r18,16
 400a004:	9080080c 	andi	r2,r18,32
 400a008:	1002f626 	beq	r2,zero,400abe4 <___svfprintf_internal_r+0x1214>
 400a00c:	d9002e17 	ldw	r4,184(sp)
 400a010:	d9402a17 	ldw	r5,168(sp)
 400a014:	d8002785 	stb	zero,158(sp)
 400a018:	20800204 	addi	r2,r4,8
 400a01c:	25000017 	ldw	r20,0(r4)
 400a020:	25800117 	ldw	r22,4(r4)
 400a024:	28043716 	blt	r5,zero,400b104 <___svfprintf_internal_r+0x1734>
 400a028:	013fdfc4 	movi	r4,-129
 400a02c:	a586b03a 	or	r3,r20,r22
 400a030:	d8802e15 	stw	r2,184(sp)
 400a034:	9124703a 	and	r18,r18,r4
 400a038:	1802f71e 	bne	r3,zero,400ac18 <___svfprintf_internal_r+0x1248>
 400a03c:	d9402a17 	ldw	r5,168(sp)
 400a040:	0039883a 	mov	fp,zero
 400a044:	2806df26 	beq	r5,zero,400bbc4 <___svfprintf_internal_r+0x21f4>
 400a048:	0029883a 	mov	r20,zero
 400a04c:	002d883a 	mov	r22,zero
 400a050:	dc001e04 	addi	r16,sp,120
 400a054:	a006d0fa 	srli	r3,r20,3
 400a058:	b008977a 	slli	r4,r22,29
 400a05c:	b02cd0fa 	srli	r22,r22,3
 400a060:	a50001cc 	andi	r20,r20,7
 400a064:	a0800c04 	addi	r2,r20,48
 400a068:	843fffc4 	addi	r16,r16,-1
 400a06c:	20e8b03a 	or	r20,r4,r3
 400a070:	80800005 	stb	r2,0(r16)
 400a074:	a586b03a 	or	r3,r20,r22
 400a078:	183ff61e 	bne	r3,zero,400a054 <__alt_data_end+0xfc00a054>
 400a07c:	90c0004c 	andi	r3,r18,1
 400a080:	18013f26 	beq	r3,zero,400a580 <___svfprintf_internal_r+0xbb0>
 400a084:	10803fcc 	andi	r2,r2,255
 400a088:	1080201c 	xori	r2,r2,128
 400a08c:	10bfe004 	addi	r2,r2,-128
 400a090:	00c00c04 	movi	r3,48
 400a094:	10c13a26 	beq	r2,r3,400a580 <___svfprintf_internal_r+0xbb0>
 400a098:	80ffffc5 	stb	r3,-1(r16)
 400a09c:	d8c02817 	ldw	r3,160(sp)
 400a0a0:	80bfffc4 	addi	r2,r16,-1
 400a0a4:	1021883a 	mov	r16,r2
 400a0a8:	1887c83a 	sub	r3,r3,r2
 400a0ac:	d8c02b15 	stw	r3,172(sp)
 400a0b0:	d8802b17 	ldw	r2,172(sp)
 400a0b4:	d9002a17 	ldw	r4,168(sp)
 400a0b8:	1100010e 	bge	r2,r4,400a0c0 <___svfprintf_internal_r+0x6f0>
 400a0bc:	2005883a 	mov	r2,r4
 400a0c0:	d8802915 	stw	r2,164(sp)
 400a0c4:	d8003215 	stw	zero,200(sp)
 400a0c8:	e7003fcc 	andi	fp,fp,255
 400a0cc:	e700201c 	xori	fp,fp,128
 400a0d0:	e73fe004 	addi	fp,fp,-128
 400a0d4:	e0000326 	beq	fp,zero,400a0e4 <___svfprintf_internal_r+0x714>
 400a0d8:	d8c02917 	ldw	r3,164(sp)
 400a0dc:	18c00044 	addi	r3,r3,1
 400a0e0:	d8c02915 	stw	r3,164(sp)
 400a0e4:	90c0008c 	andi	r3,r18,2
 400a0e8:	d8c02c15 	stw	r3,176(sp)
 400a0ec:	18000326 	beq	r3,zero,400a0fc <___svfprintf_internal_r+0x72c>
 400a0f0:	d8c02917 	ldw	r3,164(sp)
 400a0f4:	18c00084 	addi	r3,r3,2
 400a0f8:	d8c02915 	stw	r3,164(sp)
 400a0fc:	90c0210c 	andi	r3,r18,132
 400a100:	d8c03015 	stw	r3,192(sp)
 400a104:	1801c31e 	bne	r3,zero,400a814 <___svfprintf_internal_r+0xe44>
 400a108:	d9003117 	ldw	r4,196(sp)
 400a10c:	d8c02917 	ldw	r3,164(sp)
 400a110:	20e9c83a 	sub	r20,r4,r3
 400a114:	0501bf0e 	bge	zero,r20,400a814 <___svfprintf_internal_r+0xe44>
 400a118:	02400404 	movi	r9,16
 400a11c:	d8c02017 	ldw	r3,128(sp)
 400a120:	d8801f17 	ldw	r2,124(sp)
 400a124:	4d053d0e 	bge	r9,r20,400b61c <___svfprintf_internal_r+0x1c4c>
 400a128:	014100b4 	movhi	r5,1026
 400a12c:	2960df84 	addi	r5,r5,-31874
 400a130:	dc403c15 	stw	r17,240(sp)
 400a134:	d9403515 	stw	r5,212(sp)
 400a138:	a023883a 	mov	r17,r20
 400a13c:	482d883a 	mov	r22,r9
 400a140:	9029883a 	mov	r20,r18
 400a144:	070001c4 	movi	fp,7
 400a148:	8025883a 	mov	r18,r16
 400a14c:	dc002d17 	ldw	r16,180(sp)
 400a150:	00000306 	br	400a160 <___svfprintf_internal_r+0x790>
 400a154:	8c7ffc04 	addi	r17,r17,-16
 400a158:	42000204 	addi	r8,r8,8
 400a15c:	b440130e 	bge	r22,r17,400a1ac <___svfprintf_internal_r+0x7dc>
 400a160:	010100b4 	movhi	r4,1026
 400a164:	18c00404 	addi	r3,r3,16
 400a168:	10800044 	addi	r2,r2,1
 400a16c:	2120df84 	addi	r4,r4,-31874
 400a170:	41000015 	stw	r4,0(r8)
 400a174:	45800115 	stw	r22,4(r8)
 400a178:	d8c02015 	stw	r3,128(sp)
 400a17c:	d8801f15 	stw	r2,124(sp)
 400a180:	e0bff40e 	bge	fp,r2,400a154 <__alt_data_end+0xfc00a154>
 400a184:	d9801e04 	addi	r6,sp,120
 400a188:	800b883a 	mov	r5,r16
 400a18c:	9809883a 	mov	r4,r19
 400a190:	400f3c40 	call	400f3c4 <__ssprint_r>
 400a194:	103ef51e 	bne	r2,zero,4009d6c <__alt_data_end+0xfc009d6c>
 400a198:	8c7ffc04 	addi	r17,r17,-16
 400a19c:	d8c02017 	ldw	r3,128(sp)
 400a1a0:	d8801f17 	ldw	r2,124(sp)
 400a1a4:	da000404 	addi	r8,sp,16
 400a1a8:	b47fed16 	blt	r22,r17,400a160 <__alt_data_end+0xfc00a160>
 400a1ac:	9021883a 	mov	r16,r18
 400a1b0:	a025883a 	mov	r18,r20
 400a1b4:	8829883a 	mov	r20,r17
 400a1b8:	dc403c17 	ldw	r17,240(sp)
 400a1bc:	d9403517 	ldw	r5,212(sp)
 400a1c0:	a0c7883a 	add	r3,r20,r3
 400a1c4:	10800044 	addi	r2,r2,1
 400a1c8:	41400015 	stw	r5,0(r8)
 400a1cc:	45000115 	stw	r20,4(r8)
 400a1d0:	d8c02015 	stw	r3,128(sp)
 400a1d4:	d8801f15 	stw	r2,124(sp)
 400a1d8:	010001c4 	movi	r4,7
 400a1dc:	2082c116 	blt	r4,r2,400ace4 <___svfprintf_internal_r+0x1314>
 400a1e0:	df002787 	ldb	fp,158(sp)
 400a1e4:	42000204 	addi	r8,r8,8
 400a1e8:	e0000c26 	beq	fp,zero,400a21c <___svfprintf_internal_r+0x84c>
 400a1ec:	d8801f17 	ldw	r2,124(sp)
 400a1f0:	d9002784 	addi	r4,sp,158
 400a1f4:	18c00044 	addi	r3,r3,1
 400a1f8:	10800044 	addi	r2,r2,1
 400a1fc:	41000015 	stw	r4,0(r8)
 400a200:	01000044 	movi	r4,1
 400a204:	41000115 	stw	r4,4(r8)
 400a208:	d8c02015 	stw	r3,128(sp)
 400a20c:	d8801f15 	stw	r2,124(sp)
 400a210:	010001c4 	movi	r4,7
 400a214:	20825a16 	blt	r4,r2,400ab80 <___svfprintf_internal_r+0x11b0>
 400a218:	42000204 	addi	r8,r8,8
 400a21c:	d8802c17 	ldw	r2,176(sp)
 400a220:	10000c26 	beq	r2,zero,400a254 <___svfprintf_internal_r+0x884>
 400a224:	d8801f17 	ldw	r2,124(sp)
 400a228:	d9002704 	addi	r4,sp,156
 400a22c:	18c00084 	addi	r3,r3,2
 400a230:	10800044 	addi	r2,r2,1
 400a234:	41000015 	stw	r4,0(r8)
 400a238:	01000084 	movi	r4,2
 400a23c:	41000115 	stw	r4,4(r8)
 400a240:	d8c02015 	stw	r3,128(sp)
 400a244:	d8801f15 	stw	r2,124(sp)
 400a248:	010001c4 	movi	r4,7
 400a24c:	20825416 	blt	r4,r2,400aba0 <___svfprintf_internal_r+0x11d0>
 400a250:	42000204 	addi	r8,r8,8
 400a254:	d9003017 	ldw	r4,192(sp)
 400a258:	00802004 	movi	r2,128
 400a25c:	2081b926 	beq	r4,r2,400a944 <___svfprintf_internal_r+0xf74>
 400a260:	d9402a17 	ldw	r5,168(sp)
 400a264:	d8802b17 	ldw	r2,172(sp)
 400a268:	28adc83a 	sub	r22,r5,r2
 400a26c:	05802f0e 	bge	zero,r22,400a32c <___svfprintf_internal_r+0x95c>
 400a270:	07000404 	movi	fp,16
 400a274:	d8801f17 	ldw	r2,124(sp)
 400a278:	e583e20e 	bge	fp,r22,400b204 <___svfprintf_internal_r+0x1834>
 400a27c:	014100b4 	movhi	r5,1026
 400a280:	2960db84 	addi	r5,r5,-31890
 400a284:	dc402a15 	stw	r17,168(sp)
 400a288:	d9402c15 	stw	r5,176(sp)
 400a28c:	b023883a 	mov	r17,r22
 400a290:	050001c4 	movi	r20,7
 400a294:	902d883a 	mov	r22,r18
 400a298:	8025883a 	mov	r18,r16
 400a29c:	dc002d17 	ldw	r16,180(sp)
 400a2a0:	00000306 	br	400a2b0 <___svfprintf_internal_r+0x8e0>
 400a2a4:	8c7ffc04 	addi	r17,r17,-16
 400a2a8:	42000204 	addi	r8,r8,8
 400a2ac:	e440110e 	bge	fp,r17,400a2f4 <___svfprintf_internal_r+0x924>
 400a2b0:	18c00404 	addi	r3,r3,16
 400a2b4:	10800044 	addi	r2,r2,1
 400a2b8:	45400015 	stw	r21,0(r8)
 400a2bc:	47000115 	stw	fp,4(r8)
 400a2c0:	d8c02015 	stw	r3,128(sp)
 400a2c4:	d8801f15 	stw	r2,124(sp)
 400a2c8:	a0bff60e 	bge	r20,r2,400a2a4 <__alt_data_end+0xfc00a2a4>
 400a2cc:	d9801e04 	addi	r6,sp,120
 400a2d0:	800b883a 	mov	r5,r16
 400a2d4:	9809883a 	mov	r4,r19
 400a2d8:	400f3c40 	call	400f3c4 <__ssprint_r>
 400a2dc:	103ea31e 	bne	r2,zero,4009d6c <__alt_data_end+0xfc009d6c>
 400a2e0:	8c7ffc04 	addi	r17,r17,-16
 400a2e4:	d8c02017 	ldw	r3,128(sp)
 400a2e8:	d8801f17 	ldw	r2,124(sp)
 400a2ec:	da000404 	addi	r8,sp,16
 400a2f0:	e47fef16 	blt	fp,r17,400a2b0 <__alt_data_end+0xfc00a2b0>
 400a2f4:	9021883a 	mov	r16,r18
 400a2f8:	b025883a 	mov	r18,r22
 400a2fc:	882d883a 	mov	r22,r17
 400a300:	dc402a17 	ldw	r17,168(sp)
 400a304:	d9002c17 	ldw	r4,176(sp)
 400a308:	1d87883a 	add	r3,r3,r22
 400a30c:	10800044 	addi	r2,r2,1
 400a310:	41000015 	stw	r4,0(r8)
 400a314:	45800115 	stw	r22,4(r8)
 400a318:	d8c02015 	stw	r3,128(sp)
 400a31c:	d8801f15 	stw	r2,124(sp)
 400a320:	010001c4 	movi	r4,7
 400a324:	20820e16 	blt	r4,r2,400ab60 <___svfprintf_internal_r+0x1190>
 400a328:	42000204 	addi	r8,r8,8
 400a32c:	9080400c 	andi	r2,r18,256
 400a330:	10013a1e 	bne	r2,zero,400a81c <___svfprintf_internal_r+0xe4c>
 400a334:	d9402b17 	ldw	r5,172(sp)
 400a338:	d8801f17 	ldw	r2,124(sp)
 400a33c:	44000015 	stw	r16,0(r8)
 400a340:	1947883a 	add	r3,r3,r5
 400a344:	10800044 	addi	r2,r2,1
 400a348:	41400115 	stw	r5,4(r8)
 400a34c:	d8c02015 	stw	r3,128(sp)
 400a350:	d8801f15 	stw	r2,124(sp)
 400a354:	010001c4 	movi	r4,7
 400a358:	2081f316 	blt	r4,r2,400ab28 <___svfprintf_internal_r+0x1158>
 400a35c:	42000204 	addi	r8,r8,8
 400a360:	9480010c 	andi	r18,r18,4
 400a364:	90003226 	beq	r18,zero,400a430 <___svfprintf_internal_r+0xa60>
 400a368:	d9403117 	ldw	r5,196(sp)
 400a36c:	d8802917 	ldw	r2,164(sp)
 400a370:	28a1c83a 	sub	r16,r5,r2
 400a374:	04002e0e 	bge	zero,r16,400a430 <___svfprintf_internal_r+0xa60>
 400a378:	04400404 	movi	r17,16
 400a37c:	d8801f17 	ldw	r2,124(sp)
 400a380:	8c04db0e 	bge	r17,r16,400b6f0 <___svfprintf_internal_r+0x1d20>
 400a384:	014100b4 	movhi	r5,1026
 400a388:	2960df84 	addi	r5,r5,-31874
 400a38c:	d9403515 	stw	r5,212(sp)
 400a390:	048001c4 	movi	r18,7
 400a394:	dd002d17 	ldw	r20,180(sp)
 400a398:	00000306 	br	400a3a8 <___svfprintf_internal_r+0x9d8>
 400a39c:	843ffc04 	addi	r16,r16,-16
 400a3a0:	42000204 	addi	r8,r8,8
 400a3a4:	8c00130e 	bge	r17,r16,400a3f4 <___svfprintf_internal_r+0xa24>
 400a3a8:	010100b4 	movhi	r4,1026
 400a3ac:	18c00404 	addi	r3,r3,16
 400a3b0:	10800044 	addi	r2,r2,1
 400a3b4:	2120df84 	addi	r4,r4,-31874
 400a3b8:	41000015 	stw	r4,0(r8)
 400a3bc:	44400115 	stw	r17,4(r8)
 400a3c0:	d8c02015 	stw	r3,128(sp)
 400a3c4:	d8801f15 	stw	r2,124(sp)
 400a3c8:	90bff40e 	bge	r18,r2,400a39c <__alt_data_end+0xfc00a39c>
 400a3cc:	d9801e04 	addi	r6,sp,120
 400a3d0:	a00b883a 	mov	r5,r20
 400a3d4:	9809883a 	mov	r4,r19
 400a3d8:	400f3c40 	call	400f3c4 <__ssprint_r>
 400a3dc:	103e631e 	bne	r2,zero,4009d6c <__alt_data_end+0xfc009d6c>
 400a3e0:	843ffc04 	addi	r16,r16,-16
 400a3e4:	d8c02017 	ldw	r3,128(sp)
 400a3e8:	d8801f17 	ldw	r2,124(sp)
 400a3ec:	da000404 	addi	r8,sp,16
 400a3f0:	8c3fed16 	blt	r17,r16,400a3a8 <__alt_data_end+0xfc00a3a8>
 400a3f4:	d9403517 	ldw	r5,212(sp)
 400a3f8:	1c07883a 	add	r3,r3,r16
 400a3fc:	10800044 	addi	r2,r2,1
 400a400:	41400015 	stw	r5,0(r8)
 400a404:	44000115 	stw	r16,4(r8)
 400a408:	d8c02015 	stw	r3,128(sp)
 400a40c:	d8801f15 	stw	r2,124(sp)
 400a410:	010001c4 	movi	r4,7
 400a414:	2080060e 	bge	r4,r2,400a430 <___svfprintf_internal_r+0xa60>
 400a418:	d9402d17 	ldw	r5,180(sp)
 400a41c:	d9801e04 	addi	r6,sp,120
 400a420:	9809883a 	mov	r4,r19
 400a424:	400f3c40 	call	400f3c4 <__ssprint_r>
 400a428:	103e501e 	bne	r2,zero,4009d6c <__alt_data_end+0xfc009d6c>
 400a42c:	d8c02017 	ldw	r3,128(sp)
 400a430:	d8803117 	ldw	r2,196(sp)
 400a434:	d9002917 	ldw	r4,164(sp)
 400a438:	1100010e 	bge	r2,r4,400a440 <___svfprintf_internal_r+0xa70>
 400a43c:	2005883a 	mov	r2,r4
 400a440:	d9402f17 	ldw	r5,188(sp)
 400a444:	288b883a 	add	r5,r5,r2
 400a448:	d9402f15 	stw	r5,188(sp)
 400a44c:	1801be1e 	bne	r3,zero,400ab48 <___svfprintf_internal_r+0x1178>
 400a450:	b8800007 	ldb	r2,0(r23)
 400a454:	d8001f15 	stw	zero,124(sp)
 400a458:	da000404 	addi	r8,sp,16
 400a45c:	103d891e 	bne	r2,zero,4009a84 <__alt_data_end+0xfc009a84>
 400a460:	b823883a 	mov	r17,r23
 400a464:	003d9f06 	br	4009ae4 <__alt_data_end+0xfc009ae4>
 400a468:	8025883a 	mov	r18,r16
 400a46c:	dc002903 	ldbu	r16,164(sp)
 400a470:	e011883a 	mov	r8,fp
 400a474:	84003fcc 	andi	r16,r16,255
 400a478:	8005e61e 	bne	r16,zero,400bc14 <___svfprintf_internal_r+0x2244>
 400a47c:	94800414 	ori	r18,r18,16
 400a480:	9080080c 	andi	r2,r18,32
 400a484:	10022026 	beq	r2,zero,400ad08 <___svfprintf_internal_r+0x1338>
 400a488:	d9002e17 	ldw	r4,184(sp)
 400a48c:	d9402a17 	ldw	r5,168(sp)
 400a490:	d8002785 	stb	zero,158(sp)
 400a494:	20c00204 	addi	r3,r4,8
 400a498:	25000017 	ldw	r20,0(r4)
 400a49c:	25800117 	ldw	r22,4(r4)
 400a4a0:	2803ad16 	blt	r5,zero,400b358 <___svfprintf_internal_r+0x1988>
 400a4a4:	013fdfc4 	movi	r4,-129
 400a4a8:	a584b03a 	or	r2,r20,r22
 400a4ac:	d8c02e15 	stw	r3,184(sp)
 400a4b0:	9124703a 	and	r18,r18,r4
 400a4b4:	0039883a 	mov	fp,zero
 400a4b8:	103eb01e 	bne	r2,zero,4009f7c <__alt_data_end+0xfc009f7c>
 400a4bc:	d8802a17 	ldw	r2,168(sp)
 400a4c0:	1002e71e 	bne	r2,zero,400b060 <___svfprintf_internal_r+0x1690>
 400a4c4:	d8002a15 	stw	zero,168(sp)
 400a4c8:	d8002b15 	stw	zero,172(sp)
 400a4cc:	dc001e04 	addi	r16,sp,120
 400a4d0:	003ef706 	br	400a0b0 <__alt_data_end+0xfc00a0b0>
 400a4d4:	8025883a 	mov	r18,r16
 400a4d8:	dc002903 	ldbu	r16,164(sp)
 400a4dc:	e011883a 	mov	r8,fp
 400a4e0:	84003fcc 	andi	r16,r16,255
 400a4e4:	8005c81e 	bne	r16,zero,400bc08 <___svfprintf_internal_r+0x2238>
 400a4e8:	010100b4 	movhi	r4,1026
 400a4ec:	2120cf04 	addi	r4,r4,-31940
 400a4f0:	d9003a15 	stw	r4,232(sp)
 400a4f4:	9080080c 	andi	r2,r18,32
 400a4f8:	10007226 	beq	r2,zero,400a6c4 <___svfprintf_internal_r+0xcf4>
 400a4fc:	d9402e17 	ldw	r5,184(sp)
 400a500:	2d000017 	ldw	r20,0(r5)
 400a504:	2d800117 	ldw	r22,4(r5)
 400a508:	29400204 	addi	r5,r5,8
 400a50c:	d9402e15 	stw	r5,184(sp)
 400a510:	9080004c 	andi	r2,r18,1
 400a514:	1001aa26 	beq	r2,zero,400abc0 <___svfprintf_internal_r+0x11f0>
 400a518:	a584b03a 	or	r2,r20,r22
 400a51c:	10032526 	beq	r2,zero,400b1b4 <___svfprintf_internal_r+0x17e4>
 400a520:	d8c02a17 	ldw	r3,168(sp)
 400a524:	00800c04 	movi	r2,48
 400a528:	d8802705 	stb	r2,156(sp)
 400a52c:	dc402745 	stb	r17,157(sp)
 400a530:	d8002785 	stb	zero,158(sp)
 400a534:	90800094 	ori	r2,r18,2
 400a538:	1804a316 	blt	r3,zero,400b7c8 <___svfprintf_internal_r+0x1df8>
 400a53c:	00bfdfc4 	movi	r2,-129
 400a540:	90a4703a 	and	r18,r18,r2
 400a544:	94800094 	ori	r18,r18,2
 400a548:	0039883a 	mov	fp,zero
 400a54c:	d9003a17 	ldw	r4,232(sp)
 400a550:	dc001e04 	addi	r16,sp,120
 400a554:	a08003cc 	andi	r2,r20,15
 400a558:	b006973a 	slli	r3,r22,28
 400a55c:	2085883a 	add	r2,r4,r2
 400a560:	a028d13a 	srli	r20,r20,4
 400a564:	10800003 	ldbu	r2,0(r2)
 400a568:	b02cd13a 	srli	r22,r22,4
 400a56c:	843fffc4 	addi	r16,r16,-1
 400a570:	1d28b03a 	or	r20,r3,r20
 400a574:	80800005 	stb	r2,0(r16)
 400a578:	a584b03a 	or	r2,r20,r22
 400a57c:	103ff51e 	bne	r2,zero,400a554 <__alt_data_end+0xfc00a554>
 400a580:	d8c02817 	ldw	r3,160(sp)
 400a584:	1c07c83a 	sub	r3,r3,r16
 400a588:	d8c02b15 	stw	r3,172(sp)
 400a58c:	003ec806 	br	400a0b0 <__alt_data_end+0xfc00a0b0>
 400a590:	d8c02e17 	ldw	r3,184(sp)
 400a594:	d9002e17 	ldw	r4,184(sp)
 400a598:	8025883a 	mov	r18,r16
 400a59c:	18800017 	ldw	r2,0(r3)
 400a5a0:	21000104 	addi	r4,r4,4
 400a5a4:	00c00044 	movi	r3,1
 400a5a8:	e011883a 	mov	r8,fp
 400a5ac:	d8c02915 	stw	r3,164(sp)
 400a5b0:	d8002785 	stb	zero,158(sp)
 400a5b4:	d8801405 	stb	r2,80(sp)
 400a5b8:	d9002e15 	stw	r4,184(sp)
 400a5bc:	d8c02b15 	stw	r3,172(sp)
 400a5c0:	d8002a15 	stw	zero,168(sp)
 400a5c4:	d8003215 	stw	zero,200(sp)
 400a5c8:	dc001404 	addi	r16,sp,80
 400a5cc:	0039883a 	mov	fp,zero
 400a5d0:	003ec406 	br	400a0e4 <__alt_data_end+0xfc00a0e4>
 400a5d4:	8025883a 	mov	r18,r16
 400a5d8:	dc002903 	ldbu	r16,164(sp)
 400a5dc:	e011883a 	mov	r8,fp
 400a5e0:	84003fcc 	andi	r16,r16,255
 400a5e4:	803e8726 	beq	r16,zero,400a004 <__alt_data_end+0xfc00a004>
 400a5e8:	d8c02b03 	ldbu	r3,172(sp)
 400a5ec:	d8c02785 	stb	r3,158(sp)
 400a5f0:	003e8406 	br	400a004 <__alt_data_end+0xfc00a004>
 400a5f4:	00c00044 	movi	r3,1
 400a5f8:	d8c02905 	stb	r3,164(sp)
 400a5fc:	00c00ac4 	movi	r3,43
 400a600:	d8c02b05 	stb	r3,172(sp)
 400a604:	bc400007 	ldb	r17,0(r23)
 400a608:	003d4606 	br	4009b24 <__alt_data_end+0xfc009b24>
 400a60c:	84000814 	ori	r16,r16,32
 400a610:	bc400007 	ldb	r17,0(r23)
 400a614:	003d4306 	br	4009b24 <__alt_data_end+0xfc009b24>
 400a618:	d8802e17 	ldw	r2,184(sp)
 400a61c:	8025883a 	mov	r18,r16
 400a620:	d8002785 	stb	zero,158(sp)
 400a624:	14000017 	ldw	r16,0(r2)
 400a628:	e011883a 	mov	r8,fp
 400a62c:	15000104 	addi	r20,r2,4
 400a630:	80042126 	beq	r16,zero,400b6b8 <___svfprintf_internal_r+0x1ce8>
 400a634:	d8c02a17 	ldw	r3,168(sp)
 400a638:	1803ee16 	blt	r3,zero,400b5f4 <___svfprintf_internal_r+0x1c24>
 400a63c:	180d883a 	mov	r6,r3
 400a640:	000b883a 	mov	r5,zero
 400a644:	8009883a 	mov	r4,r16
 400a648:	df003e15 	stw	fp,248(sp)
 400a64c:	4006c540 	call	4006c54 <memchr>
 400a650:	da003e17 	ldw	r8,248(sp)
 400a654:	10046a26 	beq	r2,zero,400b800 <___svfprintf_internal_r+0x1e30>
 400a658:	1405c83a 	sub	r2,r2,r16
 400a65c:	d8802b15 	stw	r2,172(sp)
 400a660:	1003ea16 	blt	r2,zero,400b60c <___svfprintf_internal_r+0x1c3c>
 400a664:	df002783 	ldbu	fp,158(sp)
 400a668:	d8802915 	stw	r2,164(sp)
 400a66c:	dd002e15 	stw	r20,184(sp)
 400a670:	d8002a15 	stw	zero,168(sp)
 400a674:	d8003215 	stw	zero,200(sp)
 400a678:	003e9306 	br	400a0c8 <__alt_data_end+0xfc00a0c8>
 400a67c:	8025883a 	mov	r18,r16
 400a680:	dc002903 	ldbu	r16,164(sp)
 400a684:	e011883a 	mov	r8,fp
 400a688:	84003fcc 	andi	r16,r16,255
 400a68c:	803f7c26 	beq	r16,zero,400a480 <__alt_data_end+0xfc00a480>
 400a690:	d8c02b03 	ldbu	r3,172(sp)
 400a694:	d8c02785 	stb	r3,158(sp)
 400a698:	003f7906 	br	400a480 <__alt_data_end+0xfc00a480>
 400a69c:	8025883a 	mov	r18,r16
 400a6a0:	dc002903 	ldbu	r16,164(sp)
 400a6a4:	e011883a 	mov	r8,fp
 400a6a8:	84003fcc 	andi	r16,r16,255
 400a6ac:	8005741e 	bne	r16,zero,400bc80 <___svfprintf_internal_r+0x22b0>
 400a6b0:	010100b4 	movhi	r4,1026
 400a6b4:	2120d404 	addi	r4,r4,-31920
 400a6b8:	d9003a15 	stw	r4,232(sp)
 400a6bc:	9080080c 	andi	r2,r18,32
 400a6c0:	103f8e1e 	bne	r2,zero,400a4fc <__alt_data_end+0xfc00a4fc>
 400a6c4:	9080040c 	andi	r2,r18,16
 400a6c8:	1002a726 	beq	r2,zero,400b168 <___svfprintf_internal_r+0x1798>
 400a6cc:	d8802e17 	ldw	r2,184(sp)
 400a6d0:	002d883a 	mov	r22,zero
 400a6d4:	15000017 	ldw	r20,0(r2)
 400a6d8:	10800104 	addi	r2,r2,4
 400a6dc:	d8802e15 	stw	r2,184(sp)
 400a6e0:	003f8b06 	br	400a510 <__alt_data_end+0xfc00a510>
 400a6e4:	84000054 	ori	r16,r16,1
 400a6e8:	bc400007 	ldb	r17,0(r23)
 400a6ec:	003d0d06 	br	4009b24 <__alt_data_end+0xfc009b24>
 400a6f0:	d8802b07 	ldb	r2,172(sp)
 400a6f4:	1002a41e 	bne	r2,zero,400b188 <___svfprintf_internal_r+0x17b8>
 400a6f8:	00c00044 	movi	r3,1
 400a6fc:	d8c02905 	stb	r3,164(sp)
 400a700:	00c00804 	movi	r3,32
 400a704:	d8c02b05 	stb	r3,172(sp)
 400a708:	bc400007 	ldb	r17,0(r23)
 400a70c:	003d0506 	br	4009b24 <__alt_data_end+0xfc009b24>
 400a710:	8025883a 	mov	r18,r16
 400a714:	dc002903 	ldbu	r16,164(sp)
 400a718:	e011883a 	mov	r8,fp
 400a71c:	84003fcc 	andi	r16,r16,255
 400a720:	803e0626 	beq	r16,zero,4009f3c <__alt_data_end+0xfc009f3c>
 400a724:	d8c02b03 	ldbu	r3,172(sp)
 400a728:	d8c02785 	stb	r3,158(sp)
 400a72c:	003e0306 	br	4009f3c <__alt_data_end+0xfc009f3c>
 400a730:	bc400007 	ldb	r17,0(r23)
 400a734:	00801b04 	movi	r2,108
 400a738:	88830a26 	beq	r17,r2,400b364 <___svfprintf_internal_r+0x1994>
 400a73c:	84000414 	ori	r16,r16,16
 400a740:	003cf806 	br	4009b24 <__alt_data_end+0xfc009b24>
 400a744:	8025883a 	mov	r18,r16
 400a748:	dc002903 	ldbu	r16,164(sp)
 400a74c:	e011883a 	mov	r8,fp
 400a750:	84003fcc 	andi	r16,r16,255
 400a754:	8005471e 	bne	r16,zero,400bc74 <___svfprintf_internal_r+0x22a4>
 400a758:	9080080c 	andi	r2,r18,32
 400a75c:	10028c26 	beq	r2,zero,400b190 <___svfprintf_internal_r+0x17c0>
 400a760:	d9002e17 	ldw	r4,184(sp)
 400a764:	d9402f17 	ldw	r5,188(sp)
 400a768:	20800017 	ldw	r2,0(r4)
 400a76c:	2807d7fa 	srai	r3,r5,31
 400a770:	21000104 	addi	r4,r4,4
 400a774:	d9002e15 	stw	r4,184(sp)
 400a778:	11400015 	stw	r5,0(r2)
 400a77c:	10c00115 	stw	r3,4(r2)
 400a780:	003cbe06 	br	4009a7c <__alt_data_end+0xfc009a7c>
 400a784:	84001014 	ori	r16,r16,64
 400a788:	bc400007 	ldb	r17,0(r23)
 400a78c:	003ce506 	br	4009b24 <__alt_data_end+0xfc009b24>
 400a790:	010100b4 	movhi	r4,1026
 400a794:	2120d404 	addi	r4,r4,-31920
 400a798:	0039883a 	mov	fp,zero
 400a79c:	d9003a15 	stw	r4,232(sp)
 400a7a0:	04401e04 	movi	r17,120
 400a7a4:	003f6906 	br	400a54c <__alt_data_end+0xfc00a54c>
 400a7a8:	8025883a 	mov	r18,r16
 400a7ac:	dc002903 	ldbu	r16,164(sp)
 400a7b0:	e011883a 	mov	r8,fp
 400a7b4:	84003fcc 	andi	r16,r16,255
 400a7b8:	8005261e 	bne	r16,zero,400bc54 <___svfprintf_internal_r+0x2284>
 400a7bc:	883d6526 	beq	r17,zero,4009d54 <__alt_data_end+0xfc009d54>
 400a7c0:	00c00044 	movi	r3,1
 400a7c4:	d8c02915 	stw	r3,164(sp)
 400a7c8:	dc401405 	stb	r17,80(sp)
 400a7cc:	d8002785 	stb	zero,158(sp)
 400a7d0:	003f7a06 	br	400a5bc <__alt_data_end+0xfc00a5bc>
 400a7d4:	010100b4 	movhi	r4,1026
 400a7d8:	2120d404 	addi	r4,r4,-31920
 400a7dc:	d9003a15 	stw	r4,232(sp)
 400a7e0:	d8c02e15 	stw	r3,184(sp)
 400a7e4:	1025883a 	mov	r18,r2
 400a7e8:	04401e04 	movi	r17,120
 400a7ec:	a584b03a 	or	r2,r20,r22
 400a7f0:	1000fa1e 	bne	r2,zero,400abdc <___svfprintf_internal_r+0x120c>
 400a7f4:	0039883a 	mov	fp,zero
 400a7f8:	00800084 	movi	r2,2
 400a7fc:	10803fcc 	andi	r2,r2,255
 400a800:	00c00044 	movi	r3,1
 400a804:	10c21626 	beq	r2,r3,400b060 <___svfprintf_internal_r+0x1690>
 400a808:	00c00084 	movi	r3,2
 400a80c:	10fe0e1e 	bne	r2,r3,400a048 <__alt_data_end+0xfc00a048>
 400a810:	003d4606 	br	4009d2c <__alt_data_end+0xfc009d2c>
 400a814:	d8c02017 	ldw	r3,128(sp)
 400a818:	003e7306 	br	400a1e8 <__alt_data_end+0xfc00a1e8>
 400a81c:	00801944 	movi	r2,101
 400a820:	14407c0e 	bge	r2,r17,400aa14 <___svfprintf_internal_r+0x1044>
 400a824:	d9003617 	ldw	r4,216(sp)
 400a828:	d9403717 	ldw	r5,220(sp)
 400a82c:	000d883a 	mov	r6,zero
 400a830:	000f883a 	mov	r7,zero
 400a834:	d8c03d15 	stw	r3,244(sp)
 400a838:	da003e15 	stw	r8,248(sp)
 400a83c:	4012bc80 	call	4012bc8 <__eqdf2>
 400a840:	d8c03d17 	ldw	r3,244(sp)
 400a844:	da003e17 	ldw	r8,248(sp)
 400a848:	1000f51e 	bne	r2,zero,400ac20 <___svfprintf_internal_r+0x1250>
 400a84c:	d8801f17 	ldw	r2,124(sp)
 400a850:	010100b4 	movhi	r4,1026
 400a854:	2120db04 	addi	r4,r4,-31892
 400a858:	18c00044 	addi	r3,r3,1
 400a85c:	10800044 	addi	r2,r2,1
 400a860:	41000015 	stw	r4,0(r8)
 400a864:	01000044 	movi	r4,1
 400a868:	41000115 	stw	r4,4(r8)
 400a86c:	d8c02015 	stw	r3,128(sp)
 400a870:	d8801f15 	stw	r2,124(sp)
 400a874:	010001c4 	movi	r4,7
 400a878:	20826616 	blt	r4,r2,400b214 <___svfprintf_internal_r+0x1844>
 400a87c:	42000204 	addi	r8,r8,8
 400a880:	d8802617 	ldw	r2,152(sp)
 400a884:	d9403317 	ldw	r5,204(sp)
 400a888:	11400216 	blt	r2,r5,400a894 <___svfprintf_internal_r+0xec4>
 400a88c:	9080004c 	andi	r2,r18,1
 400a890:	103eb326 	beq	r2,zero,400a360 <__alt_data_end+0xfc00a360>
 400a894:	d8803817 	ldw	r2,224(sp)
 400a898:	d9003417 	ldw	r4,208(sp)
 400a89c:	d9403817 	ldw	r5,224(sp)
 400a8a0:	1887883a 	add	r3,r3,r2
 400a8a4:	d8801f17 	ldw	r2,124(sp)
 400a8a8:	41000015 	stw	r4,0(r8)
 400a8ac:	41400115 	stw	r5,4(r8)
 400a8b0:	10800044 	addi	r2,r2,1
 400a8b4:	d8c02015 	stw	r3,128(sp)
 400a8b8:	d8801f15 	stw	r2,124(sp)
 400a8bc:	010001c4 	movi	r4,7
 400a8c0:	2082af16 	blt	r4,r2,400b380 <___svfprintf_internal_r+0x19b0>
 400a8c4:	42000204 	addi	r8,r8,8
 400a8c8:	d8803317 	ldw	r2,204(sp)
 400a8cc:	143fffc4 	addi	r16,r2,-1
 400a8d0:	043ea30e 	bge	zero,r16,400a360 <__alt_data_end+0xfc00a360>
 400a8d4:	04400404 	movi	r17,16
 400a8d8:	d8801f17 	ldw	r2,124(sp)
 400a8dc:	8c00860e 	bge	r17,r16,400aaf8 <___svfprintf_internal_r+0x1128>
 400a8e0:	014100b4 	movhi	r5,1026
 400a8e4:	2960db84 	addi	r5,r5,-31890
 400a8e8:	d9402c15 	stw	r5,176(sp)
 400a8ec:	058001c4 	movi	r22,7
 400a8f0:	dd002d17 	ldw	r20,180(sp)
 400a8f4:	00000306 	br	400a904 <___svfprintf_internal_r+0xf34>
 400a8f8:	42000204 	addi	r8,r8,8
 400a8fc:	843ffc04 	addi	r16,r16,-16
 400a900:	8c00800e 	bge	r17,r16,400ab04 <___svfprintf_internal_r+0x1134>
 400a904:	18c00404 	addi	r3,r3,16
 400a908:	10800044 	addi	r2,r2,1
 400a90c:	45400015 	stw	r21,0(r8)
 400a910:	44400115 	stw	r17,4(r8)
 400a914:	d8c02015 	stw	r3,128(sp)
 400a918:	d8801f15 	stw	r2,124(sp)
 400a91c:	b0bff60e 	bge	r22,r2,400a8f8 <__alt_data_end+0xfc00a8f8>
 400a920:	d9801e04 	addi	r6,sp,120
 400a924:	a00b883a 	mov	r5,r20
 400a928:	9809883a 	mov	r4,r19
 400a92c:	400f3c40 	call	400f3c4 <__ssprint_r>
 400a930:	103d0e1e 	bne	r2,zero,4009d6c <__alt_data_end+0xfc009d6c>
 400a934:	d8c02017 	ldw	r3,128(sp)
 400a938:	d8801f17 	ldw	r2,124(sp)
 400a93c:	da000404 	addi	r8,sp,16
 400a940:	003fee06 	br	400a8fc <__alt_data_end+0xfc00a8fc>
 400a944:	d9403117 	ldw	r5,196(sp)
 400a948:	d8802917 	ldw	r2,164(sp)
 400a94c:	28adc83a 	sub	r22,r5,r2
 400a950:	05be430e 	bge	zero,r22,400a260 <__alt_data_end+0xfc00a260>
 400a954:	07000404 	movi	fp,16
 400a958:	d8801f17 	ldw	r2,124(sp)
 400a95c:	e583a20e 	bge	fp,r22,400b7e8 <___svfprintf_internal_r+0x1e18>
 400a960:	014100b4 	movhi	r5,1026
 400a964:	2960db84 	addi	r5,r5,-31890
 400a968:	dc403015 	stw	r17,192(sp)
 400a96c:	d9402c15 	stw	r5,176(sp)
 400a970:	b023883a 	mov	r17,r22
 400a974:	050001c4 	movi	r20,7
 400a978:	902d883a 	mov	r22,r18
 400a97c:	8025883a 	mov	r18,r16
 400a980:	dc002d17 	ldw	r16,180(sp)
 400a984:	00000306 	br	400a994 <___svfprintf_internal_r+0xfc4>
 400a988:	8c7ffc04 	addi	r17,r17,-16
 400a98c:	42000204 	addi	r8,r8,8
 400a990:	e440110e 	bge	fp,r17,400a9d8 <___svfprintf_internal_r+0x1008>
 400a994:	18c00404 	addi	r3,r3,16
 400a998:	10800044 	addi	r2,r2,1
 400a99c:	45400015 	stw	r21,0(r8)
 400a9a0:	47000115 	stw	fp,4(r8)
 400a9a4:	d8c02015 	stw	r3,128(sp)
 400a9a8:	d8801f15 	stw	r2,124(sp)
 400a9ac:	a0bff60e 	bge	r20,r2,400a988 <__alt_data_end+0xfc00a988>
 400a9b0:	d9801e04 	addi	r6,sp,120
 400a9b4:	800b883a 	mov	r5,r16
 400a9b8:	9809883a 	mov	r4,r19
 400a9bc:	400f3c40 	call	400f3c4 <__ssprint_r>
 400a9c0:	103cea1e 	bne	r2,zero,4009d6c <__alt_data_end+0xfc009d6c>
 400a9c4:	8c7ffc04 	addi	r17,r17,-16
 400a9c8:	d8c02017 	ldw	r3,128(sp)
 400a9cc:	d8801f17 	ldw	r2,124(sp)
 400a9d0:	da000404 	addi	r8,sp,16
 400a9d4:	e47fef16 	blt	fp,r17,400a994 <__alt_data_end+0xfc00a994>
 400a9d8:	9021883a 	mov	r16,r18
 400a9dc:	b025883a 	mov	r18,r22
 400a9e0:	882d883a 	mov	r22,r17
 400a9e4:	dc403017 	ldw	r17,192(sp)
 400a9e8:	d9002c17 	ldw	r4,176(sp)
 400a9ec:	1d87883a 	add	r3,r3,r22
 400a9f0:	10800044 	addi	r2,r2,1
 400a9f4:	41000015 	stw	r4,0(r8)
 400a9f8:	45800115 	stw	r22,4(r8)
 400a9fc:	d8c02015 	stw	r3,128(sp)
 400aa00:	d8801f15 	stw	r2,124(sp)
 400aa04:	010001c4 	movi	r4,7
 400aa08:	20819a16 	blt	r4,r2,400b074 <___svfprintf_internal_r+0x16a4>
 400aa0c:	42000204 	addi	r8,r8,8
 400aa10:	003e1306 	br	400a260 <__alt_data_end+0xfc00a260>
 400aa14:	d9403317 	ldw	r5,204(sp)
 400aa18:	00800044 	movi	r2,1
 400aa1c:	18c00044 	addi	r3,r3,1
 400aa20:	1141710e 	bge	r2,r5,400afe8 <___svfprintf_internal_r+0x1618>
 400aa24:	dc401f17 	ldw	r17,124(sp)
 400aa28:	00800044 	movi	r2,1
 400aa2c:	40800115 	stw	r2,4(r8)
 400aa30:	8c400044 	addi	r17,r17,1
 400aa34:	44000015 	stw	r16,0(r8)
 400aa38:	d8c02015 	stw	r3,128(sp)
 400aa3c:	dc401f15 	stw	r17,124(sp)
 400aa40:	008001c4 	movi	r2,7
 400aa44:	14417416 	blt	r2,r17,400b018 <___svfprintf_internal_r+0x1648>
 400aa48:	42000204 	addi	r8,r8,8
 400aa4c:	d8803817 	ldw	r2,224(sp)
 400aa50:	d9003417 	ldw	r4,208(sp)
 400aa54:	8c400044 	addi	r17,r17,1
 400aa58:	10c7883a 	add	r3,r2,r3
 400aa5c:	40800115 	stw	r2,4(r8)
 400aa60:	41000015 	stw	r4,0(r8)
 400aa64:	d8c02015 	stw	r3,128(sp)
 400aa68:	dc401f15 	stw	r17,124(sp)
 400aa6c:	008001c4 	movi	r2,7
 400aa70:	14417216 	blt	r2,r17,400b03c <___svfprintf_internal_r+0x166c>
 400aa74:	45800204 	addi	r22,r8,8
 400aa78:	d9003617 	ldw	r4,216(sp)
 400aa7c:	d9403717 	ldw	r5,220(sp)
 400aa80:	000d883a 	mov	r6,zero
 400aa84:	000f883a 	mov	r7,zero
 400aa88:	d8c03d15 	stw	r3,244(sp)
 400aa8c:	4012bc80 	call	4012bc8 <__eqdf2>
 400aa90:	d8c03d17 	ldw	r3,244(sp)
 400aa94:	1000b326 	beq	r2,zero,400ad64 <___svfprintf_internal_r+0x1394>
 400aa98:	d9403317 	ldw	r5,204(sp)
 400aa9c:	84000044 	addi	r16,r16,1
 400aaa0:	8c400044 	addi	r17,r17,1
 400aaa4:	28bfffc4 	addi	r2,r5,-1
 400aaa8:	1887883a 	add	r3,r3,r2
 400aaac:	b0800115 	stw	r2,4(r22)
 400aab0:	b4000015 	stw	r16,0(r22)
 400aab4:	d8c02015 	stw	r3,128(sp)
 400aab8:	dc401f15 	stw	r17,124(sp)
 400aabc:	008001c4 	movi	r2,7
 400aac0:	1440d216 	blt	r2,r17,400ae0c <___svfprintf_internal_r+0x143c>
 400aac4:	b5800204 	addi	r22,r22,8
 400aac8:	d9003b17 	ldw	r4,236(sp)
 400aacc:	df0022c4 	addi	fp,sp,139
 400aad0:	8c400044 	addi	r17,r17,1
 400aad4:	20c7883a 	add	r3,r4,r3
 400aad8:	b7000015 	stw	fp,0(r22)
 400aadc:	b1000115 	stw	r4,4(r22)
 400aae0:	d8c02015 	stw	r3,128(sp)
 400aae4:	dc401f15 	stw	r17,124(sp)
 400aae8:	008001c4 	movi	r2,7
 400aaec:	14400e16 	blt	r2,r17,400ab28 <___svfprintf_internal_r+0x1158>
 400aaf0:	b2000204 	addi	r8,r22,8
 400aaf4:	003e1a06 	br	400a360 <__alt_data_end+0xfc00a360>
 400aaf8:	010100b4 	movhi	r4,1026
 400aafc:	2120db84 	addi	r4,r4,-31890
 400ab00:	d9002c15 	stw	r4,176(sp)
 400ab04:	d9002c17 	ldw	r4,176(sp)
 400ab08:	1c07883a 	add	r3,r3,r16
 400ab0c:	44000115 	stw	r16,4(r8)
 400ab10:	41000015 	stw	r4,0(r8)
 400ab14:	10800044 	addi	r2,r2,1
 400ab18:	d8c02015 	stw	r3,128(sp)
 400ab1c:	d8801f15 	stw	r2,124(sp)
 400ab20:	010001c4 	movi	r4,7
 400ab24:	20be0d0e 	bge	r4,r2,400a35c <__alt_data_end+0xfc00a35c>
 400ab28:	d9402d17 	ldw	r5,180(sp)
 400ab2c:	d9801e04 	addi	r6,sp,120
 400ab30:	9809883a 	mov	r4,r19
 400ab34:	400f3c40 	call	400f3c4 <__ssprint_r>
 400ab38:	103c8c1e 	bne	r2,zero,4009d6c <__alt_data_end+0xfc009d6c>
 400ab3c:	d8c02017 	ldw	r3,128(sp)
 400ab40:	da000404 	addi	r8,sp,16
 400ab44:	003e0606 	br	400a360 <__alt_data_end+0xfc00a360>
 400ab48:	d9402d17 	ldw	r5,180(sp)
 400ab4c:	d9801e04 	addi	r6,sp,120
 400ab50:	9809883a 	mov	r4,r19
 400ab54:	400f3c40 	call	400f3c4 <__ssprint_r>
 400ab58:	103e3d26 	beq	r2,zero,400a450 <__alt_data_end+0xfc00a450>
 400ab5c:	003c8306 	br	4009d6c <__alt_data_end+0xfc009d6c>
 400ab60:	d9402d17 	ldw	r5,180(sp)
 400ab64:	d9801e04 	addi	r6,sp,120
 400ab68:	9809883a 	mov	r4,r19
 400ab6c:	400f3c40 	call	400f3c4 <__ssprint_r>
 400ab70:	103c7e1e 	bne	r2,zero,4009d6c <__alt_data_end+0xfc009d6c>
 400ab74:	d8c02017 	ldw	r3,128(sp)
 400ab78:	da000404 	addi	r8,sp,16
 400ab7c:	003deb06 	br	400a32c <__alt_data_end+0xfc00a32c>
 400ab80:	d9402d17 	ldw	r5,180(sp)
 400ab84:	d9801e04 	addi	r6,sp,120
 400ab88:	9809883a 	mov	r4,r19
 400ab8c:	400f3c40 	call	400f3c4 <__ssprint_r>
 400ab90:	103c761e 	bne	r2,zero,4009d6c <__alt_data_end+0xfc009d6c>
 400ab94:	d8c02017 	ldw	r3,128(sp)
 400ab98:	da000404 	addi	r8,sp,16
 400ab9c:	003d9f06 	br	400a21c <__alt_data_end+0xfc00a21c>
 400aba0:	d9402d17 	ldw	r5,180(sp)
 400aba4:	d9801e04 	addi	r6,sp,120
 400aba8:	9809883a 	mov	r4,r19
 400abac:	400f3c40 	call	400f3c4 <__ssprint_r>
 400abb0:	103c6e1e 	bne	r2,zero,4009d6c <__alt_data_end+0xfc009d6c>
 400abb4:	d8c02017 	ldw	r3,128(sp)
 400abb8:	da000404 	addi	r8,sp,16
 400abbc:	003da506 	br	400a254 <__alt_data_end+0xfc00a254>
 400abc0:	d9402a17 	ldw	r5,168(sp)
 400abc4:	d8002785 	stb	zero,158(sp)
 400abc8:	283f0816 	blt	r5,zero,400a7ec <__alt_data_end+0xfc00a7ec>
 400abcc:	00ffdfc4 	movi	r3,-129
 400abd0:	a584b03a 	or	r2,r20,r22
 400abd4:	90e4703a 	and	r18,r18,r3
 400abd8:	103c5126 	beq	r2,zero,4009d20 <__alt_data_end+0xfc009d20>
 400abdc:	0039883a 	mov	fp,zero
 400abe0:	003e5a06 	br	400a54c <__alt_data_end+0xfc00a54c>
 400abe4:	9080040c 	andi	r2,r18,16
 400abe8:	10013d26 	beq	r2,zero,400b0e0 <___svfprintf_internal_r+0x1710>
 400abec:	d8c02e17 	ldw	r3,184(sp)
 400abf0:	d9002a17 	ldw	r4,168(sp)
 400abf4:	d8002785 	stb	zero,158(sp)
 400abf8:	18800104 	addi	r2,r3,4
 400abfc:	1d000017 	ldw	r20,0(r3)
 400ac00:	002d883a 	mov	r22,zero
 400ac04:	20013f16 	blt	r4,zero,400b104 <___svfprintf_internal_r+0x1734>
 400ac08:	00ffdfc4 	movi	r3,-129
 400ac0c:	d8802e15 	stw	r2,184(sp)
 400ac10:	90e4703a 	and	r18,r18,r3
 400ac14:	a03d0926 	beq	r20,zero,400a03c <__alt_data_end+0xfc00a03c>
 400ac18:	0039883a 	mov	fp,zero
 400ac1c:	003d0c06 	br	400a050 <__alt_data_end+0xfc00a050>
 400ac20:	dc402617 	ldw	r17,152(sp)
 400ac24:	0441830e 	bge	zero,r17,400b234 <___svfprintf_internal_r+0x1864>
 400ac28:	dc403217 	ldw	r17,200(sp)
 400ac2c:	d8803317 	ldw	r2,204(sp)
 400ac30:	1440010e 	bge	r2,r17,400ac38 <___svfprintf_internal_r+0x1268>
 400ac34:	1023883a 	mov	r17,r2
 400ac38:	04400a0e 	bge	zero,r17,400ac64 <___svfprintf_internal_r+0x1294>
 400ac3c:	d8801f17 	ldw	r2,124(sp)
 400ac40:	1c47883a 	add	r3,r3,r17
 400ac44:	44000015 	stw	r16,0(r8)
 400ac48:	10800044 	addi	r2,r2,1
 400ac4c:	44400115 	stw	r17,4(r8)
 400ac50:	d8c02015 	stw	r3,128(sp)
 400ac54:	d8801f15 	stw	r2,124(sp)
 400ac58:	010001c4 	movi	r4,7
 400ac5c:	20827516 	blt	r4,r2,400b634 <___svfprintf_internal_r+0x1c64>
 400ac60:	42000204 	addi	r8,r8,8
 400ac64:	88027b16 	blt	r17,zero,400b654 <___svfprintf_internal_r+0x1c84>
 400ac68:	d9003217 	ldw	r4,200(sp)
 400ac6c:	2463c83a 	sub	r17,r4,r17
 400ac70:	0440990e 	bge	zero,r17,400aed8 <___svfprintf_internal_r+0x1508>
 400ac74:	05800404 	movi	r22,16
 400ac78:	d8801f17 	ldw	r2,124(sp)
 400ac7c:	b441530e 	bge	r22,r17,400b1cc <___svfprintf_internal_r+0x17fc>
 400ac80:	010100b4 	movhi	r4,1026
 400ac84:	2120db84 	addi	r4,r4,-31890
 400ac88:	d9002c15 	stw	r4,176(sp)
 400ac8c:	070001c4 	movi	fp,7
 400ac90:	dd002d17 	ldw	r20,180(sp)
 400ac94:	00000306 	br	400aca4 <___svfprintf_internal_r+0x12d4>
 400ac98:	42000204 	addi	r8,r8,8
 400ac9c:	8c7ffc04 	addi	r17,r17,-16
 400aca0:	b4414d0e 	bge	r22,r17,400b1d8 <___svfprintf_internal_r+0x1808>
 400aca4:	18c00404 	addi	r3,r3,16
 400aca8:	10800044 	addi	r2,r2,1
 400acac:	45400015 	stw	r21,0(r8)
 400acb0:	45800115 	stw	r22,4(r8)
 400acb4:	d8c02015 	stw	r3,128(sp)
 400acb8:	d8801f15 	stw	r2,124(sp)
 400acbc:	e0bff60e 	bge	fp,r2,400ac98 <__alt_data_end+0xfc00ac98>
 400acc0:	d9801e04 	addi	r6,sp,120
 400acc4:	a00b883a 	mov	r5,r20
 400acc8:	9809883a 	mov	r4,r19
 400accc:	400f3c40 	call	400f3c4 <__ssprint_r>
 400acd0:	103c261e 	bne	r2,zero,4009d6c <__alt_data_end+0xfc009d6c>
 400acd4:	d8c02017 	ldw	r3,128(sp)
 400acd8:	d8801f17 	ldw	r2,124(sp)
 400acdc:	da000404 	addi	r8,sp,16
 400ace0:	003fee06 	br	400ac9c <__alt_data_end+0xfc00ac9c>
 400ace4:	d9402d17 	ldw	r5,180(sp)
 400ace8:	d9801e04 	addi	r6,sp,120
 400acec:	9809883a 	mov	r4,r19
 400acf0:	400f3c40 	call	400f3c4 <__ssprint_r>
 400acf4:	103c1d1e 	bne	r2,zero,4009d6c <__alt_data_end+0xfc009d6c>
 400acf8:	d8c02017 	ldw	r3,128(sp)
 400acfc:	df002787 	ldb	fp,158(sp)
 400ad00:	da000404 	addi	r8,sp,16
 400ad04:	003d3806 	br	400a1e8 <__alt_data_end+0xfc00a1e8>
 400ad08:	9080040c 	andi	r2,r18,16
 400ad0c:	10005c26 	beq	r2,zero,400ae80 <___svfprintf_internal_r+0x14b0>
 400ad10:	d8c02e17 	ldw	r3,184(sp)
 400ad14:	d9002a17 	ldw	r4,168(sp)
 400ad18:	d8002785 	stb	zero,158(sp)
 400ad1c:	18800104 	addi	r2,r3,4
 400ad20:	1d000017 	ldw	r20,0(r3)
 400ad24:	002d883a 	mov	r22,zero
 400ad28:	20005e16 	blt	r4,zero,400aea4 <___svfprintf_internal_r+0x14d4>
 400ad2c:	00ffdfc4 	movi	r3,-129
 400ad30:	d8802e15 	stw	r2,184(sp)
 400ad34:	90e4703a 	and	r18,r18,r3
 400ad38:	0039883a 	mov	fp,zero
 400ad3c:	a03ddf26 	beq	r20,zero,400a4bc <__alt_data_end+0xfc00a4bc>
 400ad40:	00800244 	movi	r2,9
 400ad44:	153c8e36 	bltu	r2,r20,4009f80 <__alt_data_end+0xfc009f80>
 400ad48:	a5000c04 	addi	r20,r20,48
 400ad4c:	dc001dc4 	addi	r16,sp,119
 400ad50:	dd001dc5 	stb	r20,119(sp)
 400ad54:	d8c02817 	ldw	r3,160(sp)
 400ad58:	1c07c83a 	sub	r3,r3,r16
 400ad5c:	d8c02b15 	stw	r3,172(sp)
 400ad60:	003cd306 	br	400a0b0 <__alt_data_end+0xfc00a0b0>
 400ad64:	d8803317 	ldw	r2,204(sp)
 400ad68:	143fffc4 	addi	r16,r2,-1
 400ad6c:	043f560e 	bge	zero,r16,400aac8 <__alt_data_end+0xfc00aac8>
 400ad70:	07000404 	movi	fp,16
 400ad74:	e403530e 	bge	fp,r16,400bac4 <___svfprintf_internal_r+0x20f4>
 400ad78:	014100b4 	movhi	r5,1026
 400ad7c:	2960db84 	addi	r5,r5,-31890
 400ad80:	d9402c15 	stw	r5,176(sp)
 400ad84:	01c001c4 	movi	r7,7
 400ad88:	dd002d17 	ldw	r20,180(sp)
 400ad8c:	00000306 	br	400ad9c <___svfprintf_internal_r+0x13cc>
 400ad90:	843ffc04 	addi	r16,r16,-16
 400ad94:	b5800204 	addi	r22,r22,8
 400ad98:	e400130e 	bge	fp,r16,400ade8 <___svfprintf_internal_r+0x1418>
 400ad9c:	18c00404 	addi	r3,r3,16
 400ada0:	8c400044 	addi	r17,r17,1
 400ada4:	b5400015 	stw	r21,0(r22)
 400ada8:	b7000115 	stw	fp,4(r22)
 400adac:	d8c02015 	stw	r3,128(sp)
 400adb0:	dc401f15 	stw	r17,124(sp)
 400adb4:	3c7ff60e 	bge	r7,r17,400ad90 <__alt_data_end+0xfc00ad90>
 400adb8:	d9801e04 	addi	r6,sp,120
 400adbc:	a00b883a 	mov	r5,r20
 400adc0:	9809883a 	mov	r4,r19
 400adc4:	d9c03d15 	stw	r7,244(sp)
 400adc8:	400f3c40 	call	400f3c4 <__ssprint_r>
 400adcc:	d9c03d17 	ldw	r7,244(sp)
 400add0:	103be61e 	bne	r2,zero,4009d6c <__alt_data_end+0xfc009d6c>
 400add4:	843ffc04 	addi	r16,r16,-16
 400add8:	d8c02017 	ldw	r3,128(sp)
 400addc:	dc401f17 	ldw	r17,124(sp)
 400ade0:	dd800404 	addi	r22,sp,16
 400ade4:	e43fed16 	blt	fp,r16,400ad9c <__alt_data_end+0xfc00ad9c>
 400ade8:	d8802c17 	ldw	r2,176(sp)
 400adec:	1c07883a 	add	r3,r3,r16
 400adf0:	8c400044 	addi	r17,r17,1
 400adf4:	b0800015 	stw	r2,0(r22)
 400adf8:	b4000115 	stw	r16,4(r22)
 400adfc:	d8c02015 	stw	r3,128(sp)
 400ae00:	dc401f15 	stw	r17,124(sp)
 400ae04:	008001c4 	movi	r2,7
 400ae08:	147f2e0e 	bge	r2,r17,400aac4 <__alt_data_end+0xfc00aac4>
 400ae0c:	d9402d17 	ldw	r5,180(sp)
 400ae10:	d9801e04 	addi	r6,sp,120
 400ae14:	9809883a 	mov	r4,r19
 400ae18:	400f3c40 	call	400f3c4 <__ssprint_r>
 400ae1c:	103bd31e 	bne	r2,zero,4009d6c <__alt_data_end+0xfc009d6c>
 400ae20:	d8c02017 	ldw	r3,128(sp)
 400ae24:	dc401f17 	ldw	r17,124(sp)
 400ae28:	dd800404 	addi	r22,sp,16
 400ae2c:	003f2606 	br	400aac8 <__alt_data_end+0xfc00aac8>
 400ae30:	9080040c 	andi	r2,r18,16
 400ae34:	1000c326 	beq	r2,zero,400b144 <___svfprintf_internal_r+0x1774>
 400ae38:	d9402e17 	ldw	r5,184(sp)
 400ae3c:	2d000017 	ldw	r20,0(r5)
 400ae40:	29400104 	addi	r5,r5,4
 400ae44:	d9402e15 	stw	r5,184(sp)
 400ae48:	a02dd7fa 	srai	r22,r20,31
 400ae4c:	b005883a 	mov	r2,r22
 400ae50:	103c430e 	bge	r2,zero,4009f60 <__alt_data_end+0xfc009f60>
 400ae54:	d9402a17 	ldw	r5,168(sp)
 400ae58:	0529c83a 	sub	r20,zero,r20
 400ae5c:	07000b44 	movi	fp,45
 400ae60:	a004c03a 	cmpne	r2,r20,zero
 400ae64:	05adc83a 	sub	r22,zero,r22
 400ae68:	df002785 	stb	fp,158(sp)
 400ae6c:	b0adc83a 	sub	r22,r22,r2
 400ae70:	28022e16 	blt	r5,zero,400b72c <___svfprintf_internal_r+0x1d5c>
 400ae74:	00bfdfc4 	movi	r2,-129
 400ae78:	90a4703a 	and	r18,r18,r2
 400ae7c:	003c3f06 	br	4009f7c <__alt_data_end+0xfc009f7c>
 400ae80:	9080100c 	andi	r2,r18,64
 400ae84:	d8002785 	stb	zero,158(sp)
 400ae88:	10012526 	beq	r2,zero,400b320 <___svfprintf_internal_r+0x1950>
 400ae8c:	d9402e17 	ldw	r5,184(sp)
 400ae90:	d8c02a17 	ldw	r3,168(sp)
 400ae94:	002d883a 	mov	r22,zero
 400ae98:	28800104 	addi	r2,r5,4
 400ae9c:	2d00000b 	ldhu	r20,0(r5)
 400aea0:	183fa20e 	bge	r3,zero,400ad2c <__alt_data_end+0xfc00ad2c>
 400aea4:	d8802e15 	stw	r2,184(sp)
 400aea8:	0039883a 	mov	fp,zero
 400aeac:	a584b03a 	or	r2,r20,r22
 400aeb0:	103c321e 	bne	r2,zero,4009f7c <__alt_data_end+0xfc009f7c>
 400aeb4:	00800044 	movi	r2,1
 400aeb8:	003e5006 	br	400a7fc <__alt_data_end+0xfc00a7fc>
 400aebc:	d9402d17 	ldw	r5,180(sp)
 400aec0:	d9801e04 	addi	r6,sp,120
 400aec4:	9809883a 	mov	r4,r19
 400aec8:	400f3c40 	call	400f3c4 <__ssprint_r>
 400aecc:	103ba71e 	bne	r2,zero,4009d6c <__alt_data_end+0xfc009d6c>
 400aed0:	d8c02017 	ldw	r3,128(sp)
 400aed4:	da000404 	addi	r8,sp,16
 400aed8:	d9003217 	ldw	r4,200(sp)
 400aedc:	d8802617 	ldw	r2,152(sp)
 400aee0:	d9403317 	ldw	r5,204(sp)
 400aee4:	8123883a 	add	r17,r16,r4
 400aee8:	11400216 	blt	r2,r5,400aef4 <___svfprintf_internal_r+0x1524>
 400aeec:	9100004c 	andi	r4,r18,1
 400aef0:	20000d26 	beq	r4,zero,400af28 <___svfprintf_internal_r+0x1558>
 400aef4:	d9003817 	ldw	r4,224(sp)
 400aef8:	d9403417 	ldw	r5,208(sp)
 400aefc:	1907883a 	add	r3,r3,r4
 400af00:	d9001f17 	ldw	r4,124(sp)
 400af04:	41400015 	stw	r5,0(r8)
 400af08:	d9403817 	ldw	r5,224(sp)
 400af0c:	21000044 	addi	r4,r4,1
 400af10:	d8c02015 	stw	r3,128(sp)
 400af14:	41400115 	stw	r5,4(r8)
 400af18:	d9001f15 	stw	r4,124(sp)
 400af1c:	014001c4 	movi	r5,7
 400af20:	2901dc16 	blt	r5,r4,400b694 <___svfprintf_internal_r+0x1cc4>
 400af24:	42000204 	addi	r8,r8,8
 400af28:	d9003317 	ldw	r4,204(sp)
 400af2c:	8121883a 	add	r16,r16,r4
 400af30:	2085c83a 	sub	r2,r4,r2
 400af34:	8461c83a 	sub	r16,r16,r17
 400af38:	1400010e 	bge	r2,r16,400af40 <___svfprintf_internal_r+0x1570>
 400af3c:	1021883a 	mov	r16,r2
 400af40:	04000a0e 	bge	zero,r16,400af6c <___svfprintf_internal_r+0x159c>
 400af44:	d9001f17 	ldw	r4,124(sp)
 400af48:	1c07883a 	add	r3,r3,r16
 400af4c:	44400015 	stw	r17,0(r8)
 400af50:	21000044 	addi	r4,r4,1
 400af54:	44000115 	stw	r16,4(r8)
 400af58:	d8c02015 	stw	r3,128(sp)
 400af5c:	d9001f15 	stw	r4,124(sp)
 400af60:	014001c4 	movi	r5,7
 400af64:	2901e616 	blt	r5,r4,400b700 <___svfprintf_internal_r+0x1d30>
 400af68:	42000204 	addi	r8,r8,8
 400af6c:	8001f616 	blt	r16,zero,400b748 <___svfprintf_internal_r+0x1d78>
 400af70:	1421c83a 	sub	r16,r2,r16
 400af74:	043cfa0e 	bge	zero,r16,400a360 <__alt_data_end+0xfc00a360>
 400af78:	04400404 	movi	r17,16
 400af7c:	d8801f17 	ldw	r2,124(sp)
 400af80:	8c3edd0e 	bge	r17,r16,400aaf8 <__alt_data_end+0xfc00aaf8>
 400af84:	014100b4 	movhi	r5,1026
 400af88:	2960db84 	addi	r5,r5,-31890
 400af8c:	d9402c15 	stw	r5,176(sp)
 400af90:	058001c4 	movi	r22,7
 400af94:	dd002d17 	ldw	r20,180(sp)
 400af98:	00000306 	br	400afa8 <___svfprintf_internal_r+0x15d8>
 400af9c:	42000204 	addi	r8,r8,8
 400afa0:	843ffc04 	addi	r16,r16,-16
 400afa4:	8c3ed70e 	bge	r17,r16,400ab04 <__alt_data_end+0xfc00ab04>
 400afa8:	18c00404 	addi	r3,r3,16
 400afac:	10800044 	addi	r2,r2,1
 400afb0:	45400015 	stw	r21,0(r8)
 400afb4:	44400115 	stw	r17,4(r8)
 400afb8:	d8c02015 	stw	r3,128(sp)
 400afbc:	d8801f15 	stw	r2,124(sp)
 400afc0:	b0bff60e 	bge	r22,r2,400af9c <__alt_data_end+0xfc00af9c>
 400afc4:	d9801e04 	addi	r6,sp,120
 400afc8:	a00b883a 	mov	r5,r20
 400afcc:	9809883a 	mov	r4,r19
 400afd0:	400f3c40 	call	400f3c4 <__ssprint_r>
 400afd4:	103b651e 	bne	r2,zero,4009d6c <__alt_data_end+0xfc009d6c>
 400afd8:	d8c02017 	ldw	r3,128(sp)
 400afdc:	d8801f17 	ldw	r2,124(sp)
 400afe0:	da000404 	addi	r8,sp,16
 400afe4:	003fee06 	br	400afa0 <__alt_data_end+0xfc00afa0>
 400afe8:	9088703a 	and	r4,r18,r2
 400afec:	203e8d1e 	bne	r4,zero,400aa24 <__alt_data_end+0xfc00aa24>
 400aff0:	dc401f17 	ldw	r17,124(sp)
 400aff4:	40800115 	stw	r2,4(r8)
 400aff8:	44000015 	stw	r16,0(r8)
 400affc:	8c400044 	addi	r17,r17,1
 400b000:	d8c02015 	stw	r3,128(sp)
 400b004:	dc401f15 	stw	r17,124(sp)
 400b008:	008001c4 	movi	r2,7
 400b00c:	147f7f16 	blt	r2,r17,400ae0c <__alt_data_end+0xfc00ae0c>
 400b010:	45800204 	addi	r22,r8,8
 400b014:	003eac06 	br	400aac8 <__alt_data_end+0xfc00aac8>
 400b018:	d9402d17 	ldw	r5,180(sp)
 400b01c:	d9801e04 	addi	r6,sp,120
 400b020:	9809883a 	mov	r4,r19
 400b024:	400f3c40 	call	400f3c4 <__ssprint_r>
 400b028:	103b501e 	bne	r2,zero,4009d6c <__alt_data_end+0xfc009d6c>
 400b02c:	d8c02017 	ldw	r3,128(sp)
 400b030:	dc401f17 	ldw	r17,124(sp)
 400b034:	da000404 	addi	r8,sp,16
 400b038:	003e8406 	br	400aa4c <__alt_data_end+0xfc00aa4c>
 400b03c:	d9402d17 	ldw	r5,180(sp)
 400b040:	d9801e04 	addi	r6,sp,120
 400b044:	9809883a 	mov	r4,r19
 400b048:	400f3c40 	call	400f3c4 <__ssprint_r>
 400b04c:	103b471e 	bne	r2,zero,4009d6c <__alt_data_end+0xfc009d6c>
 400b050:	d8c02017 	ldw	r3,128(sp)
 400b054:	dc401f17 	ldw	r17,124(sp)
 400b058:	dd800404 	addi	r22,sp,16
 400b05c:	003e8606 	br	400aa78 <__alt_data_end+0xfc00aa78>
 400b060:	0029883a 	mov	r20,zero
 400b064:	a5000c04 	addi	r20,r20,48
 400b068:	dc001dc4 	addi	r16,sp,119
 400b06c:	dd001dc5 	stb	r20,119(sp)
 400b070:	003f3806 	br	400ad54 <__alt_data_end+0xfc00ad54>
 400b074:	d9402d17 	ldw	r5,180(sp)
 400b078:	d9801e04 	addi	r6,sp,120
 400b07c:	9809883a 	mov	r4,r19
 400b080:	400f3c40 	call	400f3c4 <__ssprint_r>
 400b084:	103b391e 	bne	r2,zero,4009d6c <__alt_data_end+0xfc009d6c>
 400b088:	d8c02017 	ldw	r3,128(sp)
 400b08c:	da000404 	addi	r8,sp,16
 400b090:	003c7306 	br	400a260 <__alt_data_end+0xfc00a260>
 400b094:	d9003617 	ldw	r4,216(sp)
 400b098:	d9403717 	ldw	r5,220(sp)
 400b09c:	da003e15 	stw	r8,248(sp)
 400b0a0:	40074580 	call	4007458 <__fpclassifyd>
 400b0a4:	da003e17 	ldw	r8,248(sp)
 400b0a8:	1000bd1e 	bne	r2,zero,400b3a0 <___svfprintf_internal_r+0x19d0>
 400b0ac:	008011c4 	movi	r2,71
 400b0b0:	14411e0e 	bge	r2,r17,400b52c <___svfprintf_internal_r+0x1b5c>
 400b0b4:	040100b4 	movhi	r16,1026
 400b0b8:	8420ce04 	addi	r16,r16,-31944
 400b0bc:	00c000c4 	movi	r3,3
 400b0c0:	00bfdfc4 	movi	r2,-129
 400b0c4:	d8c02915 	stw	r3,164(sp)
 400b0c8:	90a4703a 	and	r18,r18,r2
 400b0cc:	df002783 	ldbu	fp,158(sp)
 400b0d0:	d8c02b15 	stw	r3,172(sp)
 400b0d4:	d8002a15 	stw	zero,168(sp)
 400b0d8:	d8003215 	stw	zero,200(sp)
 400b0dc:	003bfa06 	br	400a0c8 <__alt_data_end+0xfc00a0c8>
 400b0e0:	9080100c 	andi	r2,r18,64
 400b0e4:	d8002785 	stb	zero,158(sp)
 400b0e8:	10009426 	beq	r2,zero,400b33c <___svfprintf_internal_r+0x196c>
 400b0ec:	d9402e17 	ldw	r5,184(sp)
 400b0f0:	d8c02a17 	ldw	r3,168(sp)
 400b0f4:	002d883a 	mov	r22,zero
 400b0f8:	28800104 	addi	r2,r5,4
 400b0fc:	2d00000b 	ldhu	r20,0(r5)
 400b100:	183ec10e 	bge	r3,zero,400ac08 <__alt_data_end+0xfc00ac08>
 400b104:	a586b03a 	or	r3,r20,r22
 400b108:	d8802e15 	stw	r2,184(sp)
 400b10c:	183ec21e 	bne	r3,zero,400ac18 <__alt_data_end+0xfc00ac18>
 400b110:	0039883a 	mov	fp,zero
 400b114:	0005883a 	mov	r2,zero
 400b118:	003db806 	br	400a7fc <__alt_data_end+0xfc00a7fc>
 400b11c:	d8c02e17 	ldw	r3,184(sp)
 400b120:	d9002e17 	ldw	r4,184(sp)
 400b124:	d9402e17 	ldw	r5,184(sp)
 400b128:	18c00017 	ldw	r3,0(r3)
 400b12c:	21000117 	ldw	r4,4(r4)
 400b130:	29400204 	addi	r5,r5,8
 400b134:	d8c03615 	stw	r3,216(sp)
 400b138:	d9003715 	stw	r4,220(sp)
 400b13c:	d9402e15 	stw	r5,184(sp)
 400b140:	003b5a06 	br	4009eac <__alt_data_end+0xfc009eac>
 400b144:	9080100c 	andi	r2,r18,64
 400b148:	10010726 	beq	r2,zero,400b568 <___svfprintf_internal_r+0x1b98>
 400b14c:	d8802e17 	ldw	r2,184(sp)
 400b150:	1500000f 	ldh	r20,0(r2)
 400b154:	10800104 	addi	r2,r2,4
 400b158:	d8802e15 	stw	r2,184(sp)
 400b15c:	a02dd7fa 	srai	r22,r20,31
 400b160:	b005883a 	mov	r2,r22
 400b164:	003b7d06 	br	4009f5c <__alt_data_end+0xfc009f5c>
 400b168:	9080100c 	andi	r2,r18,64
 400b16c:	10010526 	beq	r2,zero,400b584 <___svfprintf_internal_r+0x1bb4>
 400b170:	d8c02e17 	ldw	r3,184(sp)
 400b174:	002d883a 	mov	r22,zero
 400b178:	1d00000b 	ldhu	r20,0(r3)
 400b17c:	18c00104 	addi	r3,r3,4
 400b180:	d8c02e15 	stw	r3,184(sp)
 400b184:	003ce206 	br	400a510 <__alt_data_end+0xfc00a510>
 400b188:	bc400007 	ldb	r17,0(r23)
 400b18c:	003a6506 	br	4009b24 <__alt_data_end+0xfc009b24>
 400b190:	9080040c 	andi	r2,r18,16
 400b194:	10010126 	beq	r2,zero,400b59c <___svfprintf_internal_r+0x1bcc>
 400b198:	d8c02e17 	ldw	r3,184(sp)
 400b19c:	d9002f17 	ldw	r4,188(sp)
 400b1a0:	18800017 	ldw	r2,0(r3)
 400b1a4:	18c00104 	addi	r3,r3,4
 400b1a8:	d8c02e15 	stw	r3,184(sp)
 400b1ac:	11000015 	stw	r4,0(r2)
 400b1b0:	003a3206 	br	4009a7c <__alt_data_end+0xfc009a7c>
 400b1b4:	d9002a17 	ldw	r4,168(sp)
 400b1b8:	d8002785 	stb	zero,158(sp)
 400b1bc:	203d8d16 	blt	r4,zero,400a7f4 <__alt_data_end+0xfc00a7f4>
 400b1c0:	00bfdfc4 	movi	r2,-129
 400b1c4:	90a4703a 	and	r18,r18,r2
 400b1c8:	003ad506 	br	4009d20 <__alt_data_end+0xfc009d20>
 400b1cc:	014100b4 	movhi	r5,1026
 400b1d0:	2960db84 	addi	r5,r5,-31890
 400b1d4:	d9402c15 	stw	r5,176(sp)
 400b1d8:	d9402c17 	ldw	r5,176(sp)
 400b1dc:	1c47883a 	add	r3,r3,r17
 400b1e0:	10800044 	addi	r2,r2,1
 400b1e4:	41400015 	stw	r5,0(r8)
 400b1e8:	44400115 	stw	r17,4(r8)
 400b1ec:	d8c02015 	stw	r3,128(sp)
 400b1f0:	d8801f15 	stw	r2,124(sp)
 400b1f4:	010001c4 	movi	r4,7
 400b1f8:	20bf3016 	blt	r4,r2,400aebc <__alt_data_end+0xfc00aebc>
 400b1fc:	42000204 	addi	r8,r8,8
 400b200:	003f3506 	br	400aed8 <__alt_data_end+0xfc00aed8>
 400b204:	010100b4 	movhi	r4,1026
 400b208:	2120db84 	addi	r4,r4,-31890
 400b20c:	d9002c15 	stw	r4,176(sp)
 400b210:	003c3c06 	br	400a304 <__alt_data_end+0xfc00a304>
 400b214:	d9402d17 	ldw	r5,180(sp)
 400b218:	d9801e04 	addi	r6,sp,120
 400b21c:	9809883a 	mov	r4,r19
 400b220:	400f3c40 	call	400f3c4 <__ssprint_r>
 400b224:	103ad11e 	bne	r2,zero,4009d6c <__alt_data_end+0xfc009d6c>
 400b228:	d8c02017 	ldw	r3,128(sp)
 400b22c:	da000404 	addi	r8,sp,16
 400b230:	003d9306 	br	400a880 <__alt_data_end+0xfc00a880>
 400b234:	d8801f17 	ldw	r2,124(sp)
 400b238:	014100b4 	movhi	r5,1026
 400b23c:	01000044 	movi	r4,1
 400b240:	18c00044 	addi	r3,r3,1
 400b244:	10800044 	addi	r2,r2,1
 400b248:	2960db04 	addi	r5,r5,-31892
 400b24c:	41000115 	stw	r4,4(r8)
 400b250:	41400015 	stw	r5,0(r8)
 400b254:	d8c02015 	stw	r3,128(sp)
 400b258:	d8801f15 	stw	r2,124(sp)
 400b25c:	010001c4 	movi	r4,7
 400b260:	2080b516 	blt	r4,r2,400b538 <___svfprintf_internal_r+0x1b68>
 400b264:	42000204 	addi	r8,r8,8
 400b268:	8800041e 	bne	r17,zero,400b27c <___svfprintf_internal_r+0x18ac>
 400b26c:	d8803317 	ldw	r2,204(sp)
 400b270:	1000021e 	bne	r2,zero,400b27c <___svfprintf_internal_r+0x18ac>
 400b274:	9080004c 	andi	r2,r18,1
 400b278:	103c3926 	beq	r2,zero,400a360 <__alt_data_end+0xfc00a360>
 400b27c:	d9003817 	ldw	r4,224(sp)
 400b280:	d8801f17 	ldw	r2,124(sp)
 400b284:	d9403417 	ldw	r5,208(sp)
 400b288:	20c7883a 	add	r3,r4,r3
 400b28c:	10800044 	addi	r2,r2,1
 400b290:	41000115 	stw	r4,4(r8)
 400b294:	41400015 	stw	r5,0(r8)
 400b298:	d8c02015 	stw	r3,128(sp)
 400b29c:	d8801f15 	stw	r2,124(sp)
 400b2a0:	010001c4 	movi	r4,7
 400b2a4:	20818016 	blt	r4,r2,400b8a8 <___svfprintf_internal_r+0x1ed8>
 400b2a8:	42000204 	addi	r8,r8,8
 400b2ac:	0463c83a 	sub	r17,zero,r17
 400b2b0:	0440cb0e 	bge	zero,r17,400b5e0 <___svfprintf_internal_r+0x1c10>
 400b2b4:	05800404 	movi	r22,16
 400b2b8:	b440e80e 	bge	r22,r17,400b65c <___svfprintf_internal_r+0x1c8c>
 400b2bc:	014100b4 	movhi	r5,1026
 400b2c0:	2960db84 	addi	r5,r5,-31890
 400b2c4:	d9402c15 	stw	r5,176(sp)
 400b2c8:	070001c4 	movi	fp,7
 400b2cc:	dd002d17 	ldw	r20,180(sp)
 400b2d0:	00000306 	br	400b2e0 <___svfprintf_internal_r+0x1910>
 400b2d4:	42000204 	addi	r8,r8,8
 400b2d8:	8c7ffc04 	addi	r17,r17,-16
 400b2dc:	b440e20e 	bge	r22,r17,400b668 <___svfprintf_internal_r+0x1c98>
 400b2e0:	18c00404 	addi	r3,r3,16
 400b2e4:	10800044 	addi	r2,r2,1
 400b2e8:	45400015 	stw	r21,0(r8)
 400b2ec:	45800115 	stw	r22,4(r8)
 400b2f0:	d8c02015 	stw	r3,128(sp)
 400b2f4:	d8801f15 	stw	r2,124(sp)
 400b2f8:	e0bff60e 	bge	fp,r2,400b2d4 <__alt_data_end+0xfc00b2d4>
 400b2fc:	d9801e04 	addi	r6,sp,120
 400b300:	a00b883a 	mov	r5,r20
 400b304:	9809883a 	mov	r4,r19
 400b308:	400f3c40 	call	400f3c4 <__ssprint_r>
 400b30c:	103a971e 	bne	r2,zero,4009d6c <__alt_data_end+0xfc009d6c>
 400b310:	d8c02017 	ldw	r3,128(sp)
 400b314:	d8801f17 	ldw	r2,124(sp)
 400b318:	da000404 	addi	r8,sp,16
 400b31c:	003fee06 	br	400b2d8 <__alt_data_end+0xfc00b2d8>
 400b320:	d9002e17 	ldw	r4,184(sp)
 400b324:	d9402a17 	ldw	r5,168(sp)
 400b328:	002d883a 	mov	r22,zero
 400b32c:	20800104 	addi	r2,r4,4
 400b330:	25000017 	ldw	r20,0(r4)
 400b334:	283e7d0e 	bge	r5,zero,400ad2c <__alt_data_end+0xfc00ad2c>
 400b338:	003eda06 	br	400aea4 <__alt_data_end+0xfc00aea4>
 400b33c:	d9002e17 	ldw	r4,184(sp)
 400b340:	d9402a17 	ldw	r5,168(sp)
 400b344:	002d883a 	mov	r22,zero
 400b348:	20800104 	addi	r2,r4,4
 400b34c:	25000017 	ldw	r20,0(r4)
 400b350:	283e2d0e 	bge	r5,zero,400ac08 <__alt_data_end+0xfc00ac08>
 400b354:	003f6b06 	br	400b104 <__alt_data_end+0xfc00b104>
 400b358:	d8c02e15 	stw	r3,184(sp)
 400b35c:	0039883a 	mov	fp,zero
 400b360:	003ed206 	br	400aeac <__alt_data_end+0xfc00aeac>
 400b364:	bc400043 	ldbu	r17,1(r23)
 400b368:	84000814 	ori	r16,r16,32
 400b36c:	bdc00044 	addi	r23,r23,1
 400b370:	8c403fcc 	andi	r17,r17,255
 400b374:	8c40201c 	xori	r17,r17,128
 400b378:	8c7fe004 	addi	r17,r17,-128
 400b37c:	0039e906 	br	4009b24 <__alt_data_end+0xfc009b24>
 400b380:	d9402d17 	ldw	r5,180(sp)
 400b384:	d9801e04 	addi	r6,sp,120
 400b388:	9809883a 	mov	r4,r19
 400b38c:	400f3c40 	call	400f3c4 <__ssprint_r>
 400b390:	103a761e 	bne	r2,zero,4009d6c <__alt_data_end+0xfc009d6c>
 400b394:	d8c02017 	ldw	r3,128(sp)
 400b398:	da000404 	addi	r8,sp,16
 400b39c:	003d4a06 	br	400a8c8 <__alt_data_end+0xfc00a8c8>
 400b3a0:	d9002a17 	ldw	r4,168(sp)
 400b3a4:	05bff7c4 	movi	r22,-33
 400b3a8:	00bfffc4 	movi	r2,-1
 400b3ac:	8dac703a 	and	r22,r17,r22
 400b3b0:	20806a26 	beq	r4,r2,400b55c <___svfprintf_internal_r+0x1b8c>
 400b3b4:	008011c4 	movi	r2,71
 400b3b8:	b0813726 	beq	r22,r2,400b898 <___svfprintf_internal_r+0x1ec8>
 400b3bc:	d9003717 	ldw	r4,220(sp)
 400b3c0:	90c04014 	ori	r3,r18,256
 400b3c4:	d8c02c15 	stw	r3,176(sp)
 400b3c8:	20015d16 	blt	r4,zero,400b940 <___svfprintf_internal_r+0x1f70>
 400b3cc:	dd003717 	ldw	r20,220(sp)
 400b3d0:	d8002905 	stb	zero,164(sp)
 400b3d4:	00801984 	movi	r2,102
 400b3d8:	88814026 	beq	r17,r2,400b8dc <___svfprintf_internal_r+0x1f0c>
 400b3dc:	00801184 	movi	r2,70
 400b3e0:	88817126 	beq	r17,r2,400b9a8 <___svfprintf_internal_r+0x1fd8>
 400b3e4:	00801144 	movi	r2,69
 400b3e8:	b0816226 	beq	r22,r2,400b974 <___svfprintf_internal_r+0x1fa4>
 400b3ec:	d8c02a17 	ldw	r3,168(sp)
 400b3f0:	d8802104 	addi	r2,sp,132
 400b3f4:	d8800315 	stw	r2,12(sp)
 400b3f8:	d9403617 	ldw	r5,216(sp)
 400b3fc:	d8802504 	addi	r2,sp,148
 400b400:	d8800215 	stw	r2,8(sp)
 400b404:	d8802604 	addi	r2,sp,152
 400b408:	d8c00015 	stw	r3,0(sp)
 400b40c:	d8800115 	stw	r2,4(sp)
 400b410:	01c00084 	movi	r7,2
 400b414:	a00d883a 	mov	r6,r20
 400b418:	9809883a 	mov	r4,r19
 400b41c:	d8c03d15 	stw	r3,244(sp)
 400b420:	da003e15 	stw	r8,248(sp)
 400b424:	400c0080 	call	400c008 <_dtoa_r>
 400b428:	1021883a 	mov	r16,r2
 400b42c:	008019c4 	movi	r2,103
 400b430:	d8c03d17 	ldw	r3,244(sp)
 400b434:	da003e17 	ldw	r8,248(sp)
 400b438:	8880e726 	beq	r17,r2,400b7d8 <___svfprintf_internal_r+0x1e08>
 400b43c:	008011c4 	movi	r2,71
 400b440:	8880d426 	beq	r17,r2,400b794 <___svfprintf_internal_r+0x1dc4>
 400b444:	80f9883a 	add	fp,r16,r3
 400b448:	d9003617 	ldw	r4,216(sp)
 400b44c:	000d883a 	mov	r6,zero
 400b450:	000f883a 	mov	r7,zero
 400b454:	a00b883a 	mov	r5,r20
 400b458:	da003e15 	stw	r8,248(sp)
 400b45c:	4012bc80 	call	4012bc8 <__eqdf2>
 400b460:	da003e17 	ldw	r8,248(sp)
 400b464:	1000e426 	beq	r2,zero,400b7f8 <___svfprintf_internal_r+0x1e28>
 400b468:	d8802117 	ldw	r2,132(sp)
 400b46c:	1700062e 	bgeu	r2,fp,400b488 <___svfprintf_internal_r+0x1ab8>
 400b470:	01000c04 	movi	r4,48
 400b474:	10c00044 	addi	r3,r2,1
 400b478:	d8c02115 	stw	r3,132(sp)
 400b47c:	11000005 	stb	r4,0(r2)
 400b480:	d8802117 	ldw	r2,132(sp)
 400b484:	173ffb36 	bltu	r2,fp,400b474 <__alt_data_end+0xfc00b474>
 400b488:	1405c83a 	sub	r2,r2,r16
 400b48c:	d8803315 	stw	r2,204(sp)
 400b490:	008011c4 	movi	r2,71
 400b494:	b080c526 	beq	r22,r2,400b7ac <___svfprintf_internal_r+0x1ddc>
 400b498:	00801944 	movi	r2,101
 400b49c:	1441d80e 	bge	r2,r17,400bc00 <___svfprintf_internal_r+0x2230>
 400b4a0:	d8c02617 	ldw	r3,152(sp)
 400b4a4:	00801984 	movi	r2,102
 400b4a8:	d8c03215 	stw	r3,200(sp)
 400b4ac:	88813426 	beq	r17,r2,400b980 <___svfprintf_internal_r+0x1fb0>
 400b4b0:	d8c03217 	ldw	r3,200(sp)
 400b4b4:	d9003317 	ldw	r4,204(sp)
 400b4b8:	19012516 	blt	r3,r4,400b950 <___svfprintf_internal_r+0x1f80>
 400b4bc:	9480004c 	andi	r18,r18,1
 400b4c0:	9001841e 	bne	r18,zero,400bad4 <___svfprintf_internal_r+0x2104>
 400b4c4:	1805883a 	mov	r2,r3
 400b4c8:	1801cb16 	blt	r3,zero,400bbf8 <___svfprintf_internal_r+0x2228>
 400b4cc:	d8c03217 	ldw	r3,200(sp)
 400b4d0:	044019c4 	movi	r17,103
 400b4d4:	d8c02b15 	stw	r3,172(sp)
 400b4d8:	df002907 	ldb	fp,164(sp)
 400b4dc:	e000a61e 	bne	fp,zero,400b778 <___svfprintf_internal_r+0x1da8>
 400b4e0:	df002783 	ldbu	fp,158(sp)
 400b4e4:	d8802915 	stw	r2,164(sp)
 400b4e8:	dc802c17 	ldw	r18,176(sp)
 400b4ec:	d8002a15 	stw	zero,168(sp)
 400b4f0:	003af506 	br	400a0c8 <__alt_data_end+0xfc00a0c8>
 400b4f4:	040100b4 	movhi	r16,1026
 400b4f8:	8420cb04 	addi	r16,r16,-31956
 400b4fc:	003a7e06 	br	4009ef8 <__alt_data_end+0xfc009ef8>
 400b500:	d9003917 	ldw	r4,228(sp)
 400b504:	04001004 	movi	r16,64
 400b508:	800b883a 	mov	r5,r16
 400b50c:	40033980 	call	4003398 <_malloc_r>
 400b510:	d9002d17 	ldw	r4,180(sp)
 400b514:	20800015 	stw	r2,0(r4)
 400b518:	20800415 	stw	r2,16(r4)
 400b51c:	1001d026 	beq	r2,zero,400bc60 <___svfprintf_internal_r+0x2290>
 400b520:	d8802d17 	ldw	r2,180(sp)
 400b524:	14000515 	stw	r16,20(r2)
 400b528:	00394406 	br	4009a3c <__alt_data_end+0xfc009a3c>
 400b52c:	040100b4 	movhi	r16,1026
 400b530:	8420cd04 	addi	r16,r16,-31948
 400b534:	003ee106 	br	400b0bc <__alt_data_end+0xfc00b0bc>
 400b538:	d9402d17 	ldw	r5,180(sp)
 400b53c:	d9801e04 	addi	r6,sp,120
 400b540:	9809883a 	mov	r4,r19
 400b544:	400f3c40 	call	400f3c4 <__ssprint_r>
 400b548:	103a081e 	bne	r2,zero,4009d6c <__alt_data_end+0xfc009d6c>
 400b54c:	dc402617 	ldw	r17,152(sp)
 400b550:	d8c02017 	ldw	r3,128(sp)
 400b554:	da000404 	addi	r8,sp,16
 400b558:	003f4306 	br	400b268 <__alt_data_end+0xfc00b268>
 400b55c:	01400184 	movi	r5,6
 400b560:	d9402a15 	stw	r5,168(sp)
 400b564:	003f9506 	br	400b3bc <__alt_data_end+0xfc00b3bc>
 400b568:	d8c02e17 	ldw	r3,184(sp)
 400b56c:	1d000017 	ldw	r20,0(r3)
 400b570:	18c00104 	addi	r3,r3,4
 400b574:	d8c02e15 	stw	r3,184(sp)
 400b578:	a02dd7fa 	srai	r22,r20,31
 400b57c:	b005883a 	mov	r2,r22
 400b580:	003a7606 	br	4009f5c <__alt_data_end+0xfc009f5c>
 400b584:	d9002e17 	ldw	r4,184(sp)
 400b588:	002d883a 	mov	r22,zero
 400b58c:	25000017 	ldw	r20,0(r4)
 400b590:	21000104 	addi	r4,r4,4
 400b594:	d9002e15 	stw	r4,184(sp)
 400b598:	003bdd06 	br	400a510 <__alt_data_end+0xfc00a510>
 400b59c:	9480100c 	andi	r18,r18,64
 400b5a0:	90006e26 	beq	r18,zero,400b75c <___svfprintf_internal_r+0x1d8c>
 400b5a4:	d9402e17 	ldw	r5,184(sp)
 400b5a8:	d8c02f17 	ldw	r3,188(sp)
 400b5ac:	28800017 	ldw	r2,0(r5)
 400b5b0:	29400104 	addi	r5,r5,4
 400b5b4:	d9402e15 	stw	r5,184(sp)
 400b5b8:	10c0000d 	sth	r3,0(r2)
 400b5bc:	00392f06 	br	4009a7c <__alt_data_end+0xfc009a7c>
 400b5c0:	d9402d17 	ldw	r5,180(sp)
 400b5c4:	d9801e04 	addi	r6,sp,120
 400b5c8:	9809883a 	mov	r4,r19
 400b5cc:	400f3c40 	call	400f3c4 <__ssprint_r>
 400b5d0:	1039e61e 	bne	r2,zero,4009d6c <__alt_data_end+0xfc009d6c>
 400b5d4:	d8c02017 	ldw	r3,128(sp)
 400b5d8:	d8801f17 	ldw	r2,124(sp)
 400b5dc:	da000404 	addi	r8,sp,16
 400b5e0:	d9403317 	ldw	r5,204(sp)
 400b5e4:	10800044 	addi	r2,r2,1
 400b5e8:	44000015 	stw	r16,0(r8)
 400b5ec:	28c7883a 	add	r3,r5,r3
 400b5f0:	003b5506 	br	400a348 <__alt_data_end+0xfc00a348>
 400b5f4:	8009883a 	mov	r4,r16
 400b5f8:	df003e15 	stw	fp,248(sp)
 400b5fc:	40044d40 	call	40044d4 <strlen>
 400b600:	d8802b15 	stw	r2,172(sp)
 400b604:	da003e17 	ldw	r8,248(sp)
 400b608:	103c160e 	bge	r2,zero,400a664 <__alt_data_end+0xfc00a664>
 400b60c:	0005883a 	mov	r2,zero
 400b610:	003c1406 	br	400a664 <__alt_data_end+0xfc00a664>
 400b614:	00bfffc4 	movi	r2,-1
 400b618:	0039d906 	br	4009d80 <__alt_data_end+0xfc009d80>
 400b61c:	010100b4 	movhi	r4,1026
 400b620:	2120df84 	addi	r4,r4,-31874
 400b624:	d9003515 	stw	r4,212(sp)
 400b628:	003ae406 	br	400a1bc <__alt_data_end+0xfc00a1bc>
 400b62c:	013fffc4 	movi	r4,-1
 400b630:	0039fa06 	br	4009e1c <__alt_data_end+0xfc009e1c>
 400b634:	d9402d17 	ldw	r5,180(sp)
 400b638:	d9801e04 	addi	r6,sp,120
 400b63c:	9809883a 	mov	r4,r19
 400b640:	400f3c40 	call	400f3c4 <__ssprint_r>
 400b644:	1039c91e 	bne	r2,zero,4009d6c <__alt_data_end+0xfc009d6c>
 400b648:	d8c02017 	ldw	r3,128(sp)
 400b64c:	da000404 	addi	r8,sp,16
 400b650:	003d8406 	br	400ac64 <__alt_data_end+0xfc00ac64>
 400b654:	0023883a 	mov	r17,zero
 400b658:	003d8306 	br	400ac68 <__alt_data_end+0xfc00ac68>
 400b65c:	010100b4 	movhi	r4,1026
 400b660:	2120db84 	addi	r4,r4,-31890
 400b664:	d9002c15 	stw	r4,176(sp)
 400b668:	d9002c17 	ldw	r4,176(sp)
 400b66c:	1c47883a 	add	r3,r3,r17
 400b670:	10800044 	addi	r2,r2,1
 400b674:	41000015 	stw	r4,0(r8)
 400b678:	44400115 	stw	r17,4(r8)
 400b67c:	d8c02015 	stw	r3,128(sp)
 400b680:	d8801f15 	stw	r2,124(sp)
 400b684:	010001c4 	movi	r4,7
 400b688:	20bfcd16 	blt	r4,r2,400b5c0 <__alt_data_end+0xfc00b5c0>
 400b68c:	42000204 	addi	r8,r8,8
 400b690:	003fd306 	br	400b5e0 <__alt_data_end+0xfc00b5e0>
 400b694:	d9402d17 	ldw	r5,180(sp)
 400b698:	d9801e04 	addi	r6,sp,120
 400b69c:	9809883a 	mov	r4,r19
 400b6a0:	400f3c40 	call	400f3c4 <__ssprint_r>
 400b6a4:	1039b11e 	bne	r2,zero,4009d6c <__alt_data_end+0xfc009d6c>
 400b6a8:	d8802617 	ldw	r2,152(sp)
 400b6ac:	d8c02017 	ldw	r3,128(sp)
 400b6b0:	da000404 	addi	r8,sp,16
 400b6b4:	003e1c06 	br	400af28 <__alt_data_end+0xfc00af28>
 400b6b8:	d8802a17 	ldw	r2,168(sp)
 400b6bc:	00c00184 	movi	r3,6
 400b6c0:	1880012e 	bgeu	r3,r2,400b6c8 <___svfprintf_internal_r+0x1cf8>
 400b6c4:	1805883a 	mov	r2,r3
 400b6c8:	d8802b15 	stw	r2,172(sp)
 400b6cc:	1000f316 	blt	r2,zero,400ba9c <___svfprintf_internal_r+0x20cc>
 400b6d0:	040100b4 	movhi	r16,1026
 400b6d4:	d8802915 	stw	r2,164(sp)
 400b6d8:	dd002e15 	stw	r20,184(sp)
 400b6dc:	d8002a15 	stw	zero,168(sp)
 400b6e0:	d8003215 	stw	zero,200(sp)
 400b6e4:	8420d904 	addi	r16,r16,-31900
 400b6e8:	0039883a 	mov	fp,zero
 400b6ec:	003a7d06 	br	400a0e4 <__alt_data_end+0xfc00a0e4>
 400b6f0:	010100b4 	movhi	r4,1026
 400b6f4:	2120df84 	addi	r4,r4,-31874
 400b6f8:	d9003515 	stw	r4,212(sp)
 400b6fc:	003b3d06 	br	400a3f4 <__alt_data_end+0xfc00a3f4>
 400b700:	d9402d17 	ldw	r5,180(sp)
 400b704:	d9801e04 	addi	r6,sp,120
 400b708:	9809883a 	mov	r4,r19
 400b70c:	400f3c40 	call	400f3c4 <__ssprint_r>
 400b710:	1039961e 	bne	r2,zero,4009d6c <__alt_data_end+0xfc009d6c>
 400b714:	d8802617 	ldw	r2,152(sp)
 400b718:	d9403317 	ldw	r5,204(sp)
 400b71c:	d8c02017 	ldw	r3,128(sp)
 400b720:	da000404 	addi	r8,sp,16
 400b724:	2885c83a 	sub	r2,r5,r2
 400b728:	003e1006 	br	400af6c <__alt_data_end+0xfc00af6c>
 400b72c:	00800044 	movi	r2,1
 400b730:	10803fcc 	andi	r2,r2,255
 400b734:	00c00044 	movi	r3,1
 400b738:	10fa1026 	beq	r2,r3,4009f7c <__alt_data_end+0xfc009f7c>
 400b73c:	00c00084 	movi	r3,2
 400b740:	10fb8226 	beq	r2,r3,400a54c <__alt_data_end+0xfc00a54c>
 400b744:	003a4206 	br	400a050 <__alt_data_end+0xfc00a050>
 400b748:	0021883a 	mov	r16,zero
 400b74c:	003e0806 	br	400af70 <__alt_data_end+0xfc00af70>
 400b750:	07000b44 	movi	fp,45
 400b754:	df002785 	stb	fp,158(sp)
 400b758:	0039e306 	br	4009ee8 <__alt_data_end+0xfc009ee8>
 400b75c:	d9002e17 	ldw	r4,184(sp)
 400b760:	d9402f17 	ldw	r5,188(sp)
 400b764:	20800017 	ldw	r2,0(r4)
 400b768:	21000104 	addi	r4,r4,4
 400b76c:	d9002e15 	stw	r4,184(sp)
 400b770:	11400015 	stw	r5,0(r2)
 400b774:	0038c106 	br	4009a7c <__alt_data_end+0xfc009a7c>
 400b778:	00c00b44 	movi	r3,45
 400b77c:	d8c02785 	stb	r3,158(sp)
 400b780:	d8802915 	stw	r2,164(sp)
 400b784:	dc802c17 	ldw	r18,176(sp)
 400b788:	d8002a15 	stw	zero,168(sp)
 400b78c:	07000b44 	movi	fp,45
 400b790:	003a5106 	br	400a0d8 <__alt_data_end+0xfc00a0d8>
 400b794:	9080004c 	andi	r2,r18,1
 400b798:	1000941e 	bne	r2,zero,400b9ec <___svfprintf_internal_r+0x201c>
 400b79c:	d8802117 	ldw	r2,132(sp)
 400b7a0:	1405c83a 	sub	r2,r2,r16
 400b7a4:	d8803315 	stw	r2,204(sp)
 400b7a8:	b441151e 	bne	r22,r17,400bc00 <___svfprintf_internal_r+0x2230>
 400b7ac:	dd802617 	ldw	r22,152(sp)
 400b7b0:	00bfff44 	movi	r2,-3
 400b7b4:	b0801a16 	blt	r22,r2,400b820 <___svfprintf_internal_r+0x1e50>
 400b7b8:	d9402a17 	ldw	r5,168(sp)
 400b7bc:	2d801816 	blt	r5,r22,400b820 <___svfprintf_internal_r+0x1e50>
 400b7c0:	dd803215 	stw	r22,200(sp)
 400b7c4:	003f3a06 	br	400b4b0 <__alt_data_end+0xfc00b4b0>
 400b7c8:	1025883a 	mov	r18,r2
 400b7cc:	0039883a 	mov	fp,zero
 400b7d0:	00800084 	movi	r2,2
 400b7d4:	003fd606 	br	400b730 <__alt_data_end+0xfc00b730>
 400b7d8:	9080004c 	andi	r2,r18,1
 400b7dc:	103f191e 	bne	r2,zero,400b444 <__alt_data_end+0xfc00b444>
 400b7e0:	d8802117 	ldw	r2,132(sp)
 400b7e4:	003f2806 	br	400b488 <__alt_data_end+0xfc00b488>
 400b7e8:	010100b4 	movhi	r4,1026
 400b7ec:	2120db84 	addi	r4,r4,-31890
 400b7f0:	d9002c15 	stw	r4,176(sp)
 400b7f4:	003c7c06 	br	400a9e8 <__alt_data_end+0xfc00a9e8>
 400b7f8:	e005883a 	mov	r2,fp
 400b7fc:	003f2206 	br	400b488 <__alt_data_end+0xfc00b488>
 400b800:	d9002a17 	ldw	r4,168(sp)
 400b804:	df002783 	ldbu	fp,158(sp)
 400b808:	dd002e15 	stw	r20,184(sp)
 400b80c:	d9002915 	stw	r4,164(sp)
 400b810:	d9002b15 	stw	r4,172(sp)
 400b814:	d8002a15 	stw	zero,168(sp)
 400b818:	d8003215 	stw	zero,200(sp)
 400b81c:	003a2a06 	br	400a0c8 <__alt_data_end+0xfc00a0c8>
 400b820:	8c7fff84 	addi	r17,r17,-2
 400b824:	b5bfffc4 	addi	r22,r22,-1
 400b828:	dd802615 	stw	r22,152(sp)
 400b82c:	dc4022c5 	stb	r17,139(sp)
 400b830:	b000c316 	blt	r22,zero,400bb40 <___svfprintf_internal_r+0x2170>
 400b834:	00800ac4 	movi	r2,43
 400b838:	d8802305 	stb	r2,140(sp)
 400b83c:	00800244 	movi	r2,9
 400b840:	15806e16 	blt	r2,r22,400b9fc <___svfprintf_internal_r+0x202c>
 400b844:	00800c04 	movi	r2,48
 400b848:	b5800c04 	addi	r22,r22,48
 400b84c:	d8802345 	stb	r2,141(sp)
 400b850:	dd802385 	stb	r22,142(sp)
 400b854:	d88023c4 	addi	r2,sp,143
 400b858:	df0022c4 	addi	fp,sp,139
 400b85c:	d8c03317 	ldw	r3,204(sp)
 400b860:	1739c83a 	sub	fp,r2,fp
 400b864:	d9003317 	ldw	r4,204(sp)
 400b868:	e0c7883a 	add	r3,fp,r3
 400b86c:	df003b15 	stw	fp,236(sp)
 400b870:	d8c02b15 	stw	r3,172(sp)
 400b874:	00800044 	movi	r2,1
 400b878:	1100b70e 	bge	r2,r4,400bb58 <___svfprintf_internal_r+0x2188>
 400b87c:	d8c02b17 	ldw	r3,172(sp)
 400b880:	18c00044 	addi	r3,r3,1
 400b884:	d8c02b15 	stw	r3,172(sp)
 400b888:	1805883a 	mov	r2,r3
 400b88c:	1800b016 	blt	r3,zero,400bb50 <___svfprintf_internal_r+0x2180>
 400b890:	d8003215 	stw	zero,200(sp)
 400b894:	003f1006 	br	400b4d8 <__alt_data_end+0xfc00b4d8>
 400b898:	d8802a17 	ldw	r2,168(sp)
 400b89c:	103ec71e 	bne	r2,zero,400b3bc <__alt_data_end+0xfc00b3bc>
 400b8a0:	dc002a15 	stw	r16,168(sp)
 400b8a4:	003ec506 	br	400b3bc <__alt_data_end+0xfc00b3bc>
 400b8a8:	d9402d17 	ldw	r5,180(sp)
 400b8ac:	d9801e04 	addi	r6,sp,120
 400b8b0:	9809883a 	mov	r4,r19
 400b8b4:	400f3c40 	call	400f3c4 <__ssprint_r>
 400b8b8:	10392c1e 	bne	r2,zero,4009d6c <__alt_data_end+0xfc009d6c>
 400b8bc:	dc402617 	ldw	r17,152(sp)
 400b8c0:	d8c02017 	ldw	r3,128(sp)
 400b8c4:	d8801f17 	ldw	r2,124(sp)
 400b8c8:	da000404 	addi	r8,sp,16
 400b8cc:	003e7706 	br	400b2ac <__alt_data_end+0xfc00b2ac>
 400b8d0:	182f883a 	mov	r23,r3
 400b8d4:	d8002a15 	stw	zero,168(sp)
 400b8d8:	00389306 	br	4009b28 <__alt_data_end+0xfc009b28>
 400b8dc:	d8c02a17 	ldw	r3,168(sp)
 400b8e0:	d8802104 	addi	r2,sp,132
 400b8e4:	d8800315 	stw	r2,12(sp)
 400b8e8:	d9403617 	ldw	r5,216(sp)
 400b8ec:	d8802504 	addi	r2,sp,148
 400b8f0:	d8800215 	stw	r2,8(sp)
 400b8f4:	d8802604 	addi	r2,sp,152
 400b8f8:	d8c00015 	stw	r3,0(sp)
 400b8fc:	9809883a 	mov	r4,r19
 400b900:	d8800115 	stw	r2,4(sp)
 400b904:	01c000c4 	movi	r7,3
 400b908:	a00d883a 	mov	r6,r20
 400b90c:	da003e15 	stw	r8,248(sp)
 400b910:	400c0080 	call	400c008 <_dtoa_r>
 400b914:	d9002a17 	ldw	r4,168(sp)
 400b918:	da003e17 	ldw	r8,248(sp)
 400b91c:	1021883a 	mov	r16,r2
 400b920:	1139883a 	add	fp,r2,r4
 400b924:	2007883a 	mov	r3,r4
 400b928:	81000007 	ldb	r4,0(r16)
 400b92c:	00800c04 	movi	r2,48
 400b930:	20806f26 	beq	r4,r2,400baf0 <___svfprintf_internal_r+0x2120>
 400b934:	d8c02617 	ldw	r3,152(sp)
 400b938:	e0f9883a 	add	fp,fp,r3
 400b93c:	003ec206 	br	400b448 <__alt_data_end+0xfc00b448>
 400b940:	00c00b44 	movi	r3,45
 400b944:	2520003c 	xorhi	r20,r4,32768
 400b948:	d8c02905 	stb	r3,164(sp)
 400b94c:	003ea106 	br	400b3d4 <__alt_data_end+0xfc00b3d4>
 400b950:	d8c03217 	ldw	r3,200(sp)
 400b954:	00c0890e 	bge	zero,r3,400bb7c <___svfprintf_internal_r+0x21ac>
 400b958:	00800044 	movi	r2,1
 400b95c:	d9003317 	ldw	r4,204(sp)
 400b960:	1105883a 	add	r2,r2,r4
 400b964:	d8802b15 	stw	r2,172(sp)
 400b968:	10005f16 	blt	r2,zero,400bae8 <___svfprintf_internal_r+0x2118>
 400b96c:	044019c4 	movi	r17,103
 400b970:	003ed906 	br	400b4d8 <__alt_data_end+0xfc00b4d8>
 400b974:	d9002a17 	ldw	r4,168(sp)
 400b978:	20c00044 	addi	r3,r4,1
 400b97c:	003e9c06 	br	400b3f0 <__alt_data_end+0xfc00b3f0>
 400b980:	d9002a17 	ldw	r4,168(sp)
 400b984:	00c0680e 	bge	zero,r3,400bb28 <___svfprintf_internal_r+0x2158>
 400b988:	2000461e 	bne	r4,zero,400baa4 <___svfprintf_internal_r+0x20d4>
 400b98c:	9480004c 	andi	r18,r18,1
 400b990:	9000441e 	bne	r18,zero,400baa4 <___svfprintf_internal_r+0x20d4>
 400b994:	1805883a 	mov	r2,r3
 400b998:	1800a116 	blt	r3,zero,400bc20 <___svfprintf_internal_r+0x2250>
 400b99c:	d8c03217 	ldw	r3,200(sp)
 400b9a0:	d8c02b15 	stw	r3,172(sp)
 400b9a4:	003ecc06 	br	400b4d8 <__alt_data_end+0xfc00b4d8>
 400b9a8:	d9402a17 	ldw	r5,168(sp)
 400b9ac:	d8802104 	addi	r2,sp,132
 400b9b0:	d8800315 	stw	r2,12(sp)
 400b9b4:	d9400015 	stw	r5,0(sp)
 400b9b8:	d8802504 	addi	r2,sp,148
 400b9bc:	d9403617 	ldw	r5,216(sp)
 400b9c0:	d8800215 	stw	r2,8(sp)
 400b9c4:	d8802604 	addi	r2,sp,152
 400b9c8:	d8800115 	stw	r2,4(sp)
 400b9cc:	01c000c4 	movi	r7,3
 400b9d0:	a00d883a 	mov	r6,r20
 400b9d4:	9809883a 	mov	r4,r19
 400b9d8:	da003e15 	stw	r8,248(sp)
 400b9dc:	400c0080 	call	400c008 <_dtoa_r>
 400b9e0:	d8c02a17 	ldw	r3,168(sp)
 400b9e4:	da003e17 	ldw	r8,248(sp)
 400b9e8:	1021883a 	mov	r16,r2
 400b9ec:	00801184 	movi	r2,70
 400b9f0:	80f9883a 	add	fp,r16,r3
 400b9f4:	88bfcc26 	beq	r17,r2,400b928 <__alt_data_end+0xfc00b928>
 400b9f8:	003e9306 	br	400b448 <__alt_data_end+0xfc00b448>
 400b9fc:	df0022c4 	addi	fp,sp,139
 400ba00:	dc002a15 	stw	r16,168(sp)
 400ba04:	9829883a 	mov	r20,r19
 400ba08:	e021883a 	mov	r16,fp
 400ba0c:	4027883a 	mov	r19,r8
 400ba10:	b009883a 	mov	r4,r22
 400ba14:	01400284 	movi	r5,10
 400ba18:	40018e40 	call	40018e4 <__modsi3>
 400ba1c:	10800c04 	addi	r2,r2,48
 400ba20:	843fffc4 	addi	r16,r16,-1
 400ba24:	b009883a 	mov	r4,r22
 400ba28:	01400284 	movi	r5,10
 400ba2c:	80800005 	stb	r2,0(r16)
 400ba30:	40018600 	call	4001860 <__divsi3>
 400ba34:	102d883a 	mov	r22,r2
 400ba38:	00800244 	movi	r2,9
 400ba3c:	15bff416 	blt	r2,r22,400ba10 <__alt_data_end+0xfc00ba10>
 400ba40:	9811883a 	mov	r8,r19
 400ba44:	b0800c04 	addi	r2,r22,48
 400ba48:	a027883a 	mov	r19,r20
 400ba4c:	8029883a 	mov	r20,r16
 400ba50:	a17fffc4 	addi	r5,r20,-1
 400ba54:	a0bfffc5 	stb	r2,-1(r20)
 400ba58:	dc002a17 	ldw	r16,168(sp)
 400ba5c:	2f00782e 	bgeu	r5,fp,400bc40 <___svfprintf_internal_r+0x2270>
 400ba60:	d9c02384 	addi	r7,sp,142
 400ba64:	3d0fc83a 	sub	r7,r7,r20
 400ba68:	d9002344 	addi	r4,sp,141
 400ba6c:	e1cf883a 	add	r7,fp,r7
 400ba70:	00000106 	br	400ba78 <___svfprintf_internal_r+0x20a8>
 400ba74:	28800003 	ldbu	r2,0(r5)
 400ba78:	20800005 	stb	r2,0(r4)
 400ba7c:	21000044 	addi	r4,r4,1
 400ba80:	29400044 	addi	r5,r5,1
 400ba84:	21fffb1e 	bne	r4,r7,400ba74 <__alt_data_end+0xfc00ba74>
 400ba88:	d8802304 	addi	r2,sp,140
 400ba8c:	1505c83a 	sub	r2,r2,r20
 400ba90:	d8c02344 	addi	r3,sp,141
 400ba94:	1885883a 	add	r2,r3,r2
 400ba98:	003f7006 	br	400b85c <__alt_data_end+0xfc00b85c>
 400ba9c:	0005883a 	mov	r2,zero
 400baa0:	003f0b06 	br	400b6d0 <__alt_data_end+0xfc00b6d0>
 400baa4:	d9002a17 	ldw	r4,168(sp)
 400baa8:	d8c03217 	ldw	r3,200(sp)
 400baac:	20800044 	addi	r2,r4,1
 400bab0:	1885883a 	add	r2,r3,r2
 400bab4:	d8802b15 	stw	r2,172(sp)
 400bab8:	103e870e 	bge	r2,zero,400b4d8 <__alt_data_end+0xfc00b4d8>
 400babc:	0005883a 	mov	r2,zero
 400bac0:	003e8506 	br	400b4d8 <__alt_data_end+0xfc00b4d8>
 400bac4:	010100b4 	movhi	r4,1026
 400bac8:	2120db84 	addi	r4,r4,-31890
 400bacc:	d9002c15 	stw	r4,176(sp)
 400bad0:	003cc506 	br	400ade8 <__alt_data_end+0xfc00ade8>
 400bad4:	d8c03217 	ldw	r3,200(sp)
 400bad8:	18c00044 	addi	r3,r3,1
 400badc:	d8c02b15 	stw	r3,172(sp)
 400bae0:	1805883a 	mov	r2,r3
 400bae4:	183fa10e 	bge	r3,zero,400b96c <__alt_data_end+0xfc00b96c>
 400bae8:	0005883a 	mov	r2,zero
 400baec:	003f9f06 	br	400b96c <__alt_data_end+0xfc00b96c>
 400baf0:	d9003617 	ldw	r4,216(sp)
 400baf4:	000d883a 	mov	r6,zero
 400baf8:	000f883a 	mov	r7,zero
 400bafc:	a00b883a 	mov	r5,r20
 400bb00:	d8c03d15 	stw	r3,244(sp)
 400bb04:	da003e15 	stw	r8,248(sp)
 400bb08:	4012bc80 	call	4012bc8 <__eqdf2>
 400bb0c:	d8c03d17 	ldw	r3,244(sp)
 400bb10:	da003e17 	ldw	r8,248(sp)
 400bb14:	103f8726 	beq	r2,zero,400b934 <__alt_data_end+0xfc00b934>
 400bb18:	00800044 	movi	r2,1
 400bb1c:	10c7c83a 	sub	r3,r2,r3
 400bb20:	d8c02615 	stw	r3,152(sp)
 400bb24:	003f8406 	br	400b938 <__alt_data_end+0xfc00b938>
 400bb28:	20000e1e 	bne	r4,zero,400bb64 <___svfprintf_internal_r+0x2194>
 400bb2c:	9480004c 	andi	r18,r18,1
 400bb30:	90000c1e 	bne	r18,zero,400bb64 <___svfprintf_internal_r+0x2194>
 400bb34:	00800044 	movi	r2,1
 400bb38:	d8802b15 	stw	r2,172(sp)
 400bb3c:	003e6606 	br	400b4d8 <__alt_data_end+0xfc00b4d8>
 400bb40:	00800b44 	movi	r2,45
 400bb44:	05adc83a 	sub	r22,zero,r22
 400bb48:	d8802305 	stb	r2,140(sp)
 400bb4c:	003f3b06 	br	400b83c <__alt_data_end+0xfc00b83c>
 400bb50:	0005883a 	mov	r2,zero
 400bb54:	003f4e06 	br	400b890 <__alt_data_end+0xfc00b890>
 400bb58:	90a4703a 	and	r18,r18,r2
 400bb5c:	903f4a26 	beq	r18,zero,400b888 <__alt_data_end+0xfc00b888>
 400bb60:	003f4606 	br	400b87c <__alt_data_end+0xfc00b87c>
 400bb64:	d8c02a17 	ldw	r3,168(sp)
 400bb68:	18c00084 	addi	r3,r3,2
 400bb6c:	d8c02b15 	stw	r3,172(sp)
 400bb70:	1805883a 	mov	r2,r3
 400bb74:	183e580e 	bge	r3,zero,400b4d8 <__alt_data_end+0xfc00b4d8>
 400bb78:	003fd006 	br	400babc <__alt_data_end+0xfc00babc>
 400bb7c:	00800084 	movi	r2,2
 400bb80:	10c5c83a 	sub	r2,r2,r3
 400bb84:	003f7506 	br	400b95c <__alt_data_end+0xfc00b95c>
 400bb88:	d9402e17 	ldw	r5,184(sp)
 400bb8c:	d9002e17 	ldw	r4,184(sp)
 400bb90:	bc400043 	ldbu	r17,1(r23)
 400bb94:	29400017 	ldw	r5,0(r5)
 400bb98:	20800104 	addi	r2,r4,4
 400bb9c:	d8802e15 	stw	r2,184(sp)
 400bba0:	d9402a15 	stw	r5,168(sp)
 400bba4:	182f883a 	mov	r23,r3
 400bba8:	283df10e 	bge	r5,zero,400b370 <__alt_data_end+0xfc00b370>
 400bbac:	8c403fcc 	andi	r17,r17,255
 400bbb0:	017fffc4 	movi	r5,-1
 400bbb4:	8c40201c 	xori	r17,r17,128
 400bbb8:	d9402a15 	stw	r5,168(sp)
 400bbbc:	8c7fe004 	addi	r17,r17,-128
 400bbc0:	0037d806 	br	4009b24 <__alt_data_end+0xfc009b24>
 400bbc4:	9080004c 	andi	r2,r18,1
 400bbc8:	0039883a 	mov	fp,zero
 400bbcc:	10000726 	beq	r2,zero,400bbec <___svfprintf_internal_r+0x221c>
 400bbd0:	d8c02817 	ldw	r3,160(sp)
 400bbd4:	dc001dc4 	addi	r16,sp,119
 400bbd8:	00800c04 	movi	r2,48
 400bbdc:	1c07c83a 	sub	r3,r3,r16
 400bbe0:	d8801dc5 	stb	r2,119(sp)
 400bbe4:	d8c02b15 	stw	r3,172(sp)
 400bbe8:	00393106 	br	400a0b0 <__alt_data_end+0xfc00a0b0>
 400bbec:	d8002b15 	stw	zero,172(sp)
 400bbf0:	dc001e04 	addi	r16,sp,120
 400bbf4:	00392e06 	br	400a0b0 <__alt_data_end+0xfc00a0b0>
 400bbf8:	0005883a 	mov	r2,zero
 400bbfc:	003e3306 	br	400b4cc <__alt_data_end+0xfc00b4cc>
 400bc00:	dd802617 	ldw	r22,152(sp)
 400bc04:	003f0706 	br	400b824 <__alt_data_end+0xfc00b824>
 400bc08:	d8c02b03 	ldbu	r3,172(sp)
 400bc0c:	d8c02785 	stb	r3,158(sp)
 400bc10:	003a3506 	br	400a4e8 <__alt_data_end+0xfc00a4e8>
 400bc14:	d8c02b03 	ldbu	r3,172(sp)
 400bc18:	d8c02785 	stb	r3,158(sp)
 400bc1c:	003a1706 	br	400a47c <__alt_data_end+0xfc00a47c>
 400bc20:	0005883a 	mov	r2,zero
 400bc24:	003f5d06 	br	400b99c <__alt_data_end+0xfc00b99c>
 400bc28:	d8c02b03 	ldbu	r3,172(sp)
 400bc2c:	d8c02785 	stb	r3,158(sp)
 400bc30:	0038f306 	br	400a000 <__alt_data_end+0xfc00a000>
 400bc34:	d8c02b03 	ldbu	r3,172(sp)
 400bc38:	d8c02785 	stb	r3,158(sp)
 400bc3c:	0038be06 	br	4009f38 <__alt_data_end+0xfc009f38>
 400bc40:	d8802344 	addi	r2,sp,141
 400bc44:	003f0506 	br	400b85c <__alt_data_end+0xfc00b85c>
 400bc48:	d8c02b03 	ldbu	r3,172(sp)
 400bc4c:	d8c02785 	stb	r3,158(sp)
 400bc50:	00388b06 	br	4009e80 <__alt_data_end+0xfc009e80>
 400bc54:	d8c02b03 	ldbu	r3,172(sp)
 400bc58:	d8c02785 	stb	r3,158(sp)
 400bc5c:	003ad706 	br	400a7bc <__alt_data_end+0xfc00a7bc>
 400bc60:	d9403917 	ldw	r5,228(sp)
 400bc64:	00800304 	movi	r2,12
 400bc68:	28800015 	stw	r2,0(r5)
 400bc6c:	00bfffc4 	movi	r2,-1
 400bc70:	00384306 	br	4009d80 <__alt_data_end+0xfc009d80>
 400bc74:	d8c02b03 	ldbu	r3,172(sp)
 400bc78:	d8c02785 	stb	r3,158(sp)
 400bc7c:	003ab606 	br	400a758 <__alt_data_end+0xfc00a758>
 400bc80:	d8c02b03 	ldbu	r3,172(sp)
 400bc84:	d8c02785 	stb	r3,158(sp)
 400bc88:	003a8906 	br	400a6b0 <__alt_data_end+0xfc00a6b0>

0400bc8c <__swsetup_r>:
 400bc8c:	008100b4 	movhi	r2,1026
 400bc90:	defffd04 	addi	sp,sp,-12
 400bc94:	10a8dd04 	addi	r2,r2,-23692
 400bc98:	dc400115 	stw	r17,4(sp)
 400bc9c:	2023883a 	mov	r17,r4
 400bca0:	11000017 	ldw	r4,0(r2)
 400bca4:	dc000015 	stw	r16,0(sp)
 400bca8:	dfc00215 	stw	ra,8(sp)
 400bcac:	2821883a 	mov	r16,r5
 400bcb0:	20000226 	beq	r4,zero,400bcbc <__swsetup_r+0x30>
 400bcb4:	20800e17 	ldw	r2,56(r4)
 400bcb8:	10003126 	beq	r2,zero,400bd80 <__swsetup_r+0xf4>
 400bcbc:	8080030b 	ldhu	r2,12(r16)
 400bcc0:	10c0020c 	andi	r3,r2,8
 400bcc4:	1009883a 	mov	r4,r2
 400bcc8:	18000f26 	beq	r3,zero,400bd08 <__swsetup_r+0x7c>
 400bccc:	80c00417 	ldw	r3,16(r16)
 400bcd0:	18001526 	beq	r3,zero,400bd28 <__swsetup_r+0x9c>
 400bcd4:	1100004c 	andi	r4,r2,1
 400bcd8:	20001c1e 	bne	r4,zero,400bd4c <__swsetup_r+0xc0>
 400bcdc:	1080008c 	andi	r2,r2,2
 400bce0:	1000291e 	bne	r2,zero,400bd88 <__swsetup_r+0xfc>
 400bce4:	80800517 	ldw	r2,20(r16)
 400bce8:	80800215 	stw	r2,8(r16)
 400bcec:	18001c26 	beq	r3,zero,400bd60 <__swsetup_r+0xd4>
 400bcf0:	0005883a 	mov	r2,zero
 400bcf4:	dfc00217 	ldw	ra,8(sp)
 400bcf8:	dc400117 	ldw	r17,4(sp)
 400bcfc:	dc000017 	ldw	r16,0(sp)
 400bd00:	dec00304 	addi	sp,sp,12
 400bd04:	f800283a 	ret
 400bd08:	2080040c 	andi	r2,r4,16
 400bd0c:	10002e26 	beq	r2,zero,400bdc8 <__swsetup_r+0x13c>
 400bd10:	2080010c 	andi	r2,r4,4
 400bd14:	10001e1e 	bne	r2,zero,400bd90 <__swsetup_r+0x104>
 400bd18:	80c00417 	ldw	r3,16(r16)
 400bd1c:	20800214 	ori	r2,r4,8
 400bd20:	8080030d 	sth	r2,12(r16)
 400bd24:	183feb1e 	bne	r3,zero,400bcd4 <__alt_data_end+0xfc00bcd4>
 400bd28:	1100a00c 	andi	r4,r2,640
 400bd2c:	01408004 	movi	r5,512
 400bd30:	217fe826 	beq	r4,r5,400bcd4 <__alt_data_end+0xfc00bcd4>
 400bd34:	800b883a 	mov	r5,r16
 400bd38:	8809883a 	mov	r4,r17
 400bd3c:	40031b40 	call	40031b4 <__smakebuf_r>
 400bd40:	8080030b 	ldhu	r2,12(r16)
 400bd44:	80c00417 	ldw	r3,16(r16)
 400bd48:	003fe206 	br	400bcd4 <__alt_data_end+0xfc00bcd4>
 400bd4c:	80800517 	ldw	r2,20(r16)
 400bd50:	80000215 	stw	zero,8(r16)
 400bd54:	0085c83a 	sub	r2,zero,r2
 400bd58:	80800615 	stw	r2,24(r16)
 400bd5c:	183fe41e 	bne	r3,zero,400bcf0 <__alt_data_end+0xfc00bcf0>
 400bd60:	80c0030b 	ldhu	r3,12(r16)
 400bd64:	0005883a 	mov	r2,zero
 400bd68:	1900200c 	andi	r4,r3,128
 400bd6c:	203fe126 	beq	r4,zero,400bcf4 <__alt_data_end+0xfc00bcf4>
 400bd70:	18c01014 	ori	r3,r3,64
 400bd74:	80c0030d 	sth	r3,12(r16)
 400bd78:	00bfffc4 	movi	r2,-1
 400bd7c:	003fdd06 	br	400bcf4 <__alt_data_end+0xfc00bcf4>
 400bd80:	40021480 	call	4002148 <__sinit>
 400bd84:	003fcd06 	br	400bcbc <__alt_data_end+0xfc00bcbc>
 400bd88:	0005883a 	mov	r2,zero
 400bd8c:	003fd606 	br	400bce8 <__alt_data_end+0xfc00bce8>
 400bd90:	81400c17 	ldw	r5,48(r16)
 400bd94:	28000626 	beq	r5,zero,400bdb0 <__swsetup_r+0x124>
 400bd98:	80801004 	addi	r2,r16,64
 400bd9c:	28800326 	beq	r5,r2,400bdac <__swsetup_r+0x120>
 400bda0:	8809883a 	mov	r4,r17
 400bda4:	40026380 	call	4002638 <_free_r>
 400bda8:	8100030b 	ldhu	r4,12(r16)
 400bdac:	80000c15 	stw	zero,48(r16)
 400bdb0:	80c00417 	ldw	r3,16(r16)
 400bdb4:	00bff6c4 	movi	r2,-37
 400bdb8:	1108703a 	and	r4,r2,r4
 400bdbc:	80000115 	stw	zero,4(r16)
 400bdc0:	80c00015 	stw	r3,0(r16)
 400bdc4:	003fd506 	br	400bd1c <__alt_data_end+0xfc00bd1c>
 400bdc8:	00800244 	movi	r2,9
 400bdcc:	88800015 	stw	r2,0(r17)
 400bdd0:	20801014 	ori	r2,r4,64
 400bdd4:	8080030d 	sth	r2,12(r16)
 400bdd8:	00bfffc4 	movi	r2,-1
 400bddc:	003fc506 	br	400bcf4 <__alt_data_end+0xfc00bcf4>

0400bde0 <quorem>:
 400bde0:	defff204 	addi	sp,sp,-56
 400bde4:	ddc00b15 	stw	r23,44(sp)
 400bde8:	20800417 	ldw	r2,16(r4)
 400bdec:	2dc00417 	ldw	r23,16(r5)
 400bdf0:	dfc00d15 	stw	ra,52(sp)
 400bdf4:	df000c15 	stw	fp,48(sp)
 400bdf8:	dd800a15 	stw	r22,40(sp)
 400bdfc:	dd400915 	stw	r21,36(sp)
 400be00:	dd000815 	stw	r20,32(sp)
 400be04:	dcc00715 	stw	r19,28(sp)
 400be08:	dc800615 	stw	r18,24(sp)
 400be0c:	dc400515 	stw	r17,20(sp)
 400be10:	dc000415 	stw	r16,16(sp)
 400be14:	15c07a16 	blt	r2,r23,400c000 <quorem+0x220>
 400be18:	bdffffc4 	addi	r23,r23,-1
 400be1c:	bde9883a 	add	r20,r23,r23
 400be20:	28c00504 	addi	r3,r5,20
 400be24:	a529883a 	add	r20,r20,r20
 400be28:	1d39883a 	add	fp,r3,r20
 400be2c:	24c00504 	addi	r19,r4,20
 400be30:	d9400215 	stw	r5,8(sp)
 400be34:	9d29883a 	add	r20,r19,r20
 400be38:	e1400017 	ldw	r5,0(fp)
 400be3c:	d9000015 	stw	r4,0(sp)
 400be40:	a1000017 	ldw	r4,0(r20)
 400be44:	29400044 	addi	r5,r5,1
 400be48:	d8c00115 	stw	r3,4(sp)
 400be4c:	dd000315 	stw	r20,12(sp)
 400be50:	40019580 	call	4001958 <__udivsi3>
 400be54:	1025883a 	mov	r18,r2
 400be58:	10003026 	beq	r2,zero,400bf1c <quorem+0x13c>
 400be5c:	dc400117 	ldw	r17,4(sp)
 400be60:	9829883a 	mov	r20,r19
 400be64:	002d883a 	mov	r22,zero
 400be68:	0021883a 	mov	r16,zero
 400be6c:	8d400017 	ldw	r21,0(r17)
 400be70:	900b883a 	mov	r5,r18
 400be74:	8c400104 	addi	r17,r17,4
 400be78:	a93fffcc 	andi	r4,r21,65535
 400be7c:	4001a140 	call	4001a14 <__mulsi3>
 400be80:	a808d43a 	srli	r4,r21,16
 400be84:	900b883a 	mov	r5,r18
 400be88:	15ad883a 	add	r22,r2,r22
 400be8c:	4001a140 	call	4001a14 <__mulsi3>
 400be90:	a1000017 	ldw	r4,0(r20)
 400be94:	b00cd43a 	srli	r6,r22,16
 400be98:	b0ffffcc 	andi	r3,r22,65535
 400be9c:	217fffcc 	andi	r5,r4,65535
 400bea0:	2c21883a 	add	r16,r5,r16
 400bea4:	80c7c83a 	sub	r3,r16,r3
 400bea8:	2008d43a 	srli	r4,r4,16
 400beac:	1185883a 	add	r2,r2,r6
 400beb0:	1821d43a 	srai	r16,r3,16
 400beb4:	117fffcc 	andi	r5,r2,65535
 400beb8:	2149c83a 	sub	r4,r4,r5
 400bebc:	2421883a 	add	r16,r4,r16
 400bec0:	8008943a 	slli	r4,r16,16
 400bec4:	18ffffcc 	andi	r3,r3,65535
 400bec8:	102cd43a 	srli	r22,r2,16
 400becc:	20c8b03a 	or	r4,r4,r3
 400bed0:	a1000015 	stw	r4,0(r20)
 400bed4:	8021d43a 	srai	r16,r16,16
 400bed8:	a5000104 	addi	r20,r20,4
 400bedc:	e47fe32e 	bgeu	fp,r17,400be6c <__alt_data_end+0xfc00be6c>
 400bee0:	d8c00317 	ldw	r3,12(sp)
 400bee4:	18800017 	ldw	r2,0(r3)
 400bee8:	10000c1e 	bne	r2,zero,400bf1c <quorem+0x13c>
 400beec:	18bfff04 	addi	r2,r3,-4
 400bef0:	9880082e 	bgeu	r19,r2,400bf14 <quorem+0x134>
 400bef4:	18ffff17 	ldw	r3,-4(r3)
 400bef8:	18000326 	beq	r3,zero,400bf08 <quorem+0x128>
 400befc:	00000506 	br	400bf14 <quorem+0x134>
 400bf00:	10c00017 	ldw	r3,0(r2)
 400bf04:	1800031e 	bne	r3,zero,400bf14 <quorem+0x134>
 400bf08:	10bfff04 	addi	r2,r2,-4
 400bf0c:	bdffffc4 	addi	r23,r23,-1
 400bf10:	98bffb36 	bltu	r19,r2,400bf00 <__alt_data_end+0xfc00bf00>
 400bf14:	d8c00017 	ldw	r3,0(sp)
 400bf18:	1dc00415 	stw	r23,16(r3)
 400bf1c:	d9400217 	ldw	r5,8(sp)
 400bf20:	d9000017 	ldw	r4,0(sp)
 400bf24:	400ebc00 	call	400ebc0 <__mcmp>
 400bf28:	10002816 	blt	r2,zero,400bfcc <quorem+0x1ec>
 400bf2c:	dc400117 	ldw	r17,4(sp)
 400bf30:	94800044 	addi	r18,r18,1
 400bf34:	980d883a 	mov	r6,r19
 400bf38:	0007883a 	mov	r3,zero
 400bf3c:	31000017 	ldw	r4,0(r6)
 400bf40:	89400017 	ldw	r5,0(r17)
 400bf44:	31800104 	addi	r6,r6,4
 400bf48:	20bfffcc 	andi	r2,r4,65535
 400bf4c:	10c7883a 	add	r3,r2,r3
 400bf50:	28bfffcc 	andi	r2,r5,65535
 400bf54:	1885c83a 	sub	r2,r3,r2
 400bf58:	280ad43a 	srli	r5,r5,16
 400bf5c:	2008d43a 	srli	r4,r4,16
 400bf60:	1007d43a 	srai	r3,r2,16
 400bf64:	10bfffcc 	andi	r2,r2,65535
 400bf68:	2149c83a 	sub	r4,r4,r5
 400bf6c:	20c9883a 	add	r4,r4,r3
 400bf70:	200a943a 	slli	r5,r4,16
 400bf74:	8c400104 	addi	r17,r17,4
 400bf78:	2007d43a 	srai	r3,r4,16
 400bf7c:	2884b03a 	or	r2,r5,r2
 400bf80:	30bfff15 	stw	r2,-4(r6)
 400bf84:	e47fed2e 	bgeu	fp,r17,400bf3c <__alt_data_end+0xfc00bf3c>
 400bf88:	bdc5883a 	add	r2,r23,r23
 400bf8c:	1085883a 	add	r2,r2,r2
 400bf90:	9887883a 	add	r3,r19,r2
 400bf94:	18800017 	ldw	r2,0(r3)
 400bf98:	10000c1e 	bne	r2,zero,400bfcc <quorem+0x1ec>
 400bf9c:	18bfff04 	addi	r2,r3,-4
 400bfa0:	9880082e 	bgeu	r19,r2,400bfc4 <quorem+0x1e4>
 400bfa4:	18ffff17 	ldw	r3,-4(r3)
 400bfa8:	18000326 	beq	r3,zero,400bfb8 <quorem+0x1d8>
 400bfac:	00000506 	br	400bfc4 <quorem+0x1e4>
 400bfb0:	10c00017 	ldw	r3,0(r2)
 400bfb4:	1800031e 	bne	r3,zero,400bfc4 <quorem+0x1e4>
 400bfb8:	10bfff04 	addi	r2,r2,-4
 400bfbc:	bdffffc4 	addi	r23,r23,-1
 400bfc0:	98bffb36 	bltu	r19,r2,400bfb0 <__alt_data_end+0xfc00bfb0>
 400bfc4:	d8c00017 	ldw	r3,0(sp)
 400bfc8:	1dc00415 	stw	r23,16(r3)
 400bfcc:	9005883a 	mov	r2,r18
 400bfd0:	dfc00d17 	ldw	ra,52(sp)
 400bfd4:	df000c17 	ldw	fp,48(sp)
 400bfd8:	ddc00b17 	ldw	r23,44(sp)
 400bfdc:	dd800a17 	ldw	r22,40(sp)
 400bfe0:	dd400917 	ldw	r21,36(sp)
 400bfe4:	dd000817 	ldw	r20,32(sp)
 400bfe8:	dcc00717 	ldw	r19,28(sp)
 400bfec:	dc800617 	ldw	r18,24(sp)
 400bff0:	dc400517 	ldw	r17,20(sp)
 400bff4:	dc000417 	ldw	r16,16(sp)
 400bff8:	dec00e04 	addi	sp,sp,56
 400bffc:	f800283a 	ret
 400c000:	0005883a 	mov	r2,zero
 400c004:	003ff206 	br	400bfd0 <__alt_data_end+0xfc00bfd0>

0400c008 <_dtoa_r>:
 400c008:	20801017 	ldw	r2,64(r4)
 400c00c:	deffde04 	addi	sp,sp,-136
 400c010:	df002015 	stw	fp,128(sp)
 400c014:	dcc01b15 	stw	r19,108(sp)
 400c018:	dc801a15 	stw	r18,104(sp)
 400c01c:	dc401915 	stw	r17,100(sp)
 400c020:	dc001815 	stw	r16,96(sp)
 400c024:	dfc02115 	stw	ra,132(sp)
 400c028:	ddc01f15 	stw	r23,124(sp)
 400c02c:	dd801e15 	stw	r22,120(sp)
 400c030:	dd401d15 	stw	r21,116(sp)
 400c034:	dd001c15 	stw	r20,112(sp)
 400c038:	d9c00315 	stw	r7,12(sp)
 400c03c:	2039883a 	mov	fp,r4
 400c040:	3023883a 	mov	r17,r6
 400c044:	2825883a 	mov	r18,r5
 400c048:	dc002417 	ldw	r16,144(sp)
 400c04c:	3027883a 	mov	r19,r6
 400c050:	10000826 	beq	r2,zero,400c074 <_dtoa_r+0x6c>
 400c054:	21801117 	ldw	r6,68(r4)
 400c058:	00c00044 	movi	r3,1
 400c05c:	100b883a 	mov	r5,r2
 400c060:	1986983a 	sll	r3,r3,r6
 400c064:	11800115 	stw	r6,4(r2)
 400c068:	10c00215 	stw	r3,8(r2)
 400c06c:	400e2e40 	call	400e2e4 <_Bfree>
 400c070:	e0001015 	stw	zero,64(fp)
 400c074:	88002e16 	blt	r17,zero,400c130 <_dtoa_r+0x128>
 400c078:	80000015 	stw	zero,0(r16)
 400c07c:	889ffc2c 	andhi	r2,r17,32752
 400c080:	00dffc34 	movhi	r3,32752
 400c084:	10c01c26 	beq	r2,r3,400c0f8 <_dtoa_r+0xf0>
 400c088:	000d883a 	mov	r6,zero
 400c08c:	000f883a 	mov	r7,zero
 400c090:	9009883a 	mov	r4,r18
 400c094:	980b883a 	mov	r5,r19
 400c098:	4012bc80 	call	4012bc8 <__eqdf2>
 400c09c:	10002b1e 	bne	r2,zero,400c14c <_dtoa_r+0x144>
 400c0a0:	d9c02317 	ldw	r7,140(sp)
 400c0a4:	00800044 	movi	r2,1
 400c0a8:	38800015 	stw	r2,0(r7)
 400c0ac:	d8802517 	ldw	r2,148(sp)
 400c0b0:	10019e26 	beq	r2,zero,400c72c <_dtoa_r+0x724>
 400c0b4:	d8c02517 	ldw	r3,148(sp)
 400c0b8:	008100b4 	movhi	r2,1026
 400c0bc:	10a0db44 	addi	r2,r2,-31891
 400c0c0:	18800015 	stw	r2,0(r3)
 400c0c4:	10bfffc4 	addi	r2,r2,-1
 400c0c8:	dfc02117 	ldw	ra,132(sp)
 400c0cc:	df002017 	ldw	fp,128(sp)
 400c0d0:	ddc01f17 	ldw	r23,124(sp)
 400c0d4:	dd801e17 	ldw	r22,120(sp)
 400c0d8:	dd401d17 	ldw	r21,116(sp)
 400c0dc:	dd001c17 	ldw	r20,112(sp)
 400c0e0:	dcc01b17 	ldw	r19,108(sp)
 400c0e4:	dc801a17 	ldw	r18,104(sp)
 400c0e8:	dc401917 	ldw	r17,100(sp)
 400c0ec:	dc001817 	ldw	r16,96(sp)
 400c0f0:	dec02204 	addi	sp,sp,136
 400c0f4:	f800283a 	ret
 400c0f8:	d8c02317 	ldw	r3,140(sp)
 400c0fc:	0089c3c4 	movi	r2,9999
 400c100:	18800015 	stw	r2,0(r3)
 400c104:	90017726 	beq	r18,zero,400c6e4 <_dtoa_r+0x6dc>
 400c108:	008100b4 	movhi	r2,1026
 400c10c:	10a0e704 	addi	r2,r2,-31844
 400c110:	d9002517 	ldw	r4,148(sp)
 400c114:	203fec26 	beq	r4,zero,400c0c8 <__alt_data_end+0xfc00c0c8>
 400c118:	10c000c7 	ldb	r3,3(r2)
 400c11c:	1801781e 	bne	r3,zero,400c700 <_dtoa_r+0x6f8>
 400c120:	10c000c4 	addi	r3,r2,3
 400c124:	d9802517 	ldw	r6,148(sp)
 400c128:	30c00015 	stw	r3,0(r6)
 400c12c:	003fe606 	br	400c0c8 <__alt_data_end+0xfc00c0c8>
 400c130:	04e00034 	movhi	r19,32768
 400c134:	9cffffc4 	addi	r19,r19,-1
 400c138:	00800044 	movi	r2,1
 400c13c:	8ce6703a 	and	r19,r17,r19
 400c140:	80800015 	stw	r2,0(r16)
 400c144:	9823883a 	mov	r17,r19
 400c148:	003fcc06 	br	400c07c <__alt_data_end+0xfc00c07c>
 400c14c:	d8800204 	addi	r2,sp,8
 400c150:	d8800015 	stw	r2,0(sp)
 400c154:	d9c00104 	addi	r7,sp,4
 400c158:	900b883a 	mov	r5,r18
 400c15c:	980d883a 	mov	r6,r19
 400c160:	e009883a 	mov	r4,fp
 400c164:	8820d53a 	srli	r16,r17,20
 400c168:	400ef8c0 	call	400ef8c <__d2b>
 400c16c:	d8800915 	stw	r2,36(sp)
 400c170:	8001651e 	bne	r16,zero,400c708 <_dtoa_r+0x700>
 400c174:	dd800217 	ldw	r22,8(sp)
 400c178:	dc000117 	ldw	r16,4(sp)
 400c17c:	00800804 	movi	r2,32
 400c180:	b421883a 	add	r16,r22,r16
 400c184:	80c10c84 	addi	r3,r16,1074
 400c188:	10c2d10e 	bge	r2,r3,400ccd0 <_dtoa_r+0xcc8>
 400c18c:	00801004 	movi	r2,64
 400c190:	81010484 	addi	r4,r16,1042
 400c194:	10c7c83a 	sub	r3,r2,r3
 400c198:	9108d83a 	srl	r4,r18,r4
 400c19c:	88e2983a 	sll	r17,r17,r3
 400c1a0:	2448b03a 	or	r4,r4,r17
 400c1a4:	40140e40 	call	40140e4 <__floatunsidf>
 400c1a8:	017f8434 	movhi	r5,65040
 400c1ac:	01800044 	movi	r6,1
 400c1b0:	1009883a 	mov	r4,r2
 400c1b4:	194b883a 	add	r5,r3,r5
 400c1b8:	843fffc4 	addi	r16,r16,-1
 400c1bc:	d9801115 	stw	r6,68(sp)
 400c1c0:	000d883a 	mov	r6,zero
 400c1c4:	01cffe34 	movhi	r7,16376
 400c1c8:	401368c0 	call	401368c <__subdf3>
 400c1cc:	0198dbf4 	movhi	r6,25455
 400c1d0:	01cff4f4 	movhi	r7,16339
 400c1d4:	3190d844 	addi	r6,r6,17249
 400c1d8:	39e1e9c4 	addi	r7,r7,-30809
 400c1dc:	1009883a 	mov	r4,r2
 400c1e0:	180b883a 	mov	r5,r3
 400c1e4:	4012e200 	call	4012e20 <__muldf3>
 400c1e8:	01a2d874 	movhi	r6,35681
 400c1ec:	01cff1f4 	movhi	r7,16327
 400c1f0:	31b22cc4 	addi	r6,r6,-14157
 400c1f4:	39e28a04 	addi	r7,r7,-30168
 400c1f8:	180b883a 	mov	r5,r3
 400c1fc:	1009883a 	mov	r4,r2
 400c200:	401194c0 	call	401194c <__adddf3>
 400c204:	8009883a 	mov	r4,r16
 400c208:	1029883a 	mov	r20,r2
 400c20c:	1823883a 	mov	r17,r3
 400c210:	40140080 	call	4014008 <__floatsidf>
 400c214:	019427f4 	movhi	r6,20639
 400c218:	01cff4f4 	movhi	r7,16339
 400c21c:	319e7ec4 	addi	r6,r6,31227
 400c220:	39d104c4 	addi	r7,r7,17427
 400c224:	1009883a 	mov	r4,r2
 400c228:	180b883a 	mov	r5,r3
 400c22c:	4012e200 	call	4012e20 <__muldf3>
 400c230:	100d883a 	mov	r6,r2
 400c234:	180f883a 	mov	r7,r3
 400c238:	a009883a 	mov	r4,r20
 400c23c:	880b883a 	mov	r5,r17
 400c240:	401194c0 	call	401194c <__adddf3>
 400c244:	1009883a 	mov	r4,r2
 400c248:	180b883a 	mov	r5,r3
 400c24c:	1029883a 	mov	r20,r2
 400c250:	1823883a 	mov	r17,r3
 400c254:	4013f880 	call	4013f88 <__fixdfsi>
 400c258:	000d883a 	mov	r6,zero
 400c25c:	000f883a 	mov	r7,zero
 400c260:	a009883a 	mov	r4,r20
 400c264:	880b883a 	mov	r5,r17
 400c268:	d8800515 	stw	r2,20(sp)
 400c26c:	4012d2c0 	call	4012d2c <__ledf2>
 400c270:	10028716 	blt	r2,zero,400cc90 <_dtoa_r+0xc88>
 400c274:	d8c00517 	ldw	r3,20(sp)
 400c278:	00800584 	movi	r2,22
 400c27c:	10c27536 	bltu	r2,r3,400cc54 <_dtoa_r+0xc4c>
 400c280:	180490fa 	slli	r2,r3,3
 400c284:	00c100b4 	movhi	r3,1026
 400c288:	18e13f04 	addi	r3,r3,-31492
 400c28c:	1885883a 	add	r2,r3,r2
 400c290:	11000017 	ldw	r4,0(r2)
 400c294:	11400117 	ldw	r5,4(r2)
 400c298:	900d883a 	mov	r6,r18
 400c29c:	980f883a 	mov	r7,r19
 400c2a0:	4012c500 	call	4012c50 <__gedf2>
 400c2a4:	00828d0e 	bge	zero,r2,400ccdc <_dtoa_r+0xcd4>
 400c2a8:	d9000517 	ldw	r4,20(sp)
 400c2ac:	d8000e15 	stw	zero,56(sp)
 400c2b0:	213fffc4 	addi	r4,r4,-1
 400c2b4:	d9000515 	stw	r4,20(sp)
 400c2b8:	b42dc83a 	sub	r22,r22,r16
 400c2bc:	b5bfffc4 	addi	r22,r22,-1
 400c2c0:	b0026f16 	blt	r22,zero,400cc80 <_dtoa_r+0xc78>
 400c2c4:	d8000815 	stw	zero,32(sp)
 400c2c8:	d9c00517 	ldw	r7,20(sp)
 400c2cc:	38026416 	blt	r7,zero,400cc60 <_dtoa_r+0xc58>
 400c2d0:	b1ed883a 	add	r22,r22,r7
 400c2d4:	d9c00d15 	stw	r7,52(sp)
 400c2d8:	d8000a15 	stw	zero,40(sp)
 400c2dc:	d9800317 	ldw	r6,12(sp)
 400c2e0:	00800244 	movi	r2,9
 400c2e4:	11811436 	bltu	r2,r6,400c738 <_dtoa_r+0x730>
 400c2e8:	00800144 	movi	r2,5
 400c2ec:	1184e10e 	bge	r2,r6,400d674 <_dtoa_r+0x166c>
 400c2f0:	31bfff04 	addi	r6,r6,-4
 400c2f4:	d9800315 	stw	r6,12(sp)
 400c2f8:	0023883a 	mov	r17,zero
 400c2fc:	d9800317 	ldw	r6,12(sp)
 400c300:	008000c4 	movi	r2,3
 400c304:	30836726 	beq	r6,r2,400d0a4 <_dtoa_r+0x109c>
 400c308:	1183410e 	bge	r2,r6,400d010 <_dtoa_r+0x1008>
 400c30c:	d9c00317 	ldw	r7,12(sp)
 400c310:	00800104 	movi	r2,4
 400c314:	38827c26 	beq	r7,r2,400cd08 <_dtoa_r+0xd00>
 400c318:	00800144 	movi	r2,5
 400c31c:	3884c41e 	bne	r7,r2,400d630 <_dtoa_r+0x1628>
 400c320:	00800044 	movi	r2,1
 400c324:	d8800b15 	stw	r2,44(sp)
 400c328:	d8c00517 	ldw	r3,20(sp)
 400c32c:	d9002217 	ldw	r4,136(sp)
 400c330:	1907883a 	add	r3,r3,r4
 400c334:	19800044 	addi	r6,r3,1
 400c338:	d8c00c15 	stw	r3,48(sp)
 400c33c:	d9800615 	stw	r6,24(sp)
 400c340:	0183a40e 	bge	zero,r6,400d1d4 <_dtoa_r+0x11cc>
 400c344:	d9800617 	ldw	r6,24(sp)
 400c348:	3021883a 	mov	r16,r6
 400c34c:	e0001115 	stw	zero,68(fp)
 400c350:	008005c4 	movi	r2,23
 400c354:	1184c92e 	bgeu	r2,r6,400d67c <_dtoa_r+0x1674>
 400c358:	00c00044 	movi	r3,1
 400c35c:	00800104 	movi	r2,4
 400c360:	1085883a 	add	r2,r2,r2
 400c364:	11000504 	addi	r4,r2,20
 400c368:	180b883a 	mov	r5,r3
 400c36c:	18c00044 	addi	r3,r3,1
 400c370:	313ffb2e 	bgeu	r6,r4,400c360 <__alt_data_end+0xfc00c360>
 400c374:	e1401115 	stw	r5,68(fp)
 400c378:	e009883a 	mov	r4,fp
 400c37c:	400e23c0 	call	400e23c <_Balloc>
 400c380:	d8800715 	stw	r2,28(sp)
 400c384:	e0801015 	stw	r2,64(fp)
 400c388:	00800384 	movi	r2,14
 400c38c:	1400f736 	bltu	r2,r16,400c76c <_dtoa_r+0x764>
 400c390:	8800f626 	beq	r17,zero,400c76c <_dtoa_r+0x764>
 400c394:	d9c00517 	ldw	r7,20(sp)
 400c398:	01c39a0e 	bge	zero,r7,400d204 <_dtoa_r+0x11fc>
 400c39c:	388003cc 	andi	r2,r7,15
 400c3a0:	100490fa 	slli	r2,r2,3
 400c3a4:	382bd13a 	srai	r21,r7,4
 400c3a8:	00c100b4 	movhi	r3,1026
 400c3ac:	18e13f04 	addi	r3,r3,-31492
 400c3b0:	1885883a 	add	r2,r3,r2
 400c3b4:	a8c0040c 	andi	r3,r21,16
 400c3b8:	12400017 	ldw	r9,0(r2)
 400c3bc:	12000117 	ldw	r8,4(r2)
 400c3c0:	18037926 	beq	r3,zero,400d1a8 <_dtoa_r+0x11a0>
 400c3c4:	008100b4 	movhi	r2,1026
 400c3c8:	10a13504 	addi	r2,r2,-31532
 400c3cc:	11800817 	ldw	r6,32(r2)
 400c3d0:	11c00917 	ldw	r7,36(r2)
 400c3d4:	9009883a 	mov	r4,r18
 400c3d8:	980b883a 	mov	r5,r19
 400c3dc:	da001715 	stw	r8,92(sp)
 400c3e0:	da401615 	stw	r9,88(sp)
 400c3e4:	40121f80 	call	40121f8 <__divdf3>
 400c3e8:	da001717 	ldw	r8,92(sp)
 400c3ec:	da401617 	ldw	r9,88(sp)
 400c3f0:	ad4003cc 	andi	r21,r21,15
 400c3f4:	040000c4 	movi	r16,3
 400c3f8:	1023883a 	mov	r17,r2
 400c3fc:	1829883a 	mov	r20,r3
 400c400:	a8001126 	beq	r21,zero,400c448 <_dtoa_r+0x440>
 400c404:	05c100b4 	movhi	r23,1026
 400c408:	bde13504 	addi	r23,r23,-31532
 400c40c:	4805883a 	mov	r2,r9
 400c410:	4007883a 	mov	r3,r8
 400c414:	a980004c 	andi	r6,r21,1
 400c418:	1009883a 	mov	r4,r2
 400c41c:	a82bd07a 	srai	r21,r21,1
 400c420:	180b883a 	mov	r5,r3
 400c424:	30000426 	beq	r6,zero,400c438 <_dtoa_r+0x430>
 400c428:	b9800017 	ldw	r6,0(r23)
 400c42c:	b9c00117 	ldw	r7,4(r23)
 400c430:	84000044 	addi	r16,r16,1
 400c434:	4012e200 	call	4012e20 <__muldf3>
 400c438:	bdc00204 	addi	r23,r23,8
 400c43c:	a83ff51e 	bne	r21,zero,400c414 <__alt_data_end+0xfc00c414>
 400c440:	1013883a 	mov	r9,r2
 400c444:	1811883a 	mov	r8,r3
 400c448:	480d883a 	mov	r6,r9
 400c44c:	400f883a 	mov	r7,r8
 400c450:	8809883a 	mov	r4,r17
 400c454:	a00b883a 	mov	r5,r20
 400c458:	40121f80 	call	40121f8 <__divdf3>
 400c45c:	d8800f15 	stw	r2,60(sp)
 400c460:	d8c01015 	stw	r3,64(sp)
 400c464:	d8c00e17 	ldw	r3,56(sp)
 400c468:	18000626 	beq	r3,zero,400c484 <_dtoa_r+0x47c>
 400c46c:	d9000f17 	ldw	r4,60(sp)
 400c470:	d9401017 	ldw	r5,64(sp)
 400c474:	000d883a 	mov	r6,zero
 400c478:	01cffc34 	movhi	r7,16368
 400c47c:	4012d2c0 	call	4012d2c <__ledf2>
 400c480:	10040b16 	blt	r2,zero,400d4b0 <_dtoa_r+0x14a8>
 400c484:	8009883a 	mov	r4,r16
 400c488:	40140080 	call	4014008 <__floatsidf>
 400c48c:	d9800f17 	ldw	r6,60(sp)
 400c490:	d9c01017 	ldw	r7,64(sp)
 400c494:	1009883a 	mov	r4,r2
 400c498:	180b883a 	mov	r5,r3
 400c49c:	4012e200 	call	4012e20 <__muldf3>
 400c4a0:	000d883a 	mov	r6,zero
 400c4a4:	01d00734 	movhi	r7,16412
 400c4a8:	1009883a 	mov	r4,r2
 400c4ac:	180b883a 	mov	r5,r3
 400c4b0:	401194c0 	call	401194c <__adddf3>
 400c4b4:	1021883a 	mov	r16,r2
 400c4b8:	d8800617 	ldw	r2,24(sp)
 400c4bc:	047f3034 	movhi	r17,64704
 400c4c0:	1c63883a 	add	r17,r3,r17
 400c4c4:	10031826 	beq	r2,zero,400d128 <_dtoa_r+0x1120>
 400c4c8:	d8c00517 	ldw	r3,20(sp)
 400c4cc:	db000617 	ldw	r12,24(sp)
 400c4d0:	d8c01315 	stw	r3,76(sp)
 400c4d4:	d9000b17 	ldw	r4,44(sp)
 400c4d8:	20038f26 	beq	r4,zero,400d318 <_dtoa_r+0x1310>
 400c4dc:	60bfffc4 	addi	r2,r12,-1
 400c4e0:	100490fa 	slli	r2,r2,3
 400c4e4:	00c100b4 	movhi	r3,1026
 400c4e8:	18e13f04 	addi	r3,r3,-31492
 400c4ec:	1885883a 	add	r2,r3,r2
 400c4f0:	11800017 	ldw	r6,0(r2)
 400c4f4:	11c00117 	ldw	r7,4(r2)
 400c4f8:	d8800717 	ldw	r2,28(sp)
 400c4fc:	0009883a 	mov	r4,zero
 400c500:	014ff834 	movhi	r5,16352
 400c504:	db001615 	stw	r12,88(sp)
 400c508:	15c00044 	addi	r23,r2,1
 400c50c:	40121f80 	call	40121f8 <__divdf3>
 400c510:	800d883a 	mov	r6,r16
 400c514:	880f883a 	mov	r7,r17
 400c518:	1009883a 	mov	r4,r2
 400c51c:	180b883a 	mov	r5,r3
 400c520:	401368c0 	call	401368c <__subdf3>
 400c524:	d9401017 	ldw	r5,64(sp)
 400c528:	d9000f17 	ldw	r4,60(sp)
 400c52c:	102b883a 	mov	r21,r2
 400c530:	d8c01215 	stw	r3,72(sp)
 400c534:	4013f880 	call	4013f88 <__fixdfsi>
 400c538:	1009883a 	mov	r4,r2
 400c53c:	1029883a 	mov	r20,r2
 400c540:	40140080 	call	4014008 <__floatsidf>
 400c544:	d9000f17 	ldw	r4,60(sp)
 400c548:	d9401017 	ldw	r5,64(sp)
 400c54c:	100d883a 	mov	r6,r2
 400c550:	180f883a 	mov	r7,r3
 400c554:	401368c0 	call	401368c <__subdf3>
 400c558:	1823883a 	mov	r17,r3
 400c55c:	d8c00717 	ldw	r3,28(sp)
 400c560:	d9401217 	ldw	r5,72(sp)
 400c564:	a2000c04 	addi	r8,r20,48
 400c568:	1021883a 	mov	r16,r2
 400c56c:	1a000005 	stb	r8,0(r3)
 400c570:	800d883a 	mov	r6,r16
 400c574:	880f883a 	mov	r7,r17
 400c578:	a809883a 	mov	r4,r21
 400c57c:	4029883a 	mov	r20,r8
 400c580:	4012c500 	call	4012c50 <__gedf2>
 400c584:	00841d16 	blt	zero,r2,400d5fc <_dtoa_r+0x15f4>
 400c588:	800d883a 	mov	r6,r16
 400c58c:	880f883a 	mov	r7,r17
 400c590:	0009883a 	mov	r4,zero
 400c594:	014ffc34 	movhi	r5,16368
 400c598:	401368c0 	call	401368c <__subdf3>
 400c59c:	d9401217 	ldw	r5,72(sp)
 400c5a0:	100d883a 	mov	r6,r2
 400c5a4:	180f883a 	mov	r7,r3
 400c5a8:	a809883a 	mov	r4,r21
 400c5ac:	4012c500 	call	4012c50 <__gedf2>
 400c5b0:	db001617 	ldw	r12,88(sp)
 400c5b4:	00840e16 	blt	zero,r2,400d5f0 <_dtoa_r+0x15e8>
 400c5b8:	00800044 	movi	r2,1
 400c5bc:	13006b0e 	bge	r2,r12,400c76c <_dtoa_r+0x764>
 400c5c0:	d9000717 	ldw	r4,28(sp)
 400c5c4:	dd800f15 	stw	r22,60(sp)
 400c5c8:	dcc01015 	stw	r19,64(sp)
 400c5cc:	2319883a 	add	r12,r4,r12
 400c5d0:	dcc01217 	ldw	r19,72(sp)
 400c5d4:	602d883a 	mov	r22,r12
 400c5d8:	dc801215 	stw	r18,72(sp)
 400c5dc:	b825883a 	mov	r18,r23
 400c5e0:	00000906 	br	400c608 <_dtoa_r+0x600>
 400c5e4:	401368c0 	call	401368c <__subdf3>
 400c5e8:	a80d883a 	mov	r6,r21
 400c5ec:	980f883a 	mov	r7,r19
 400c5f0:	1009883a 	mov	r4,r2
 400c5f4:	180b883a 	mov	r5,r3
 400c5f8:	4012d2c0 	call	4012d2c <__ledf2>
 400c5fc:	1003e816 	blt	r2,zero,400d5a0 <_dtoa_r+0x1598>
 400c600:	b825883a 	mov	r18,r23
 400c604:	bd83e926 	beq	r23,r22,400d5ac <_dtoa_r+0x15a4>
 400c608:	a809883a 	mov	r4,r21
 400c60c:	980b883a 	mov	r5,r19
 400c610:	000d883a 	mov	r6,zero
 400c614:	01d00934 	movhi	r7,16420
 400c618:	4012e200 	call	4012e20 <__muldf3>
 400c61c:	000d883a 	mov	r6,zero
 400c620:	01d00934 	movhi	r7,16420
 400c624:	8009883a 	mov	r4,r16
 400c628:	880b883a 	mov	r5,r17
 400c62c:	102b883a 	mov	r21,r2
 400c630:	1827883a 	mov	r19,r3
 400c634:	4012e200 	call	4012e20 <__muldf3>
 400c638:	180b883a 	mov	r5,r3
 400c63c:	1009883a 	mov	r4,r2
 400c640:	1821883a 	mov	r16,r3
 400c644:	1023883a 	mov	r17,r2
 400c648:	4013f880 	call	4013f88 <__fixdfsi>
 400c64c:	1009883a 	mov	r4,r2
 400c650:	1029883a 	mov	r20,r2
 400c654:	40140080 	call	4014008 <__floatsidf>
 400c658:	8809883a 	mov	r4,r17
 400c65c:	800b883a 	mov	r5,r16
 400c660:	100d883a 	mov	r6,r2
 400c664:	180f883a 	mov	r7,r3
 400c668:	401368c0 	call	401368c <__subdf3>
 400c66c:	a5000c04 	addi	r20,r20,48
 400c670:	a80d883a 	mov	r6,r21
 400c674:	980f883a 	mov	r7,r19
 400c678:	1009883a 	mov	r4,r2
 400c67c:	180b883a 	mov	r5,r3
 400c680:	95000005 	stb	r20,0(r18)
 400c684:	1021883a 	mov	r16,r2
 400c688:	1823883a 	mov	r17,r3
 400c68c:	4012d2c0 	call	4012d2c <__ledf2>
 400c690:	bdc00044 	addi	r23,r23,1
 400c694:	800d883a 	mov	r6,r16
 400c698:	880f883a 	mov	r7,r17
 400c69c:	0009883a 	mov	r4,zero
 400c6a0:	014ffc34 	movhi	r5,16368
 400c6a4:	103fcf0e 	bge	r2,zero,400c5e4 <__alt_data_end+0xfc00c5e4>
 400c6a8:	d8c01317 	ldw	r3,76(sp)
 400c6ac:	d8c00515 	stw	r3,20(sp)
 400c6b0:	d9400917 	ldw	r5,36(sp)
 400c6b4:	e009883a 	mov	r4,fp
 400c6b8:	400e2e40 	call	400e2e4 <_Bfree>
 400c6bc:	d9000517 	ldw	r4,20(sp)
 400c6c0:	d9802317 	ldw	r6,140(sp)
 400c6c4:	d9c02517 	ldw	r7,148(sp)
 400c6c8:	b8000005 	stb	zero,0(r23)
 400c6cc:	20800044 	addi	r2,r4,1
 400c6d0:	30800015 	stw	r2,0(r6)
 400c6d4:	3802aa26 	beq	r7,zero,400d180 <_dtoa_r+0x1178>
 400c6d8:	3dc00015 	stw	r23,0(r7)
 400c6dc:	d8800717 	ldw	r2,28(sp)
 400c6e0:	003e7906 	br	400c0c8 <__alt_data_end+0xfc00c0c8>
 400c6e4:	00800434 	movhi	r2,16
 400c6e8:	10bfffc4 	addi	r2,r2,-1
 400c6ec:	88a2703a 	and	r17,r17,r2
 400c6f0:	883e851e 	bne	r17,zero,400c108 <__alt_data_end+0xfc00c108>
 400c6f4:	008100b4 	movhi	r2,1026
 400c6f8:	10a0e404 	addi	r2,r2,-31856
 400c6fc:	003e8406 	br	400c110 <__alt_data_end+0xfc00c110>
 400c700:	10c00204 	addi	r3,r2,8
 400c704:	003e8706 	br	400c124 <__alt_data_end+0xfc00c124>
 400c708:	01400434 	movhi	r5,16
 400c70c:	297fffc4 	addi	r5,r5,-1
 400c710:	994a703a 	and	r5,r19,r5
 400c714:	9009883a 	mov	r4,r18
 400c718:	843f0044 	addi	r16,r16,-1023
 400c71c:	294ffc34 	orhi	r5,r5,16368
 400c720:	dd800217 	ldw	r22,8(sp)
 400c724:	d8001115 	stw	zero,68(sp)
 400c728:	003ea506 	br	400c1c0 <__alt_data_end+0xfc00c1c0>
 400c72c:	008100b4 	movhi	r2,1026
 400c730:	10a0db04 	addi	r2,r2,-31892
 400c734:	003e6406 	br	400c0c8 <__alt_data_end+0xfc00c0c8>
 400c738:	e0001115 	stw	zero,68(fp)
 400c73c:	000b883a 	mov	r5,zero
 400c740:	e009883a 	mov	r4,fp
 400c744:	400e23c0 	call	400e23c <_Balloc>
 400c748:	01bfffc4 	movi	r6,-1
 400c74c:	01c00044 	movi	r7,1
 400c750:	d8800715 	stw	r2,28(sp)
 400c754:	d9800c15 	stw	r6,48(sp)
 400c758:	e0801015 	stw	r2,64(fp)
 400c75c:	d8000315 	stw	zero,12(sp)
 400c760:	d9c00b15 	stw	r7,44(sp)
 400c764:	d9800615 	stw	r6,24(sp)
 400c768:	d8002215 	stw	zero,136(sp)
 400c76c:	d8800117 	ldw	r2,4(sp)
 400c770:	10008916 	blt	r2,zero,400c998 <_dtoa_r+0x990>
 400c774:	d9000517 	ldw	r4,20(sp)
 400c778:	00c00384 	movi	r3,14
 400c77c:	19008616 	blt	r3,r4,400c998 <_dtoa_r+0x990>
 400c780:	200490fa 	slli	r2,r4,3
 400c784:	00c100b4 	movhi	r3,1026
 400c788:	d9802217 	ldw	r6,136(sp)
 400c78c:	18e13f04 	addi	r3,r3,-31492
 400c790:	1885883a 	add	r2,r3,r2
 400c794:	14000017 	ldw	r16,0(r2)
 400c798:	14400117 	ldw	r17,4(r2)
 400c79c:	30016316 	blt	r6,zero,400cd2c <_dtoa_r+0xd24>
 400c7a0:	800d883a 	mov	r6,r16
 400c7a4:	880f883a 	mov	r7,r17
 400c7a8:	9009883a 	mov	r4,r18
 400c7ac:	980b883a 	mov	r5,r19
 400c7b0:	40121f80 	call	40121f8 <__divdf3>
 400c7b4:	180b883a 	mov	r5,r3
 400c7b8:	1009883a 	mov	r4,r2
 400c7bc:	4013f880 	call	4013f88 <__fixdfsi>
 400c7c0:	1009883a 	mov	r4,r2
 400c7c4:	102b883a 	mov	r21,r2
 400c7c8:	40140080 	call	4014008 <__floatsidf>
 400c7cc:	800d883a 	mov	r6,r16
 400c7d0:	880f883a 	mov	r7,r17
 400c7d4:	1009883a 	mov	r4,r2
 400c7d8:	180b883a 	mov	r5,r3
 400c7dc:	4012e200 	call	4012e20 <__muldf3>
 400c7e0:	100d883a 	mov	r6,r2
 400c7e4:	180f883a 	mov	r7,r3
 400c7e8:	9009883a 	mov	r4,r18
 400c7ec:	980b883a 	mov	r5,r19
 400c7f0:	401368c0 	call	401368c <__subdf3>
 400c7f4:	d9c00717 	ldw	r7,28(sp)
 400c7f8:	1009883a 	mov	r4,r2
 400c7fc:	a8800c04 	addi	r2,r21,48
 400c800:	38800005 	stb	r2,0(r7)
 400c804:	3dc00044 	addi	r23,r7,1
 400c808:	d9c00617 	ldw	r7,24(sp)
 400c80c:	01800044 	movi	r6,1
 400c810:	180b883a 	mov	r5,r3
 400c814:	2005883a 	mov	r2,r4
 400c818:	39803826 	beq	r7,r6,400c8fc <_dtoa_r+0x8f4>
 400c81c:	000d883a 	mov	r6,zero
 400c820:	01d00934 	movhi	r7,16420
 400c824:	4012e200 	call	4012e20 <__muldf3>
 400c828:	000d883a 	mov	r6,zero
 400c82c:	000f883a 	mov	r7,zero
 400c830:	1009883a 	mov	r4,r2
 400c834:	180b883a 	mov	r5,r3
 400c838:	1025883a 	mov	r18,r2
 400c83c:	1827883a 	mov	r19,r3
 400c840:	4012bc80 	call	4012bc8 <__eqdf2>
 400c844:	103f9a26 	beq	r2,zero,400c6b0 <__alt_data_end+0xfc00c6b0>
 400c848:	d9c00617 	ldw	r7,24(sp)
 400c84c:	d8c00717 	ldw	r3,28(sp)
 400c850:	b829883a 	mov	r20,r23
 400c854:	38bfffc4 	addi	r2,r7,-1
 400c858:	18ad883a 	add	r22,r3,r2
 400c85c:	00000a06 	br	400c888 <_dtoa_r+0x880>
 400c860:	4012e200 	call	4012e20 <__muldf3>
 400c864:	000d883a 	mov	r6,zero
 400c868:	000f883a 	mov	r7,zero
 400c86c:	1009883a 	mov	r4,r2
 400c870:	180b883a 	mov	r5,r3
 400c874:	1025883a 	mov	r18,r2
 400c878:	1827883a 	mov	r19,r3
 400c87c:	b829883a 	mov	r20,r23
 400c880:	4012bc80 	call	4012bc8 <__eqdf2>
 400c884:	103f8a26 	beq	r2,zero,400c6b0 <__alt_data_end+0xfc00c6b0>
 400c888:	800d883a 	mov	r6,r16
 400c88c:	880f883a 	mov	r7,r17
 400c890:	9009883a 	mov	r4,r18
 400c894:	980b883a 	mov	r5,r19
 400c898:	40121f80 	call	40121f8 <__divdf3>
 400c89c:	180b883a 	mov	r5,r3
 400c8a0:	1009883a 	mov	r4,r2
 400c8a4:	4013f880 	call	4013f88 <__fixdfsi>
 400c8a8:	1009883a 	mov	r4,r2
 400c8ac:	102b883a 	mov	r21,r2
 400c8b0:	40140080 	call	4014008 <__floatsidf>
 400c8b4:	800d883a 	mov	r6,r16
 400c8b8:	880f883a 	mov	r7,r17
 400c8bc:	1009883a 	mov	r4,r2
 400c8c0:	180b883a 	mov	r5,r3
 400c8c4:	4012e200 	call	4012e20 <__muldf3>
 400c8c8:	100d883a 	mov	r6,r2
 400c8cc:	180f883a 	mov	r7,r3
 400c8d0:	9009883a 	mov	r4,r18
 400c8d4:	980b883a 	mov	r5,r19
 400c8d8:	401368c0 	call	401368c <__subdf3>
 400c8dc:	aa000c04 	addi	r8,r21,48
 400c8e0:	a2000005 	stb	r8,0(r20)
 400c8e4:	000d883a 	mov	r6,zero
 400c8e8:	01d00934 	movhi	r7,16420
 400c8ec:	1009883a 	mov	r4,r2
 400c8f0:	180b883a 	mov	r5,r3
 400c8f4:	a5c00044 	addi	r23,r20,1
 400c8f8:	b53fd91e 	bne	r22,r20,400c860 <__alt_data_end+0xfc00c860>
 400c8fc:	100d883a 	mov	r6,r2
 400c900:	180f883a 	mov	r7,r3
 400c904:	1009883a 	mov	r4,r2
 400c908:	180b883a 	mov	r5,r3
 400c90c:	401194c0 	call	401194c <__adddf3>
 400c910:	100d883a 	mov	r6,r2
 400c914:	180f883a 	mov	r7,r3
 400c918:	8009883a 	mov	r4,r16
 400c91c:	880b883a 	mov	r5,r17
 400c920:	1027883a 	mov	r19,r2
 400c924:	1825883a 	mov	r18,r3
 400c928:	4012d2c0 	call	4012d2c <__ledf2>
 400c92c:	10000816 	blt	r2,zero,400c950 <_dtoa_r+0x948>
 400c930:	980d883a 	mov	r6,r19
 400c934:	900f883a 	mov	r7,r18
 400c938:	8009883a 	mov	r4,r16
 400c93c:	880b883a 	mov	r5,r17
 400c940:	4012bc80 	call	4012bc8 <__eqdf2>
 400c944:	103f5a1e 	bne	r2,zero,400c6b0 <__alt_data_end+0xfc00c6b0>
 400c948:	ad40004c 	andi	r21,r21,1
 400c94c:	a83f5826 	beq	r21,zero,400c6b0 <__alt_data_end+0xfc00c6b0>
 400c950:	bd3fffc3 	ldbu	r20,-1(r23)
 400c954:	b8bfffc4 	addi	r2,r23,-1
 400c958:	1007883a 	mov	r3,r2
 400c95c:	01400e44 	movi	r5,57
 400c960:	d9800717 	ldw	r6,28(sp)
 400c964:	00000506 	br	400c97c <_dtoa_r+0x974>
 400c968:	18ffffc4 	addi	r3,r3,-1
 400c96c:	11824726 	beq	r2,r6,400d28c <_dtoa_r+0x1284>
 400c970:	1d000003 	ldbu	r20,0(r3)
 400c974:	102f883a 	mov	r23,r2
 400c978:	10bfffc4 	addi	r2,r2,-1
 400c97c:	a1003fcc 	andi	r4,r20,255
 400c980:	2100201c 	xori	r4,r4,128
 400c984:	213fe004 	addi	r4,r4,-128
 400c988:	217ff726 	beq	r4,r5,400c968 <__alt_data_end+0xfc00c968>
 400c98c:	a2000044 	addi	r8,r20,1
 400c990:	12000005 	stb	r8,0(r2)
 400c994:	003f4606 	br	400c6b0 <__alt_data_end+0xfc00c6b0>
 400c998:	d9000b17 	ldw	r4,44(sp)
 400c99c:	2000c826 	beq	r4,zero,400ccc0 <_dtoa_r+0xcb8>
 400c9a0:	d9800317 	ldw	r6,12(sp)
 400c9a4:	00c00044 	movi	r3,1
 400c9a8:	1980f90e 	bge	r3,r6,400cd90 <_dtoa_r+0xd88>
 400c9ac:	d8800617 	ldw	r2,24(sp)
 400c9b0:	d8c00a17 	ldw	r3,40(sp)
 400c9b4:	157fffc4 	addi	r21,r2,-1
 400c9b8:	1d41f316 	blt	r3,r21,400d188 <_dtoa_r+0x1180>
 400c9bc:	1d6bc83a 	sub	r21,r3,r21
 400c9c0:	d9c00617 	ldw	r7,24(sp)
 400c9c4:	3802aa16 	blt	r7,zero,400d470 <_dtoa_r+0x1468>
 400c9c8:	dd000817 	ldw	r20,32(sp)
 400c9cc:	d8800617 	ldw	r2,24(sp)
 400c9d0:	d8c00817 	ldw	r3,32(sp)
 400c9d4:	01400044 	movi	r5,1
 400c9d8:	e009883a 	mov	r4,fp
 400c9dc:	1887883a 	add	r3,r3,r2
 400c9e0:	d8c00815 	stw	r3,32(sp)
 400c9e4:	b0ad883a 	add	r22,r22,r2
 400c9e8:	400e6700 	call	400e670 <__i2b>
 400c9ec:	1023883a 	mov	r17,r2
 400c9f0:	a0000826 	beq	r20,zero,400ca14 <_dtoa_r+0xa0c>
 400c9f4:	0580070e 	bge	zero,r22,400ca14 <_dtoa_r+0xa0c>
 400c9f8:	a005883a 	mov	r2,r20
 400c9fc:	b500b916 	blt	r22,r20,400cce4 <_dtoa_r+0xcdc>
 400ca00:	d9000817 	ldw	r4,32(sp)
 400ca04:	a0a9c83a 	sub	r20,r20,r2
 400ca08:	b0adc83a 	sub	r22,r22,r2
 400ca0c:	2089c83a 	sub	r4,r4,r2
 400ca10:	d9000815 	stw	r4,32(sp)
 400ca14:	d9800a17 	ldw	r6,40(sp)
 400ca18:	0181810e 	bge	zero,r6,400d020 <_dtoa_r+0x1018>
 400ca1c:	d9c00b17 	ldw	r7,44(sp)
 400ca20:	3800b326 	beq	r7,zero,400ccf0 <_dtoa_r+0xce8>
 400ca24:	a800b226 	beq	r21,zero,400ccf0 <_dtoa_r+0xce8>
 400ca28:	880b883a 	mov	r5,r17
 400ca2c:	a80d883a 	mov	r6,r21
 400ca30:	e009883a 	mov	r4,fp
 400ca34:	400e9380 	call	400e938 <__pow5mult>
 400ca38:	d9800917 	ldw	r6,36(sp)
 400ca3c:	100b883a 	mov	r5,r2
 400ca40:	e009883a 	mov	r4,fp
 400ca44:	1023883a 	mov	r17,r2
 400ca48:	400e6ac0 	call	400e6ac <__multiply>
 400ca4c:	1021883a 	mov	r16,r2
 400ca50:	d8800a17 	ldw	r2,40(sp)
 400ca54:	d9400917 	ldw	r5,36(sp)
 400ca58:	e009883a 	mov	r4,fp
 400ca5c:	1545c83a 	sub	r2,r2,r21
 400ca60:	d8800a15 	stw	r2,40(sp)
 400ca64:	400e2e40 	call	400e2e4 <_Bfree>
 400ca68:	d8c00a17 	ldw	r3,40(sp)
 400ca6c:	18009f1e 	bne	r3,zero,400ccec <_dtoa_r+0xce4>
 400ca70:	05c00044 	movi	r23,1
 400ca74:	e009883a 	mov	r4,fp
 400ca78:	b80b883a 	mov	r5,r23
 400ca7c:	400e6700 	call	400e670 <__i2b>
 400ca80:	d9000d17 	ldw	r4,52(sp)
 400ca84:	102b883a 	mov	r21,r2
 400ca88:	2000ce26 	beq	r4,zero,400cdc4 <_dtoa_r+0xdbc>
 400ca8c:	200d883a 	mov	r6,r4
 400ca90:	100b883a 	mov	r5,r2
 400ca94:	e009883a 	mov	r4,fp
 400ca98:	400e9380 	call	400e938 <__pow5mult>
 400ca9c:	d9800317 	ldw	r6,12(sp)
 400caa0:	102b883a 	mov	r21,r2
 400caa4:	b981810e 	bge	r23,r6,400d0ac <_dtoa_r+0x10a4>
 400caa8:	0027883a 	mov	r19,zero
 400caac:	a8800417 	ldw	r2,16(r21)
 400cab0:	05c00804 	movi	r23,32
 400cab4:	10800104 	addi	r2,r2,4
 400cab8:	1085883a 	add	r2,r2,r2
 400cabc:	1085883a 	add	r2,r2,r2
 400cac0:	a885883a 	add	r2,r21,r2
 400cac4:	11000017 	ldw	r4,0(r2)
 400cac8:	400e5580 	call	400e558 <__hi0bits>
 400cacc:	b885c83a 	sub	r2,r23,r2
 400cad0:	1585883a 	add	r2,r2,r22
 400cad4:	108007cc 	andi	r2,r2,31
 400cad8:	1000b326 	beq	r2,zero,400cda8 <_dtoa_r+0xda0>
 400cadc:	00c00804 	movi	r3,32
 400cae0:	1887c83a 	sub	r3,r3,r2
 400cae4:	01000104 	movi	r4,4
 400cae8:	20c2cd0e 	bge	r4,r3,400d620 <_dtoa_r+0x1618>
 400caec:	00c00704 	movi	r3,28
 400caf0:	1885c83a 	sub	r2,r3,r2
 400caf4:	d8c00817 	ldw	r3,32(sp)
 400caf8:	a0a9883a 	add	r20,r20,r2
 400cafc:	b0ad883a 	add	r22,r22,r2
 400cb00:	1887883a 	add	r3,r3,r2
 400cb04:	d8c00815 	stw	r3,32(sp)
 400cb08:	d9800817 	ldw	r6,32(sp)
 400cb0c:	0180040e 	bge	zero,r6,400cb20 <_dtoa_r+0xb18>
 400cb10:	800b883a 	mov	r5,r16
 400cb14:	e009883a 	mov	r4,fp
 400cb18:	400ea780 	call	400ea78 <__lshift>
 400cb1c:	1021883a 	mov	r16,r2
 400cb20:	0580050e 	bge	zero,r22,400cb38 <_dtoa_r+0xb30>
 400cb24:	a80b883a 	mov	r5,r21
 400cb28:	b00d883a 	mov	r6,r22
 400cb2c:	e009883a 	mov	r4,fp
 400cb30:	400ea780 	call	400ea78 <__lshift>
 400cb34:	102b883a 	mov	r21,r2
 400cb38:	d9c00e17 	ldw	r7,56(sp)
 400cb3c:	3801211e 	bne	r7,zero,400cfc4 <_dtoa_r+0xfbc>
 400cb40:	d9800617 	ldw	r6,24(sp)
 400cb44:	0181380e 	bge	zero,r6,400d028 <_dtoa_r+0x1020>
 400cb48:	d8c00b17 	ldw	r3,44(sp)
 400cb4c:	1800ab1e 	bne	r3,zero,400cdfc <_dtoa_r+0xdf4>
 400cb50:	dc800717 	ldw	r18,28(sp)
 400cb54:	dcc00617 	ldw	r19,24(sp)
 400cb58:	9029883a 	mov	r20,r18
 400cb5c:	00000206 	br	400cb68 <_dtoa_r+0xb60>
 400cb60:	400e30c0 	call	400e30c <__multadd>
 400cb64:	1021883a 	mov	r16,r2
 400cb68:	a80b883a 	mov	r5,r21
 400cb6c:	8009883a 	mov	r4,r16
 400cb70:	400bde00 	call	400bde0 <quorem>
 400cb74:	10800c04 	addi	r2,r2,48
 400cb78:	90800005 	stb	r2,0(r18)
 400cb7c:	94800044 	addi	r18,r18,1
 400cb80:	9507c83a 	sub	r3,r18,r20
 400cb84:	000f883a 	mov	r7,zero
 400cb88:	01800284 	movi	r6,10
 400cb8c:	800b883a 	mov	r5,r16
 400cb90:	e009883a 	mov	r4,fp
 400cb94:	1cfff216 	blt	r3,r19,400cb60 <__alt_data_end+0xfc00cb60>
 400cb98:	1011883a 	mov	r8,r2
 400cb9c:	d8800617 	ldw	r2,24(sp)
 400cba0:	0082370e 	bge	zero,r2,400d480 <_dtoa_r+0x1478>
 400cba4:	d9000717 	ldw	r4,28(sp)
 400cba8:	0025883a 	mov	r18,zero
 400cbac:	20af883a 	add	r23,r4,r2
 400cbb0:	01800044 	movi	r6,1
 400cbb4:	800b883a 	mov	r5,r16
 400cbb8:	e009883a 	mov	r4,fp
 400cbbc:	da001715 	stw	r8,92(sp)
 400cbc0:	400ea780 	call	400ea78 <__lshift>
 400cbc4:	a80b883a 	mov	r5,r21
 400cbc8:	1009883a 	mov	r4,r2
 400cbcc:	d8800915 	stw	r2,36(sp)
 400cbd0:	400ebc00 	call	400ebc0 <__mcmp>
 400cbd4:	da001717 	ldw	r8,92(sp)
 400cbd8:	0081800e 	bge	zero,r2,400d1dc <_dtoa_r+0x11d4>
 400cbdc:	b93fffc3 	ldbu	r4,-1(r23)
 400cbe0:	b8bfffc4 	addi	r2,r23,-1
 400cbe4:	1007883a 	mov	r3,r2
 400cbe8:	01800e44 	movi	r6,57
 400cbec:	d9c00717 	ldw	r7,28(sp)
 400cbf0:	00000506 	br	400cc08 <_dtoa_r+0xc00>
 400cbf4:	18ffffc4 	addi	r3,r3,-1
 400cbf8:	11c12326 	beq	r2,r7,400d088 <_dtoa_r+0x1080>
 400cbfc:	19000003 	ldbu	r4,0(r3)
 400cc00:	102f883a 	mov	r23,r2
 400cc04:	10bfffc4 	addi	r2,r2,-1
 400cc08:	21403fcc 	andi	r5,r4,255
 400cc0c:	2940201c 	xori	r5,r5,128
 400cc10:	297fe004 	addi	r5,r5,-128
 400cc14:	29bff726 	beq	r5,r6,400cbf4 <__alt_data_end+0xfc00cbf4>
 400cc18:	21000044 	addi	r4,r4,1
 400cc1c:	11000005 	stb	r4,0(r2)
 400cc20:	a80b883a 	mov	r5,r21
 400cc24:	e009883a 	mov	r4,fp
 400cc28:	400e2e40 	call	400e2e4 <_Bfree>
 400cc2c:	883ea026 	beq	r17,zero,400c6b0 <__alt_data_end+0xfc00c6b0>
 400cc30:	90000426 	beq	r18,zero,400cc44 <_dtoa_r+0xc3c>
 400cc34:	94400326 	beq	r18,r17,400cc44 <_dtoa_r+0xc3c>
 400cc38:	900b883a 	mov	r5,r18
 400cc3c:	e009883a 	mov	r4,fp
 400cc40:	400e2e40 	call	400e2e4 <_Bfree>
 400cc44:	880b883a 	mov	r5,r17
 400cc48:	e009883a 	mov	r4,fp
 400cc4c:	400e2e40 	call	400e2e4 <_Bfree>
 400cc50:	003e9706 	br	400c6b0 <__alt_data_end+0xfc00c6b0>
 400cc54:	01800044 	movi	r6,1
 400cc58:	d9800e15 	stw	r6,56(sp)
 400cc5c:	003d9606 	br	400c2b8 <__alt_data_end+0xfc00c2b8>
 400cc60:	d8800817 	ldw	r2,32(sp)
 400cc64:	d8c00517 	ldw	r3,20(sp)
 400cc68:	d8000d15 	stw	zero,52(sp)
 400cc6c:	10c5c83a 	sub	r2,r2,r3
 400cc70:	00c9c83a 	sub	r4,zero,r3
 400cc74:	d8800815 	stw	r2,32(sp)
 400cc78:	d9000a15 	stw	r4,40(sp)
 400cc7c:	003d9706 	br	400c2dc <__alt_data_end+0xfc00c2dc>
 400cc80:	05adc83a 	sub	r22,zero,r22
 400cc84:	dd800815 	stw	r22,32(sp)
 400cc88:	002d883a 	mov	r22,zero
 400cc8c:	003d8e06 	br	400c2c8 <__alt_data_end+0xfc00c2c8>
 400cc90:	d9000517 	ldw	r4,20(sp)
 400cc94:	40140080 	call	4014008 <__floatsidf>
 400cc98:	100d883a 	mov	r6,r2
 400cc9c:	180f883a 	mov	r7,r3
 400cca0:	a009883a 	mov	r4,r20
 400cca4:	880b883a 	mov	r5,r17
 400cca8:	4012bc80 	call	4012bc8 <__eqdf2>
 400ccac:	103d7126 	beq	r2,zero,400c274 <__alt_data_end+0xfc00c274>
 400ccb0:	d9c00517 	ldw	r7,20(sp)
 400ccb4:	39ffffc4 	addi	r7,r7,-1
 400ccb8:	d9c00515 	stw	r7,20(sp)
 400ccbc:	003d6d06 	br	400c274 <__alt_data_end+0xfc00c274>
 400ccc0:	dd400a17 	ldw	r21,40(sp)
 400ccc4:	dd000817 	ldw	r20,32(sp)
 400ccc8:	0023883a 	mov	r17,zero
 400cccc:	003f4806 	br	400c9f0 <__alt_data_end+0xfc00c9f0>
 400ccd0:	10e3c83a 	sub	r17,r2,r3
 400ccd4:	9448983a 	sll	r4,r18,r17
 400ccd8:	003d3206 	br	400c1a4 <__alt_data_end+0xfc00c1a4>
 400ccdc:	d8000e15 	stw	zero,56(sp)
 400cce0:	003d7506 	br	400c2b8 <__alt_data_end+0xfc00c2b8>
 400cce4:	b005883a 	mov	r2,r22
 400cce8:	003f4506 	br	400ca00 <__alt_data_end+0xfc00ca00>
 400ccec:	dc000915 	stw	r16,36(sp)
 400ccf0:	d9800a17 	ldw	r6,40(sp)
 400ccf4:	d9400917 	ldw	r5,36(sp)
 400ccf8:	e009883a 	mov	r4,fp
 400ccfc:	400e9380 	call	400e938 <__pow5mult>
 400cd00:	1021883a 	mov	r16,r2
 400cd04:	003f5a06 	br	400ca70 <__alt_data_end+0xfc00ca70>
 400cd08:	01c00044 	movi	r7,1
 400cd0c:	d9c00b15 	stw	r7,44(sp)
 400cd10:	d8802217 	ldw	r2,136(sp)
 400cd14:	0081280e 	bge	zero,r2,400d1b8 <_dtoa_r+0x11b0>
 400cd18:	100d883a 	mov	r6,r2
 400cd1c:	1021883a 	mov	r16,r2
 400cd20:	d8800c15 	stw	r2,48(sp)
 400cd24:	d8800615 	stw	r2,24(sp)
 400cd28:	003d8806 	br	400c34c <__alt_data_end+0xfc00c34c>
 400cd2c:	d8800617 	ldw	r2,24(sp)
 400cd30:	00be9b16 	blt	zero,r2,400c7a0 <__alt_data_end+0xfc00c7a0>
 400cd34:	10010f1e 	bne	r2,zero,400d174 <_dtoa_r+0x116c>
 400cd38:	880b883a 	mov	r5,r17
 400cd3c:	000d883a 	mov	r6,zero
 400cd40:	01d00534 	movhi	r7,16404
 400cd44:	8009883a 	mov	r4,r16
 400cd48:	4012e200 	call	4012e20 <__muldf3>
 400cd4c:	900d883a 	mov	r6,r18
 400cd50:	980f883a 	mov	r7,r19
 400cd54:	1009883a 	mov	r4,r2
 400cd58:	180b883a 	mov	r5,r3
 400cd5c:	4012c500 	call	4012c50 <__gedf2>
 400cd60:	002b883a 	mov	r21,zero
 400cd64:	0023883a 	mov	r17,zero
 400cd68:	1000bf16 	blt	r2,zero,400d068 <_dtoa_r+0x1060>
 400cd6c:	d9802217 	ldw	r6,136(sp)
 400cd70:	ddc00717 	ldw	r23,28(sp)
 400cd74:	018c303a 	nor	r6,zero,r6
 400cd78:	d9800515 	stw	r6,20(sp)
 400cd7c:	a80b883a 	mov	r5,r21
 400cd80:	e009883a 	mov	r4,fp
 400cd84:	400e2e40 	call	400e2e4 <_Bfree>
 400cd88:	883e4926 	beq	r17,zero,400c6b0 <__alt_data_end+0xfc00c6b0>
 400cd8c:	003fad06 	br	400cc44 <__alt_data_end+0xfc00cc44>
 400cd90:	d9c01117 	ldw	r7,68(sp)
 400cd94:	3801bc26 	beq	r7,zero,400d488 <_dtoa_r+0x1480>
 400cd98:	10810cc4 	addi	r2,r2,1075
 400cd9c:	dd400a17 	ldw	r21,40(sp)
 400cda0:	dd000817 	ldw	r20,32(sp)
 400cda4:	003f0a06 	br	400c9d0 <__alt_data_end+0xfc00c9d0>
 400cda8:	00800704 	movi	r2,28
 400cdac:	d9000817 	ldw	r4,32(sp)
 400cdb0:	a0a9883a 	add	r20,r20,r2
 400cdb4:	b0ad883a 	add	r22,r22,r2
 400cdb8:	2089883a 	add	r4,r4,r2
 400cdbc:	d9000815 	stw	r4,32(sp)
 400cdc0:	003f5106 	br	400cb08 <__alt_data_end+0xfc00cb08>
 400cdc4:	d8c00317 	ldw	r3,12(sp)
 400cdc8:	b8c1fc0e 	bge	r23,r3,400d5bc <_dtoa_r+0x15b4>
 400cdcc:	0027883a 	mov	r19,zero
 400cdd0:	b805883a 	mov	r2,r23
 400cdd4:	003f3e06 	br	400cad0 <__alt_data_end+0xfc00cad0>
 400cdd8:	880b883a 	mov	r5,r17
 400cddc:	e009883a 	mov	r4,fp
 400cde0:	000f883a 	mov	r7,zero
 400cde4:	01800284 	movi	r6,10
 400cde8:	400e30c0 	call	400e30c <__multadd>
 400cdec:	d9000c17 	ldw	r4,48(sp)
 400cdf0:	1023883a 	mov	r17,r2
 400cdf4:	0102040e 	bge	zero,r4,400d608 <_dtoa_r+0x1600>
 400cdf8:	d9000615 	stw	r4,24(sp)
 400cdfc:	0500050e 	bge	zero,r20,400ce14 <_dtoa_r+0xe0c>
 400ce00:	880b883a 	mov	r5,r17
 400ce04:	a00d883a 	mov	r6,r20
 400ce08:	e009883a 	mov	r4,fp
 400ce0c:	400ea780 	call	400ea78 <__lshift>
 400ce10:	1023883a 	mov	r17,r2
 400ce14:	9801241e 	bne	r19,zero,400d2a8 <_dtoa_r+0x12a0>
 400ce18:	8829883a 	mov	r20,r17
 400ce1c:	d9000617 	ldw	r4,24(sp)
 400ce20:	dcc00717 	ldw	r19,28(sp)
 400ce24:	9480004c 	andi	r18,r18,1
 400ce28:	20bfffc4 	addi	r2,r4,-1
 400ce2c:	9885883a 	add	r2,r19,r2
 400ce30:	d8800415 	stw	r2,16(sp)
 400ce34:	dc800615 	stw	r18,24(sp)
 400ce38:	a80b883a 	mov	r5,r21
 400ce3c:	8009883a 	mov	r4,r16
 400ce40:	400bde00 	call	400bde0 <quorem>
 400ce44:	880b883a 	mov	r5,r17
 400ce48:	8009883a 	mov	r4,r16
 400ce4c:	102f883a 	mov	r23,r2
 400ce50:	400ebc00 	call	400ebc0 <__mcmp>
 400ce54:	a80b883a 	mov	r5,r21
 400ce58:	a00d883a 	mov	r6,r20
 400ce5c:	e009883a 	mov	r4,fp
 400ce60:	102d883a 	mov	r22,r2
 400ce64:	400ec200 	call	400ec20 <__mdiff>
 400ce68:	1007883a 	mov	r3,r2
 400ce6c:	10800317 	ldw	r2,12(r2)
 400ce70:	bc800c04 	addi	r18,r23,48
 400ce74:	180b883a 	mov	r5,r3
 400ce78:	10004e1e 	bne	r2,zero,400cfb4 <_dtoa_r+0xfac>
 400ce7c:	8009883a 	mov	r4,r16
 400ce80:	d8c01615 	stw	r3,88(sp)
 400ce84:	400ebc00 	call	400ebc0 <__mcmp>
 400ce88:	d8c01617 	ldw	r3,88(sp)
 400ce8c:	e009883a 	mov	r4,fp
 400ce90:	d8801615 	stw	r2,88(sp)
 400ce94:	180b883a 	mov	r5,r3
 400ce98:	400e2e40 	call	400e2e4 <_Bfree>
 400ce9c:	d8801617 	ldw	r2,88(sp)
 400cea0:	1000041e 	bne	r2,zero,400ceb4 <_dtoa_r+0xeac>
 400cea4:	d9800317 	ldw	r6,12(sp)
 400cea8:	3000021e 	bne	r6,zero,400ceb4 <_dtoa_r+0xeac>
 400ceac:	d8c00617 	ldw	r3,24(sp)
 400ceb0:	18003726 	beq	r3,zero,400cf90 <_dtoa_r+0xf88>
 400ceb4:	b0002016 	blt	r22,zero,400cf38 <_dtoa_r+0xf30>
 400ceb8:	b000041e 	bne	r22,zero,400cecc <_dtoa_r+0xec4>
 400cebc:	d9000317 	ldw	r4,12(sp)
 400cec0:	2000021e 	bne	r4,zero,400cecc <_dtoa_r+0xec4>
 400cec4:	d8c00617 	ldw	r3,24(sp)
 400cec8:	18001b26 	beq	r3,zero,400cf38 <_dtoa_r+0xf30>
 400cecc:	00810716 	blt	zero,r2,400d2ec <_dtoa_r+0x12e4>
 400ced0:	d8c00417 	ldw	r3,16(sp)
 400ced4:	9d800044 	addi	r22,r19,1
 400ced8:	9c800005 	stb	r18,0(r19)
 400cedc:	b02f883a 	mov	r23,r22
 400cee0:	98c10626 	beq	r19,r3,400d2fc <_dtoa_r+0x12f4>
 400cee4:	800b883a 	mov	r5,r16
 400cee8:	000f883a 	mov	r7,zero
 400ceec:	01800284 	movi	r6,10
 400cef0:	e009883a 	mov	r4,fp
 400cef4:	400e30c0 	call	400e30c <__multadd>
 400cef8:	1021883a 	mov	r16,r2
 400cefc:	000f883a 	mov	r7,zero
 400cf00:	01800284 	movi	r6,10
 400cf04:	880b883a 	mov	r5,r17
 400cf08:	e009883a 	mov	r4,fp
 400cf0c:	8d002526 	beq	r17,r20,400cfa4 <_dtoa_r+0xf9c>
 400cf10:	400e30c0 	call	400e30c <__multadd>
 400cf14:	a00b883a 	mov	r5,r20
 400cf18:	000f883a 	mov	r7,zero
 400cf1c:	01800284 	movi	r6,10
 400cf20:	e009883a 	mov	r4,fp
 400cf24:	1023883a 	mov	r17,r2
 400cf28:	400e30c0 	call	400e30c <__multadd>
 400cf2c:	1029883a 	mov	r20,r2
 400cf30:	b027883a 	mov	r19,r22
 400cf34:	003fc006 	br	400ce38 <__alt_data_end+0xfc00ce38>
 400cf38:	9011883a 	mov	r8,r18
 400cf3c:	00800e0e 	bge	zero,r2,400cf78 <_dtoa_r+0xf70>
 400cf40:	800b883a 	mov	r5,r16
 400cf44:	01800044 	movi	r6,1
 400cf48:	e009883a 	mov	r4,fp
 400cf4c:	da001715 	stw	r8,92(sp)
 400cf50:	400ea780 	call	400ea78 <__lshift>
 400cf54:	a80b883a 	mov	r5,r21
 400cf58:	1009883a 	mov	r4,r2
 400cf5c:	1021883a 	mov	r16,r2
 400cf60:	400ebc00 	call	400ebc0 <__mcmp>
 400cf64:	da001717 	ldw	r8,92(sp)
 400cf68:	0081960e 	bge	zero,r2,400d5c4 <_dtoa_r+0x15bc>
 400cf6c:	00800e44 	movi	r2,57
 400cf70:	40817026 	beq	r8,r2,400d534 <_dtoa_r+0x152c>
 400cf74:	ba000c44 	addi	r8,r23,49
 400cf78:	8825883a 	mov	r18,r17
 400cf7c:	9dc00044 	addi	r23,r19,1
 400cf80:	9a000005 	stb	r8,0(r19)
 400cf84:	a023883a 	mov	r17,r20
 400cf88:	dc000915 	stw	r16,36(sp)
 400cf8c:	003f2406 	br	400cc20 <__alt_data_end+0xfc00cc20>
 400cf90:	00800e44 	movi	r2,57
 400cf94:	9011883a 	mov	r8,r18
 400cf98:	90816626 	beq	r18,r2,400d534 <_dtoa_r+0x152c>
 400cf9c:	05bff516 	blt	zero,r22,400cf74 <__alt_data_end+0xfc00cf74>
 400cfa0:	003ff506 	br	400cf78 <__alt_data_end+0xfc00cf78>
 400cfa4:	400e30c0 	call	400e30c <__multadd>
 400cfa8:	1023883a 	mov	r17,r2
 400cfac:	1029883a 	mov	r20,r2
 400cfb0:	003fdf06 	br	400cf30 <__alt_data_end+0xfc00cf30>
 400cfb4:	e009883a 	mov	r4,fp
 400cfb8:	400e2e40 	call	400e2e4 <_Bfree>
 400cfbc:	00800044 	movi	r2,1
 400cfc0:	003fbc06 	br	400ceb4 <__alt_data_end+0xfc00ceb4>
 400cfc4:	a80b883a 	mov	r5,r21
 400cfc8:	8009883a 	mov	r4,r16
 400cfcc:	400ebc00 	call	400ebc0 <__mcmp>
 400cfd0:	103edb0e 	bge	r2,zero,400cb40 <__alt_data_end+0xfc00cb40>
 400cfd4:	800b883a 	mov	r5,r16
 400cfd8:	000f883a 	mov	r7,zero
 400cfdc:	01800284 	movi	r6,10
 400cfe0:	e009883a 	mov	r4,fp
 400cfe4:	400e30c0 	call	400e30c <__multadd>
 400cfe8:	1021883a 	mov	r16,r2
 400cfec:	d8800517 	ldw	r2,20(sp)
 400cff0:	d8c00b17 	ldw	r3,44(sp)
 400cff4:	10bfffc4 	addi	r2,r2,-1
 400cff8:	d8800515 	stw	r2,20(sp)
 400cffc:	183f761e 	bne	r3,zero,400cdd8 <__alt_data_end+0xfc00cdd8>
 400d000:	d9000c17 	ldw	r4,48(sp)
 400d004:	0101730e 	bge	zero,r4,400d5d4 <_dtoa_r+0x15cc>
 400d008:	d9000615 	stw	r4,24(sp)
 400d00c:	003ed006 	br	400cb50 <__alt_data_end+0xfc00cb50>
 400d010:	00800084 	movi	r2,2
 400d014:	3081861e 	bne	r6,r2,400d630 <_dtoa_r+0x1628>
 400d018:	d8000b15 	stw	zero,44(sp)
 400d01c:	003f3c06 	br	400cd10 <__alt_data_end+0xfc00cd10>
 400d020:	dc000917 	ldw	r16,36(sp)
 400d024:	003e9206 	br	400ca70 <__alt_data_end+0xfc00ca70>
 400d028:	d9c00317 	ldw	r7,12(sp)
 400d02c:	00800084 	movi	r2,2
 400d030:	11fec50e 	bge	r2,r7,400cb48 <__alt_data_end+0xfc00cb48>
 400d034:	d9000617 	ldw	r4,24(sp)
 400d038:	20013c1e 	bne	r4,zero,400d52c <_dtoa_r+0x1524>
 400d03c:	a80b883a 	mov	r5,r21
 400d040:	000f883a 	mov	r7,zero
 400d044:	01800144 	movi	r6,5
 400d048:	e009883a 	mov	r4,fp
 400d04c:	400e30c0 	call	400e30c <__multadd>
 400d050:	100b883a 	mov	r5,r2
 400d054:	8009883a 	mov	r4,r16
 400d058:	102b883a 	mov	r21,r2
 400d05c:	400ebc00 	call	400ebc0 <__mcmp>
 400d060:	dc000915 	stw	r16,36(sp)
 400d064:	00bf410e 	bge	zero,r2,400cd6c <__alt_data_end+0xfc00cd6c>
 400d068:	d9c00717 	ldw	r7,28(sp)
 400d06c:	00800c44 	movi	r2,49
 400d070:	38800005 	stb	r2,0(r7)
 400d074:	d8800517 	ldw	r2,20(sp)
 400d078:	3dc00044 	addi	r23,r7,1
 400d07c:	10800044 	addi	r2,r2,1
 400d080:	d8800515 	stw	r2,20(sp)
 400d084:	003f3d06 	br	400cd7c <__alt_data_end+0xfc00cd7c>
 400d088:	d9800517 	ldw	r6,20(sp)
 400d08c:	d9c00717 	ldw	r7,28(sp)
 400d090:	00800c44 	movi	r2,49
 400d094:	31800044 	addi	r6,r6,1
 400d098:	d9800515 	stw	r6,20(sp)
 400d09c:	38800005 	stb	r2,0(r7)
 400d0a0:	003edf06 	br	400cc20 <__alt_data_end+0xfc00cc20>
 400d0a4:	d8000b15 	stw	zero,44(sp)
 400d0a8:	003c9f06 	br	400c328 <__alt_data_end+0xfc00c328>
 400d0ac:	903e7e1e 	bne	r18,zero,400caa8 <__alt_data_end+0xfc00caa8>
 400d0b0:	00800434 	movhi	r2,16
 400d0b4:	10bfffc4 	addi	r2,r2,-1
 400d0b8:	9884703a 	and	r2,r19,r2
 400d0bc:	1000ea1e 	bne	r2,zero,400d468 <_dtoa_r+0x1460>
 400d0c0:	9cdffc2c 	andhi	r19,r19,32752
 400d0c4:	9800e826 	beq	r19,zero,400d468 <_dtoa_r+0x1460>
 400d0c8:	d9c00817 	ldw	r7,32(sp)
 400d0cc:	b5800044 	addi	r22,r22,1
 400d0d0:	04c00044 	movi	r19,1
 400d0d4:	39c00044 	addi	r7,r7,1
 400d0d8:	d9c00815 	stw	r7,32(sp)
 400d0dc:	d8800d17 	ldw	r2,52(sp)
 400d0e0:	103e721e 	bne	r2,zero,400caac <__alt_data_end+0xfc00caac>
 400d0e4:	00800044 	movi	r2,1
 400d0e8:	003e7906 	br	400cad0 <__alt_data_end+0xfc00cad0>
 400d0ec:	8009883a 	mov	r4,r16
 400d0f0:	40140080 	call	4014008 <__floatsidf>
 400d0f4:	d9800f17 	ldw	r6,60(sp)
 400d0f8:	d9c01017 	ldw	r7,64(sp)
 400d0fc:	1009883a 	mov	r4,r2
 400d100:	180b883a 	mov	r5,r3
 400d104:	4012e200 	call	4012e20 <__muldf3>
 400d108:	000d883a 	mov	r6,zero
 400d10c:	01d00734 	movhi	r7,16412
 400d110:	1009883a 	mov	r4,r2
 400d114:	180b883a 	mov	r5,r3
 400d118:	401194c0 	call	401194c <__adddf3>
 400d11c:	047f3034 	movhi	r17,64704
 400d120:	1021883a 	mov	r16,r2
 400d124:	1c63883a 	add	r17,r3,r17
 400d128:	d9000f17 	ldw	r4,60(sp)
 400d12c:	d9401017 	ldw	r5,64(sp)
 400d130:	000d883a 	mov	r6,zero
 400d134:	01d00534 	movhi	r7,16404
 400d138:	401368c0 	call	401368c <__subdf3>
 400d13c:	800d883a 	mov	r6,r16
 400d140:	880f883a 	mov	r7,r17
 400d144:	1009883a 	mov	r4,r2
 400d148:	180b883a 	mov	r5,r3
 400d14c:	102b883a 	mov	r21,r2
 400d150:	1829883a 	mov	r20,r3
 400d154:	4012c500 	call	4012c50 <__gedf2>
 400d158:	00806c16 	blt	zero,r2,400d30c <_dtoa_r+0x1304>
 400d15c:	89e0003c 	xorhi	r7,r17,32768
 400d160:	800d883a 	mov	r6,r16
 400d164:	a809883a 	mov	r4,r21
 400d168:	a00b883a 	mov	r5,r20
 400d16c:	4012d2c0 	call	4012d2c <__ledf2>
 400d170:	103d7e0e 	bge	r2,zero,400c76c <__alt_data_end+0xfc00c76c>
 400d174:	002b883a 	mov	r21,zero
 400d178:	0023883a 	mov	r17,zero
 400d17c:	003efb06 	br	400cd6c <__alt_data_end+0xfc00cd6c>
 400d180:	d8800717 	ldw	r2,28(sp)
 400d184:	003bd006 	br	400c0c8 <__alt_data_end+0xfc00c0c8>
 400d188:	d9000a17 	ldw	r4,40(sp)
 400d18c:	d9800d17 	ldw	r6,52(sp)
 400d190:	dd400a15 	stw	r21,40(sp)
 400d194:	a905c83a 	sub	r2,r21,r4
 400d198:	308d883a 	add	r6,r6,r2
 400d19c:	d9800d15 	stw	r6,52(sp)
 400d1a0:	002b883a 	mov	r21,zero
 400d1a4:	003e0606 	br	400c9c0 <__alt_data_end+0xfc00c9c0>
 400d1a8:	9023883a 	mov	r17,r18
 400d1ac:	9829883a 	mov	r20,r19
 400d1b0:	04000084 	movi	r16,2
 400d1b4:	003c9206 	br	400c400 <__alt_data_end+0xfc00c400>
 400d1b8:	04000044 	movi	r16,1
 400d1bc:	dc000c15 	stw	r16,48(sp)
 400d1c0:	dc000615 	stw	r16,24(sp)
 400d1c4:	dc002215 	stw	r16,136(sp)
 400d1c8:	e0001115 	stw	zero,68(fp)
 400d1cc:	000b883a 	mov	r5,zero
 400d1d0:	003c6906 	br	400c378 <__alt_data_end+0xfc00c378>
 400d1d4:	3021883a 	mov	r16,r6
 400d1d8:	003ffb06 	br	400d1c8 <__alt_data_end+0xfc00d1c8>
 400d1dc:	1000021e 	bne	r2,zero,400d1e8 <_dtoa_r+0x11e0>
 400d1e0:	4200004c 	andi	r8,r8,1
 400d1e4:	403e7d1e 	bne	r8,zero,400cbdc <__alt_data_end+0xfc00cbdc>
 400d1e8:	01000c04 	movi	r4,48
 400d1ec:	00000106 	br	400d1f4 <_dtoa_r+0x11ec>
 400d1f0:	102f883a 	mov	r23,r2
 400d1f4:	b8bfffc4 	addi	r2,r23,-1
 400d1f8:	10c00007 	ldb	r3,0(r2)
 400d1fc:	193ffc26 	beq	r3,r4,400d1f0 <__alt_data_end+0xfc00d1f0>
 400d200:	003e8706 	br	400cc20 <__alt_data_end+0xfc00cc20>
 400d204:	d8800517 	ldw	r2,20(sp)
 400d208:	00a3c83a 	sub	r17,zero,r2
 400d20c:	8800a426 	beq	r17,zero,400d4a0 <_dtoa_r+0x1498>
 400d210:	888003cc 	andi	r2,r17,15
 400d214:	100490fa 	slli	r2,r2,3
 400d218:	00c100b4 	movhi	r3,1026
 400d21c:	18e13f04 	addi	r3,r3,-31492
 400d220:	1885883a 	add	r2,r3,r2
 400d224:	11800017 	ldw	r6,0(r2)
 400d228:	11c00117 	ldw	r7,4(r2)
 400d22c:	9009883a 	mov	r4,r18
 400d230:	980b883a 	mov	r5,r19
 400d234:	8823d13a 	srai	r17,r17,4
 400d238:	4012e200 	call	4012e20 <__muldf3>
 400d23c:	d8800f15 	stw	r2,60(sp)
 400d240:	d8c01015 	stw	r3,64(sp)
 400d244:	8800e826 	beq	r17,zero,400d5e8 <_dtoa_r+0x15e0>
 400d248:	050100b4 	movhi	r20,1026
 400d24c:	a5213504 	addi	r20,r20,-31532
 400d250:	04000084 	movi	r16,2
 400d254:	8980004c 	andi	r6,r17,1
 400d258:	1009883a 	mov	r4,r2
 400d25c:	8823d07a 	srai	r17,r17,1
 400d260:	180b883a 	mov	r5,r3
 400d264:	30000426 	beq	r6,zero,400d278 <_dtoa_r+0x1270>
 400d268:	a1800017 	ldw	r6,0(r20)
 400d26c:	a1c00117 	ldw	r7,4(r20)
 400d270:	84000044 	addi	r16,r16,1
 400d274:	4012e200 	call	4012e20 <__muldf3>
 400d278:	a5000204 	addi	r20,r20,8
 400d27c:	883ff51e 	bne	r17,zero,400d254 <__alt_data_end+0xfc00d254>
 400d280:	d8800f15 	stw	r2,60(sp)
 400d284:	d8c01015 	stw	r3,64(sp)
 400d288:	003c7606 	br	400c464 <__alt_data_end+0xfc00c464>
 400d28c:	00c00c04 	movi	r3,48
 400d290:	10c00005 	stb	r3,0(r2)
 400d294:	d8c00517 	ldw	r3,20(sp)
 400d298:	bd3fffc3 	ldbu	r20,-1(r23)
 400d29c:	18c00044 	addi	r3,r3,1
 400d2a0:	d8c00515 	stw	r3,20(sp)
 400d2a4:	003db906 	br	400c98c <__alt_data_end+0xfc00c98c>
 400d2a8:	89400117 	ldw	r5,4(r17)
 400d2ac:	e009883a 	mov	r4,fp
 400d2b0:	400e23c0 	call	400e23c <_Balloc>
 400d2b4:	89800417 	ldw	r6,16(r17)
 400d2b8:	89400304 	addi	r5,r17,12
 400d2bc:	11000304 	addi	r4,r2,12
 400d2c0:	31800084 	addi	r6,r6,2
 400d2c4:	318d883a 	add	r6,r6,r6
 400d2c8:	318d883a 	add	r6,r6,r6
 400d2cc:	1027883a 	mov	r19,r2
 400d2d0:	4003ba40 	call	4003ba4 <memcpy>
 400d2d4:	01800044 	movi	r6,1
 400d2d8:	980b883a 	mov	r5,r19
 400d2dc:	e009883a 	mov	r4,fp
 400d2e0:	400ea780 	call	400ea78 <__lshift>
 400d2e4:	1029883a 	mov	r20,r2
 400d2e8:	003ecc06 	br	400ce1c <__alt_data_end+0xfc00ce1c>
 400d2ec:	00800e44 	movi	r2,57
 400d2f0:	90809026 	beq	r18,r2,400d534 <_dtoa_r+0x152c>
 400d2f4:	92000044 	addi	r8,r18,1
 400d2f8:	003f1f06 	br	400cf78 <__alt_data_end+0xfc00cf78>
 400d2fc:	9011883a 	mov	r8,r18
 400d300:	8825883a 	mov	r18,r17
 400d304:	a023883a 	mov	r17,r20
 400d308:	003e2906 	br	400cbb0 <__alt_data_end+0xfc00cbb0>
 400d30c:	002b883a 	mov	r21,zero
 400d310:	0023883a 	mov	r17,zero
 400d314:	003f5406 	br	400d068 <__alt_data_end+0xfc00d068>
 400d318:	61bfffc4 	addi	r6,r12,-1
 400d31c:	300490fa 	slli	r2,r6,3
 400d320:	00c100b4 	movhi	r3,1026
 400d324:	18e13f04 	addi	r3,r3,-31492
 400d328:	1885883a 	add	r2,r3,r2
 400d32c:	11000017 	ldw	r4,0(r2)
 400d330:	11400117 	ldw	r5,4(r2)
 400d334:	d8800717 	ldw	r2,28(sp)
 400d338:	880f883a 	mov	r7,r17
 400d33c:	d9801215 	stw	r6,72(sp)
 400d340:	800d883a 	mov	r6,r16
 400d344:	db001615 	stw	r12,88(sp)
 400d348:	15c00044 	addi	r23,r2,1
 400d34c:	4012e200 	call	4012e20 <__muldf3>
 400d350:	d9401017 	ldw	r5,64(sp)
 400d354:	d9000f17 	ldw	r4,60(sp)
 400d358:	d8c01515 	stw	r3,84(sp)
 400d35c:	d8801415 	stw	r2,80(sp)
 400d360:	4013f880 	call	4013f88 <__fixdfsi>
 400d364:	1009883a 	mov	r4,r2
 400d368:	1021883a 	mov	r16,r2
 400d36c:	40140080 	call	4014008 <__floatsidf>
 400d370:	d9000f17 	ldw	r4,60(sp)
 400d374:	d9401017 	ldw	r5,64(sp)
 400d378:	100d883a 	mov	r6,r2
 400d37c:	180f883a 	mov	r7,r3
 400d380:	401368c0 	call	401368c <__subdf3>
 400d384:	1829883a 	mov	r20,r3
 400d388:	d8c00717 	ldw	r3,28(sp)
 400d38c:	84000c04 	addi	r16,r16,48
 400d390:	1023883a 	mov	r17,r2
 400d394:	1c000005 	stb	r16,0(r3)
 400d398:	db001617 	ldw	r12,88(sp)
 400d39c:	00800044 	movi	r2,1
 400d3a0:	60802226 	beq	r12,r2,400d42c <_dtoa_r+0x1424>
 400d3a4:	d9c00717 	ldw	r7,28(sp)
 400d3a8:	8805883a 	mov	r2,r17
 400d3ac:	b82b883a 	mov	r21,r23
 400d3b0:	3b19883a 	add	r12,r7,r12
 400d3b4:	6023883a 	mov	r17,r12
 400d3b8:	a007883a 	mov	r3,r20
 400d3bc:	dc800f15 	stw	r18,60(sp)
 400d3c0:	000d883a 	mov	r6,zero
 400d3c4:	01d00934 	movhi	r7,16420
 400d3c8:	1009883a 	mov	r4,r2
 400d3cc:	180b883a 	mov	r5,r3
 400d3d0:	4012e200 	call	4012e20 <__muldf3>
 400d3d4:	180b883a 	mov	r5,r3
 400d3d8:	1009883a 	mov	r4,r2
 400d3dc:	1829883a 	mov	r20,r3
 400d3e0:	1025883a 	mov	r18,r2
 400d3e4:	4013f880 	call	4013f88 <__fixdfsi>
 400d3e8:	1009883a 	mov	r4,r2
 400d3ec:	1021883a 	mov	r16,r2
 400d3f0:	40140080 	call	4014008 <__floatsidf>
 400d3f4:	100d883a 	mov	r6,r2
 400d3f8:	180f883a 	mov	r7,r3
 400d3fc:	9009883a 	mov	r4,r18
 400d400:	a00b883a 	mov	r5,r20
 400d404:	84000c04 	addi	r16,r16,48
 400d408:	401368c0 	call	401368c <__subdf3>
 400d40c:	ad400044 	addi	r21,r21,1
 400d410:	ac3fffc5 	stb	r16,-1(r21)
 400d414:	ac7fea1e 	bne	r21,r17,400d3c0 <__alt_data_end+0xfc00d3c0>
 400d418:	1023883a 	mov	r17,r2
 400d41c:	d8801217 	ldw	r2,72(sp)
 400d420:	dc800f17 	ldw	r18,60(sp)
 400d424:	1829883a 	mov	r20,r3
 400d428:	b8af883a 	add	r23,r23,r2
 400d42c:	d9001417 	ldw	r4,80(sp)
 400d430:	d9401517 	ldw	r5,84(sp)
 400d434:	000d883a 	mov	r6,zero
 400d438:	01cff834 	movhi	r7,16352
 400d43c:	401194c0 	call	401194c <__adddf3>
 400d440:	880d883a 	mov	r6,r17
 400d444:	a00f883a 	mov	r7,r20
 400d448:	1009883a 	mov	r4,r2
 400d44c:	180b883a 	mov	r5,r3
 400d450:	4012d2c0 	call	4012d2c <__ledf2>
 400d454:	10003e0e 	bge	r2,zero,400d550 <_dtoa_r+0x1548>
 400d458:	d9001317 	ldw	r4,76(sp)
 400d45c:	bd3fffc3 	ldbu	r20,-1(r23)
 400d460:	d9000515 	stw	r4,20(sp)
 400d464:	003d3b06 	br	400c954 <__alt_data_end+0xfc00c954>
 400d468:	0027883a 	mov	r19,zero
 400d46c:	003f1b06 	br	400d0dc <__alt_data_end+0xfc00d0dc>
 400d470:	d8800817 	ldw	r2,32(sp)
 400d474:	11e9c83a 	sub	r20,r2,r7
 400d478:	0005883a 	mov	r2,zero
 400d47c:	003d5406 	br	400c9d0 <__alt_data_end+0xfc00c9d0>
 400d480:	00800044 	movi	r2,1
 400d484:	003dc706 	br	400cba4 <__alt_data_end+0xfc00cba4>
 400d488:	d8c00217 	ldw	r3,8(sp)
 400d48c:	00800d84 	movi	r2,54
 400d490:	dd400a17 	ldw	r21,40(sp)
 400d494:	10c5c83a 	sub	r2,r2,r3
 400d498:	dd000817 	ldw	r20,32(sp)
 400d49c:	003d4c06 	br	400c9d0 <__alt_data_end+0xfc00c9d0>
 400d4a0:	dc800f15 	stw	r18,60(sp)
 400d4a4:	dcc01015 	stw	r19,64(sp)
 400d4a8:	04000084 	movi	r16,2
 400d4ac:	003bed06 	br	400c464 <__alt_data_end+0xfc00c464>
 400d4b0:	d9000617 	ldw	r4,24(sp)
 400d4b4:	203f0d26 	beq	r4,zero,400d0ec <__alt_data_end+0xfc00d0ec>
 400d4b8:	d9800c17 	ldw	r6,48(sp)
 400d4bc:	01bcab0e 	bge	zero,r6,400c76c <__alt_data_end+0xfc00c76c>
 400d4c0:	d9401017 	ldw	r5,64(sp)
 400d4c4:	d9000f17 	ldw	r4,60(sp)
 400d4c8:	000d883a 	mov	r6,zero
 400d4cc:	01d00934 	movhi	r7,16420
 400d4d0:	4012e200 	call	4012e20 <__muldf3>
 400d4d4:	81000044 	addi	r4,r16,1
 400d4d8:	d8800f15 	stw	r2,60(sp)
 400d4dc:	d8c01015 	stw	r3,64(sp)
 400d4e0:	40140080 	call	4014008 <__floatsidf>
 400d4e4:	d9800f17 	ldw	r6,60(sp)
 400d4e8:	d9c01017 	ldw	r7,64(sp)
 400d4ec:	1009883a 	mov	r4,r2
 400d4f0:	180b883a 	mov	r5,r3
 400d4f4:	4012e200 	call	4012e20 <__muldf3>
 400d4f8:	01d00734 	movhi	r7,16412
 400d4fc:	000d883a 	mov	r6,zero
 400d500:	1009883a 	mov	r4,r2
 400d504:	180b883a 	mov	r5,r3
 400d508:	401194c0 	call	401194c <__adddf3>
 400d50c:	d9c00517 	ldw	r7,20(sp)
 400d510:	047f3034 	movhi	r17,64704
 400d514:	1021883a 	mov	r16,r2
 400d518:	39ffffc4 	addi	r7,r7,-1
 400d51c:	d9c01315 	stw	r7,76(sp)
 400d520:	1c63883a 	add	r17,r3,r17
 400d524:	db000c17 	ldw	r12,48(sp)
 400d528:	003bea06 	br	400c4d4 <__alt_data_end+0xfc00c4d4>
 400d52c:	dc000915 	stw	r16,36(sp)
 400d530:	003e0e06 	br	400cd6c <__alt_data_end+0xfc00cd6c>
 400d534:	01000e44 	movi	r4,57
 400d538:	8825883a 	mov	r18,r17
 400d53c:	9dc00044 	addi	r23,r19,1
 400d540:	99000005 	stb	r4,0(r19)
 400d544:	a023883a 	mov	r17,r20
 400d548:	dc000915 	stw	r16,36(sp)
 400d54c:	003da406 	br	400cbe0 <__alt_data_end+0xfc00cbe0>
 400d550:	d9801417 	ldw	r6,80(sp)
 400d554:	d9c01517 	ldw	r7,84(sp)
 400d558:	0009883a 	mov	r4,zero
 400d55c:	014ff834 	movhi	r5,16352
 400d560:	401368c0 	call	401368c <__subdf3>
 400d564:	880d883a 	mov	r6,r17
 400d568:	a00f883a 	mov	r7,r20
 400d56c:	1009883a 	mov	r4,r2
 400d570:	180b883a 	mov	r5,r3
 400d574:	4012c500 	call	4012c50 <__gedf2>
 400d578:	00bc7c0e 	bge	zero,r2,400c76c <__alt_data_end+0xfc00c76c>
 400d57c:	01000c04 	movi	r4,48
 400d580:	00000106 	br	400d588 <_dtoa_r+0x1580>
 400d584:	102f883a 	mov	r23,r2
 400d588:	b8bfffc4 	addi	r2,r23,-1
 400d58c:	10c00007 	ldb	r3,0(r2)
 400d590:	193ffc26 	beq	r3,r4,400d584 <__alt_data_end+0xfc00d584>
 400d594:	d9801317 	ldw	r6,76(sp)
 400d598:	d9800515 	stw	r6,20(sp)
 400d59c:	003c4406 	br	400c6b0 <__alt_data_end+0xfc00c6b0>
 400d5a0:	d9801317 	ldw	r6,76(sp)
 400d5a4:	d9800515 	stw	r6,20(sp)
 400d5a8:	003cea06 	br	400c954 <__alt_data_end+0xfc00c954>
 400d5ac:	dd800f17 	ldw	r22,60(sp)
 400d5b0:	dcc01017 	ldw	r19,64(sp)
 400d5b4:	dc801217 	ldw	r18,72(sp)
 400d5b8:	003c6c06 	br	400c76c <__alt_data_end+0xfc00c76c>
 400d5bc:	903e031e 	bne	r18,zero,400cdcc <__alt_data_end+0xfc00cdcc>
 400d5c0:	003ebb06 	br	400d0b0 <__alt_data_end+0xfc00d0b0>
 400d5c4:	103e6c1e 	bne	r2,zero,400cf78 <__alt_data_end+0xfc00cf78>
 400d5c8:	4080004c 	andi	r2,r8,1
 400d5cc:	103e6a26 	beq	r2,zero,400cf78 <__alt_data_end+0xfc00cf78>
 400d5d0:	003e6606 	br	400cf6c <__alt_data_end+0xfc00cf6c>
 400d5d4:	d8c00317 	ldw	r3,12(sp)
 400d5d8:	00800084 	movi	r2,2
 400d5dc:	10c02916 	blt	r2,r3,400d684 <_dtoa_r+0x167c>
 400d5e0:	d9000c17 	ldw	r4,48(sp)
 400d5e4:	003e8806 	br	400d008 <__alt_data_end+0xfc00d008>
 400d5e8:	04000084 	movi	r16,2
 400d5ec:	003b9d06 	br	400c464 <__alt_data_end+0xfc00c464>
 400d5f0:	d9001317 	ldw	r4,76(sp)
 400d5f4:	d9000515 	stw	r4,20(sp)
 400d5f8:	003cd606 	br	400c954 <__alt_data_end+0xfc00c954>
 400d5fc:	d8801317 	ldw	r2,76(sp)
 400d600:	d8800515 	stw	r2,20(sp)
 400d604:	003c2a06 	br	400c6b0 <__alt_data_end+0xfc00c6b0>
 400d608:	d9800317 	ldw	r6,12(sp)
 400d60c:	00800084 	movi	r2,2
 400d610:	11801516 	blt	r2,r6,400d668 <_dtoa_r+0x1660>
 400d614:	d9c00c17 	ldw	r7,48(sp)
 400d618:	d9c00615 	stw	r7,24(sp)
 400d61c:	003df706 	br	400cdfc <__alt_data_end+0xfc00cdfc>
 400d620:	193d3926 	beq	r3,r4,400cb08 <__alt_data_end+0xfc00cb08>
 400d624:	00c00f04 	movi	r3,60
 400d628:	1885c83a 	sub	r2,r3,r2
 400d62c:	003ddf06 	br	400cdac <__alt_data_end+0xfc00cdac>
 400d630:	e009883a 	mov	r4,fp
 400d634:	e0001115 	stw	zero,68(fp)
 400d638:	000b883a 	mov	r5,zero
 400d63c:	400e23c0 	call	400e23c <_Balloc>
 400d640:	d8800715 	stw	r2,28(sp)
 400d644:	d8c00717 	ldw	r3,28(sp)
 400d648:	00bfffc4 	movi	r2,-1
 400d64c:	01000044 	movi	r4,1
 400d650:	d8800c15 	stw	r2,48(sp)
 400d654:	e0c01015 	stw	r3,64(fp)
 400d658:	d9000b15 	stw	r4,44(sp)
 400d65c:	d8800615 	stw	r2,24(sp)
 400d660:	d8002215 	stw	zero,136(sp)
 400d664:	003c4106 	br	400c76c <__alt_data_end+0xfc00c76c>
 400d668:	d8c00c17 	ldw	r3,48(sp)
 400d66c:	d8c00615 	stw	r3,24(sp)
 400d670:	003e7006 	br	400d034 <__alt_data_end+0xfc00d034>
 400d674:	04400044 	movi	r17,1
 400d678:	003b2006 	br	400c2fc <__alt_data_end+0xfc00c2fc>
 400d67c:	000b883a 	mov	r5,zero
 400d680:	003b3d06 	br	400c378 <__alt_data_end+0xfc00c378>
 400d684:	d8800c17 	ldw	r2,48(sp)
 400d688:	d8800615 	stw	r2,24(sp)
 400d68c:	003e6906 	br	400d034 <__alt_data_end+0xfc00d034>

0400d690 <rshift>:
 400d690:	2807d17a 	srai	r3,r5,5
 400d694:	20800417 	ldw	r2,16(r4)
 400d698:	22000504 	addi	r8,r4,20
 400d69c:	1880250e 	bge	r3,r2,400d734 <rshift+0xa4>
 400d6a0:	1085883a 	add	r2,r2,r2
 400d6a4:	18c7883a 	add	r3,r3,r3
 400d6a8:	1085883a 	add	r2,r2,r2
 400d6ac:	18c7883a 	add	r3,r3,r3
 400d6b0:	294007cc 	andi	r5,r5,31
 400d6b4:	4085883a 	add	r2,r8,r2
 400d6b8:	40c7883a 	add	r3,r8,r3
 400d6bc:	28002026 	beq	r5,zero,400d740 <rshift+0xb0>
 400d6c0:	19800017 	ldw	r6,0(r3)
 400d6c4:	02c00804 	movi	r11,32
 400d6c8:	19c00104 	addi	r7,r3,4
 400d6cc:	5957c83a 	sub	r11,r11,r5
 400d6d0:	314cd83a 	srl	r6,r6,r5
 400d6d4:	38802c2e 	bgeu	r7,r2,400d788 <rshift+0xf8>
 400d6d8:	4015883a 	mov	r10,r8
 400d6dc:	3a400017 	ldw	r9,0(r7)
 400d6e0:	52800104 	addi	r10,r10,4
 400d6e4:	39c00104 	addi	r7,r7,4
 400d6e8:	4ad2983a 	sll	r9,r9,r11
 400d6ec:	498cb03a 	or	r6,r9,r6
 400d6f0:	51bfff15 	stw	r6,-4(r10)
 400d6f4:	39bfff17 	ldw	r6,-4(r7)
 400d6f8:	314cd83a 	srl	r6,r6,r5
 400d6fc:	38bff736 	bltu	r7,r2,400d6dc <__alt_data_end+0xfc00d6dc>
 400d700:	10c7c83a 	sub	r3,r2,r3
 400d704:	18fffec4 	addi	r3,r3,-5
 400d708:	1806d0ba 	srli	r3,r3,2
 400d70c:	18c00044 	addi	r3,r3,1
 400d710:	18c7883a 	add	r3,r3,r3
 400d714:	18c7883a 	add	r3,r3,r3
 400d718:	40c7883a 	add	r3,r8,r3
 400d71c:	19800015 	stw	r6,0(r3)
 400d720:	30000126 	beq	r6,zero,400d728 <rshift+0x98>
 400d724:	18c00104 	addi	r3,r3,4
 400d728:	1a05c83a 	sub	r2,r3,r8
 400d72c:	1005d0ba 	srai	r2,r2,2
 400d730:	00001206 	br	400d77c <rshift+0xec>
 400d734:	20000415 	stw	zero,16(r4)
 400d738:	20000515 	stw	zero,20(r4)
 400d73c:	f800283a 	ret
 400d740:	18bffc2e 	bgeu	r3,r2,400d734 <__alt_data_end+0xfc00d734>
 400d744:	180d883a 	mov	r6,r3
 400d748:	400b883a 	mov	r5,r8
 400d74c:	31c00017 	ldw	r7,0(r6)
 400d750:	29400104 	addi	r5,r5,4
 400d754:	31800104 	addi	r6,r6,4
 400d758:	29ffff15 	stw	r7,-4(r5)
 400d75c:	30bffb36 	bltu	r6,r2,400d74c <__alt_data_end+0xfc00d74c>
 400d760:	00c6303a 	nor	r3,zero,r3
 400d764:	1885883a 	add	r2,r3,r2
 400d768:	1004d0ba 	srli	r2,r2,2
 400d76c:	10800044 	addi	r2,r2,1
 400d770:	1085883a 	add	r2,r2,r2
 400d774:	1085883a 	add	r2,r2,r2
 400d778:	1005d0ba 	srai	r2,r2,2
 400d77c:	20800415 	stw	r2,16(r4)
 400d780:	103fed26 	beq	r2,zero,400d738 <__alt_data_end+0xfc00d738>
 400d784:	f800283a 	ret
 400d788:	4007883a 	mov	r3,r8
 400d78c:	003fe306 	br	400d71c <__alt_data_end+0xfc00d71c>

0400d790 <__gethex>:
 400d790:	deffea04 	addi	sp,sp,-88
 400d794:	d9c00415 	stw	r7,16(sp)
 400d798:	dfc01515 	stw	ra,84(sp)
 400d79c:	dd001015 	stw	r20,64(sp)
 400d7a0:	dcc00f15 	stw	r19,60(sp)
 400d7a4:	2829883a 	mov	r20,r5
 400d7a8:	dc800e15 	stw	r18,56(sp)
 400d7ac:	d9000215 	stw	r4,8(sp)
 400d7b0:	d9800115 	stw	r6,4(sp)
 400d7b4:	df001415 	stw	fp,80(sp)
 400d7b8:	ddc01315 	stw	r23,76(sp)
 400d7bc:	dd801215 	stw	r22,72(sp)
 400d7c0:	dd401115 	stw	r21,68(sp)
 400d7c4:	dc400d15 	stw	r17,52(sp)
 400d7c8:	dc000c15 	stw	r16,48(sp)
 400d7cc:	40069a00 	call	40069a0 <_localeconv_r>
 400d7d0:	14800017 	ldw	r18,0(r2)
 400d7d4:	9009883a 	mov	r4,r18
 400d7d8:	40044d40 	call	40044d4 <strlen>
 400d7dc:	a1c00017 	ldw	r7,0(r20)
 400d7e0:	1027883a 	mov	r19,r2
 400d7e4:	9085883a 	add	r2,r18,r2
 400d7e8:	10bfffc3 	ldbu	r2,-1(r2)
 400d7ec:	38c00083 	ldbu	r3,2(r7)
 400d7f0:	d8800305 	stb	r2,12(sp)
 400d7f4:	00800c04 	movi	r2,48
 400d7f8:	18815a1e 	bne	r3,r2,400dd64 <__gethex+0x5d4>
 400d7fc:	013fff84 	movi	r4,-2
 400d800:	388000c4 	addi	r2,r7,3
 400d804:	21c9c83a 	sub	r4,r4,r7
 400d808:	180b883a 	mov	r5,r3
 400d80c:	20b9883a 	add	fp,r4,r2
 400d810:	102f883a 	mov	r23,r2
 400d814:	10800044 	addi	r2,r2,1
 400d818:	10ffffc3 	ldbu	r3,-1(r2)
 400d81c:	197ffb26 	beq	r3,r5,400d80c <__alt_data_end+0xfc00d80c>
 400d820:	058100b4 	movhi	r22,1026
 400d824:	b5a0e804 	addi	r22,r22,-31840
 400d828:	b0c7883a 	add	r3,r22,r3
 400d82c:	18800003 	ldbu	r2,0(r3)
 400d830:	10008726 	beq	r2,zero,400da50 <__gethex+0x2c0>
 400d834:	b8800003 	ldbu	r2,0(r23)
 400d838:	d8000015 	stw	zero,0(sp)
 400d83c:	0021883a 	mov	r16,zero
 400d840:	b085883a 	add	r2,r22,r2
 400d844:	10800003 	ldbu	r2,0(r2)
 400d848:	b823883a 	mov	r17,r23
 400d84c:	10000526 	beq	r2,zero,400d864 <__gethex+0xd4>
 400d850:	8c400044 	addi	r17,r17,1
 400d854:	88800003 	ldbu	r2,0(r17)
 400d858:	b085883a 	add	r2,r22,r2
 400d85c:	10800003 	ldbu	r2,0(r2)
 400d860:	103ffb1e 	bne	r2,zero,400d850 <__alt_data_end+0xfc00d850>
 400d864:	980d883a 	mov	r6,r19
 400d868:	900b883a 	mov	r5,r18
 400d86c:	8809883a 	mov	r4,r17
 400d870:	400f2f40 	call	400f2f4 <strncmp>
 400d874:	1000031e 	bne	r2,zero,400d884 <__gethex+0xf4>
 400d878:	80015c26 	beq	r16,zero,400ddec <__gethex+0x65c>
 400d87c:	88800003 	ldbu	r2,0(r17)
 400d880:	00000206 	br	400d88c <__gethex+0xfc>
 400d884:	88800003 	ldbu	r2,0(r17)
 400d888:	80012926 	beq	r16,zero,400dd30 <__gethex+0x5a0>
 400d88c:	8c21c83a 	sub	r16,r17,r16
 400d890:	8421883a 	add	r16,r16,r16
 400d894:	8421883a 	add	r16,r16,r16
 400d898:	0421c83a 	sub	r16,zero,r16
 400d89c:	10803fcc 	andi	r2,r2,255
 400d8a0:	01001404 	movi	r4,80
 400d8a4:	11008826 	beq	r2,r4,400dac8 <__gethex+0x338>
 400d8a8:	01001c04 	movi	r4,112
 400d8ac:	11008626 	beq	r2,r4,400dac8 <__gethex+0x338>
 400d8b0:	882b883a 	mov	r21,r17
 400d8b4:	d8c00017 	ldw	r3,0(sp)
 400d8b8:	a4400015 	stw	r17,0(r20)
 400d8bc:	1800711e 	bne	r3,zero,400da84 <__gethex+0x2f4>
 400d8c0:	adc5c83a 	sub	r2,r21,r23
 400d8c4:	10bfffc4 	addi	r2,r2,-1
 400d8c8:	00c001c4 	movi	r3,7
 400d8cc:	000b883a 	mov	r5,zero
 400d8d0:	1880030e 	bge	r3,r2,400d8e0 <__gethex+0x150>
 400d8d4:	1005d07a 	srai	r2,r2,1
 400d8d8:	29400044 	addi	r5,r5,1
 400d8dc:	18bffd16 	blt	r3,r2,400d8d4 <__alt_data_end+0xfc00d8d4>
 400d8e0:	d9000217 	ldw	r4,8(sp)
 400d8e4:	400e23c0 	call	400e23c <_Balloc>
 400d8e8:	10c00504 	addi	r3,r2,20
 400d8ec:	d8c00015 	stw	r3,0(sp)
 400d8f0:	1029883a 	mov	r20,r2
 400d8f4:	bd417c2e 	bgeu	r23,r21,400dee8 <__gethex+0x758>
 400d8f8:	dc400303 	ldbu	r17,12(sp)
 400d8fc:	03000044 	movi	r12,1
 400d900:	1813883a 	mov	r9,r3
 400d904:	0039883a 	mov	fp,zero
 400d908:	0007883a 	mov	r3,zero
 400d90c:	64d9c83a 	sub	r12,r12,r19
 400d910:	02800804 	movi	r10,32
 400d914:	a8bfffc3 	ldbu	r2,-1(r21)
 400d918:	ab7fffc4 	addi	r13,r21,-1
 400d91c:	88803026 	beq	r17,r2,400d9e0 <__gethex+0x250>
 400d920:	e2804526 	beq	fp,r10,400da38 <__gethex+0x2a8>
 400d924:	e00b883a 	mov	r5,fp
 400d928:	e7000104 	addi	fp,fp,4
 400d92c:	a93fffc3 	ldbu	r4,-1(r21)
 400d930:	682b883a 	mov	r21,r13
 400d934:	b109883a 	add	r4,r22,r4
 400d938:	20800003 	ldbu	r2,0(r4)
 400d93c:	108003cc 	andi	r2,r2,15
 400d940:	1144983a 	sll	r2,r2,r5
 400d944:	1886b03a 	or	r3,r3,r2
 400d948:	bd7ff236 	bltu	r23,r21,400d914 <__alt_data_end+0xfc00d914>
 400d94c:	d9000017 	ldw	r4,0(sp)
 400d950:	48800104 	addi	r2,r9,4
 400d954:	48c00015 	stw	r3,0(r9)
 400d958:	1105c83a 	sub	r2,r2,r4
 400d95c:	1005d0ba 	srai	r2,r2,2
 400d960:	1809883a 	mov	r4,r3
 400d964:	a0800415 	stw	r2,16(r20)
 400d968:	1022917a 	slli	r17,r2,5
 400d96c:	400e5580 	call	400e558 <__hi0bits>
 400d970:	d8c00117 	ldw	r3,4(sp)
 400d974:	8885c83a 	sub	r2,r17,r2
 400d978:	1c800017 	ldw	r18,0(r3)
 400d97c:	9080d016 	blt	r18,r2,400dcc0 <__gethex+0x530>
 400d980:	1480ed16 	blt	r2,r18,400dd38 <__gethex+0x5a8>
 400d984:	0027883a 	mov	r19,zero
 400d988:	d8c00117 	ldw	r3,4(sp)
 400d98c:	18800217 	ldw	r2,8(r3)
 400d990:	14009416 	blt	r2,r16,400dbe4 <__gethex+0x454>
 400d994:	d8c00117 	ldw	r3,4(sp)
 400d998:	18800117 	ldw	r2,4(r3)
 400d99c:	8080b30e 	bge	r16,r2,400dc6c <__gethex+0x4dc>
 400d9a0:	1421c83a 	sub	r16,r2,r16
 400d9a4:	8480f616 	blt	r16,r18,400dd80 <__gethex+0x5f0>
 400d9a8:	18c00317 	ldw	r3,12(r3)
 400d9ac:	01000084 	movi	r4,2
 400d9b0:	19015226 	beq	r3,r4,400defc <__gethex+0x76c>
 400d9b4:	010000c4 	movi	r4,3
 400d9b8:	19013726 	beq	r3,r4,400de98 <__gethex+0x708>
 400d9bc:	01000044 	movi	r4,1
 400d9c0:	19015126 	beq	r3,r4,400df08 <__gethex+0x778>
 400d9c4:	d9000217 	ldw	r4,8(sp)
 400d9c8:	a00b883a 	mov	r5,r20
 400d9cc:	400e2e40 	call	400e2e4 <_Bfree>
 400d9d0:	d8801617 	ldw	r2,88(sp)
 400d9d4:	10000015 	stw	zero,0(r2)
 400d9d8:	00801404 	movi	r2,80
 400d9dc:	00002b06 	br	400da8c <__gethex+0x2fc>
 400d9e0:	6b1d883a 	add	r14,r13,r12
 400d9e4:	75ffce36 	bltu	r14,r23,400d920 <__alt_data_end+0xfc00d920>
 400d9e8:	7009883a 	mov	r4,r14
 400d9ec:	980d883a 	mov	r6,r19
 400d9f0:	900b883a 	mov	r5,r18
 400d9f4:	d8c00715 	stw	r3,28(sp)
 400d9f8:	da400615 	stw	r9,24(sp)
 400d9fc:	da800b15 	stw	r10,44(sp)
 400da00:	db000a15 	stw	r12,40(sp)
 400da04:	db400815 	stw	r13,32(sp)
 400da08:	db800915 	stw	r14,36(sp)
 400da0c:	400f2f40 	call	400f2f4 <strncmp>
 400da10:	d8c00717 	ldw	r3,28(sp)
 400da14:	da400617 	ldw	r9,24(sp)
 400da18:	da800b17 	ldw	r10,44(sp)
 400da1c:	db000a17 	ldw	r12,40(sp)
 400da20:	db400817 	ldw	r13,32(sp)
 400da24:	db800917 	ldw	r14,36(sp)
 400da28:	103fbd1e 	bne	r2,zero,400d920 <__alt_data_end+0xfc00d920>
 400da2c:	702b883a 	mov	r21,r14
 400da30:	bd7fb836 	bltu	r23,r21,400d914 <__alt_data_end+0xfc00d914>
 400da34:	003fc506 	br	400d94c <__alt_data_end+0xfc00d94c>
 400da38:	07000104 	movi	fp,4
 400da3c:	48c00015 	stw	r3,0(r9)
 400da40:	000b883a 	mov	r5,zero
 400da44:	4f13883a 	add	r9,r9,fp
 400da48:	0007883a 	mov	r3,zero
 400da4c:	003fb706 	br	400d92c <__alt_data_end+0xfc00d92c>
 400da50:	980d883a 	mov	r6,r19
 400da54:	900b883a 	mov	r5,r18
 400da58:	b809883a 	mov	r4,r23
 400da5c:	400f2f40 	call	400f2f4 <strncmp>
 400da60:	10006c26 	beq	r2,zero,400dc14 <__gethex+0x484>
 400da64:	b8800003 	ldbu	r2,0(r23)
 400da68:	b823883a 	mov	r17,r23
 400da6c:	10803fcc 	andi	r2,r2,255
 400da70:	01001404 	movi	r4,80
 400da74:	11001126 	beq	r2,r4,400dabc <__gethex+0x32c>
 400da78:	01001c04 	movi	r4,112
 400da7c:	11000f26 	beq	r2,r4,400dabc <__gethex+0x32c>
 400da80:	a4400015 	stw	r17,0(r20)
 400da84:	e0008c1e 	bne	fp,zero,400dcb8 <__gethex+0x528>
 400da88:	00800184 	movi	r2,6
 400da8c:	dfc01517 	ldw	ra,84(sp)
 400da90:	df001417 	ldw	fp,80(sp)
 400da94:	ddc01317 	ldw	r23,76(sp)
 400da98:	dd801217 	ldw	r22,72(sp)
 400da9c:	dd401117 	ldw	r21,68(sp)
 400daa0:	dd001017 	ldw	r20,64(sp)
 400daa4:	dcc00f17 	ldw	r19,60(sp)
 400daa8:	dc800e17 	ldw	r18,56(sp)
 400daac:	dc400d17 	ldw	r17,52(sp)
 400dab0:	dc000c17 	ldw	r16,48(sp)
 400dab4:	dec01604 	addi	sp,sp,88
 400dab8:	f800283a 	ret
 400dabc:	00c00044 	movi	r3,1
 400dac0:	0021883a 	mov	r16,zero
 400dac4:	d8c00015 	stw	r3,0(sp)
 400dac8:	88800043 	ldbu	r2,1(r17)
 400dacc:	01400ac4 	movi	r5,43
 400dad0:	11003fcc 	andi	r4,r2,255
 400dad4:	21407626 	beq	r4,r5,400dcb0 <__gethex+0x520>
 400dad8:	01400b44 	movi	r5,45
 400dadc:	21404826 	beq	r4,r5,400dc00 <__gethex+0x470>
 400dae0:	8ac00044 	addi	r11,r17,1
 400dae4:	d8000515 	stw	zero,20(sp)
 400dae8:	10803fcc 	andi	r2,r2,255
 400daec:	b085883a 	add	r2,r22,r2
 400daf0:	11000003 	ldbu	r4,0(r2)
 400daf4:	05400604 	movi	r21,24
 400daf8:	20bfffc4 	addi	r2,r4,-1
 400dafc:	10803fcc 	andi	r2,r2,255
 400db00:	a8bf6b36 	bltu	r21,r2,400d8b0 <__alt_data_end+0xfc00d8b0>
 400db04:	58800043 	ldbu	r2,1(r11)
 400db08:	014100b4 	movhi	r5,1026
 400db0c:	2960e804 	addi	r5,r5,-31840
 400db10:	2885883a 	add	r2,r5,r2
 400db14:	12800003 	ldbu	r10,0(r2)
 400db18:	21003fcc 	andi	r4,r4,255
 400db1c:	213ffc04 	addi	r4,r4,-16
 400db20:	50bfffc4 	addi	r2,r10,-1
 400db24:	10803fcc 	andi	r2,r2,255
 400db28:	5ac00044 	addi	r11,r11,1
 400db2c:	51803fcc 	andi	r6,r10,255
 400db30:	a8801036 	bltu	r21,r2,400db74 <__gethex+0x3e4>
 400db34:	5ac00044 	addi	r11,r11,1
 400db38:	01400284 	movi	r5,10
 400db3c:	d9800715 	stw	r6,28(sp)
 400db40:	dac00615 	stw	r11,24(sp)
 400db44:	4001a140 	call	4001a14 <__mulsi3>
 400db48:	dac00617 	ldw	r11,24(sp)
 400db4c:	d9800717 	ldw	r6,28(sp)
 400db50:	5a800003 	ldbu	r10,0(r11)
 400db54:	1185883a 	add	r2,r2,r6
 400db58:	113ffc04 	addi	r4,r2,-16
 400db5c:	b295883a 	add	r10,r22,r10
 400db60:	51400003 	ldbu	r5,0(r10)
 400db64:	2abfffc4 	addi	r10,r5,-1
 400db68:	52803fcc 	andi	r10,r10,255
 400db6c:	29803fcc 	andi	r6,r5,255
 400db70:	aabff02e 	bgeu	r21,r10,400db34 <__alt_data_end+0xfc00db34>
 400db74:	d8c00517 	ldw	r3,20(sp)
 400db78:	18000126 	beq	r3,zero,400db80 <__gethex+0x3f0>
 400db7c:	0109c83a 	sub	r4,zero,r4
 400db80:	882b883a 	mov	r21,r17
 400db84:	8121883a 	add	r16,r16,r4
 400db88:	5823883a 	mov	r17,r11
 400db8c:	003f4906 	br	400d8b4 <__alt_data_end+0xfc00d8b4>
 400db90:	a0800217 	ldw	r2,8(r20)
 400db94:	a880f20e 	bge	r21,r2,400df60 <__gethex+0x7d0>
 400db98:	a807883a 	mov	r3,r21
 400db9c:	18800144 	addi	r2,r3,5
 400dba0:	1085883a 	add	r2,r2,r2
 400dba4:	18c00044 	addi	r3,r3,1
 400dba8:	1085883a 	add	r2,r2,r2
 400dbac:	a085883a 	add	r2,r20,r2
 400dbb0:	a0c00415 	stw	r3,16(r20)
 400dbb4:	01000044 	movi	r4,1
 400dbb8:	11000015 	stw	r4,0(r2)
 400dbbc:	00800084 	movi	r2,2
 400dbc0:	8880da26 	beq	r17,r2,400df2c <__gethex+0x79c>
 400dbc4:	a8c0ae0e 	bge	r21,r3,400de80 <__gethex+0x6f0>
 400dbc8:	01400044 	movi	r5,1
 400dbcc:	a009883a 	mov	r4,r20
 400dbd0:	400d6900 	call	400d690 <rshift>
 400dbd4:	d8c00117 	ldw	r3,4(sp)
 400dbd8:	84000044 	addi	r16,r16,1
 400dbdc:	18800217 	ldw	r2,8(r3)
 400dbe0:	1400a90e 	bge	r2,r16,400de88 <__gethex+0x6f8>
 400dbe4:	d9000217 	ldw	r4,8(sp)
 400dbe8:	a00b883a 	mov	r5,r20
 400dbec:	400e2e40 	call	400e2e4 <_Bfree>
 400dbf0:	d9001617 	ldw	r4,88(sp)
 400dbf4:	008028c4 	movi	r2,163
 400dbf8:	20000015 	stw	zero,0(r4)
 400dbfc:	003fa306 	br	400da8c <__alt_data_end+0xfc00da8c>
 400dc00:	00c00044 	movi	r3,1
 400dc04:	d8c00515 	stw	r3,20(sp)
 400dc08:	88800083 	ldbu	r2,2(r17)
 400dc0c:	8ac00084 	addi	r11,r17,2
 400dc10:	003fb506 	br	400dae8 <__alt_data_end+0xfc00dae8>
 400dc14:	bce3883a 	add	r17,r23,r19
 400dc18:	89000003 	ldbu	r4,0(r17)
 400dc1c:	21403fcc 	andi	r5,r4,255
 400dc20:	b145883a 	add	r2,r22,r5
 400dc24:	10800003 	ldbu	r2,0(r2)
 400dc28:	11803fcc 	andi	r6,r2,255
 400dc2c:	30005026 	beq	r6,zero,400dd70 <__gethex+0x5e0>
 400dc30:	01000c04 	movi	r4,48
 400dc34:	882f883a 	mov	r23,r17
 400dc38:	2900061e 	bne	r5,r4,400dc54 <__gethex+0x4c4>
 400dc3c:	2809883a 	mov	r4,r5
 400dc40:	bdc00044 	addi	r23,r23,1
 400dc44:	b8800003 	ldbu	r2,0(r23)
 400dc48:	113ffd26 	beq	r2,r4,400dc40 <__alt_data_end+0xfc00dc40>
 400dc4c:	b085883a 	add	r2,r22,r2
 400dc50:	10800003 	ldbu	r2,0(r2)
 400dc54:	10803fcc 	andi	r2,r2,255
 400dc58:	1007003a 	cmpeq	r3,r2,zero
 400dc5c:	d8c00015 	stw	r3,0(sp)
 400dc60:	8821883a 	mov	r16,r17
 400dc64:	07000044 	movi	fp,1
 400dc68:	003ef706 	br	400d848 <__alt_data_end+0xfc00d848>
 400dc6c:	04400044 	movi	r17,1
 400dc70:	98000926 	beq	r19,zero,400dc98 <__gethex+0x508>
 400dc74:	d8c00117 	ldw	r3,4(sp)
 400dc78:	18800317 	ldw	r2,12(r3)
 400dc7c:	00c00084 	movi	r3,2
 400dc80:	10c06826 	beq	r2,r3,400de24 <__gethex+0x694>
 400dc84:	00c000c4 	movi	r3,3
 400dc88:	10c06a26 	beq	r2,r3,400de34 <__gethex+0x6a4>
 400dc8c:	00c00044 	movi	r3,1
 400dc90:	10c08d26 	beq	r2,r3,400dec8 <__gethex+0x738>
 400dc94:	8c400414 	ori	r17,r17,16
 400dc98:	d9001617 	ldw	r4,88(sp)
 400dc9c:	d8c00417 	ldw	r3,16(sp)
 400dca0:	8805883a 	mov	r2,r17
 400dca4:	25000015 	stw	r20,0(r4)
 400dca8:	1c000015 	stw	r16,0(r3)
 400dcac:	003f7706 	br	400da8c <__alt_data_end+0xfc00da8c>
 400dcb0:	d8000515 	stw	zero,20(sp)
 400dcb4:	003fd406 	br	400dc08 <__alt_data_end+0xfc00dc08>
 400dcb8:	0005883a 	mov	r2,zero
 400dcbc:	003f7306 	br	400da8c <__alt_data_end+0xfc00da8c>
 400dcc0:	14a3c83a 	sub	r17,r2,r18
 400dcc4:	880b883a 	mov	r5,r17
 400dcc8:	a009883a 	mov	r4,r20
 400dccc:	400f2680 	call	400f268 <__any_on>
 400dcd0:	10002926 	beq	r2,zero,400dd78 <__gethex+0x5e8>
 400dcd4:	897fffc4 	addi	r5,r17,-1
 400dcd8:	2807d17a 	srai	r3,r5,5
 400dcdc:	d8800017 	ldw	r2,0(sp)
 400dce0:	290007cc 	andi	r4,r5,31
 400dce4:	18c7883a 	add	r3,r3,r3
 400dce8:	18c7883a 	add	r3,r3,r3
 400dcec:	04c00044 	movi	r19,1
 400dcf0:	10c7883a 	add	r3,r2,r3
 400dcf4:	9908983a 	sll	r4,r19,r4
 400dcf8:	18c00017 	ldw	r3,0(r3)
 400dcfc:	20c6703a 	and	r3,r4,r3
 400dd00:	18000626 	beq	r3,zero,400dd1c <__gethex+0x58c>
 400dd04:	99407b0e 	bge	r19,r5,400def4 <__gethex+0x764>
 400dd08:	897fff84 	addi	r5,r17,-2
 400dd0c:	a009883a 	mov	r4,r20
 400dd10:	400f2680 	call	400f268 <__any_on>
 400dd14:	10007726 	beq	r2,zero,400def4 <__gethex+0x764>
 400dd18:	04c000c4 	movi	r19,3
 400dd1c:	880b883a 	mov	r5,r17
 400dd20:	a009883a 	mov	r4,r20
 400dd24:	400d6900 	call	400d690 <rshift>
 400dd28:	8461883a 	add	r16,r16,r17
 400dd2c:	003f1606 	br	400d988 <__alt_data_end+0xfc00d988>
 400dd30:	0021883a 	mov	r16,zero
 400dd34:	003ed906 	br	400d89c <__alt_data_end+0xfc00d89c>
 400dd38:	d9000217 	ldw	r4,8(sp)
 400dd3c:	90a3c83a 	sub	r17,r18,r2
 400dd40:	a00b883a 	mov	r5,r20
 400dd44:	880d883a 	mov	r6,r17
 400dd48:	400ea780 	call	400ea78 <__lshift>
 400dd4c:	10c00504 	addi	r3,r2,20
 400dd50:	1029883a 	mov	r20,r2
 400dd54:	8461c83a 	sub	r16,r16,r17
 400dd58:	d8c00015 	stw	r3,0(sp)
 400dd5c:	0027883a 	mov	r19,zero
 400dd60:	003f0906 	br	400d988 <__alt_data_end+0xfc00d988>
 400dd64:	3dc00084 	addi	r23,r7,2
 400dd68:	0039883a 	mov	fp,zero
 400dd6c:	003eac06 	br	400d820 <__alt_data_end+0xfc00d820>
 400dd70:	2005883a 	mov	r2,r4
 400dd74:	003f3d06 	br	400da6c <__alt_data_end+0xfc00da6c>
 400dd78:	0027883a 	mov	r19,zero
 400dd7c:	003fe706 	br	400dd1c <__alt_data_end+0xfc00dd1c>
 400dd80:	847fffc4 	addi	r17,r16,-1
 400dd84:	9800421e 	bne	r19,zero,400de90 <__gethex+0x700>
 400dd88:	88000426 	beq	r17,zero,400dd9c <__gethex+0x60c>
 400dd8c:	880b883a 	mov	r5,r17
 400dd90:	a009883a 	mov	r4,r20
 400dd94:	400f2680 	call	400f268 <__any_on>
 400dd98:	1027883a 	mov	r19,r2
 400dd9c:	8805d17a 	srai	r2,r17,5
 400dda0:	d8c00017 	ldw	r3,0(sp)
 400dda4:	8c4007cc 	andi	r17,r17,31
 400dda8:	1085883a 	add	r2,r2,r2
 400ddac:	1085883a 	add	r2,r2,r2
 400ddb0:	1885883a 	add	r2,r3,r2
 400ddb4:	00c00044 	movi	r3,1
 400ddb8:	1c62983a 	sll	r17,r3,r17
 400ddbc:	10800017 	ldw	r2,0(r2)
 400ddc0:	8884703a 	and	r2,r17,r2
 400ddc4:	10000126 	beq	r2,zero,400ddcc <__gethex+0x63c>
 400ddc8:	9cc00094 	ori	r19,r19,2
 400ddcc:	800b883a 	mov	r5,r16
 400ddd0:	a009883a 	mov	r4,r20
 400ddd4:	400d6900 	call	400d690 <rshift>
 400ddd8:	d8c00117 	ldw	r3,4(sp)
 400dddc:	9425c83a 	sub	r18,r18,r16
 400dde0:	04400084 	movi	r17,2
 400dde4:	1c000117 	ldw	r16,4(r3)
 400dde8:	003fa106 	br	400dc70 <__alt_data_end+0xfc00dc70>
 400ddec:	8ce1883a 	add	r16,r17,r19
 400ddf0:	80800003 	ldbu	r2,0(r16)
 400ddf4:	8023883a 	mov	r17,r16
 400ddf8:	10c03fcc 	andi	r3,r2,255
 400ddfc:	b0c7883a 	add	r3,r22,r3
 400de00:	18c00003 	ldbu	r3,0(r3)
 400de04:	183ea026 	beq	r3,zero,400d888 <__alt_data_end+0xfc00d888>
 400de08:	8c400044 	addi	r17,r17,1
 400de0c:	88800003 	ldbu	r2,0(r17)
 400de10:	11003fcc 	andi	r4,r2,255
 400de14:	b109883a 	add	r4,r22,r4
 400de18:	21000003 	ldbu	r4,0(r4)
 400de1c:	203ffa1e 	bne	r4,zero,400de08 <__alt_data_end+0xfc00de08>
 400de20:	003e9906 	br	400d888 <__alt_data_end+0xfc00d888>
 400de24:	d9001717 	ldw	r4,92(sp)
 400de28:	00800044 	movi	r2,1
 400de2c:	1109c83a 	sub	r4,r2,r4
 400de30:	d9001715 	stw	r4,92(sp)
 400de34:	d8801717 	ldw	r2,92(sp)
 400de38:	103f9626 	beq	r2,zero,400dc94 <__alt_data_end+0xfc00dc94>
 400de3c:	a5400417 	ldw	r21,16(r20)
 400de40:	d9800017 	ldw	r6,0(sp)
 400de44:	013fffc4 	movi	r4,-1
 400de48:	ad67883a 	add	r19,r21,r21
 400de4c:	9ce7883a 	add	r19,r19,r19
 400de50:	3005883a 	mov	r2,r6
 400de54:	34cb883a 	add	r5,r6,r19
 400de58:	00000306 	br	400de68 <__gethex+0x6d8>
 400de5c:	10000015 	stw	zero,0(r2)
 400de60:	10800104 	addi	r2,r2,4
 400de64:	117f4a2e 	bgeu	r2,r5,400db90 <__alt_data_end+0xfc00db90>
 400de68:	10c00017 	ldw	r3,0(r2)
 400de6c:	193ffb26 	beq	r3,r4,400de5c <__alt_data_end+0xfc00de5c>
 400de70:	18c00044 	addi	r3,r3,1
 400de74:	10c00015 	stw	r3,0(r2)
 400de78:	00800084 	movi	r2,2
 400de7c:	88802b26 	beq	r17,r2,400df2c <__gethex+0x79c>
 400de80:	948007cc 	andi	r18,r18,31
 400de84:	90002f1e 	bne	r18,zero,400df44 <__gethex+0x7b4>
 400de88:	04400844 	movi	r17,33
 400de8c:	003f8206 	br	400dc98 <__alt_data_end+0xfc00dc98>
 400de90:	04c00044 	movi	r19,1
 400de94:	003fc106 	br	400dd9c <__alt_data_end+0xfc00dd9c>
 400de98:	d8c01717 	ldw	r3,92(sp)
 400de9c:	183ec926 	beq	r3,zero,400d9c4 <__alt_data_end+0xfc00d9c4>
 400dea0:	d8c00417 	ldw	r3,16(sp)
 400dea4:	d9001617 	ldw	r4,88(sp)
 400dea8:	18800015 	stw	r2,0(r3)
 400deac:	d8c00017 	ldw	r3,0(sp)
 400deb0:	00800044 	movi	r2,1
 400deb4:	a0800415 	stw	r2,16(r20)
 400deb8:	18800015 	stw	r2,0(r3)
 400debc:	25000015 	stw	r20,0(r4)
 400dec0:	00801884 	movi	r2,98
 400dec4:	003ef106 	br	400da8c <__alt_data_end+0xfc00da8c>
 400dec8:	9880008c 	andi	r2,r19,2
 400decc:	103f7126 	beq	r2,zero,400dc94 <__alt_data_end+0xfc00dc94>
 400ded0:	d8c00017 	ldw	r3,0(sp)
 400ded4:	18800017 	ldw	r2,0(r3)
 400ded8:	9884b03a 	or	r2,r19,r2
 400dedc:	1080004c 	andi	r2,r2,1
 400dee0:	103fd61e 	bne	r2,zero,400de3c <__alt_data_end+0xfc00de3c>
 400dee4:	003f6b06 	br	400dc94 <__alt_data_end+0xfc00dc94>
 400dee8:	da400017 	ldw	r9,0(sp)
 400deec:	0007883a 	mov	r3,zero
 400def0:	003e9606 	br	400d94c <__alt_data_end+0xfc00d94c>
 400def4:	04c00084 	movi	r19,2
 400def8:	003f8806 	br	400dd1c <__alt_data_end+0xfc00dd1c>
 400defc:	d9001717 	ldw	r4,92(sp)
 400df00:	203fe726 	beq	r4,zero,400dea0 <__alt_data_end+0xfc00dea0>
 400df04:	003eaf06 	br	400d9c4 <__alt_data_end+0xfc00d9c4>
 400df08:	943eae1e 	bne	r18,r16,400d9c4 <__alt_data_end+0xfc00d9c4>
 400df0c:	1cbfe40e 	bge	r3,r18,400dea0 <__alt_data_end+0xfc00dea0>
 400df10:	917fffc4 	addi	r5,r18,-1
 400df14:	a009883a 	mov	r4,r20
 400df18:	400f2680 	call	400f268 <__any_on>
 400df1c:	103ea926 	beq	r2,zero,400d9c4 <__alt_data_end+0xfc00d9c4>
 400df20:	d8c00117 	ldw	r3,4(sp)
 400df24:	18800117 	ldw	r2,4(r3)
 400df28:	003fdd06 	br	400dea0 <__alt_data_end+0xfc00dea0>
 400df2c:	d8c00117 	ldw	r3,4(sp)
 400df30:	18800017 	ldw	r2,0(r3)
 400df34:	10bfffc4 	addi	r2,r2,-1
 400df38:	90801c26 	beq	r18,r2,400dfac <__gethex+0x81c>
 400df3c:	04400884 	movi	r17,34
 400df40:	003f5506 	br	400dc98 <__alt_data_end+0xfc00dc98>
 400df44:	34c5883a 	add	r2,r6,r19
 400df48:	113fff17 	ldw	r4,-4(r2)
 400df4c:	400e5580 	call	400e558 <__hi0bits>
 400df50:	00c00804 	movi	r3,32
 400df54:	1ca5c83a 	sub	r18,r3,r18
 400df58:	14bfcb0e 	bge	r2,r18,400de88 <__alt_data_end+0xfc00de88>
 400df5c:	003f1a06 	br	400dbc8 <__alt_data_end+0xfc00dbc8>
 400df60:	a1400117 	ldw	r5,4(r20)
 400df64:	d9000217 	ldw	r4,8(sp)
 400df68:	29400044 	addi	r5,r5,1
 400df6c:	400e23c0 	call	400e23c <_Balloc>
 400df70:	a1800417 	ldw	r6,16(r20)
 400df74:	a1400304 	addi	r5,r20,12
 400df78:	11000304 	addi	r4,r2,12
 400df7c:	31800084 	addi	r6,r6,2
 400df80:	318d883a 	add	r6,r6,r6
 400df84:	318d883a 	add	r6,r6,r6
 400df88:	102d883a 	mov	r22,r2
 400df8c:	4003ba40 	call	4003ba4 <memcpy>
 400df90:	d9000217 	ldw	r4,8(sp)
 400df94:	a00b883a 	mov	r5,r20
 400df98:	b029883a 	mov	r20,r22
 400df9c:	400e2e40 	call	400e2e4 <_Bfree>
 400dfa0:	b0c00417 	ldw	r3,16(r22)
 400dfa4:	b1800504 	addi	r6,r22,20
 400dfa8:	003efc06 	br	400db9c <__alt_data_end+0xfc00db9c>
 400dfac:	9005d17a 	srai	r2,r18,5
 400dfb0:	944007cc 	andi	r17,r18,31
 400dfb4:	1085883a 	add	r2,r2,r2
 400dfb8:	1085883a 	add	r2,r2,r2
 400dfbc:	3087883a 	add	r3,r6,r2
 400dfc0:	00800044 	movi	r2,1
 400dfc4:	1462983a 	sll	r17,r2,r17
 400dfc8:	18800017 	ldw	r2,0(r3)
 400dfcc:	8884703a 	and	r2,r17,r2
 400dfd0:	1022c03a 	cmpne	r17,r2,zero
 400dfd4:	00800884 	movi	r2,34
 400dfd8:	1463c83a 	sub	r17,r2,r17
 400dfdc:	003f2e06 	br	400dc98 <__alt_data_end+0xfc00dc98>

0400dfe0 <__hexnan>:
 400dfe0:	defff904 	addi	sp,sp,-28
 400dfe4:	dc800215 	stw	r18,8(sp)
 400dfe8:	2c800017 	ldw	r18,0(r5)
 400dfec:	dfc00615 	stw	ra,24(sp)
 400dff0:	dd400515 	stw	r21,20(sp)
 400dff4:	901fd17a 	srai	r15,r18,5
 400dff8:	dd000415 	stw	r20,16(sp)
 400dffc:	dcc00315 	stw	r19,12(sp)
 400e000:	7bdf883a 	add	r15,r15,r15
 400e004:	7bdf883a 	add	r15,r15,r15
 400e008:	dc400115 	stw	r17,4(sp)
 400e00c:	dc000015 	stw	r16,0(sp)
 400e010:	948007cc 	andi	r18,r18,31
 400e014:	33df883a 	add	r15,r6,r15
 400e018:	90000126 	beq	r18,zero,400e020 <__hexnan+0x40>
 400e01c:	7bc00104 	addi	r15,r15,4
 400e020:	22000017 	ldw	r8,0(r4)
 400e024:	7affff04 	addi	r11,r15,-4
 400e028:	038100b4 	movhi	r14,1026
 400e02c:	783fff15 	stw	zero,-4(r15)
 400e030:	581b883a 	mov	r13,r11
 400e034:	580b883a 	mov	r5,r11
 400e038:	000f883a 	mov	r7,zero
 400e03c:	003f883a 	mov	ra,zero
 400e040:	0019883a 	mov	r12,zero
 400e044:	73a0e804 	addi	r14,r14,-31840
 400e048:	04400204 	movi	r17,8
 400e04c:	04000804 	movi	r16,32
 400e050:	04c001c4 	movi	r19,7
 400e054:	42000044 	addi	r8,r8,1
 400e058:	40c00003 	ldbu	r3,0(r8)
 400e05c:	18001d26 	beq	r3,zero,400e0d4 <__hexnan+0xf4>
 400e060:	70c5883a 	add	r2,r14,r3
 400e064:	10800003 	ldbu	r2,0(r2)
 400e068:	12403fcc 	andi	r9,r2,255
 400e06c:	4800301e 	bne	r9,zero,400e130 <__hexnan+0x150>
 400e070:	80c04236 	bltu	r16,r3,400e17c <__hexnan+0x19c>
 400e074:	fb3ff70e 	bge	ra,r12,400e054 <__alt_data_end+0xfc00e054>
 400e078:	2b40112e 	bgeu	r5,r13,400e0c0 <__hexnan+0xe0>
 400e07c:	99c01016 	blt	r19,r7,400e0c0 <__hexnan+0xe0>
 400e080:	89e9c83a 	sub	r20,r17,r7
 400e084:	a529883a 	add	r20,r20,r20
 400e088:	2a800017 	ldw	r10,0(r5)
 400e08c:	a529883a 	add	r20,r20,r20
 400e090:	852bc83a 	sub	r21,r16,r20
 400e094:	28c00104 	addi	r3,r5,4
 400e098:	2805883a 	mov	r2,r5
 400e09c:	19c00017 	ldw	r7,0(r3)
 400e0a0:	10800104 	addi	r2,r2,4
 400e0a4:	18c00104 	addi	r3,r3,4
 400e0a8:	3d52983a 	sll	r9,r7,r21
 400e0ac:	4a92b03a 	or	r9,r9,r10
 400e0b0:	3d14d83a 	srl	r10,r7,r20
 400e0b4:	127fff15 	stw	r9,-4(r2)
 400e0b8:	1abfff15 	stw	r10,-4(r3)
 400e0bc:	137ff736 	bltu	r2,r13,400e09c <__alt_data_end+0xfc00e09c>
 400e0c0:	31402836 	bltu	r6,r5,400e164 <__hexnan+0x184>
 400e0c4:	42000044 	addi	r8,r8,1
 400e0c8:	40c00003 	ldbu	r3,0(r8)
 400e0cc:	01c00204 	movi	r7,8
 400e0d0:	183fe31e 	bne	r3,zero,400e060 <__alt_data_end+0xfc00e060>
 400e0d4:	60002b26 	beq	r12,zero,400e184 <__hexnan+0x1a4>
 400e0d8:	2b40022e 	bgeu	r5,r13,400e0e4 <__hexnan+0x104>
 400e0dc:	008001c4 	movi	r2,7
 400e0e0:	11c0430e 	bge	r2,r7,400e1f0 <__hexnan+0x210>
 400e0e4:	3140312e 	bgeu	r6,r5,400e1ac <__hexnan+0x1cc>
 400e0e8:	3007883a 	mov	r3,r6
 400e0ec:	29000017 	ldw	r4,0(r5)
 400e0f0:	18800104 	addi	r2,r3,4
 400e0f4:	29400104 	addi	r5,r5,4
 400e0f8:	19000015 	stw	r4,0(r3)
 400e0fc:	1007883a 	mov	r3,r2
 400e100:	597ffa2e 	bgeu	r11,r5,400e0ec <__alt_data_end+0xfc00e0ec>
 400e104:	10000015 	stw	zero,0(r2)
 400e108:	10800104 	addi	r2,r2,4
 400e10c:	58bffd2e 	bgeu	r11,r2,400e104 <__alt_data_end+0xfc00e104>
 400e110:	78bfff17 	ldw	r2,-4(r15)
 400e114:	1000041e 	bne	r2,zero,400e128 <__hexnan+0x148>
 400e118:	32c02d26 	beq	r6,r11,400e1d0 <__hexnan+0x1f0>
 400e11c:	5affff04 	addi	r11,r11,-4
 400e120:	58800017 	ldw	r2,0(r11)
 400e124:	103ffc26 	beq	r2,zero,400e118 <__alt_data_end+0xfc00e118>
 400e128:	00800144 	movi	r2,5
 400e12c:	00001606 	br	400e188 <__hexnan+0x1a8>
 400e130:	39c00044 	addi	r7,r7,1
 400e134:	63000044 	addi	r12,r12,1
 400e138:	89c0040e 	bge	r17,r7,400e14c <__hexnan+0x16c>
 400e13c:	317fc52e 	bgeu	r6,r5,400e054 <__alt_data_end+0xfc00e054>
 400e140:	283fff15 	stw	zero,-4(r5)
 400e144:	01c00044 	movi	r7,1
 400e148:	297fff04 	addi	r5,r5,-4
 400e14c:	28c00017 	ldw	r3,0(r5)
 400e150:	108003cc 	andi	r2,r2,15
 400e154:	1806913a 	slli	r3,r3,4
 400e158:	1884b03a 	or	r2,r3,r2
 400e15c:	28800015 	stw	r2,0(r5)
 400e160:	003fbc06 	br	400e054 <__alt_data_end+0xfc00e054>
 400e164:	2b7fff04 	addi	r13,r5,-4
 400e168:	283fff15 	stw	zero,-4(r5)
 400e16c:	603f883a 	mov	ra,r12
 400e170:	680b883a 	mov	r5,r13
 400e174:	000f883a 	mov	r7,zero
 400e178:	003fb606 	br	400e054 <__alt_data_end+0xfc00e054>
 400e17c:	00800a44 	movi	r2,41
 400e180:	18801726 	beq	r3,r2,400e1e0 <__hexnan+0x200>
 400e184:	00800104 	movi	r2,4
 400e188:	dfc00617 	ldw	ra,24(sp)
 400e18c:	dd400517 	ldw	r21,20(sp)
 400e190:	dd000417 	ldw	r20,16(sp)
 400e194:	dcc00317 	ldw	r19,12(sp)
 400e198:	dc800217 	ldw	r18,8(sp)
 400e19c:	dc400117 	ldw	r17,4(sp)
 400e1a0:	dc000017 	ldw	r16,0(sp)
 400e1a4:	dec00704 	addi	sp,sp,28
 400e1a8:	f800283a 	ret
 400e1ac:	903fd826 	beq	r18,zero,400e110 <__alt_data_end+0xfc00e110>
 400e1b0:	00c00804 	movi	r3,32
 400e1b4:	1ca5c83a 	sub	r18,r3,r18
 400e1b8:	00ffffc4 	movi	r3,-1
 400e1bc:	78bfff17 	ldw	r2,-4(r15)
 400e1c0:	1c86d83a 	srl	r3,r3,r18
 400e1c4:	1884703a 	and	r2,r3,r2
 400e1c8:	78bfff15 	stw	r2,-4(r15)
 400e1cc:	003fd106 	br	400e114 <__alt_data_end+0xfc00e114>
 400e1d0:	00800044 	movi	r2,1
 400e1d4:	58800015 	stw	r2,0(r11)
 400e1d8:	00800144 	movi	r2,5
 400e1dc:	003fea06 	br	400e188 <__alt_data_end+0xfc00e188>
 400e1e0:	42000044 	addi	r8,r8,1
 400e1e4:	22000015 	stw	r8,0(r4)
 400e1e8:	603fbb1e 	bne	r12,zero,400e0d8 <__alt_data_end+0xfc00e0d8>
 400e1ec:	003fe506 	br	400e184 <__alt_data_end+0xfc00e184>
 400e1f0:	02400204 	movi	r9,8
 400e1f4:	49d3c83a 	sub	r9,r9,r7
 400e1f8:	4a53883a 	add	r9,r9,r9
 400e1fc:	2a000017 	ldw	r8,0(r5)
 400e200:	4a53883a 	add	r9,r9,r9
 400e204:	02800804 	movi	r10,32
 400e208:	5255c83a 	sub	r10,r10,r9
 400e20c:	28c00104 	addi	r3,r5,4
 400e210:	2805883a 	mov	r2,r5
 400e214:	19c00017 	ldw	r7,0(r3)
 400e218:	10800104 	addi	r2,r2,4
 400e21c:	18c00104 	addi	r3,r3,4
 400e220:	3a88983a 	sll	r4,r7,r10
 400e224:	2208b03a 	or	r4,r4,r8
 400e228:	3a50d83a 	srl	r8,r7,r9
 400e22c:	113fff15 	stw	r4,-4(r2)
 400e230:	1a3fff15 	stw	r8,-4(r3)
 400e234:	137ff736 	bltu	r2,r13,400e214 <__alt_data_end+0xfc00e214>
 400e238:	003faa06 	br	400e0e4 <__alt_data_end+0xfc00e0e4>

0400e23c <_Balloc>:
 400e23c:	20801317 	ldw	r2,76(r4)
 400e240:	defffc04 	addi	sp,sp,-16
 400e244:	dc400115 	stw	r17,4(sp)
 400e248:	dc000015 	stw	r16,0(sp)
 400e24c:	dfc00315 	stw	ra,12(sp)
 400e250:	dc800215 	stw	r18,8(sp)
 400e254:	2023883a 	mov	r17,r4
 400e258:	2821883a 	mov	r16,r5
 400e25c:	10000f26 	beq	r2,zero,400e29c <_Balloc+0x60>
 400e260:	8407883a 	add	r3,r16,r16
 400e264:	18c7883a 	add	r3,r3,r3
 400e268:	10c7883a 	add	r3,r2,r3
 400e26c:	18800017 	ldw	r2,0(r3)
 400e270:	10001126 	beq	r2,zero,400e2b8 <_Balloc+0x7c>
 400e274:	11000017 	ldw	r4,0(r2)
 400e278:	19000015 	stw	r4,0(r3)
 400e27c:	10000415 	stw	zero,16(r2)
 400e280:	10000315 	stw	zero,12(r2)
 400e284:	dfc00317 	ldw	ra,12(sp)
 400e288:	dc800217 	ldw	r18,8(sp)
 400e28c:	dc400117 	ldw	r17,4(sp)
 400e290:	dc000017 	ldw	r16,0(sp)
 400e294:	dec00404 	addi	sp,sp,16
 400e298:	f800283a 	ret
 400e29c:	01800844 	movi	r6,33
 400e2a0:	01400104 	movi	r5,4
 400e2a4:	40109340 	call	4010934 <_calloc_r>
 400e2a8:	88801315 	stw	r2,76(r17)
 400e2ac:	103fec1e 	bne	r2,zero,400e260 <__alt_data_end+0xfc00e260>
 400e2b0:	0005883a 	mov	r2,zero
 400e2b4:	003ff306 	br	400e284 <__alt_data_end+0xfc00e284>
 400e2b8:	01400044 	movi	r5,1
 400e2bc:	2c24983a 	sll	r18,r5,r16
 400e2c0:	8809883a 	mov	r4,r17
 400e2c4:	91800144 	addi	r6,r18,5
 400e2c8:	318d883a 	add	r6,r6,r6
 400e2cc:	318d883a 	add	r6,r6,r6
 400e2d0:	40109340 	call	4010934 <_calloc_r>
 400e2d4:	103ff626 	beq	r2,zero,400e2b0 <__alt_data_end+0xfc00e2b0>
 400e2d8:	14000115 	stw	r16,4(r2)
 400e2dc:	14800215 	stw	r18,8(r2)
 400e2e0:	003fe606 	br	400e27c <__alt_data_end+0xfc00e27c>

0400e2e4 <_Bfree>:
 400e2e4:	28000826 	beq	r5,zero,400e308 <_Bfree+0x24>
 400e2e8:	28c00117 	ldw	r3,4(r5)
 400e2ec:	20801317 	ldw	r2,76(r4)
 400e2f0:	18c7883a 	add	r3,r3,r3
 400e2f4:	18c7883a 	add	r3,r3,r3
 400e2f8:	10c5883a 	add	r2,r2,r3
 400e2fc:	10c00017 	ldw	r3,0(r2)
 400e300:	28c00015 	stw	r3,0(r5)
 400e304:	11400015 	stw	r5,0(r2)
 400e308:	f800283a 	ret

0400e30c <__multadd>:
 400e30c:	defff704 	addi	sp,sp,-36
 400e310:	dc800215 	stw	r18,8(sp)
 400e314:	2c800417 	ldw	r18,16(r5)
 400e318:	dd800615 	stw	r22,24(sp)
 400e31c:	dd400515 	stw	r21,20(sp)
 400e320:	dd000415 	stw	r20,16(sp)
 400e324:	dcc00315 	stw	r19,12(sp)
 400e328:	dc400115 	stw	r17,4(sp)
 400e32c:	dc000015 	stw	r16,0(sp)
 400e330:	dfc00815 	stw	ra,32(sp)
 400e334:	ddc00715 	stw	r23,28(sp)
 400e338:	2827883a 	mov	r19,r5
 400e33c:	2029883a 	mov	r20,r4
 400e340:	3023883a 	mov	r17,r6
 400e344:	3821883a 	mov	r16,r7
 400e348:	2d400504 	addi	r21,r5,20
 400e34c:	002d883a 	mov	r22,zero
 400e350:	adc00017 	ldw	r23,0(r21)
 400e354:	880b883a 	mov	r5,r17
 400e358:	ad400104 	addi	r21,r21,4
 400e35c:	b93fffcc 	andi	r4,r23,65535
 400e360:	4001a140 	call	4001a14 <__mulsi3>
 400e364:	b808d43a 	srli	r4,r23,16
 400e368:	880b883a 	mov	r5,r17
 400e36c:	1421883a 	add	r16,r2,r16
 400e370:	4001a140 	call	4001a14 <__mulsi3>
 400e374:	800ed43a 	srli	r7,r16,16
 400e378:	80ffffcc 	andi	r3,r16,65535
 400e37c:	b5800044 	addi	r22,r22,1
 400e380:	11c5883a 	add	r2,r2,r7
 400e384:	100e943a 	slli	r7,r2,16
 400e388:	1020d43a 	srli	r16,r2,16
 400e38c:	38c7883a 	add	r3,r7,r3
 400e390:	a8ffff15 	stw	r3,-4(r21)
 400e394:	b4bfee16 	blt	r22,r18,400e350 <__alt_data_end+0xfc00e350>
 400e398:	80000926 	beq	r16,zero,400e3c0 <__multadd+0xb4>
 400e39c:	98800217 	ldw	r2,8(r19)
 400e3a0:	9080130e 	bge	r18,r2,400e3f0 <__multadd+0xe4>
 400e3a4:	90800144 	addi	r2,r18,5
 400e3a8:	1085883a 	add	r2,r2,r2
 400e3ac:	1085883a 	add	r2,r2,r2
 400e3b0:	9885883a 	add	r2,r19,r2
 400e3b4:	14000015 	stw	r16,0(r2)
 400e3b8:	94800044 	addi	r18,r18,1
 400e3bc:	9c800415 	stw	r18,16(r19)
 400e3c0:	9805883a 	mov	r2,r19
 400e3c4:	dfc00817 	ldw	ra,32(sp)
 400e3c8:	ddc00717 	ldw	r23,28(sp)
 400e3cc:	dd800617 	ldw	r22,24(sp)
 400e3d0:	dd400517 	ldw	r21,20(sp)
 400e3d4:	dd000417 	ldw	r20,16(sp)
 400e3d8:	dcc00317 	ldw	r19,12(sp)
 400e3dc:	dc800217 	ldw	r18,8(sp)
 400e3e0:	dc400117 	ldw	r17,4(sp)
 400e3e4:	dc000017 	ldw	r16,0(sp)
 400e3e8:	dec00904 	addi	sp,sp,36
 400e3ec:	f800283a 	ret
 400e3f0:	99400117 	ldw	r5,4(r19)
 400e3f4:	a009883a 	mov	r4,r20
 400e3f8:	29400044 	addi	r5,r5,1
 400e3fc:	400e23c0 	call	400e23c <_Balloc>
 400e400:	99800417 	ldw	r6,16(r19)
 400e404:	99400304 	addi	r5,r19,12
 400e408:	11000304 	addi	r4,r2,12
 400e40c:	31800084 	addi	r6,r6,2
 400e410:	318d883a 	add	r6,r6,r6
 400e414:	318d883a 	add	r6,r6,r6
 400e418:	1023883a 	mov	r17,r2
 400e41c:	4003ba40 	call	4003ba4 <memcpy>
 400e420:	98000a26 	beq	r19,zero,400e44c <__multadd+0x140>
 400e424:	98c00117 	ldw	r3,4(r19)
 400e428:	a0801317 	ldw	r2,76(r20)
 400e42c:	18c7883a 	add	r3,r3,r3
 400e430:	18c7883a 	add	r3,r3,r3
 400e434:	10c5883a 	add	r2,r2,r3
 400e438:	10c00017 	ldw	r3,0(r2)
 400e43c:	98c00015 	stw	r3,0(r19)
 400e440:	14c00015 	stw	r19,0(r2)
 400e444:	8827883a 	mov	r19,r17
 400e448:	003fd606 	br	400e3a4 <__alt_data_end+0xfc00e3a4>
 400e44c:	8827883a 	mov	r19,r17
 400e450:	003fd406 	br	400e3a4 <__alt_data_end+0xfc00e3a4>

0400e454 <__s2b>:
 400e454:	defff904 	addi	sp,sp,-28
 400e458:	dc400115 	stw	r17,4(sp)
 400e45c:	dc000015 	stw	r16,0(sp)
 400e460:	2023883a 	mov	r17,r4
 400e464:	2821883a 	mov	r16,r5
 400e468:	39000204 	addi	r4,r7,8
 400e46c:	01400244 	movi	r5,9
 400e470:	dcc00315 	stw	r19,12(sp)
 400e474:	dc800215 	stw	r18,8(sp)
 400e478:	dfc00615 	stw	ra,24(sp)
 400e47c:	dd400515 	stw	r21,20(sp)
 400e480:	dd000415 	stw	r20,16(sp)
 400e484:	3825883a 	mov	r18,r7
 400e488:	3027883a 	mov	r19,r6
 400e48c:	40018600 	call	4001860 <__divsi3>
 400e490:	00c00044 	movi	r3,1
 400e494:	000b883a 	mov	r5,zero
 400e498:	1880030e 	bge	r3,r2,400e4a8 <__s2b+0x54>
 400e49c:	18c7883a 	add	r3,r3,r3
 400e4a0:	29400044 	addi	r5,r5,1
 400e4a4:	18bffd16 	blt	r3,r2,400e49c <__alt_data_end+0xfc00e49c>
 400e4a8:	8809883a 	mov	r4,r17
 400e4ac:	400e23c0 	call	400e23c <_Balloc>
 400e4b0:	d8c00717 	ldw	r3,28(sp)
 400e4b4:	10c00515 	stw	r3,20(r2)
 400e4b8:	00c00044 	movi	r3,1
 400e4bc:	10c00415 	stw	r3,16(r2)
 400e4c0:	00c00244 	movi	r3,9
 400e4c4:	1cc0210e 	bge	r3,r19,400e54c <__s2b+0xf8>
 400e4c8:	80eb883a 	add	r21,r16,r3
 400e4cc:	a829883a 	mov	r20,r21
 400e4d0:	84e1883a 	add	r16,r16,r19
 400e4d4:	a1c00007 	ldb	r7,0(r20)
 400e4d8:	01800284 	movi	r6,10
 400e4dc:	a5000044 	addi	r20,r20,1
 400e4e0:	100b883a 	mov	r5,r2
 400e4e4:	39fff404 	addi	r7,r7,-48
 400e4e8:	8809883a 	mov	r4,r17
 400e4ec:	400e30c0 	call	400e30c <__multadd>
 400e4f0:	a43ff81e 	bne	r20,r16,400e4d4 <__alt_data_end+0xfc00e4d4>
 400e4f4:	ace1883a 	add	r16,r21,r19
 400e4f8:	843ffe04 	addi	r16,r16,-8
 400e4fc:	9c800a0e 	bge	r19,r18,400e528 <__s2b+0xd4>
 400e500:	94e5c83a 	sub	r18,r18,r19
 400e504:	84a5883a 	add	r18,r16,r18
 400e508:	81c00007 	ldb	r7,0(r16)
 400e50c:	01800284 	movi	r6,10
 400e510:	84000044 	addi	r16,r16,1
 400e514:	100b883a 	mov	r5,r2
 400e518:	39fff404 	addi	r7,r7,-48
 400e51c:	8809883a 	mov	r4,r17
 400e520:	400e30c0 	call	400e30c <__multadd>
 400e524:	84bff81e 	bne	r16,r18,400e508 <__alt_data_end+0xfc00e508>
 400e528:	dfc00617 	ldw	ra,24(sp)
 400e52c:	dd400517 	ldw	r21,20(sp)
 400e530:	dd000417 	ldw	r20,16(sp)
 400e534:	dcc00317 	ldw	r19,12(sp)
 400e538:	dc800217 	ldw	r18,8(sp)
 400e53c:	dc400117 	ldw	r17,4(sp)
 400e540:	dc000017 	ldw	r16,0(sp)
 400e544:	dec00704 	addi	sp,sp,28
 400e548:	f800283a 	ret
 400e54c:	84000284 	addi	r16,r16,10
 400e550:	1827883a 	mov	r19,r3
 400e554:	003fe906 	br	400e4fc <__alt_data_end+0xfc00e4fc>

0400e558 <__hi0bits>:
 400e558:	20bfffec 	andhi	r2,r4,65535
 400e55c:	1000141e 	bne	r2,zero,400e5b0 <__hi0bits+0x58>
 400e560:	2008943a 	slli	r4,r4,16
 400e564:	00800404 	movi	r2,16
 400e568:	20ffc02c 	andhi	r3,r4,65280
 400e56c:	1800021e 	bne	r3,zero,400e578 <__hi0bits+0x20>
 400e570:	2008923a 	slli	r4,r4,8
 400e574:	10800204 	addi	r2,r2,8
 400e578:	20fc002c 	andhi	r3,r4,61440
 400e57c:	1800021e 	bne	r3,zero,400e588 <__hi0bits+0x30>
 400e580:	2008913a 	slli	r4,r4,4
 400e584:	10800104 	addi	r2,r2,4
 400e588:	20f0002c 	andhi	r3,r4,49152
 400e58c:	1800031e 	bne	r3,zero,400e59c <__hi0bits+0x44>
 400e590:	2109883a 	add	r4,r4,r4
 400e594:	10800084 	addi	r2,r2,2
 400e598:	2109883a 	add	r4,r4,r4
 400e59c:	20000316 	blt	r4,zero,400e5ac <__hi0bits+0x54>
 400e5a0:	2110002c 	andhi	r4,r4,16384
 400e5a4:	2000041e 	bne	r4,zero,400e5b8 <__hi0bits+0x60>
 400e5a8:	00800804 	movi	r2,32
 400e5ac:	f800283a 	ret
 400e5b0:	0005883a 	mov	r2,zero
 400e5b4:	003fec06 	br	400e568 <__alt_data_end+0xfc00e568>
 400e5b8:	10800044 	addi	r2,r2,1
 400e5bc:	f800283a 	ret

0400e5c0 <__lo0bits>:
 400e5c0:	20c00017 	ldw	r3,0(r4)
 400e5c4:	188001cc 	andi	r2,r3,7
 400e5c8:	10000826 	beq	r2,zero,400e5ec <__lo0bits+0x2c>
 400e5cc:	1880004c 	andi	r2,r3,1
 400e5d0:	1000211e 	bne	r2,zero,400e658 <__lo0bits+0x98>
 400e5d4:	1880008c 	andi	r2,r3,2
 400e5d8:	1000211e 	bne	r2,zero,400e660 <__lo0bits+0xa0>
 400e5dc:	1806d0ba 	srli	r3,r3,2
 400e5e0:	00800084 	movi	r2,2
 400e5e4:	20c00015 	stw	r3,0(r4)
 400e5e8:	f800283a 	ret
 400e5ec:	18bfffcc 	andi	r2,r3,65535
 400e5f0:	10001326 	beq	r2,zero,400e640 <__lo0bits+0x80>
 400e5f4:	0005883a 	mov	r2,zero
 400e5f8:	19403fcc 	andi	r5,r3,255
 400e5fc:	2800021e 	bne	r5,zero,400e608 <__lo0bits+0x48>
 400e600:	1806d23a 	srli	r3,r3,8
 400e604:	10800204 	addi	r2,r2,8
 400e608:	194003cc 	andi	r5,r3,15
 400e60c:	2800021e 	bne	r5,zero,400e618 <__lo0bits+0x58>
 400e610:	1806d13a 	srli	r3,r3,4
 400e614:	10800104 	addi	r2,r2,4
 400e618:	194000cc 	andi	r5,r3,3
 400e61c:	2800021e 	bne	r5,zero,400e628 <__lo0bits+0x68>
 400e620:	1806d0ba 	srli	r3,r3,2
 400e624:	10800084 	addi	r2,r2,2
 400e628:	1940004c 	andi	r5,r3,1
 400e62c:	2800081e 	bne	r5,zero,400e650 <__lo0bits+0x90>
 400e630:	1806d07a 	srli	r3,r3,1
 400e634:	1800051e 	bne	r3,zero,400e64c <__lo0bits+0x8c>
 400e638:	00800804 	movi	r2,32
 400e63c:	f800283a 	ret
 400e640:	1806d43a 	srli	r3,r3,16
 400e644:	00800404 	movi	r2,16
 400e648:	003feb06 	br	400e5f8 <__alt_data_end+0xfc00e5f8>
 400e64c:	10800044 	addi	r2,r2,1
 400e650:	20c00015 	stw	r3,0(r4)
 400e654:	f800283a 	ret
 400e658:	0005883a 	mov	r2,zero
 400e65c:	f800283a 	ret
 400e660:	1806d07a 	srli	r3,r3,1
 400e664:	00800044 	movi	r2,1
 400e668:	20c00015 	stw	r3,0(r4)
 400e66c:	f800283a 	ret

0400e670 <__i2b>:
 400e670:	defffd04 	addi	sp,sp,-12
 400e674:	dc000015 	stw	r16,0(sp)
 400e678:	04000044 	movi	r16,1
 400e67c:	dc400115 	stw	r17,4(sp)
 400e680:	2823883a 	mov	r17,r5
 400e684:	800b883a 	mov	r5,r16
 400e688:	dfc00215 	stw	ra,8(sp)
 400e68c:	400e23c0 	call	400e23c <_Balloc>
 400e690:	14400515 	stw	r17,20(r2)
 400e694:	14000415 	stw	r16,16(r2)
 400e698:	dfc00217 	ldw	ra,8(sp)
 400e69c:	dc400117 	ldw	r17,4(sp)
 400e6a0:	dc000017 	ldw	r16,0(sp)
 400e6a4:	dec00304 	addi	sp,sp,12
 400e6a8:	f800283a 	ret

0400e6ac <__multiply>:
 400e6ac:	deffef04 	addi	sp,sp,-68
 400e6b0:	dc400815 	stw	r17,32(sp)
 400e6b4:	dc000715 	stw	r16,28(sp)
 400e6b8:	34400417 	ldw	r17,16(r6)
 400e6bc:	2c000417 	ldw	r16,16(r5)
 400e6c0:	dd800d15 	stw	r22,52(sp)
 400e6c4:	dc800915 	stw	r18,36(sp)
 400e6c8:	dfc01015 	stw	ra,64(sp)
 400e6cc:	df000f15 	stw	fp,60(sp)
 400e6d0:	ddc00e15 	stw	r23,56(sp)
 400e6d4:	dd400c15 	stw	r21,48(sp)
 400e6d8:	dd000b15 	stw	r20,44(sp)
 400e6dc:	dcc00a15 	stw	r19,40(sp)
 400e6e0:	2825883a 	mov	r18,r5
 400e6e4:	302d883a 	mov	r22,r6
 400e6e8:	8440050e 	bge	r16,r17,400e700 <__multiply+0x54>
 400e6ec:	8007883a 	mov	r3,r16
 400e6f0:	3025883a 	mov	r18,r6
 400e6f4:	8821883a 	mov	r16,r17
 400e6f8:	282d883a 	mov	r22,r5
 400e6fc:	1823883a 	mov	r17,r3
 400e700:	90800217 	ldw	r2,8(r18)
 400e704:	8447883a 	add	r3,r16,r17
 400e708:	d8c00215 	stw	r3,8(sp)
 400e70c:	91400117 	ldw	r5,4(r18)
 400e710:	10c0010e 	bge	r2,r3,400e718 <__multiply+0x6c>
 400e714:	29400044 	addi	r5,r5,1
 400e718:	400e23c0 	call	400e23c <_Balloc>
 400e71c:	d8c00217 	ldw	r3,8(sp)
 400e720:	d8800615 	stw	r2,24(sp)
 400e724:	18eb883a 	add	r21,r3,r3
 400e728:	ad6b883a 	add	r21,r21,r21
 400e72c:	10c00504 	addi	r3,r2,20
 400e730:	1d6b883a 	add	r21,r3,r21
 400e734:	d8c00115 	stw	r3,4(sp)
 400e738:	dd400315 	stw	r21,12(sp)
 400e73c:	1805883a 	mov	r2,r3
 400e740:	1d40042e 	bgeu	r3,r21,400e754 <__multiply+0xa8>
 400e744:	d8c00317 	ldw	r3,12(sp)
 400e748:	10000015 	stw	zero,0(r2)
 400e74c:	10800104 	addi	r2,r2,4
 400e750:	10fffc36 	bltu	r2,r3,400e744 <__alt_data_end+0xfc00e744>
 400e754:	8c63883a 	add	r17,r17,r17
 400e758:	b5800504 	addi	r22,r22,20
 400e75c:	8c63883a 	add	r17,r17,r17
 400e760:	94800504 	addi	r18,r18,20
 400e764:	8421883a 	add	r16,r16,r16
 400e768:	b463883a 	add	r17,r22,r17
 400e76c:	8421883a 	add	r16,r16,r16
 400e770:	dd800015 	stw	r22,0(sp)
 400e774:	dc800415 	stw	r18,16(sp)
 400e778:	dc400515 	stw	r17,20(sp)
 400e77c:	9429883a 	add	r20,r18,r16
 400e780:	b4404f2e 	bgeu	r22,r17,400e8c0 <__multiply+0x214>
 400e784:	d8c00017 	ldw	r3,0(sp)
 400e788:	1c800017 	ldw	r18,0(r3)
 400e78c:	947fffcc 	andi	r17,r18,65535
 400e790:	88001e26 	beq	r17,zero,400e80c <__multiply+0x160>
 400e794:	dd800117 	ldw	r22,4(sp)
 400e798:	dd400417 	ldw	r21,16(sp)
 400e79c:	0027883a 	mov	r19,zero
 400e7a0:	ac800017 	ldw	r18,0(r21)
 400e7a4:	b4000017 	ldw	r16,0(r22)
 400e7a8:	880b883a 	mov	r5,r17
 400e7ac:	913fffcc 	andi	r4,r18,65535
 400e7b0:	4001a140 	call	4001a14 <__mulsi3>
 400e7b4:	9008d43a 	srli	r4,r18,16
 400e7b8:	84bfffcc 	andi	r18,r16,65535
 400e7bc:	1485883a 	add	r2,r2,r18
 400e7c0:	14e5883a 	add	r18,r2,r19
 400e7c4:	8020d43a 	srli	r16,r16,16
 400e7c8:	9026d43a 	srli	r19,r18,16
 400e7cc:	880b883a 	mov	r5,r17
 400e7d0:	4001a140 	call	4001a14 <__mulsi3>
 400e7d4:	1405883a 	add	r2,r2,r16
 400e7d8:	14e1883a 	add	r16,r2,r19
 400e7dc:	90ffffcc 	andi	r3,r18,65535
 400e7e0:	8024943a 	slli	r18,r16,16
 400e7e4:	ad400104 	addi	r21,r21,4
 400e7e8:	b005883a 	mov	r2,r22
 400e7ec:	90c6b03a 	or	r3,r18,r3
 400e7f0:	b0c00015 	stw	r3,0(r22)
 400e7f4:	8026d43a 	srli	r19,r16,16
 400e7f8:	b5800104 	addi	r22,r22,4
 400e7fc:	ad3fe836 	bltu	r21,r20,400e7a0 <__alt_data_end+0xfc00e7a0>
 400e800:	d8c00017 	ldw	r3,0(sp)
 400e804:	14c00115 	stw	r19,4(r2)
 400e808:	1c800017 	ldw	r18,0(r3)
 400e80c:	9024d43a 	srli	r18,r18,16
 400e810:	90002226 	beq	r18,zero,400e89c <__multiply+0x1f0>
 400e814:	d8c00117 	ldw	r3,4(sp)
 400e818:	dd800417 	ldw	r22,16(sp)
 400e81c:	002f883a 	mov	r23,zero
 400e820:	1f000017 	ldw	fp,0(r3)
 400e824:	1823883a 	mov	r17,r3
 400e828:	182b883a 	mov	r21,r3
 400e82c:	e021883a 	mov	r16,fp
 400e830:	00000106 	br	400e838 <__multiply+0x18c>
 400e834:	982b883a 	mov	r21,r19
 400e838:	b100000b 	ldhu	r4,0(r22)
 400e83c:	8020d43a 	srli	r16,r16,16
 400e840:	900b883a 	mov	r5,r18
 400e844:	4001a140 	call	4001a14 <__mulsi3>
 400e848:	1405883a 	add	r2,r2,r16
 400e84c:	15ef883a 	add	r23,r2,r23
 400e850:	b804943a 	slli	r2,r23,16
 400e854:	e0ffffcc 	andi	r3,fp,65535
 400e858:	8c400104 	addi	r17,r17,4
 400e85c:	10c6b03a 	or	r3,r2,r3
 400e860:	88ffff15 	stw	r3,-4(r17)
 400e864:	b5800104 	addi	r22,r22,4
 400e868:	b13fff17 	ldw	r4,-4(r22)
 400e86c:	acc00104 	addi	r19,r21,4
 400e870:	900b883a 	mov	r5,r18
 400e874:	2008d43a 	srli	r4,r4,16
 400e878:	9c000017 	ldw	r16,0(r19)
 400e87c:	4001a140 	call	4001a14 <__mulsi3>
 400e880:	b806d43a 	srli	r3,r23,16
 400e884:	813fffcc 	andi	r4,r16,65535
 400e888:	1105883a 	add	r2,r2,r4
 400e88c:	10f9883a 	add	fp,r2,r3
 400e890:	e02ed43a 	srli	r23,fp,16
 400e894:	b53fe736 	bltu	r22,r20,400e834 <__alt_data_end+0xfc00e834>
 400e898:	af000115 	stw	fp,4(r21)
 400e89c:	d8c00017 	ldw	r3,0(sp)
 400e8a0:	d9000517 	ldw	r4,20(sp)
 400e8a4:	18c00104 	addi	r3,r3,4
 400e8a8:	d8c00015 	stw	r3,0(sp)
 400e8ac:	d8c00117 	ldw	r3,4(sp)
 400e8b0:	18c00104 	addi	r3,r3,4
 400e8b4:	d8c00115 	stw	r3,4(sp)
 400e8b8:	d8c00017 	ldw	r3,0(sp)
 400e8bc:	193fb136 	bltu	r3,r4,400e784 <__alt_data_end+0xfc00e784>
 400e8c0:	d8c00217 	ldw	r3,8(sp)
 400e8c4:	00c00c0e 	bge	zero,r3,400e8f8 <__multiply+0x24c>
 400e8c8:	d8c00317 	ldw	r3,12(sp)
 400e8cc:	18bfff17 	ldw	r2,-4(r3)
 400e8d0:	1d7fff04 	addi	r21,r3,-4
 400e8d4:	10000326 	beq	r2,zero,400e8e4 <__multiply+0x238>
 400e8d8:	00000706 	br	400e8f8 <__multiply+0x24c>
 400e8dc:	a8800017 	ldw	r2,0(r21)
 400e8e0:	1000051e 	bne	r2,zero,400e8f8 <__multiply+0x24c>
 400e8e4:	d8c00217 	ldw	r3,8(sp)
 400e8e8:	ad7fff04 	addi	r21,r21,-4
 400e8ec:	18ffffc4 	addi	r3,r3,-1
 400e8f0:	d8c00215 	stw	r3,8(sp)
 400e8f4:	183ff91e 	bne	r3,zero,400e8dc <__alt_data_end+0xfc00e8dc>
 400e8f8:	d8c00617 	ldw	r3,24(sp)
 400e8fc:	d9000217 	ldw	r4,8(sp)
 400e900:	1805883a 	mov	r2,r3
 400e904:	19000415 	stw	r4,16(r3)
 400e908:	dfc01017 	ldw	ra,64(sp)
 400e90c:	df000f17 	ldw	fp,60(sp)
 400e910:	ddc00e17 	ldw	r23,56(sp)
 400e914:	dd800d17 	ldw	r22,52(sp)
 400e918:	dd400c17 	ldw	r21,48(sp)
 400e91c:	dd000b17 	ldw	r20,44(sp)
 400e920:	dcc00a17 	ldw	r19,40(sp)
 400e924:	dc800917 	ldw	r18,36(sp)
 400e928:	dc400817 	ldw	r17,32(sp)
 400e92c:	dc000717 	ldw	r16,28(sp)
 400e930:	dec01104 	addi	sp,sp,68
 400e934:	f800283a 	ret

0400e938 <__pow5mult>:
 400e938:	defffa04 	addi	sp,sp,-24
 400e93c:	dcc00315 	stw	r19,12(sp)
 400e940:	dc000015 	stw	r16,0(sp)
 400e944:	dfc00515 	stw	ra,20(sp)
 400e948:	dd000415 	stw	r20,16(sp)
 400e94c:	dc800215 	stw	r18,8(sp)
 400e950:	dc400115 	stw	r17,4(sp)
 400e954:	308000cc 	andi	r2,r6,3
 400e958:	3021883a 	mov	r16,r6
 400e95c:	2027883a 	mov	r19,r4
 400e960:	10002f1e 	bne	r2,zero,400ea20 <__pow5mult+0xe8>
 400e964:	2825883a 	mov	r18,r5
 400e968:	8021d0ba 	srai	r16,r16,2
 400e96c:	80001a26 	beq	r16,zero,400e9d8 <__pow5mult+0xa0>
 400e970:	9c401217 	ldw	r17,72(r19)
 400e974:	8800061e 	bne	r17,zero,400e990 <__pow5mult+0x58>
 400e978:	00003406 	br	400ea4c <__pow5mult+0x114>
 400e97c:	8021d07a 	srai	r16,r16,1
 400e980:	80001526 	beq	r16,zero,400e9d8 <__pow5mult+0xa0>
 400e984:	88800017 	ldw	r2,0(r17)
 400e988:	10001c26 	beq	r2,zero,400e9fc <__pow5mult+0xc4>
 400e98c:	1023883a 	mov	r17,r2
 400e990:	8080004c 	andi	r2,r16,1
 400e994:	103ff926 	beq	r2,zero,400e97c <__alt_data_end+0xfc00e97c>
 400e998:	880d883a 	mov	r6,r17
 400e99c:	900b883a 	mov	r5,r18
 400e9a0:	9809883a 	mov	r4,r19
 400e9a4:	400e6ac0 	call	400e6ac <__multiply>
 400e9a8:	90001b26 	beq	r18,zero,400ea18 <__pow5mult+0xe0>
 400e9ac:	91000117 	ldw	r4,4(r18)
 400e9b0:	98c01317 	ldw	r3,76(r19)
 400e9b4:	8021d07a 	srai	r16,r16,1
 400e9b8:	2109883a 	add	r4,r4,r4
 400e9bc:	2109883a 	add	r4,r4,r4
 400e9c0:	1907883a 	add	r3,r3,r4
 400e9c4:	19000017 	ldw	r4,0(r3)
 400e9c8:	91000015 	stw	r4,0(r18)
 400e9cc:	1c800015 	stw	r18,0(r3)
 400e9d0:	1025883a 	mov	r18,r2
 400e9d4:	803feb1e 	bne	r16,zero,400e984 <__alt_data_end+0xfc00e984>
 400e9d8:	9005883a 	mov	r2,r18
 400e9dc:	dfc00517 	ldw	ra,20(sp)
 400e9e0:	dd000417 	ldw	r20,16(sp)
 400e9e4:	dcc00317 	ldw	r19,12(sp)
 400e9e8:	dc800217 	ldw	r18,8(sp)
 400e9ec:	dc400117 	ldw	r17,4(sp)
 400e9f0:	dc000017 	ldw	r16,0(sp)
 400e9f4:	dec00604 	addi	sp,sp,24
 400e9f8:	f800283a 	ret
 400e9fc:	880d883a 	mov	r6,r17
 400ea00:	880b883a 	mov	r5,r17
 400ea04:	9809883a 	mov	r4,r19
 400ea08:	400e6ac0 	call	400e6ac <__multiply>
 400ea0c:	88800015 	stw	r2,0(r17)
 400ea10:	10000015 	stw	zero,0(r2)
 400ea14:	003fdd06 	br	400e98c <__alt_data_end+0xfc00e98c>
 400ea18:	1025883a 	mov	r18,r2
 400ea1c:	003fd706 	br	400e97c <__alt_data_end+0xfc00e97c>
 400ea20:	10bfffc4 	addi	r2,r2,-1
 400ea24:	1085883a 	add	r2,r2,r2
 400ea28:	00c100b4 	movhi	r3,1026
 400ea2c:	18e12804 	addi	r3,r3,-31584
 400ea30:	1085883a 	add	r2,r2,r2
 400ea34:	1885883a 	add	r2,r3,r2
 400ea38:	11800017 	ldw	r6,0(r2)
 400ea3c:	000f883a 	mov	r7,zero
 400ea40:	400e30c0 	call	400e30c <__multadd>
 400ea44:	1025883a 	mov	r18,r2
 400ea48:	003fc706 	br	400e968 <__alt_data_end+0xfc00e968>
 400ea4c:	05000044 	movi	r20,1
 400ea50:	a00b883a 	mov	r5,r20
 400ea54:	9809883a 	mov	r4,r19
 400ea58:	400e23c0 	call	400e23c <_Balloc>
 400ea5c:	1023883a 	mov	r17,r2
 400ea60:	00809c44 	movi	r2,625
 400ea64:	88800515 	stw	r2,20(r17)
 400ea68:	8d000415 	stw	r20,16(r17)
 400ea6c:	9c401215 	stw	r17,72(r19)
 400ea70:	88000015 	stw	zero,0(r17)
 400ea74:	003fc606 	br	400e990 <__alt_data_end+0xfc00e990>

0400ea78 <__lshift>:
 400ea78:	defff904 	addi	sp,sp,-28
 400ea7c:	dd400515 	stw	r21,20(sp)
 400ea80:	dcc00315 	stw	r19,12(sp)
 400ea84:	302bd17a 	srai	r21,r6,5
 400ea88:	2cc00417 	ldw	r19,16(r5)
 400ea8c:	28800217 	ldw	r2,8(r5)
 400ea90:	dd000415 	stw	r20,16(sp)
 400ea94:	ace7883a 	add	r19,r21,r19
 400ea98:	dc800215 	stw	r18,8(sp)
 400ea9c:	dc400115 	stw	r17,4(sp)
 400eaa0:	dc000015 	stw	r16,0(sp)
 400eaa4:	dfc00615 	stw	ra,24(sp)
 400eaa8:	9c000044 	addi	r16,r19,1
 400eaac:	2823883a 	mov	r17,r5
 400eab0:	3029883a 	mov	r20,r6
 400eab4:	2025883a 	mov	r18,r4
 400eab8:	29400117 	ldw	r5,4(r5)
 400eabc:	1400030e 	bge	r2,r16,400eacc <__lshift+0x54>
 400eac0:	1085883a 	add	r2,r2,r2
 400eac4:	29400044 	addi	r5,r5,1
 400eac8:	143ffd16 	blt	r2,r16,400eac0 <__alt_data_end+0xfc00eac0>
 400eacc:	9009883a 	mov	r4,r18
 400ead0:	400e23c0 	call	400e23c <_Balloc>
 400ead4:	10c00504 	addi	r3,r2,20
 400ead8:	0540070e 	bge	zero,r21,400eaf8 <__lshift+0x80>
 400eadc:	ad6b883a 	add	r21,r21,r21
 400eae0:	ad6b883a 	add	r21,r21,r21
 400eae4:	1809883a 	mov	r4,r3
 400eae8:	1d47883a 	add	r3,r3,r21
 400eaec:	20000015 	stw	zero,0(r4)
 400eaf0:	21000104 	addi	r4,r4,4
 400eaf4:	193ffd1e 	bne	r3,r4,400eaec <__alt_data_end+0xfc00eaec>
 400eaf8:	8a000417 	ldw	r8,16(r17)
 400eafc:	89000504 	addi	r4,r17,20
 400eb00:	a18007cc 	andi	r6,r20,31
 400eb04:	4211883a 	add	r8,r8,r8
 400eb08:	4211883a 	add	r8,r8,r8
 400eb0c:	2211883a 	add	r8,r4,r8
 400eb10:	30002326 	beq	r6,zero,400eba0 <__lshift+0x128>
 400eb14:	02400804 	movi	r9,32
 400eb18:	4993c83a 	sub	r9,r9,r6
 400eb1c:	000b883a 	mov	r5,zero
 400eb20:	21c00017 	ldw	r7,0(r4)
 400eb24:	1815883a 	mov	r10,r3
 400eb28:	18c00104 	addi	r3,r3,4
 400eb2c:	398e983a 	sll	r7,r7,r6
 400eb30:	21000104 	addi	r4,r4,4
 400eb34:	394ab03a 	or	r5,r7,r5
 400eb38:	197fff15 	stw	r5,-4(r3)
 400eb3c:	217fff17 	ldw	r5,-4(r4)
 400eb40:	2a4ad83a 	srl	r5,r5,r9
 400eb44:	223ff636 	bltu	r4,r8,400eb20 <__alt_data_end+0xfc00eb20>
 400eb48:	51400115 	stw	r5,4(r10)
 400eb4c:	28001a1e 	bne	r5,zero,400ebb8 <__lshift+0x140>
 400eb50:	843fffc4 	addi	r16,r16,-1
 400eb54:	14000415 	stw	r16,16(r2)
 400eb58:	88000826 	beq	r17,zero,400eb7c <__lshift+0x104>
 400eb5c:	89000117 	ldw	r4,4(r17)
 400eb60:	90c01317 	ldw	r3,76(r18)
 400eb64:	2109883a 	add	r4,r4,r4
 400eb68:	2109883a 	add	r4,r4,r4
 400eb6c:	1907883a 	add	r3,r3,r4
 400eb70:	19000017 	ldw	r4,0(r3)
 400eb74:	89000015 	stw	r4,0(r17)
 400eb78:	1c400015 	stw	r17,0(r3)
 400eb7c:	dfc00617 	ldw	ra,24(sp)
 400eb80:	dd400517 	ldw	r21,20(sp)
 400eb84:	dd000417 	ldw	r20,16(sp)
 400eb88:	dcc00317 	ldw	r19,12(sp)
 400eb8c:	dc800217 	ldw	r18,8(sp)
 400eb90:	dc400117 	ldw	r17,4(sp)
 400eb94:	dc000017 	ldw	r16,0(sp)
 400eb98:	dec00704 	addi	sp,sp,28
 400eb9c:	f800283a 	ret
 400eba0:	21400017 	ldw	r5,0(r4)
 400eba4:	18c00104 	addi	r3,r3,4
 400eba8:	21000104 	addi	r4,r4,4
 400ebac:	197fff15 	stw	r5,-4(r3)
 400ebb0:	223ffb36 	bltu	r4,r8,400eba0 <__alt_data_end+0xfc00eba0>
 400ebb4:	003fe606 	br	400eb50 <__alt_data_end+0xfc00eb50>
 400ebb8:	9c000084 	addi	r16,r19,2
 400ebbc:	003fe406 	br	400eb50 <__alt_data_end+0xfc00eb50>

0400ebc0 <__mcmp>:
 400ebc0:	20800417 	ldw	r2,16(r4)
 400ebc4:	28c00417 	ldw	r3,16(r5)
 400ebc8:	10c5c83a 	sub	r2,r2,r3
 400ebcc:	1000111e 	bne	r2,zero,400ec14 <__mcmp+0x54>
 400ebd0:	18c7883a 	add	r3,r3,r3
 400ebd4:	18c7883a 	add	r3,r3,r3
 400ebd8:	21000504 	addi	r4,r4,20
 400ebdc:	29400504 	addi	r5,r5,20
 400ebe0:	20c5883a 	add	r2,r4,r3
 400ebe4:	28cb883a 	add	r5,r5,r3
 400ebe8:	00000106 	br	400ebf0 <__mcmp+0x30>
 400ebec:	20800a2e 	bgeu	r4,r2,400ec18 <__mcmp+0x58>
 400ebf0:	10bfff04 	addi	r2,r2,-4
 400ebf4:	297fff04 	addi	r5,r5,-4
 400ebf8:	11800017 	ldw	r6,0(r2)
 400ebfc:	28c00017 	ldw	r3,0(r5)
 400ec00:	30fffa26 	beq	r6,r3,400ebec <__alt_data_end+0xfc00ebec>
 400ec04:	30c00236 	bltu	r6,r3,400ec10 <__mcmp+0x50>
 400ec08:	00800044 	movi	r2,1
 400ec0c:	f800283a 	ret
 400ec10:	00bfffc4 	movi	r2,-1
 400ec14:	f800283a 	ret
 400ec18:	0005883a 	mov	r2,zero
 400ec1c:	f800283a 	ret

0400ec20 <__mdiff>:
 400ec20:	28c00417 	ldw	r3,16(r5)
 400ec24:	30800417 	ldw	r2,16(r6)
 400ec28:	defffa04 	addi	sp,sp,-24
 400ec2c:	dcc00315 	stw	r19,12(sp)
 400ec30:	dc800215 	stw	r18,8(sp)
 400ec34:	dfc00515 	stw	ra,20(sp)
 400ec38:	dd000415 	stw	r20,16(sp)
 400ec3c:	dc400115 	stw	r17,4(sp)
 400ec40:	dc000015 	stw	r16,0(sp)
 400ec44:	1887c83a 	sub	r3,r3,r2
 400ec48:	2825883a 	mov	r18,r5
 400ec4c:	3027883a 	mov	r19,r6
 400ec50:	1800141e 	bne	r3,zero,400eca4 <__mdiff+0x84>
 400ec54:	1085883a 	add	r2,r2,r2
 400ec58:	1085883a 	add	r2,r2,r2
 400ec5c:	2a000504 	addi	r8,r5,20
 400ec60:	34000504 	addi	r16,r6,20
 400ec64:	4087883a 	add	r3,r8,r2
 400ec68:	8085883a 	add	r2,r16,r2
 400ec6c:	00000106 	br	400ec74 <__mdiff+0x54>
 400ec70:	40c0592e 	bgeu	r8,r3,400edd8 <__mdiff+0x1b8>
 400ec74:	18ffff04 	addi	r3,r3,-4
 400ec78:	10bfff04 	addi	r2,r2,-4
 400ec7c:	19c00017 	ldw	r7,0(r3)
 400ec80:	11400017 	ldw	r5,0(r2)
 400ec84:	397ffa26 	beq	r7,r5,400ec70 <__alt_data_end+0xfc00ec70>
 400ec88:	3940592e 	bgeu	r7,r5,400edf0 <__mdiff+0x1d0>
 400ec8c:	9005883a 	mov	r2,r18
 400ec90:	4023883a 	mov	r17,r8
 400ec94:	9825883a 	mov	r18,r19
 400ec98:	05000044 	movi	r20,1
 400ec9c:	1027883a 	mov	r19,r2
 400eca0:	00000406 	br	400ecb4 <__mdiff+0x94>
 400eca4:	18005616 	blt	r3,zero,400ee00 <__mdiff+0x1e0>
 400eca8:	34400504 	addi	r17,r6,20
 400ecac:	2c000504 	addi	r16,r5,20
 400ecb0:	0029883a 	mov	r20,zero
 400ecb4:	91400117 	ldw	r5,4(r18)
 400ecb8:	400e23c0 	call	400e23c <_Balloc>
 400ecbc:	92400417 	ldw	r9,16(r18)
 400ecc0:	9b000417 	ldw	r12,16(r19)
 400ecc4:	12c00504 	addi	r11,r2,20
 400ecc8:	4a51883a 	add	r8,r9,r9
 400eccc:	6319883a 	add	r12,r12,r12
 400ecd0:	4211883a 	add	r8,r8,r8
 400ecd4:	6319883a 	add	r12,r12,r12
 400ecd8:	15000315 	stw	r20,12(r2)
 400ecdc:	8211883a 	add	r8,r16,r8
 400ece0:	8b19883a 	add	r12,r17,r12
 400ece4:	0007883a 	mov	r3,zero
 400ece8:	81400017 	ldw	r5,0(r16)
 400ecec:	89c00017 	ldw	r7,0(r17)
 400ecf0:	59800104 	addi	r6,r11,4
 400ecf4:	293fffcc 	andi	r4,r5,65535
 400ecf8:	20c7883a 	add	r3,r4,r3
 400ecfc:	393fffcc 	andi	r4,r7,65535
 400ed00:	1909c83a 	sub	r4,r3,r4
 400ed04:	280ad43a 	srli	r5,r5,16
 400ed08:	380ed43a 	srli	r7,r7,16
 400ed0c:	2007d43a 	srai	r3,r4,16
 400ed10:	213fffcc 	andi	r4,r4,65535
 400ed14:	29cbc83a 	sub	r5,r5,r7
 400ed18:	28c7883a 	add	r3,r5,r3
 400ed1c:	180a943a 	slli	r5,r3,16
 400ed20:	8c400104 	addi	r17,r17,4
 400ed24:	84000104 	addi	r16,r16,4
 400ed28:	2908b03a 	or	r4,r5,r4
 400ed2c:	59000015 	stw	r4,0(r11)
 400ed30:	1807d43a 	srai	r3,r3,16
 400ed34:	3015883a 	mov	r10,r6
 400ed38:	3017883a 	mov	r11,r6
 400ed3c:	8b3fea36 	bltu	r17,r12,400ece8 <__alt_data_end+0xfc00ece8>
 400ed40:	8200162e 	bgeu	r16,r8,400ed9c <__mdiff+0x17c>
 400ed44:	8017883a 	mov	r11,r16
 400ed48:	59400017 	ldw	r5,0(r11)
 400ed4c:	31800104 	addi	r6,r6,4
 400ed50:	5ac00104 	addi	r11,r11,4
 400ed54:	293fffcc 	andi	r4,r5,65535
 400ed58:	20c7883a 	add	r3,r4,r3
 400ed5c:	280ed43a 	srli	r7,r5,16
 400ed60:	180bd43a 	srai	r5,r3,16
 400ed64:	193fffcc 	andi	r4,r3,65535
 400ed68:	3947883a 	add	r3,r7,r5
 400ed6c:	180a943a 	slli	r5,r3,16
 400ed70:	1807d43a 	srai	r3,r3,16
 400ed74:	2908b03a 	or	r4,r5,r4
 400ed78:	313fff15 	stw	r4,-4(r6)
 400ed7c:	5a3ff236 	bltu	r11,r8,400ed48 <__alt_data_end+0xfc00ed48>
 400ed80:	0406303a 	nor	r3,zero,r16
 400ed84:	1a07883a 	add	r3,r3,r8
 400ed88:	1806d0ba 	srli	r3,r3,2
 400ed8c:	18c00044 	addi	r3,r3,1
 400ed90:	18c7883a 	add	r3,r3,r3
 400ed94:	18c7883a 	add	r3,r3,r3
 400ed98:	50d5883a 	add	r10,r10,r3
 400ed9c:	50ffff04 	addi	r3,r10,-4
 400eda0:	2000041e 	bne	r4,zero,400edb4 <__mdiff+0x194>
 400eda4:	18ffff04 	addi	r3,r3,-4
 400eda8:	19000017 	ldw	r4,0(r3)
 400edac:	4a7fffc4 	addi	r9,r9,-1
 400edb0:	203ffc26 	beq	r4,zero,400eda4 <__alt_data_end+0xfc00eda4>
 400edb4:	12400415 	stw	r9,16(r2)
 400edb8:	dfc00517 	ldw	ra,20(sp)
 400edbc:	dd000417 	ldw	r20,16(sp)
 400edc0:	dcc00317 	ldw	r19,12(sp)
 400edc4:	dc800217 	ldw	r18,8(sp)
 400edc8:	dc400117 	ldw	r17,4(sp)
 400edcc:	dc000017 	ldw	r16,0(sp)
 400edd0:	dec00604 	addi	sp,sp,24
 400edd4:	f800283a 	ret
 400edd8:	000b883a 	mov	r5,zero
 400eddc:	400e23c0 	call	400e23c <_Balloc>
 400ede0:	00c00044 	movi	r3,1
 400ede4:	10c00415 	stw	r3,16(r2)
 400ede8:	10000515 	stw	zero,20(r2)
 400edec:	003ff206 	br	400edb8 <__alt_data_end+0xfc00edb8>
 400edf0:	8023883a 	mov	r17,r16
 400edf4:	0029883a 	mov	r20,zero
 400edf8:	4021883a 	mov	r16,r8
 400edfc:	003fad06 	br	400ecb4 <__alt_data_end+0xfc00ecb4>
 400ee00:	9005883a 	mov	r2,r18
 400ee04:	94400504 	addi	r17,r18,20
 400ee08:	9c000504 	addi	r16,r19,20
 400ee0c:	9825883a 	mov	r18,r19
 400ee10:	05000044 	movi	r20,1
 400ee14:	1027883a 	mov	r19,r2
 400ee18:	003fa606 	br	400ecb4 <__alt_data_end+0xfc00ecb4>

0400ee1c <__ulp>:
 400ee1c:	295ffc2c 	andhi	r5,r5,32752
 400ee20:	00bf3034 	movhi	r2,64704
 400ee24:	2887883a 	add	r3,r5,r2
 400ee28:	00c0020e 	bge	zero,r3,400ee34 <__ulp+0x18>
 400ee2c:	0005883a 	mov	r2,zero
 400ee30:	f800283a 	ret
 400ee34:	00c7c83a 	sub	r3,zero,r3
 400ee38:	1807d53a 	srai	r3,r3,20
 400ee3c:	008004c4 	movi	r2,19
 400ee40:	10c00b0e 	bge	r2,r3,400ee70 <__ulp+0x54>
 400ee44:	18bffb04 	addi	r2,r3,-20
 400ee48:	01000784 	movi	r4,30
 400ee4c:	0007883a 	mov	r3,zero
 400ee50:	20800516 	blt	r4,r2,400ee68 <__ulp+0x4c>
 400ee54:	010007c4 	movi	r4,31
 400ee58:	2089c83a 	sub	r4,r4,r2
 400ee5c:	00800044 	movi	r2,1
 400ee60:	1104983a 	sll	r2,r2,r4
 400ee64:	f800283a 	ret
 400ee68:	00800044 	movi	r2,1
 400ee6c:	f800283a 	ret
 400ee70:	01400234 	movhi	r5,8
 400ee74:	28c7d83a 	sra	r3,r5,r3
 400ee78:	0005883a 	mov	r2,zero
 400ee7c:	f800283a 	ret

0400ee80 <__b2d>:
 400ee80:	defffa04 	addi	sp,sp,-24
 400ee84:	dc000015 	stw	r16,0(sp)
 400ee88:	24000417 	ldw	r16,16(r4)
 400ee8c:	dc400115 	stw	r17,4(sp)
 400ee90:	24400504 	addi	r17,r4,20
 400ee94:	8421883a 	add	r16,r16,r16
 400ee98:	8421883a 	add	r16,r16,r16
 400ee9c:	8c21883a 	add	r16,r17,r16
 400eea0:	dc800215 	stw	r18,8(sp)
 400eea4:	84bfff17 	ldw	r18,-4(r16)
 400eea8:	dd000415 	stw	r20,16(sp)
 400eeac:	dcc00315 	stw	r19,12(sp)
 400eeb0:	9009883a 	mov	r4,r18
 400eeb4:	2829883a 	mov	r20,r5
 400eeb8:	dfc00515 	stw	ra,20(sp)
 400eebc:	400e5580 	call	400e558 <__hi0bits>
 400eec0:	00c00804 	movi	r3,32
 400eec4:	1889c83a 	sub	r4,r3,r2
 400eec8:	a1000015 	stw	r4,0(r20)
 400eecc:	01000284 	movi	r4,10
 400eed0:	84ffff04 	addi	r19,r16,-4
 400eed4:	20801216 	blt	r4,r2,400ef20 <__b2d+0xa0>
 400eed8:	018002c4 	movi	r6,11
 400eedc:	308dc83a 	sub	r6,r6,r2
 400eee0:	9186d83a 	srl	r3,r18,r6
 400eee4:	18cffc34 	orhi	r3,r3,16368
 400eee8:	8cc0212e 	bgeu	r17,r19,400ef70 <__b2d+0xf0>
 400eeec:	813ffe17 	ldw	r4,-8(r16)
 400eef0:	218cd83a 	srl	r6,r4,r6
 400eef4:	10800544 	addi	r2,r2,21
 400eef8:	9084983a 	sll	r2,r18,r2
 400eefc:	1184b03a 	or	r2,r2,r6
 400ef00:	dfc00517 	ldw	ra,20(sp)
 400ef04:	dd000417 	ldw	r20,16(sp)
 400ef08:	dcc00317 	ldw	r19,12(sp)
 400ef0c:	dc800217 	ldw	r18,8(sp)
 400ef10:	dc400117 	ldw	r17,4(sp)
 400ef14:	dc000017 	ldw	r16,0(sp)
 400ef18:	dec00604 	addi	sp,sp,24
 400ef1c:	f800283a 	ret
 400ef20:	8cc00f2e 	bgeu	r17,r19,400ef60 <__b2d+0xe0>
 400ef24:	117ffd44 	addi	r5,r2,-11
 400ef28:	80bffe17 	ldw	r2,-8(r16)
 400ef2c:	28000e26 	beq	r5,zero,400ef68 <__b2d+0xe8>
 400ef30:	1949c83a 	sub	r4,r3,r5
 400ef34:	9164983a 	sll	r18,r18,r5
 400ef38:	1106d83a 	srl	r3,r2,r4
 400ef3c:	81bffe04 	addi	r6,r16,-8
 400ef40:	948ffc34 	orhi	r18,r18,16368
 400ef44:	90c6b03a 	or	r3,r18,r3
 400ef48:	89800e2e 	bgeu	r17,r6,400ef84 <__b2d+0x104>
 400ef4c:	81bffd17 	ldw	r6,-12(r16)
 400ef50:	1144983a 	sll	r2,r2,r5
 400ef54:	310ad83a 	srl	r5,r6,r4
 400ef58:	2884b03a 	or	r2,r5,r2
 400ef5c:	003fe806 	br	400ef00 <__alt_data_end+0xfc00ef00>
 400ef60:	10bffd44 	addi	r2,r2,-11
 400ef64:	1000041e 	bne	r2,zero,400ef78 <__b2d+0xf8>
 400ef68:	90cffc34 	orhi	r3,r18,16368
 400ef6c:	003fe406 	br	400ef00 <__alt_data_end+0xfc00ef00>
 400ef70:	000d883a 	mov	r6,zero
 400ef74:	003fdf06 	br	400eef4 <__alt_data_end+0xfc00eef4>
 400ef78:	90a4983a 	sll	r18,r18,r2
 400ef7c:	0005883a 	mov	r2,zero
 400ef80:	003ff906 	br	400ef68 <__alt_data_end+0xfc00ef68>
 400ef84:	1144983a 	sll	r2,r2,r5
 400ef88:	003fdd06 	br	400ef00 <__alt_data_end+0xfc00ef00>

0400ef8c <__d2b>:
 400ef8c:	defff804 	addi	sp,sp,-32
 400ef90:	dc000215 	stw	r16,8(sp)
 400ef94:	3021883a 	mov	r16,r6
 400ef98:	dc400315 	stw	r17,12(sp)
 400ef9c:	8022907a 	slli	r17,r16,1
 400efa0:	dd000615 	stw	r20,24(sp)
 400efa4:	2829883a 	mov	r20,r5
 400efa8:	01400044 	movi	r5,1
 400efac:	dcc00515 	stw	r19,20(sp)
 400efb0:	dc800415 	stw	r18,16(sp)
 400efb4:	dfc00715 	stw	ra,28(sp)
 400efb8:	3825883a 	mov	r18,r7
 400efbc:	8822d57a 	srli	r17,r17,21
 400efc0:	400e23c0 	call	400e23c <_Balloc>
 400efc4:	1027883a 	mov	r19,r2
 400efc8:	00800434 	movhi	r2,16
 400efcc:	10bfffc4 	addi	r2,r2,-1
 400efd0:	808c703a 	and	r6,r16,r2
 400efd4:	88000126 	beq	r17,zero,400efdc <__d2b+0x50>
 400efd8:	31800434 	orhi	r6,r6,16
 400efdc:	d9800015 	stw	r6,0(sp)
 400efe0:	a0002426 	beq	r20,zero,400f074 <__d2b+0xe8>
 400efe4:	d9000104 	addi	r4,sp,4
 400efe8:	dd000115 	stw	r20,4(sp)
 400efec:	400e5c00 	call	400e5c0 <__lo0bits>
 400eff0:	d8c00017 	ldw	r3,0(sp)
 400eff4:	10002f1e 	bne	r2,zero,400f0b4 <__d2b+0x128>
 400eff8:	d9000117 	ldw	r4,4(sp)
 400effc:	99000515 	stw	r4,20(r19)
 400f000:	1821003a 	cmpeq	r16,r3,zero
 400f004:	01000084 	movi	r4,2
 400f008:	2421c83a 	sub	r16,r4,r16
 400f00c:	98c00615 	stw	r3,24(r19)
 400f010:	9c000415 	stw	r16,16(r19)
 400f014:	88001f1e 	bne	r17,zero,400f094 <__d2b+0x108>
 400f018:	10bef384 	addi	r2,r2,-1074
 400f01c:	90800015 	stw	r2,0(r18)
 400f020:	00900034 	movhi	r2,16384
 400f024:	10bfffc4 	addi	r2,r2,-1
 400f028:	8085883a 	add	r2,r16,r2
 400f02c:	1085883a 	add	r2,r2,r2
 400f030:	1085883a 	add	r2,r2,r2
 400f034:	9885883a 	add	r2,r19,r2
 400f038:	11000517 	ldw	r4,20(r2)
 400f03c:	8020917a 	slli	r16,r16,5
 400f040:	400e5580 	call	400e558 <__hi0bits>
 400f044:	d8c00817 	ldw	r3,32(sp)
 400f048:	8085c83a 	sub	r2,r16,r2
 400f04c:	18800015 	stw	r2,0(r3)
 400f050:	9805883a 	mov	r2,r19
 400f054:	dfc00717 	ldw	ra,28(sp)
 400f058:	dd000617 	ldw	r20,24(sp)
 400f05c:	dcc00517 	ldw	r19,20(sp)
 400f060:	dc800417 	ldw	r18,16(sp)
 400f064:	dc400317 	ldw	r17,12(sp)
 400f068:	dc000217 	ldw	r16,8(sp)
 400f06c:	dec00804 	addi	sp,sp,32
 400f070:	f800283a 	ret
 400f074:	d809883a 	mov	r4,sp
 400f078:	400e5c00 	call	400e5c0 <__lo0bits>
 400f07c:	d8c00017 	ldw	r3,0(sp)
 400f080:	04000044 	movi	r16,1
 400f084:	9c000415 	stw	r16,16(r19)
 400f088:	98c00515 	stw	r3,20(r19)
 400f08c:	10800804 	addi	r2,r2,32
 400f090:	883fe126 	beq	r17,zero,400f018 <__alt_data_end+0xfc00f018>
 400f094:	00c00d44 	movi	r3,53
 400f098:	8c7ef344 	addi	r17,r17,-1075
 400f09c:	88a3883a 	add	r17,r17,r2
 400f0a0:	1885c83a 	sub	r2,r3,r2
 400f0a4:	d8c00817 	ldw	r3,32(sp)
 400f0a8:	94400015 	stw	r17,0(r18)
 400f0ac:	18800015 	stw	r2,0(r3)
 400f0b0:	003fe706 	br	400f050 <__alt_data_end+0xfc00f050>
 400f0b4:	01000804 	movi	r4,32
 400f0b8:	2089c83a 	sub	r4,r4,r2
 400f0bc:	1908983a 	sll	r4,r3,r4
 400f0c0:	d9400117 	ldw	r5,4(sp)
 400f0c4:	1886d83a 	srl	r3,r3,r2
 400f0c8:	2148b03a 	or	r4,r4,r5
 400f0cc:	99000515 	stw	r4,20(r19)
 400f0d0:	d8c00015 	stw	r3,0(sp)
 400f0d4:	003fca06 	br	400f000 <__alt_data_end+0xfc00f000>

0400f0d8 <__ratio>:
 400f0d8:	defff904 	addi	sp,sp,-28
 400f0dc:	dc400315 	stw	r17,12(sp)
 400f0e0:	2823883a 	mov	r17,r5
 400f0e4:	d9400104 	addi	r5,sp,4
 400f0e8:	dfc00615 	stw	ra,24(sp)
 400f0ec:	dcc00515 	stw	r19,20(sp)
 400f0f0:	dc800415 	stw	r18,16(sp)
 400f0f4:	2027883a 	mov	r19,r4
 400f0f8:	dc000215 	stw	r16,8(sp)
 400f0fc:	400ee800 	call	400ee80 <__b2d>
 400f100:	d80b883a 	mov	r5,sp
 400f104:	8809883a 	mov	r4,r17
 400f108:	1025883a 	mov	r18,r2
 400f10c:	1821883a 	mov	r16,r3
 400f110:	400ee800 	call	400ee80 <__b2d>
 400f114:	8a000417 	ldw	r8,16(r17)
 400f118:	99000417 	ldw	r4,16(r19)
 400f11c:	d9400117 	ldw	r5,4(sp)
 400f120:	2209c83a 	sub	r4,r4,r8
 400f124:	2010917a 	slli	r8,r4,5
 400f128:	d9000017 	ldw	r4,0(sp)
 400f12c:	2909c83a 	sub	r4,r5,r4
 400f130:	4109883a 	add	r4,r8,r4
 400f134:	01000e0e 	bge	zero,r4,400f170 <__ratio+0x98>
 400f138:	2008953a 	slli	r4,r4,20
 400f13c:	2421883a 	add	r16,r4,r16
 400f140:	100d883a 	mov	r6,r2
 400f144:	180f883a 	mov	r7,r3
 400f148:	9009883a 	mov	r4,r18
 400f14c:	800b883a 	mov	r5,r16
 400f150:	40121f80 	call	40121f8 <__divdf3>
 400f154:	dfc00617 	ldw	ra,24(sp)
 400f158:	dcc00517 	ldw	r19,20(sp)
 400f15c:	dc800417 	ldw	r18,16(sp)
 400f160:	dc400317 	ldw	r17,12(sp)
 400f164:	dc000217 	ldw	r16,8(sp)
 400f168:	dec00704 	addi	sp,sp,28
 400f16c:	f800283a 	ret
 400f170:	2008953a 	slli	r4,r4,20
 400f174:	1907c83a 	sub	r3,r3,r4
 400f178:	003ff106 	br	400f140 <__alt_data_end+0xfc00f140>

0400f17c <_mprec_log10>:
 400f17c:	defffe04 	addi	sp,sp,-8
 400f180:	dc000015 	stw	r16,0(sp)
 400f184:	dfc00115 	stw	ra,4(sp)
 400f188:	008005c4 	movi	r2,23
 400f18c:	2021883a 	mov	r16,r4
 400f190:	11000d0e 	bge	r2,r4,400f1c8 <_mprec_log10+0x4c>
 400f194:	0005883a 	mov	r2,zero
 400f198:	00cffc34 	movhi	r3,16368
 400f19c:	843fffc4 	addi	r16,r16,-1
 400f1a0:	000d883a 	mov	r6,zero
 400f1a4:	01d00934 	movhi	r7,16420
 400f1a8:	1009883a 	mov	r4,r2
 400f1ac:	180b883a 	mov	r5,r3
 400f1b0:	4012e200 	call	4012e20 <__muldf3>
 400f1b4:	803ff91e 	bne	r16,zero,400f19c <__alt_data_end+0xfc00f19c>
 400f1b8:	dfc00117 	ldw	ra,4(sp)
 400f1bc:	dc000017 	ldw	r16,0(sp)
 400f1c0:	dec00204 	addi	sp,sp,8
 400f1c4:	f800283a 	ret
 400f1c8:	202090fa 	slli	r16,r4,3
 400f1cc:	008100b4 	movhi	r2,1026
 400f1d0:	10a13f04 	addi	r2,r2,-31492
 400f1d4:	1421883a 	add	r16,r2,r16
 400f1d8:	80800017 	ldw	r2,0(r16)
 400f1dc:	80c00117 	ldw	r3,4(r16)
 400f1e0:	dfc00117 	ldw	ra,4(sp)
 400f1e4:	dc000017 	ldw	r16,0(sp)
 400f1e8:	dec00204 	addi	sp,sp,8
 400f1ec:	f800283a 	ret

0400f1f0 <__copybits>:
 400f1f0:	297fffc4 	addi	r5,r5,-1
 400f1f4:	280fd17a 	srai	r7,r5,5
 400f1f8:	30c00417 	ldw	r3,16(r6)
 400f1fc:	30800504 	addi	r2,r6,20
 400f200:	39c00044 	addi	r7,r7,1
 400f204:	18c7883a 	add	r3,r3,r3
 400f208:	39cf883a 	add	r7,r7,r7
 400f20c:	18c7883a 	add	r3,r3,r3
 400f210:	39cf883a 	add	r7,r7,r7
 400f214:	10c7883a 	add	r3,r2,r3
 400f218:	21cf883a 	add	r7,r4,r7
 400f21c:	10c00d2e 	bgeu	r2,r3,400f254 <__copybits+0x64>
 400f220:	200b883a 	mov	r5,r4
 400f224:	12000017 	ldw	r8,0(r2)
 400f228:	29400104 	addi	r5,r5,4
 400f22c:	10800104 	addi	r2,r2,4
 400f230:	2a3fff15 	stw	r8,-4(r5)
 400f234:	10fffb36 	bltu	r2,r3,400f224 <__alt_data_end+0xfc00f224>
 400f238:	1985c83a 	sub	r2,r3,r6
 400f23c:	10bffac4 	addi	r2,r2,-21
 400f240:	1004d0ba 	srli	r2,r2,2
 400f244:	10800044 	addi	r2,r2,1
 400f248:	1085883a 	add	r2,r2,r2
 400f24c:	1085883a 	add	r2,r2,r2
 400f250:	2089883a 	add	r4,r4,r2
 400f254:	21c0032e 	bgeu	r4,r7,400f264 <__copybits+0x74>
 400f258:	20000015 	stw	zero,0(r4)
 400f25c:	21000104 	addi	r4,r4,4
 400f260:	21fffd36 	bltu	r4,r7,400f258 <__alt_data_end+0xfc00f258>
 400f264:	f800283a 	ret

0400f268 <__any_on>:
 400f268:	20c00417 	ldw	r3,16(r4)
 400f26c:	2805d17a 	srai	r2,r5,5
 400f270:	21000504 	addi	r4,r4,20
 400f274:	18800d0e 	bge	r3,r2,400f2ac <__any_on+0x44>
 400f278:	18c7883a 	add	r3,r3,r3
 400f27c:	18c7883a 	add	r3,r3,r3
 400f280:	20c7883a 	add	r3,r4,r3
 400f284:	20c0192e 	bgeu	r4,r3,400f2ec <__any_on+0x84>
 400f288:	18bfff17 	ldw	r2,-4(r3)
 400f28c:	18ffff04 	addi	r3,r3,-4
 400f290:	1000041e 	bne	r2,zero,400f2a4 <__any_on+0x3c>
 400f294:	20c0142e 	bgeu	r4,r3,400f2e8 <__any_on+0x80>
 400f298:	18ffff04 	addi	r3,r3,-4
 400f29c:	19400017 	ldw	r5,0(r3)
 400f2a0:	283ffc26 	beq	r5,zero,400f294 <__alt_data_end+0xfc00f294>
 400f2a4:	00800044 	movi	r2,1
 400f2a8:	f800283a 	ret
 400f2ac:	10c00a0e 	bge	r2,r3,400f2d8 <__any_on+0x70>
 400f2b0:	1085883a 	add	r2,r2,r2
 400f2b4:	1085883a 	add	r2,r2,r2
 400f2b8:	294007cc 	andi	r5,r5,31
 400f2bc:	2087883a 	add	r3,r4,r2
 400f2c0:	283ff026 	beq	r5,zero,400f284 <__alt_data_end+0xfc00f284>
 400f2c4:	19800017 	ldw	r6,0(r3)
 400f2c8:	3144d83a 	srl	r2,r6,r5
 400f2cc:	114a983a 	sll	r5,r2,r5
 400f2d0:	317ff41e 	bne	r6,r5,400f2a4 <__alt_data_end+0xfc00f2a4>
 400f2d4:	003feb06 	br	400f284 <__alt_data_end+0xfc00f284>
 400f2d8:	1085883a 	add	r2,r2,r2
 400f2dc:	1085883a 	add	r2,r2,r2
 400f2e0:	2087883a 	add	r3,r4,r2
 400f2e4:	003fe706 	br	400f284 <__alt_data_end+0xfc00f284>
 400f2e8:	f800283a 	ret
 400f2ec:	0005883a 	mov	r2,zero
 400f2f0:	f800283a 	ret

0400f2f4 <strncmp>:
 400f2f4:	30003126 	beq	r6,zero,400f3bc <strncmp+0xc8>
 400f2f8:	2144b03a 	or	r2,r4,r5
 400f2fc:	108000cc 	andi	r2,r2,3
 400f300:	10001e1e 	bne	r2,zero,400f37c <strncmp+0x88>
 400f304:	024000c4 	movi	r9,3
 400f308:	49801c2e 	bgeu	r9,r6,400f37c <strncmp+0x88>
 400f30c:	20800017 	ldw	r2,0(r4)
 400f310:	28c00017 	ldw	r3,0(r5)
 400f314:	10c0191e 	bne	r2,r3,400f37c <strncmp+0x88>
 400f318:	31bfff04 	addi	r6,r6,-4
 400f31c:	30002726 	beq	r6,zero,400f3bc <strncmp+0xc8>
 400f320:	02ffbff4 	movhi	r11,65279
 400f324:	5affbfc4 	addi	r11,r11,-257
 400f328:	0086303a 	nor	r3,zero,r2
 400f32c:	02a02074 	movhi	r10,32897
 400f330:	12c5883a 	add	r2,r2,r11
 400f334:	52a02004 	addi	r10,r10,-32640
 400f338:	10c4703a 	and	r2,r2,r3
 400f33c:	1284703a 	and	r2,r2,r10
 400f340:	10000b26 	beq	r2,zero,400f370 <strncmp+0x7c>
 400f344:	00001d06 	br	400f3bc <strncmp+0xc8>
 400f348:	20c00017 	ldw	r3,0(r4)
 400f34c:	29c00017 	ldw	r7,0(r5)
 400f350:	1ad1883a 	add	r8,r3,r11
 400f354:	00c4303a 	nor	r2,zero,r3
 400f358:	4084703a 	and	r2,r8,r2
 400f35c:	1284703a 	and	r2,r2,r10
 400f360:	19c0061e 	bne	r3,r7,400f37c <strncmp+0x88>
 400f364:	31bfff04 	addi	r6,r6,-4
 400f368:	30001426 	beq	r6,zero,400f3bc <strncmp+0xc8>
 400f36c:	1000131e 	bne	r2,zero,400f3bc <strncmp+0xc8>
 400f370:	21000104 	addi	r4,r4,4
 400f374:	29400104 	addi	r5,r5,4
 400f378:	49bff336 	bltu	r9,r6,400f348 <__alt_data_end+0xfc00f348>
 400f37c:	28800007 	ldb	r2,0(r5)
 400f380:	20c00007 	ldb	r3,0(r4)
 400f384:	31bfffc4 	addi	r6,r6,-1
 400f388:	10c0081e 	bne	r2,r3,400f3ac <strncmp+0xb8>
 400f38c:	30000b26 	beq	r6,zero,400f3bc <strncmp+0xc8>
 400f390:	10000a26 	beq	r2,zero,400f3bc <strncmp+0xc8>
 400f394:	21000044 	addi	r4,r4,1
 400f398:	29400044 	addi	r5,r5,1
 400f39c:	20800007 	ldb	r2,0(r4)
 400f3a0:	28c00007 	ldb	r3,0(r5)
 400f3a4:	31bfffc4 	addi	r6,r6,-1
 400f3a8:	10fff826 	beq	r2,r3,400f38c <__alt_data_end+0xfc00f38c>
 400f3ac:	20800003 	ldbu	r2,0(r4)
 400f3b0:	28c00003 	ldbu	r3,0(r5)
 400f3b4:	10c5c83a 	sub	r2,r2,r3
 400f3b8:	f800283a 	ret
 400f3bc:	0005883a 	mov	r2,zero
 400f3c0:	f800283a 	ret

0400f3c4 <__ssprint_r>:
 400f3c4:	30800217 	ldw	r2,8(r6)
 400f3c8:	defff604 	addi	sp,sp,-40
 400f3cc:	dc800215 	stw	r18,8(sp)
 400f3d0:	dfc00915 	stw	ra,36(sp)
 400f3d4:	df000815 	stw	fp,32(sp)
 400f3d8:	ddc00715 	stw	r23,28(sp)
 400f3dc:	dd800615 	stw	r22,24(sp)
 400f3e0:	dd400515 	stw	r21,20(sp)
 400f3e4:	dd000415 	stw	r20,16(sp)
 400f3e8:	dcc00315 	stw	r19,12(sp)
 400f3ec:	dc400115 	stw	r17,4(sp)
 400f3f0:	dc000015 	stw	r16,0(sp)
 400f3f4:	3025883a 	mov	r18,r6
 400f3f8:	10005826 	beq	r2,zero,400f55c <__ssprint_r+0x198>
 400f3fc:	2027883a 	mov	r19,r4
 400f400:	35c00017 	ldw	r23,0(r6)
 400f404:	29000017 	ldw	r4,0(r5)
 400f408:	28800217 	ldw	r2,8(r5)
 400f40c:	2823883a 	mov	r17,r5
 400f410:	0039883a 	mov	fp,zero
 400f414:	0021883a 	mov	r16,zero
 400f418:	80003926 	beq	r16,zero,400f500 <__ssprint_r+0x13c>
 400f41c:	102b883a 	mov	r21,r2
 400f420:	102d883a 	mov	r22,r2
 400f424:	80803a36 	bltu	r16,r2,400f510 <__ssprint_r+0x14c>
 400f428:	88c0030b 	ldhu	r3,12(r17)
 400f42c:	1881200c 	andi	r2,r3,1152
 400f430:	10002626 	beq	r2,zero,400f4cc <__ssprint_r+0x108>
 400f434:	88800517 	ldw	r2,20(r17)
 400f438:	89400417 	ldw	r5,16(r17)
 400f43c:	81800044 	addi	r6,r16,1
 400f440:	108f883a 	add	r7,r2,r2
 400f444:	3885883a 	add	r2,r7,r2
 400f448:	100ed7fa 	srli	r7,r2,31
 400f44c:	216dc83a 	sub	r22,r4,r5
 400f450:	3589883a 	add	r4,r6,r22
 400f454:	3885883a 	add	r2,r7,r2
 400f458:	102bd07a 	srai	r21,r2,1
 400f45c:	a80d883a 	mov	r6,r21
 400f460:	a900022e 	bgeu	r21,r4,400f46c <__ssprint_r+0xa8>
 400f464:	202b883a 	mov	r21,r4
 400f468:	200d883a 	mov	r6,r4
 400f46c:	18c1000c 	andi	r3,r3,1024
 400f470:	18002a26 	beq	r3,zero,400f51c <__ssprint_r+0x158>
 400f474:	300b883a 	mov	r5,r6
 400f478:	9809883a 	mov	r4,r19
 400f47c:	40033980 	call	4003398 <_malloc_r>
 400f480:	1029883a 	mov	r20,r2
 400f484:	10002c26 	beq	r2,zero,400f538 <__ssprint_r+0x174>
 400f488:	89400417 	ldw	r5,16(r17)
 400f48c:	b00d883a 	mov	r6,r22
 400f490:	1009883a 	mov	r4,r2
 400f494:	4003ba40 	call	4003ba4 <memcpy>
 400f498:	8880030b 	ldhu	r2,12(r17)
 400f49c:	00fedfc4 	movi	r3,-1153
 400f4a0:	10c4703a 	and	r2,r2,r3
 400f4a4:	10802014 	ori	r2,r2,128
 400f4a8:	8880030d 	sth	r2,12(r17)
 400f4ac:	a589883a 	add	r4,r20,r22
 400f4b0:	adadc83a 	sub	r22,r21,r22
 400f4b4:	8d400515 	stw	r21,20(r17)
 400f4b8:	8d800215 	stw	r22,8(r17)
 400f4bc:	8d000415 	stw	r20,16(r17)
 400f4c0:	89000015 	stw	r4,0(r17)
 400f4c4:	802b883a 	mov	r21,r16
 400f4c8:	802d883a 	mov	r22,r16
 400f4cc:	b00d883a 	mov	r6,r22
 400f4d0:	e00b883a 	mov	r5,fp
 400f4d4:	4006d380 	call	4006d38 <memmove>
 400f4d8:	88800217 	ldw	r2,8(r17)
 400f4dc:	89000017 	ldw	r4,0(r17)
 400f4e0:	90c00217 	ldw	r3,8(r18)
 400f4e4:	1545c83a 	sub	r2,r2,r21
 400f4e8:	2589883a 	add	r4,r4,r22
 400f4ec:	88800215 	stw	r2,8(r17)
 400f4f0:	89000015 	stw	r4,0(r17)
 400f4f4:	1c21c83a 	sub	r16,r3,r16
 400f4f8:	94000215 	stw	r16,8(r18)
 400f4fc:	80001726 	beq	r16,zero,400f55c <__ssprint_r+0x198>
 400f500:	bf000017 	ldw	fp,0(r23)
 400f504:	bc000117 	ldw	r16,4(r23)
 400f508:	bdc00204 	addi	r23,r23,8
 400f50c:	003fc206 	br	400f418 <__alt_data_end+0xfc00f418>
 400f510:	802b883a 	mov	r21,r16
 400f514:	802d883a 	mov	r22,r16
 400f518:	003fec06 	br	400f4cc <__alt_data_end+0xfc00f4cc>
 400f51c:	9809883a 	mov	r4,r19
 400f520:	4006ef40 	call	4006ef4 <_realloc_r>
 400f524:	1029883a 	mov	r20,r2
 400f528:	103fe01e 	bne	r2,zero,400f4ac <__alt_data_end+0xfc00f4ac>
 400f52c:	89400417 	ldw	r5,16(r17)
 400f530:	9809883a 	mov	r4,r19
 400f534:	40026380 	call	4002638 <_free_r>
 400f538:	88c0030b 	ldhu	r3,12(r17)
 400f53c:	00800304 	movi	r2,12
 400f540:	98800015 	stw	r2,0(r19)
 400f544:	18c01014 	ori	r3,r3,64
 400f548:	88c0030d 	sth	r3,12(r17)
 400f54c:	00bfffc4 	movi	r2,-1
 400f550:	90000215 	stw	zero,8(r18)
 400f554:	90000115 	stw	zero,4(r18)
 400f558:	00000206 	br	400f564 <__ssprint_r+0x1a0>
 400f55c:	90000115 	stw	zero,4(r18)
 400f560:	0005883a 	mov	r2,zero
 400f564:	dfc00917 	ldw	ra,36(sp)
 400f568:	df000817 	ldw	fp,32(sp)
 400f56c:	ddc00717 	ldw	r23,28(sp)
 400f570:	dd800617 	ldw	r22,24(sp)
 400f574:	dd400517 	ldw	r21,20(sp)
 400f578:	dd000417 	ldw	r20,16(sp)
 400f57c:	dcc00317 	ldw	r19,12(sp)
 400f580:	dc800217 	ldw	r18,8(sp)
 400f584:	dc400117 	ldw	r17,4(sp)
 400f588:	dc000017 	ldw	r16,0(sp)
 400f58c:	dec00a04 	addi	sp,sp,40
 400f590:	f800283a 	ret

0400f594 <___svfiprintf_internal_r>:
 400f594:	2880030b 	ldhu	r2,12(r5)
 400f598:	deffc804 	addi	sp,sp,-224
 400f59c:	dcc03115 	stw	r19,196(sp)
 400f5a0:	dfc03715 	stw	ra,220(sp)
 400f5a4:	df003615 	stw	fp,216(sp)
 400f5a8:	ddc03515 	stw	r23,212(sp)
 400f5ac:	dd803415 	stw	r22,208(sp)
 400f5b0:	dd403315 	stw	r21,204(sp)
 400f5b4:	dd003215 	stw	r20,200(sp)
 400f5b8:	dc803015 	stw	r18,192(sp)
 400f5bc:	dc402f15 	stw	r17,188(sp)
 400f5c0:	dc002e15 	stw	r16,184(sp)
 400f5c4:	d9402315 	stw	r5,140(sp)
 400f5c8:	d9002715 	stw	r4,156(sp)
 400f5cc:	1080200c 	andi	r2,r2,128
 400f5d0:	d9c02415 	stw	r7,144(sp)
 400f5d4:	3027883a 	mov	r19,r6
 400f5d8:	10000226 	beq	r2,zero,400f5e4 <___svfiprintf_internal_r+0x50>
 400f5dc:	28800417 	ldw	r2,16(r5)
 400f5e0:	10046d26 	beq	r2,zero,4010798 <___svfiprintf_internal_r+0x1204>
 400f5e4:	d8801a04 	addi	r2,sp,104
 400f5e8:	d8c019c4 	addi	r3,sp,103
 400f5ec:	058100b4 	movhi	r22,1026
 400f5f0:	10c9c83a 	sub	r4,r2,r3
 400f5f4:	b5a17104 	addi	r22,r22,-31292
 400f5f8:	d8801e15 	stw	r2,120(sp)
 400f5fc:	d8c01f15 	stw	r3,124(sp)
 400f600:	dec01a15 	stw	sp,104(sp)
 400f604:	d8001c15 	stw	zero,112(sp)
 400f608:	d8001b15 	stw	zero,108(sp)
 400f60c:	d811883a 	mov	r8,sp
 400f610:	d8002915 	stw	zero,164(sp)
 400f614:	d8002615 	stw	zero,152(sp)
 400f618:	d9002c15 	stw	r4,176(sp)
 400f61c:	98800007 	ldb	r2,0(r19)
 400f620:	10031426 	beq	r2,zero,4010274 <___svfiprintf_internal_r+0xce0>
 400f624:	00c00944 	movi	r3,37
 400f628:	9825883a 	mov	r18,r19
 400f62c:	10c0021e 	bne	r2,r3,400f638 <___svfiprintf_internal_r+0xa4>
 400f630:	00001406 	br	400f684 <___svfiprintf_internal_r+0xf0>
 400f634:	10c00326 	beq	r2,r3,400f644 <___svfiprintf_internal_r+0xb0>
 400f638:	94800044 	addi	r18,r18,1
 400f63c:	90800007 	ldb	r2,0(r18)
 400f640:	103ffc1e 	bne	r2,zero,400f634 <__alt_data_end+0xfc00f634>
 400f644:	94e1c83a 	sub	r16,r18,r19
 400f648:	80000e26 	beq	r16,zero,400f684 <___svfiprintf_internal_r+0xf0>
 400f64c:	d8c01c17 	ldw	r3,112(sp)
 400f650:	d8801b17 	ldw	r2,108(sp)
 400f654:	44c00015 	stw	r19,0(r8)
 400f658:	1c07883a 	add	r3,r3,r16
 400f65c:	10800044 	addi	r2,r2,1
 400f660:	d8c01c15 	stw	r3,112(sp)
 400f664:	44000115 	stw	r16,4(r8)
 400f668:	d8801b15 	stw	r2,108(sp)
 400f66c:	00c001c4 	movi	r3,7
 400f670:	18835c16 	blt	r3,r2,40103e4 <___svfiprintf_internal_r+0xe50>
 400f674:	42000204 	addi	r8,r8,8
 400f678:	d9402617 	ldw	r5,152(sp)
 400f67c:	2c0b883a 	add	r5,r5,r16
 400f680:	d9402615 	stw	r5,152(sp)
 400f684:	90800007 	ldb	r2,0(r18)
 400f688:	1002fc26 	beq	r2,zero,401027c <___svfiprintf_internal_r+0xce8>
 400f68c:	0023883a 	mov	r17,zero
 400f690:	00bfffc4 	movi	r2,-1
 400f694:	0021883a 	mov	r16,zero
 400f698:	94c00044 	addi	r19,r18,1
 400f69c:	90c00047 	ldb	r3,1(r18)
 400f6a0:	dc402105 	stb	r17,132(sp)
 400f6a4:	d8001d85 	stb	zero,118(sp)
 400f6a8:	002b883a 	mov	r21,zero
 400f6ac:	d8802015 	stw	r2,128(sp)
 400f6b0:	d8002515 	stw	zero,148(sp)
 400f6b4:	04801604 	movi	r18,88
 400f6b8:	05000244 	movi	r20,9
 400f6bc:	402f883a 	mov	r23,r8
 400f6c0:	8023883a 	mov	r17,r16
 400f6c4:	9cc00044 	addi	r19,r19,1
 400f6c8:	18bff804 	addi	r2,r3,-32
 400f6cc:	9081fb36 	bltu	r18,r2,400febc <___svfiprintf_internal_r+0x928>
 400f6d0:	100490ba 	slli	r2,r2,2
 400f6d4:	01010074 	movhi	r4,1025
 400f6d8:	213dba04 	addi	r4,r4,-2328
 400f6dc:	1105883a 	add	r2,r2,r4
 400f6e0:	10800017 	ldw	r2,0(r2)
 400f6e4:	1000683a 	jmp	r2
 400f6e8:	0400f8e8 	cmpgeui	r16,zero,995
 400f6ec:	0400febc 	xorhi	r16,zero,1018
 400f6f0:	0400febc 	xorhi	r16,zero,1018
 400f6f4:	0400f8dc 	xori	r16,zero,995
 400f6f8:	0400febc 	xorhi	r16,zero,1018
 400f6fc:	0400febc 	xorhi	r16,zero,1018
 400f700:	0400febc 	xorhi	r16,zero,1018
 400f704:	0400febc 	xorhi	r16,zero,1018
 400f708:	0400febc 	xorhi	r16,zero,1018
 400f70c:	0400febc 	xorhi	r16,zero,1018
 400f710:	0400f84c 	andi	r16,zero,993
 400f714:	0400fa48 	cmpgei	r16,zero,1001
 400f718:	0400febc 	xorhi	r16,zero,1018
 400f71c:	0400f874 	movhi	r16,993
 400f720:	0400fef8 	rdprs	r16,zero,1019
 400f724:	0400febc 	xorhi	r16,zero,1018
 400f728:	0400feec 	andhi	r16,zero,1019
 400f72c:	0400fe80 	call	400fe8 <__alt_mem_sdram-0x3bff018>
 400f730:	0400fe80 	call	400fe8 <__alt_mem_sdram-0x3bff018>
 400f734:	0400fe80 	call	400fe8 <__alt_mem_sdram-0x3bff018>
 400f738:	0400fe80 	call	400fe8 <__alt_mem_sdram-0x3bff018>
 400f73c:	0400fe80 	call	400fe8 <__alt_mem_sdram-0x3bff018>
 400f740:	0400fe80 	call	400fe8 <__alt_mem_sdram-0x3bff018>
 400f744:	0400fe80 	call	400fe8 <__alt_mem_sdram-0x3bff018>
 400f748:	0400fe80 	call	400fe8 <__alt_mem_sdram-0x3bff018>
 400f74c:	0400fe80 	call	400fe8 <__alt_mem_sdram-0x3bff018>
 400f750:	0400febc 	xorhi	r16,zero,1018
 400f754:	0400febc 	xorhi	r16,zero,1018
 400f758:	0400febc 	xorhi	r16,zero,1018
 400f75c:	0400febc 	xorhi	r16,zero,1018
 400f760:	0400febc 	xorhi	r16,zero,1018
 400f764:	0400febc 	xorhi	r16,zero,1018
 400f768:	0400febc 	xorhi	r16,zero,1018
 400f76c:	0400febc 	xorhi	r16,zero,1018
 400f770:	0400febc 	xorhi	r16,zero,1018
 400f774:	0400febc 	xorhi	r16,zero,1018
 400f778:	0400fe04 	movi	r16,1016
 400f77c:	0400febc 	xorhi	r16,zero,1018
 400f780:	0400febc 	xorhi	r16,zero,1018
 400f784:	0400febc 	xorhi	r16,zero,1018
 400f788:	0400febc 	xorhi	r16,zero,1018
 400f78c:	0400febc 	xorhi	r16,zero,1018
 400f790:	0400febc 	xorhi	r16,zero,1018
 400f794:	0400febc 	xorhi	r16,zero,1018
 400f798:	0400febc 	xorhi	r16,zero,1018
 400f79c:	0400febc 	xorhi	r16,zero,1018
 400f7a0:	0400febc 	xorhi	r16,zero,1018
 400f7a4:	0400ffb4 	movhi	r16,1022
 400f7a8:	0400febc 	xorhi	r16,zero,1018
 400f7ac:	0400febc 	xorhi	r16,zero,1018
 400f7b0:	0400febc 	xorhi	r16,zero,1018
 400f7b4:	0400febc 	xorhi	r16,zero,1018
 400f7b8:	0400febc 	xorhi	r16,zero,1018
 400f7bc:	0400ff40 	call	400ff4 <__alt_mem_sdram-0x3bff00c>
 400f7c0:	0400febc 	xorhi	r16,zero,1018
 400f7c4:	0400febc 	xorhi	r16,zero,1018
 400f7c8:	0400fc40 	call	400fc4 <__alt_mem_sdram-0x3bff03c>
 400f7cc:	0400febc 	xorhi	r16,zero,1018
 400f7d0:	0400febc 	xorhi	r16,zero,1018
 400f7d4:	0400febc 	xorhi	r16,zero,1018
 400f7d8:	0400febc 	xorhi	r16,zero,1018
 400f7dc:	0400febc 	xorhi	r16,zero,1018
 400f7e0:	0400febc 	xorhi	r16,zero,1018
 400f7e4:	0400febc 	xorhi	r16,zero,1018
 400f7e8:	0400febc 	xorhi	r16,zero,1018
 400f7ec:	0400febc 	xorhi	r16,zero,1018
 400f7f0:	0400febc 	xorhi	r16,zero,1018
 400f7f4:	0400fb0c 	andi	r16,zero,1004
 400f7f8:	0400fcf0 	cmpltui	r16,zero,1011
 400f7fc:	0400febc 	xorhi	r16,zero,1018
 400f800:	0400febc 	xorhi	r16,zero,1018
 400f804:	0400febc 	xorhi	r16,zero,1018
 400f808:	0400fce4 	muli	r16,zero,1011
 400f80c:	0400fcf0 	cmpltui	r16,zero,1011
 400f810:	0400febc 	xorhi	r16,zero,1018
 400f814:	0400febc 	xorhi	r16,zero,1018
 400f818:	0400fcd0 	cmplti	r16,zero,1011
 400f81c:	0400febc 	xorhi	r16,zero,1018
 400f820:	0400fc90 	cmplti	r16,zero,1010
 400f824:	0400fa5c 	xori	r16,zero,1001
 400f828:	0400f880 	call	400f88 <__alt_mem_sdram-0x3bff078>
 400f82c:	0400fdf8 	rdprs	r16,zero,1015
 400f830:	0400febc 	xorhi	r16,zero,1018
 400f834:	0400fda4 	muli	r16,zero,1014
 400f838:	0400febc 	xorhi	r16,zero,1018
 400f83c:	0400f9c0 	call	400f9c <__alt_mem_sdram-0x3bff064>
 400f840:	0400febc 	xorhi	r16,zero,1018
 400f844:	0400febc 	xorhi	r16,zero,1018
 400f848:	0400f90c 	andi	r16,zero,996
 400f84c:	d9002417 	ldw	r4,144(sp)
 400f850:	d9402417 	ldw	r5,144(sp)
 400f854:	21000017 	ldw	r4,0(r4)
 400f858:	28800104 	addi	r2,r5,4
 400f85c:	d9002515 	stw	r4,148(sp)
 400f860:	20032b0e 	bge	r4,zero,4010510 <___svfiprintf_internal_r+0xf7c>
 400f864:	d8c02517 	ldw	r3,148(sp)
 400f868:	d8802415 	stw	r2,144(sp)
 400f86c:	00c7c83a 	sub	r3,zero,r3
 400f870:	d8c02515 	stw	r3,148(sp)
 400f874:	8c400114 	ori	r17,r17,4
 400f878:	98c00007 	ldb	r3,0(r19)
 400f87c:	003f9106 	br	400f6c4 <__alt_data_end+0xfc00f6c4>
 400f880:	00800c04 	movi	r2,48
 400f884:	d9402417 	ldw	r5,144(sp)
 400f888:	d9002017 	ldw	r4,128(sp)
 400f88c:	d8801d05 	stb	r2,116(sp)
 400f890:	00801e04 	movi	r2,120
 400f894:	d8801d45 	stb	r2,117(sp)
 400f898:	d8001d85 	stb	zero,118(sp)
 400f89c:	b811883a 	mov	r8,r23
 400f8a0:	28c00104 	addi	r3,r5,4
 400f8a4:	2c800017 	ldw	r18,0(r5)
 400f8a8:	0029883a 	mov	r20,zero
 400f8ac:	88800094 	ori	r2,r17,2
 400f8b0:	20036316 	blt	r4,zero,4010640 <___svfiprintf_internal_r+0x10ac>
 400f8b4:	00bfdfc4 	movi	r2,-129
 400f8b8:	88a0703a 	and	r16,r17,r2
 400f8bc:	d8c02415 	stw	r3,144(sp)
 400f8c0:	84000094 	ori	r16,r16,2
 400f8c4:	90031c26 	beq	r18,zero,4010538 <___svfiprintf_internal_r+0xfa4>
 400f8c8:	014100b4 	movhi	r5,1026
 400f8cc:	2960d404 	addi	r5,r5,-31920
 400f8d0:	002b883a 	mov	r21,zero
 400f8d4:	d9402915 	stw	r5,164(sp)
 400f8d8:	00002906 	br	400f980 <___svfiprintf_internal_r+0x3ec>
 400f8dc:	8c400054 	ori	r17,r17,1
 400f8e0:	98c00007 	ldb	r3,0(r19)
 400f8e4:	003f7706 	br	400f6c4 <__alt_data_end+0xfc00f6c4>
 400f8e8:	a8803fcc 	andi	r2,r21,255
 400f8ec:	1080201c 	xori	r2,r2,128
 400f8f0:	10bfe004 	addi	r2,r2,-128
 400f8f4:	10032a1e 	bne	r2,zero,40105a0 <___svfiprintf_internal_r+0x100c>
 400f8f8:	00c00044 	movi	r3,1
 400f8fc:	d8c02105 	stb	r3,132(sp)
 400f900:	05400804 	movi	r21,32
 400f904:	98c00007 	ldb	r3,0(r19)
 400f908:	003f6e06 	br	400f6c4 <__alt_data_end+0xfc00f6c4>
 400f90c:	8821883a 	mov	r16,r17
 400f910:	dc402103 	ldbu	r17,132(sp)
 400f914:	b811883a 	mov	r8,r23
 400f918:	8c403fcc 	andi	r17,r17,255
 400f91c:	8803f01e 	bne	r17,zero,40108e0 <___svfiprintf_internal_r+0x134c>
 400f920:	008100b4 	movhi	r2,1026
 400f924:	10a0d404 	addi	r2,r2,-31920
 400f928:	d8802915 	stw	r2,164(sp)
 400f92c:	8080080c 	andi	r2,r16,32
 400f930:	1000cd26 	beq	r2,zero,400fc68 <___svfiprintf_internal_r+0x6d4>
 400f934:	d9002417 	ldw	r4,144(sp)
 400f938:	24800017 	ldw	r18,0(r4)
 400f93c:	25000117 	ldw	r20,4(r4)
 400f940:	21000204 	addi	r4,r4,8
 400f944:	d9002415 	stw	r4,144(sp)
 400f948:	8080004c 	andi	r2,r16,1
 400f94c:	1002c726 	beq	r2,zero,401046c <___svfiprintf_internal_r+0xed8>
 400f950:	9504b03a 	or	r2,r18,r20
 400f954:	1003061e 	bne	r2,zero,4010570 <___svfiprintf_internal_r+0xfdc>
 400f958:	d9002017 	ldw	r4,128(sp)
 400f95c:	d8001d85 	stb	zero,118(sp)
 400f960:	20033e16 	blt	r4,zero,401065c <___svfiprintf_internal_r+0x10c8>
 400f964:	00bfdfc4 	movi	r2,-129
 400f968:	80a0703a 	and	r16,r16,r2
 400f96c:	d9402017 	ldw	r5,128(sp)
 400f970:	002b883a 	mov	r21,zero
 400f974:	28002826 	beq	r5,zero,400fa18 <___svfiprintf_internal_r+0x484>
 400f978:	0025883a 	mov	r18,zero
 400f97c:	0029883a 	mov	r20,zero
 400f980:	d9002917 	ldw	r4,164(sp)
 400f984:	dc401a04 	addi	r17,sp,104
 400f988:	908003cc 	andi	r2,r18,15
 400f98c:	a006973a 	slli	r3,r20,28
 400f990:	2085883a 	add	r2,r4,r2
 400f994:	9024d13a 	srli	r18,r18,4
 400f998:	10800003 	ldbu	r2,0(r2)
 400f99c:	a028d13a 	srli	r20,r20,4
 400f9a0:	8c7fffc4 	addi	r17,r17,-1
 400f9a4:	1ca4b03a 	or	r18,r3,r18
 400f9a8:	88800005 	stb	r2,0(r17)
 400f9ac:	9504b03a 	or	r2,r18,r20
 400f9b0:	103ff51e 	bne	r2,zero,400f988 <__alt_data_end+0xfc00f988>
 400f9b4:	d8801e17 	ldw	r2,120(sp)
 400f9b8:	1469c83a 	sub	r20,r2,r17
 400f9bc:	00001906 	br	400fa24 <___svfiprintf_internal_r+0x490>
 400f9c0:	8821883a 	mov	r16,r17
 400f9c4:	dc402103 	ldbu	r17,132(sp)
 400f9c8:	b811883a 	mov	r8,r23
 400f9cc:	8c403fcc 	andi	r17,r17,255
 400f9d0:	8803d01e 	bne	r17,zero,4010914 <___svfiprintf_internal_r+0x1380>
 400f9d4:	8080080c 	andi	r2,r16,32
 400f9d8:	10016126 	beq	r2,zero,400ff60 <___svfiprintf_internal_r+0x9cc>
 400f9dc:	d9002417 	ldw	r4,144(sp)
 400f9e0:	d9402017 	ldw	r5,128(sp)
 400f9e4:	d8001d85 	stb	zero,118(sp)
 400f9e8:	20c00204 	addi	r3,r4,8
 400f9ec:	24800017 	ldw	r18,0(r4)
 400f9f0:	25000117 	ldw	r20,4(r4)
 400f9f4:	28030f16 	blt	r5,zero,4010634 <___svfiprintf_internal_r+0x10a0>
 400f9f8:	013fdfc4 	movi	r4,-129
 400f9fc:	9504b03a 	or	r2,r18,r20
 400fa00:	d8c02415 	stw	r3,144(sp)
 400fa04:	8120703a 	and	r16,r16,r4
 400fa08:	002b883a 	mov	r21,zero
 400fa0c:	1000cd1e 	bne	r2,zero,400fd44 <___svfiprintf_internal_r+0x7b0>
 400fa10:	d8c02017 	ldw	r3,128(sp)
 400fa14:	1803141e 	bne	r3,zero,4010668 <___svfiprintf_internal_r+0x10d4>
 400fa18:	d8002015 	stw	zero,128(sp)
 400fa1c:	0029883a 	mov	r20,zero
 400fa20:	dc401a04 	addi	r17,sp,104
 400fa24:	dc802017 	ldw	r18,128(sp)
 400fa28:	9500010e 	bge	r18,r20,400fa30 <___svfiprintf_internal_r+0x49c>
 400fa2c:	a025883a 	mov	r18,r20
 400fa30:	ad403fcc 	andi	r21,r21,255
 400fa34:	ad40201c 	xori	r21,r21,128
 400fa38:	ad7fe004 	addi	r21,r21,-128
 400fa3c:	a8003f26 	beq	r21,zero,400fb3c <___svfiprintf_internal_r+0x5a8>
 400fa40:	94800044 	addi	r18,r18,1
 400fa44:	00003d06 	br	400fb3c <___svfiprintf_internal_r+0x5a8>
 400fa48:	00c00044 	movi	r3,1
 400fa4c:	d8c02105 	stb	r3,132(sp)
 400fa50:	05400ac4 	movi	r21,43
 400fa54:	98c00007 	ldb	r3,0(r19)
 400fa58:	003f1a06 	br	400f6c4 <__alt_data_end+0xfc00f6c4>
 400fa5c:	8821883a 	mov	r16,r17
 400fa60:	dc402103 	ldbu	r17,132(sp)
 400fa64:	b811883a 	mov	r8,r23
 400fa68:	8c403fcc 	andi	r17,r17,255
 400fa6c:	8803a71e 	bne	r17,zero,401090c <___svfiprintf_internal_r+0x1378>
 400fa70:	8080080c 	andi	r2,r16,32
 400fa74:	10015726 	beq	r2,zero,400ffd4 <___svfiprintf_internal_r+0xa40>
 400fa78:	d8c02417 	ldw	r3,144(sp)
 400fa7c:	d9002017 	ldw	r4,128(sp)
 400fa80:	d8001d85 	stb	zero,118(sp)
 400fa84:	18800204 	addi	r2,r3,8
 400fa88:	1c800017 	ldw	r18,0(r3)
 400fa8c:	1d000117 	ldw	r20,4(r3)
 400fa90:	2002db16 	blt	r4,zero,4010600 <___svfiprintf_internal_r+0x106c>
 400fa94:	013fdfc4 	movi	r4,-129
 400fa98:	9506b03a 	or	r3,r18,r20
 400fa9c:	d8802415 	stw	r2,144(sp)
 400faa0:	8120703a 	and	r16,r16,r4
 400faa4:	18015826 	beq	r3,zero,4010008 <___svfiprintf_internal_r+0xa74>
 400faa8:	002b883a 	mov	r21,zero
 400faac:	dc401a04 	addi	r17,sp,104
 400fab0:	9006d0fa 	srli	r3,r18,3
 400fab4:	a008977a 	slli	r4,r20,29
 400fab8:	a028d0fa 	srli	r20,r20,3
 400fabc:	948001cc 	andi	r18,r18,7
 400fac0:	90800c04 	addi	r2,r18,48
 400fac4:	8c7fffc4 	addi	r17,r17,-1
 400fac8:	20e4b03a 	or	r18,r4,r3
 400facc:	88800005 	stb	r2,0(r17)
 400fad0:	9506b03a 	or	r3,r18,r20
 400fad4:	183ff61e 	bne	r3,zero,400fab0 <__alt_data_end+0xfc00fab0>
 400fad8:	80c0004c 	andi	r3,r16,1
 400fadc:	18028926 	beq	r3,zero,4010504 <___svfiprintf_internal_r+0xf70>
 400fae0:	10803fcc 	andi	r2,r2,255
 400fae4:	1080201c 	xori	r2,r2,128
 400fae8:	10bfe004 	addi	r2,r2,-128
 400faec:	00c00c04 	movi	r3,48
 400faf0:	10ffb026 	beq	r2,r3,400f9b4 <__alt_data_end+0xfc00f9b4>
 400faf4:	88ffffc5 	stb	r3,-1(r17)
 400faf8:	d8c01e17 	ldw	r3,120(sp)
 400fafc:	88bfffc4 	addi	r2,r17,-1
 400fb00:	1023883a 	mov	r17,r2
 400fb04:	18a9c83a 	sub	r20,r3,r2
 400fb08:	003fc606 	br	400fa24 <__alt_data_end+0xfc00fa24>
 400fb0c:	d8c02417 	ldw	r3,144(sp)
 400fb10:	04800044 	movi	r18,1
 400fb14:	8821883a 	mov	r16,r17
 400fb18:	18800017 	ldw	r2,0(r3)
 400fb1c:	18c00104 	addi	r3,r3,4
 400fb20:	b811883a 	mov	r8,r23
 400fb24:	d8001d85 	stb	zero,118(sp)
 400fb28:	d8801005 	stb	r2,64(sp)
 400fb2c:	d8c02415 	stw	r3,144(sp)
 400fb30:	9029883a 	mov	r20,r18
 400fb34:	dc401004 	addi	r17,sp,64
 400fb38:	d8002015 	stw	zero,128(sp)
 400fb3c:	80c0008c 	andi	r3,r16,2
 400fb40:	d8c02115 	stw	r3,132(sp)
 400fb44:	18000126 	beq	r3,zero,400fb4c <___svfiprintf_internal_r+0x5b8>
 400fb48:	94800084 	addi	r18,r18,2
 400fb4c:	80c0210c 	andi	r3,r16,132
 400fb50:	d8c02215 	stw	r3,136(sp)
 400fb54:	1801321e 	bne	r3,zero,4010020 <___svfiprintf_internal_r+0xa8c>
 400fb58:	d9002517 	ldw	r4,148(sp)
 400fb5c:	24b9c83a 	sub	fp,r4,r18
 400fb60:	07012f0e 	bge	zero,fp,4010020 <___svfiprintf_internal_r+0xa8c>
 400fb64:	02400404 	movi	r9,16
 400fb68:	d8c01c17 	ldw	r3,112(sp)
 400fb6c:	d8801b17 	ldw	r2,108(sp)
 400fb70:	4f03250e 	bge	r9,fp,4010808 <___svfiprintf_internal_r+0x1274>
 400fb74:	010100b4 	movhi	r4,1026
 400fb78:	21217504 	addi	r4,r4,-31276
 400fb7c:	dc002a15 	stw	r16,168(sp)
 400fb80:	dc402b15 	stw	r17,172(sp)
 400fb84:	d9002815 	stw	r4,160(sp)
 400fb88:	e023883a 	mov	r17,fp
 400fb8c:	482f883a 	mov	r23,r9
 400fb90:	9839883a 	mov	fp,r19
 400fb94:	054001c4 	movi	r21,7
 400fb98:	9027883a 	mov	r19,r18
 400fb9c:	dc002717 	ldw	r16,156(sp)
 400fba0:	dc802317 	ldw	r18,140(sp)
 400fba4:	00000306 	br	400fbb4 <___svfiprintf_internal_r+0x620>
 400fba8:	8c7ffc04 	addi	r17,r17,-16
 400fbac:	42000204 	addi	r8,r8,8
 400fbb0:	bc40130e 	bge	r23,r17,400fc00 <___svfiprintf_internal_r+0x66c>
 400fbb4:	014100b4 	movhi	r5,1026
 400fbb8:	18c00404 	addi	r3,r3,16
 400fbbc:	10800044 	addi	r2,r2,1
 400fbc0:	29617504 	addi	r5,r5,-31276
 400fbc4:	41400015 	stw	r5,0(r8)
 400fbc8:	45c00115 	stw	r23,4(r8)
 400fbcc:	d8c01c15 	stw	r3,112(sp)
 400fbd0:	d8801b15 	stw	r2,108(sp)
 400fbd4:	a8bff40e 	bge	r21,r2,400fba8 <__alt_data_end+0xfc00fba8>
 400fbd8:	d9801a04 	addi	r6,sp,104
 400fbdc:	900b883a 	mov	r5,r18
 400fbe0:	8009883a 	mov	r4,r16
 400fbe4:	400f3c40 	call	400f3c4 <__ssprint_r>
 400fbe8:	1001aa1e 	bne	r2,zero,4010294 <___svfiprintf_internal_r+0xd00>
 400fbec:	8c7ffc04 	addi	r17,r17,-16
 400fbf0:	d8c01c17 	ldw	r3,112(sp)
 400fbf4:	d8801b17 	ldw	r2,108(sp)
 400fbf8:	d811883a 	mov	r8,sp
 400fbfc:	bc7fed16 	blt	r23,r17,400fbb4 <__alt_data_end+0xfc00fbb4>
 400fc00:	9825883a 	mov	r18,r19
 400fc04:	dc002a17 	ldw	r16,168(sp)
 400fc08:	e027883a 	mov	r19,fp
 400fc0c:	8839883a 	mov	fp,r17
 400fc10:	dc402b17 	ldw	r17,172(sp)
 400fc14:	d9002817 	ldw	r4,160(sp)
 400fc18:	e0c7883a 	add	r3,fp,r3
 400fc1c:	10800044 	addi	r2,r2,1
 400fc20:	41000015 	stw	r4,0(r8)
 400fc24:	47000115 	stw	fp,4(r8)
 400fc28:	d8c01c15 	stw	r3,112(sp)
 400fc2c:	d8801b15 	stw	r2,108(sp)
 400fc30:	010001c4 	movi	r4,7
 400fc34:	20821616 	blt	r4,r2,4010490 <___svfiprintf_internal_r+0xefc>
 400fc38:	42000204 	addi	r8,r8,8
 400fc3c:	0000fa06 	br	4010028 <___svfiprintf_internal_r+0xa94>
 400fc40:	8821883a 	mov	r16,r17
 400fc44:	dc402103 	ldbu	r17,132(sp)
 400fc48:	b811883a 	mov	r8,r23
 400fc4c:	8c403fcc 	andi	r17,r17,255
 400fc50:	8803361e 	bne	r17,zero,401092c <___svfiprintf_internal_r+0x1398>
 400fc54:	014100b4 	movhi	r5,1026
 400fc58:	2960cf04 	addi	r5,r5,-31940
 400fc5c:	d9402915 	stw	r5,164(sp)
 400fc60:	8080080c 	andi	r2,r16,32
 400fc64:	103f331e 	bne	r2,zero,400f934 <__alt_data_end+0xfc00f934>
 400fc68:	8080040c 	andi	r2,r16,16
 400fc6c:	1002551e 	bne	r2,zero,40105c4 <___svfiprintf_internal_r+0x1030>
 400fc70:	8080100c 	andi	r2,r16,64
 400fc74:	1002a626 	beq	r2,zero,4010710 <___svfiprintf_internal_r+0x117c>
 400fc78:	d8802417 	ldw	r2,144(sp)
 400fc7c:	0029883a 	mov	r20,zero
 400fc80:	1480000b 	ldhu	r18,0(r2)
 400fc84:	10800104 	addi	r2,r2,4
 400fc88:	d8802415 	stw	r2,144(sp)
 400fc8c:	003f2e06 	br	400f948 <__alt_data_end+0xfc00f948>
 400fc90:	8821883a 	mov	r16,r17
 400fc94:	dc402103 	ldbu	r17,132(sp)
 400fc98:	b811883a 	mov	r8,r23
 400fc9c:	8c403fcc 	andi	r17,r17,255
 400fca0:	88030b1e 	bne	r17,zero,40108d0 <___svfiprintf_internal_r+0x133c>
 400fca4:	8080080c 	andi	r2,r16,32
 400fca8:	1002271e 	bne	r2,zero,4010548 <___svfiprintf_internal_r+0xfb4>
 400fcac:	8080040c 	andi	r2,r16,16
 400fcb0:	10028e26 	beq	r2,zero,40106ec <___svfiprintf_internal_r+0x1158>
 400fcb4:	d8c02417 	ldw	r3,144(sp)
 400fcb8:	d9002617 	ldw	r4,152(sp)
 400fcbc:	18800017 	ldw	r2,0(r3)
 400fcc0:	18c00104 	addi	r3,r3,4
 400fcc4:	d8c02415 	stw	r3,144(sp)
 400fcc8:	11000015 	stw	r4,0(r2)
 400fccc:	003e5306 	br	400f61c <__alt_data_end+0xfc00f61c>
 400fcd0:	98c00007 	ldb	r3,0(r19)
 400fcd4:	01401b04 	movi	r5,108
 400fcd8:	19424f26 	beq	r3,r5,4010618 <___svfiprintf_internal_r+0x1084>
 400fcdc:	8c400414 	ori	r17,r17,16
 400fce0:	003e7806 	br	400f6c4 <__alt_data_end+0xfc00f6c4>
 400fce4:	8c401014 	ori	r17,r17,64
 400fce8:	98c00007 	ldb	r3,0(r19)
 400fcec:	003e7506 	br	400f6c4 <__alt_data_end+0xfc00f6c4>
 400fcf0:	8821883a 	mov	r16,r17
 400fcf4:	dc402103 	ldbu	r17,132(sp)
 400fcf8:	b811883a 	mov	r8,r23
 400fcfc:	8c403fcc 	andi	r17,r17,255
 400fd00:	8802fe1e 	bne	r17,zero,40108fc <___svfiprintf_internal_r+0x1368>
 400fd04:	8080080c 	andi	r2,r16,32
 400fd08:	10004626 	beq	r2,zero,400fe24 <___svfiprintf_internal_r+0x890>
 400fd0c:	d9002417 	ldw	r4,144(sp)
 400fd10:	20800117 	ldw	r2,4(r4)
 400fd14:	24800017 	ldw	r18,0(r4)
 400fd18:	21000204 	addi	r4,r4,8
 400fd1c:	d9002415 	stw	r4,144(sp)
 400fd20:	1029883a 	mov	r20,r2
 400fd24:	10004a16 	blt	r2,zero,400fe50 <___svfiprintf_internal_r+0x8bc>
 400fd28:	d9002017 	ldw	r4,128(sp)
 400fd2c:	dd401d83 	ldbu	r21,118(sp)
 400fd30:	2001eb16 	blt	r4,zero,40104e0 <___svfiprintf_internal_r+0xf4c>
 400fd34:	00ffdfc4 	movi	r3,-129
 400fd38:	9504b03a 	or	r2,r18,r20
 400fd3c:	80e0703a 	and	r16,r16,r3
 400fd40:	103f3326 	beq	r2,zero,400fa10 <__alt_data_end+0xfc00fa10>
 400fd44:	a0009426 	beq	r20,zero,400ff98 <___svfiprintf_internal_r+0xa04>
 400fd48:	dc401a04 	addi	r17,sp,104
 400fd4c:	402f883a 	mov	r23,r8
 400fd50:	9009883a 	mov	r4,r18
 400fd54:	a00b883a 	mov	r5,r20
 400fd58:	01800284 	movi	r6,10
 400fd5c:	000f883a 	mov	r7,zero
 400fd60:	401118c0 	call	401118c <__umoddi3>
 400fd64:	10800c04 	addi	r2,r2,48
 400fd68:	8c7fffc4 	addi	r17,r17,-1
 400fd6c:	9009883a 	mov	r4,r18
 400fd70:	a00b883a 	mov	r5,r20
 400fd74:	88800005 	stb	r2,0(r17)
 400fd78:	01800284 	movi	r6,10
 400fd7c:	000f883a 	mov	r7,zero
 400fd80:	4010b900 	call	4010b90 <__udivdi3>
 400fd84:	1025883a 	mov	r18,r2
 400fd88:	10c4b03a 	or	r2,r2,r3
 400fd8c:	1829883a 	mov	r20,r3
 400fd90:	103fef1e 	bne	r2,zero,400fd50 <__alt_data_end+0xfc00fd50>
 400fd94:	d9001e17 	ldw	r4,120(sp)
 400fd98:	b811883a 	mov	r8,r23
 400fd9c:	2469c83a 	sub	r20,r4,r17
 400fda0:	003f2006 	br	400fa24 <__alt_data_end+0xfc00fa24>
 400fda4:	d8802417 	ldw	r2,144(sp)
 400fda8:	8821883a 	mov	r16,r17
 400fdac:	d8001d85 	stb	zero,118(sp)
 400fdb0:	14400017 	ldw	r17,0(r2)
 400fdb4:	b811883a 	mov	r8,r23
 400fdb8:	15c00104 	addi	r23,r2,4
 400fdbc:	88026c26 	beq	r17,zero,4010770 <___svfiprintf_internal_r+0x11dc>
 400fdc0:	d8c02017 	ldw	r3,128(sp)
 400fdc4:	18025f16 	blt	r3,zero,4010744 <___svfiprintf_internal_r+0x11b0>
 400fdc8:	180d883a 	mov	r6,r3
 400fdcc:	000b883a 	mov	r5,zero
 400fdd0:	8809883a 	mov	r4,r17
 400fdd4:	da002d15 	stw	r8,180(sp)
 400fdd8:	4006c540 	call	4006c54 <memchr>
 400fddc:	da002d17 	ldw	r8,180(sp)
 400fde0:	1002a526 	beq	r2,zero,4010878 <___svfiprintf_internal_r+0x12e4>
 400fde4:	1469c83a 	sub	r20,r2,r17
 400fde8:	dd401d83 	ldbu	r21,118(sp)
 400fdec:	ddc02415 	stw	r23,144(sp)
 400fdf0:	d8002015 	stw	zero,128(sp)
 400fdf4:	003f0b06 	br	400fa24 <__alt_data_end+0xfc00fa24>
 400fdf8:	8c400814 	ori	r17,r17,32
 400fdfc:	98c00007 	ldb	r3,0(r19)
 400fe00:	003e3006 	br	400f6c4 <__alt_data_end+0xfc00f6c4>
 400fe04:	8821883a 	mov	r16,r17
 400fe08:	dc402103 	ldbu	r17,132(sp)
 400fe0c:	b811883a 	mov	r8,r23
 400fe10:	8c403fcc 	andi	r17,r17,255
 400fe14:	8802b01e 	bne	r17,zero,40108d8 <___svfiprintf_internal_r+0x1344>
 400fe18:	84000414 	ori	r16,r16,16
 400fe1c:	8080080c 	andi	r2,r16,32
 400fe20:	103fba1e 	bne	r2,zero,400fd0c <__alt_data_end+0xfc00fd0c>
 400fe24:	8080040c 	andi	r2,r16,16
 400fe28:	1001df1e 	bne	r2,zero,40105a8 <___svfiprintf_internal_r+0x1014>
 400fe2c:	8080100c 	andi	r2,r16,64
 400fe30:	10023d26 	beq	r2,zero,4010728 <___svfiprintf_internal_r+0x1194>
 400fe34:	d8802417 	ldw	r2,144(sp)
 400fe38:	1480000f 	ldh	r18,0(r2)
 400fe3c:	10800104 	addi	r2,r2,4
 400fe40:	d8802415 	stw	r2,144(sp)
 400fe44:	9029d7fa 	srai	r20,r18,31
 400fe48:	a005883a 	mov	r2,r20
 400fe4c:	103fb60e 	bge	r2,zero,400fd28 <__alt_data_end+0xfc00fd28>
 400fe50:	d9402017 	ldw	r5,128(sp)
 400fe54:	04a5c83a 	sub	r18,zero,r18
 400fe58:	05400b44 	movi	r21,45
 400fe5c:	9004c03a 	cmpne	r2,r18,zero
 400fe60:	0529c83a 	sub	r20,zero,r20
 400fe64:	dd401d85 	stb	r21,118(sp)
 400fe68:	a0a9c83a 	sub	r20,r20,r2
 400fe6c:	28026c16 	blt	r5,zero,4010820 <___svfiprintf_internal_r+0x128c>
 400fe70:	00bfdfc4 	movi	r2,-129
 400fe74:	80a0703a 	and	r16,r16,r2
 400fe78:	a03fb31e 	bne	r20,zero,400fd48 <__alt_data_end+0xfc00fd48>
 400fe7c:	00004606 	br	400ff98 <___svfiprintf_internal_r+0xa04>
 400fe80:	9839883a 	mov	fp,r19
 400fe84:	d8002515 	stw	zero,148(sp)
 400fe88:	1c3ff404 	addi	r16,r3,-48
 400fe8c:	0009883a 	mov	r4,zero
 400fe90:	01400284 	movi	r5,10
 400fe94:	4001a140 	call	4001a14 <__mulsi3>
 400fe98:	e0c00007 	ldb	r3,0(fp)
 400fe9c:	8089883a 	add	r4,r16,r2
 400fea0:	9cc00044 	addi	r19,r19,1
 400fea4:	1c3ff404 	addi	r16,r3,-48
 400fea8:	9839883a 	mov	fp,r19
 400feac:	a43ff82e 	bgeu	r20,r16,400fe90 <__alt_data_end+0xfc00fe90>
 400feb0:	d9002515 	stw	r4,148(sp)
 400feb4:	18bff804 	addi	r2,r3,-32
 400feb8:	90be052e 	bgeu	r18,r2,400f6d0 <__alt_data_end+0xfc00f6d0>
 400febc:	8821883a 	mov	r16,r17
 400fec0:	dc402103 	ldbu	r17,132(sp)
 400fec4:	b811883a 	mov	r8,r23
 400fec8:	8c403fcc 	andi	r17,r17,255
 400fecc:	88028d1e 	bne	r17,zero,4010904 <___svfiprintf_internal_r+0x1370>
 400fed0:	1800ea26 	beq	r3,zero,401027c <___svfiprintf_internal_r+0xce8>
 400fed4:	04800044 	movi	r18,1
 400fed8:	d8c01005 	stb	r3,64(sp)
 400fedc:	d8001d85 	stb	zero,118(sp)
 400fee0:	9029883a 	mov	r20,r18
 400fee4:	dc401004 	addi	r17,sp,64
 400fee8:	003f1306 	br	400fb38 <__alt_data_end+0xfc00fb38>
 400feec:	8c402014 	ori	r17,r17,128
 400fef0:	98c00007 	ldb	r3,0(r19)
 400fef4:	003df306 	br	400f6c4 <__alt_data_end+0xfc00f6c4>
 400fef8:	98c00007 	ldb	r3,0(r19)
 400fefc:	01000a84 	movi	r4,42
 400ff00:	9f000044 	addi	fp,r19,1
 400ff04:	19026326 	beq	r3,r4,4010894 <___svfiprintf_internal_r+0x1300>
 400ff08:	1c3ff404 	addi	r16,r3,-48
 400ff0c:	0009883a 	mov	r4,zero
 400ff10:	a4025636 	bltu	r20,r16,401086c <___svfiprintf_internal_r+0x12d8>
 400ff14:	01400284 	movi	r5,10
 400ff18:	4001a140 	call	4001a14 <__mulsi3>
 400ff1c:	e0c00007 	ldb	r3,0(fp)
 400ff20:	1409883a 	add	r4,r2,r16
 400ff24:	e4c00044 	addi	r19,fp,1
 400ff28:	1c3ff404 	addi	r16,r3,-48
 400ff2c:	9839883a 	mov	fp,r19
 400ff30:	a43ff82e 	bgeu	r20,r16,400ff14 <__alt_data_end+0xfc00ff14>
 400ff34:	20020c16 	blt	r4,zero,4010768 <___svfiprintf_internal_r+0x11d4>
 400ff38:	d9002015 	stw	r4,128(sp)
 400ff3c:	003de206 	br	400f6c8 <__alt_data_end+0xfc00f6c8>
 400ff40:	8821883a 	mov	r16,r17
 400ff44:	dc402103 	ldbu	r17,132(sp)
 400ff48:	b811883a 	mov	r8,r23
 400ff4c:	8c403fcc 	andi	r17,r17,255
 400ff50:	8802721e 	bne	r17,zero,401091c <___svfiprintf_internal_r+0x1388>
 400ff54:	84000414 	ori	r16,r16,16
 400ff58:	8080080c 	andi	r2,r16,32
 400ff5c:	103e9f1e 	bne	r2,zero,400f9dc <__alt_data_end+0xfc00f9dc>
 400ff60:	8080040c 	andi	r2,r16,16
 400ff64:	10015326 	beq	r2,zero,40104b4 <___svfiprintf_internal_r+0xf20>
 400ff68:	d8c02417 	ldw	r3,144(sp)
 400ff6c:	d9002017 	ldw	r4,128(sp)
 400ff70:	d8001d85 	stb	zero,118(sp)
 400ff74:	18800104 	addi	r2,r3,4
 400ff78:	1c800017 	ldw	r18,0(r3)
 400ff7c:	0029883a 	mov	r20,zero
 400ff80:	20015516 	blt	r4,zero,40104d8 <___svfiprintf_internal_r+0xf44>
 400ff84:	00ffdfc4 	movi	r3,-129
 400ff88:	d8802415 	stw	r2,144(sp)
 400ff8c:	80e0703a 	and	r16,r16,r3
 400ff90:	002b883a 	mov	r21,zero
 400ff94:	903e9e26 	beq	r18,zero,400fa10 <__alt_data_end+0xfc00fa10>
 400ff98:	00800244 	movi	r2,9
 400ff9c:	14bf6a36 	bltu	r2,r18,400fd48 <__alt_data_end+0xfc00fd48>
 400ffa0:	94800c04 	addi	r18,r18,48
 400ffa4:	dc8019c5 	stb	r18,103(sp)
 400ffa8:	dd002c17 	ldw	r20,176(sp)
 400ffac:	dc4019c4 	addi	r17,sp,103
 400ffb0:	003e9c06 	br	400fa24 <__alt_data_end+0xfc00fa24>
 400ffb4:	8821883a 	mov	r16,r17
 400ffb8:	dc402103 	ldbu	r17,132(sp)
 400ffbc:	b811883a 	mov	r8,r23
 400ffc0:	8c403fcc 	andi	r17,r17,255
 400ffc4:	8802571e 	bne	r17,zero,4010924 <___svfiprintf_internal_r+0x1390>
 400ffc8:	84000414 	ori	r16,r16,16
 400ffcc:	8080080c 	andi	r2,r16,32
 400ffd0:	103ea91e 	bne	r2,zero,400fa78 <__alt_data_end+0xfc00fa78>
 400ffd4:	8080040c 	andi	r2,r16,16
 400ffd8:	10018026 	beq	r2,zero,40105dc <___svfiprintf_internal_r+0x1048>
 400ffdc:	d9402417 	ldw	r5,144(sp)
 400ffe0:	d8c02017 	ldw	r3,128(sp)
 400ffe4:	d8001d85 	stb	zero,118(sp)
 400ffe8:	28800104 	addi	r2,r5,4
 400ffec:	2c800017 	ldw	r18,0(r5)
 400fff0:	0029883a 	mov	r20,zero
 400fff4:	18018216 	blt	r3,zero,4010600 <___svfiprintf_internal_r+0x106c>
 400fff8:	00ffdfc4 	movi	r3,-129
 400fffc:	d8802415 	stw	r2,144(sp)
 4010000:	80e0703a 	and	r16,r16,r3
 4010004:	903ea81e 	bne	r18,zero,400faa8 <__alt_data_end+0xfc00faa8>
 4010008:	d8802017 	ldw	r2,128(sp)
 401000c:	002b883a 	mov	r21,zero
 4010010:	1001f226 	beq	r2,zero,40107dc <___svfiprintf_internal_r+0x1248>
 4010014:	0025883a 	mov	r18,zero
 4010018:	0029883a 	mov	r20,zero
 401001c:	003ea306 	br	400faac <__alt_data_end+0xfc00faac>
 4010020:	d8c01c17 	ldw	r3,112(sp)
 4010024:	d8801b17 	ldw	r2,108(sp)
 4010028:	d9001d87 	ldb	r4,118(sp)
 401002c:	20000b26 	beq	r4,zero,401005c <___svfiprintf_internal_r+0xac8>
 4010030:	d9001d84 	addi	r4,sp,118
 4010034:	18c00044 	addi	r3,r3,1
 4010038:	10800044 	addi	r2,r2,1
 401003c:	41000015 	stw	r4,0(r8)
 4010040:	01000044 	movi	r4,1
 4010044:	41000115 	stw	r4,4(r8)
 4010048:	d8c01c15 	stw	r3,112(sp)
 401004c:	d8801b15 	stw	r2,108(sp)
 4010050:	010001c4 	movi	r4,7
 4010054:	2080f316 	blt	r4,r2,4010424 <___svfiprintf_internal_r+0xe90>
 4010058:	42000204 	addi	r8,r8,8
 401005c:	d9402117 	ldw	r5,132(sp)
 4010060:	28000b26 	beq	r5,zero,4010090 <___svfiprintf_internal_r+0xafc>
 4010064:	d9001d04 	addi	r4,sp,116
 4010068:	18c00084 	addi	r3,r3,2
 401006c:	10800044 	addi	r2,r2,1
 4010070:	41000015 	stw	r4,0(r8)
 4010074:	01000084 	movi	r4,2
 4010078:	41000115 	stw	r4,4(r8)
 401007c:	d8c01c15 	stw	r3,112(sp)
 4010080:	d8801b15 	stw	r2,108(sp)
 4010084:	010001c4 	movi	r4,7
 4010088:	2080ef16 	blt	r4,r2,4010448 <___svfiprintf_internal_r+0xeb4>
 401008c:	42000204 	addi	r8,r8,8
 4010090:	d9402217 	ldw	r5,136(sp)
 4010094:	01002004 	movi	r4,128
 4010098:	29008f26 	beq	r5,r4,40102d8 <___svfiprintf_internal_r+0xd44>
 401009c:	d9002017 	ldw	r4,128(sp)
 40100a0:	252fc83a 	sub	r23,r4,r20
 40100a4:	05c0310e 	bge	zero,r23,401016c <___svfiprintf_internal_r+0xbd8>
 40100a8:	07000404 	movi	fp,16
 40100ac:	e5c17d0e 	bge	fp,r23,40106a4 <___svfiprintf_internal_r+0x1110>
 40100b0:	010100b4 	movhi	r4,1026
 40100b4:	21217104 	addi	r4,r4,-31292
 40100b8:	dc002015 	stw	r16,128(sp)
 40100bc:	dc402215 	stw	r17,136(sp)
 40100c0:	d9002115 	stw	r4,132(sp)
 40100c4:	b823883a 	mov	r17,r23
 40100c8:	054001c4 	movi	r21,7
 40100cc:	982f883a 	mov	r23,r19
 40100d0:	dc002717 	ldw	r16,156(sp)
 40100d4:	9027883a 	mov	r19,r18
 40100d8:	dc802317 	ldw	r18,140(sp)
 40100dc:	00000306 	br	40100ec <___svfiprintf_internal_r+0xb58>
 40100e0:	8c7ffc04 	addi	r17,r17,-16
 40100e4:	42000204 	addi	r8,r8,8
 40100e8:	e440110e 	bge	fp,r17,4010130 <___svfiprintf_internal_r+0xb9c>
 40100ec:	18c00404 	addi	r3,r3,16
 40100f0:	10800044 	addi	r2,r2,1
 40100f4:	45800015 	stw	r22,0(r8)
 40100f8:	47000115 	stw	fp,4(r8)
 40100fc:	d8c01c15 	stw	r3,112(sp)
 4010100:	d8801b15 	stw	r2,108(sp)
 4010104:	a8bff60e 	bge	r21,r2,40100e0 <__alt_data_end+0xfc0100e0>
 4010108:	d9801a04 	addi	r6,sp,104
 401010c:	900b883a 	mov	r5,r18
 4010110:	8009883a 	mov	r4,r16
 4010114:	400f3c40 	call	400f3c4 <__ssprint_r>
 4010118:	10005e1e 	bne	r2,zero,4010294 <___svfiprintf_internal_r+0xd00>
 401011c:	8c7ffc04 	addi	r17,r17,-16
 4010120:	d8c01c17 	ldw	r3,112(sp)
 4010124:	d8801b17 	ldw	r2,108(sp)
 4010128:	d811883a 	mov	r8,sp
 401012c:	e47fef16 	blt	fp,r17,40100ec <__alt_data_end+0xfc0100ec>
 4010130:	9825883a 	mov	r18,r19
 4010134:	dc002017 	ldw	r16,128(sp)
 4010138:	b827883a 	mov	r19,r23
 401013c:	882f883a 	mov	r23,r17
 4010140:	dc402217 	ldw	r17,136(sp)
 4010144:	d9402117 	ldw	r5,132(sp)
 4010148:	1dc7883a 	add	r3,r3,r23
 401014c:	10800044 	addi	r2,r2,1
 4010150:	41400015 	stw	r5,0(r8)
 4010154:	45c00115 	stw	r23,4(r8)
 4010158:	d8c01c15 	stw	r3,112(sp)
 401015c:	d8801b15 	stw	r2,108(sp)
 4010160:	010001c4 	movi	r4,7
 4010164:	2080a616 	blt	r4,r2,4010400 <___svfiprintf_internal_r+0xe6c>
 4010168:	42000204 	addi	r8,r8,8
 401016c:	a0c7883a 	add	r3,r20,r3
 4010170:	10800044 	addi	r2,r2,1
 4010174:	44400015 	stw	r17,0(r8)
 4010178:	45000115 	stw	r20,4(r8)
 401017c:	d8c01c15 	stw	r3,112(sp)
 4010180:	d8801b15 	stw	r2,108(sp)
 4010184:	010001c4 	movi	r4,7
 4010188:	20808816 	blt	r4,r2,40103ac <___svfiprintf_internal_r+0xe18>
 401018c:	42000204 	addi	r8,r8,8
 4010190:	8400010c 	andi	r16,r16,4
 4010194:	80002c26 	beq	r16,zero,4010248 <___svfiprintf_internal_r+0xcb4>
 4010198:	d8802517 	ldw	r2,148(sp)
 401019c:	14a1c83a 	sub	r16,r2,r18
 40101a0:	0400290e 	bge	zero,r16,4010248 <___svfiprintf_internal_r+0xcb4>
 40101a4:	04400404 	movi	r17,16
 40101a8:	d8801b17 	ldw	r2,108(sp)
 40101ac:	8c01a70e 	bge	r17,r16,401084c <___svfiprintf_internal_r+0x12b8>
 40101b0:	014100b4 	movhi	r5,1026
 40101b4:	29617504 	addi	r5,r5,-31276
 40101b8:	d9402815 	stw	r5,160(sp)
 40101bc:	050001c4 	movi	r20,7
 40101c0:	dd402717 	ldw	r21,156(sp)
 40101c4:	ddc02317 	ldw	r23,140(sp)
 40101c8:	00000306 	br	40101d8 <___svfiprintf_internal_r+0xc44>
 40101cc:	843ffc04 	addi	r16,r16,-16
 40101d0:	42000204 	addi	r8,r8,8
 40101d4:	8c00130e 	bge	r17,r16,4010224 <___svfiprintf_internal_r+0xc90>
 40101d8:	010100b4 	movhi	r4,1026
 40101dc:	18c00404 	addi	r3,r3,16
 40101e0:	10800044 	addi	r2,r2,1
 40101e4:	21217504 	addi	r4,r4,-31276
 40101e8:	41000015 	stw	r4,0(r8)
 40101ec:	44400115 	stw	r17,4(r8)
 40101f0:	d8c01c15 	stw	r3,112(sp)
 40101f4:	d8801b15 	stw	r2,108(sp)
 40101f8:	a0bff40e 	bge	r20,r2,40101cc <__alt_data_end+0xfc0101cc>
 40101fc:	d9801a04 	addi	r6,sp,104
 4010200:	b80b883a 	mov	r5,r23
 4010204:	a809883a 	mov	r4,r21
 4010208:	400f3c40 	call	400f3c4 <__ssprint_r>
 401020c:	1000211e 	bne	r2,zero,4010294 <___svfiprintf_internal_r+0xd00>
 4010210:	843ffc04 	addi	r16,r16,-16
 4010214:	d8c01c17 	ldw	r3,112(sp)
 4010218:	d8801b17 	ldw	r2,108(sp)
 401021c:	d811883a 	mov	r8,sp
 4010220:	8c3fed16 	blt	r17,r16,40101d8 <__alt_data_end+0xfc0101d8>
 4010224:	d9402817 	ldw	r5,160(sp)
 4010228:	1c07883a 	add	r3,r3,r16
 401022c:	10800044 	addi	r2,r2,1
 4010230:	41400015 	stw	r5,0(r8)
 4010234:	44000115 	stw	r16,4(r8)
 4010238:	d8c01c15 	stw	r3,112(sp)
 401023c:	d8801b15 	stw	r2,108(sp)
 4010240:	010001c4 	movi	r4,7
 4010244:	2080b516 	blt	r4,r2,401051c <___svfiprintf_internal_r+0xf88>
 4010248:	d8802517 	ldw	r2,148(sp)
 401024c:	1480010e 	bge	r2,r18,4010254 <___svfiprintf_internal_r+0xcc0>
 4010250:	9005883a 	mov	r2,r18
 4010254:	d9002617 	ldw	r4,152(sp)
 4010258:	2089883a 	add	r4,r4,r2
 401025c:	d9002615 	stw	r4,152(sp)
 4010260:	18005a1e 	bne	r3,zero,40103cc <___svfiprintf_internal_r+0xe38>
 4010264:	98800007 	ldb	r2,0(r19)
 4010268:	d8001b15 	stw	zero,108(sp)
 401026c:	d811883a 	mov	r8,sp
 4010270:	103cec1e 	bne	r2,zero,400f624 <__alt_data_end+0xfc00f624>
 4010274:	9825883a 	mov	r18,r19
 4010278:	003d0206 	br	400f684 <__alt_data_end+0xfc00f684>
 401027c:	d8801c17 	ldw	r2,112(sp)
 4010280:	10000426 	beq	r2,zero,4010294 <___svfiprintf_internal_r+0xd00>
 4010284:	d9402317 	ldw	r5,140(sp)
 4010288:	d9002717 	ldw	r4,156(sp)
 401028c:	d9801a04 	addi	r6,sp,104
 4010290:	400f3c40 	call	400f3c4 <__ssprint_r>
 4010294:	d9402317 	ldw	r5,140(sp)
 4010298:	d8802617 	ldw	r2,152(sp)
 401029c:	28c0030b 	ldhu	r3,12(r5)
 40102a0:	18c0100c 	andi	r3,r3,64
 40102a4:	18015c1e 	bne	r3,zero,4010818 <___svfiprintf_internal_r+0x1284>
 40102a8:	dfc03717 	ldw	ra,220(sp)
 40102ac:	df003617 	ldw	fp,216(sp)
 40102b0:	ddc03517 	ldw	r23,212(sp)
 40102b4:	dd803417 	ldw	r22,208(sp)
 40102b8:	dd403317 	ldw	r21,204(sp)
 40102bc:	dd003217 	ldw	r20,200(sp)
 40102c0:	dcc03117 	ldw	r19,196(sp)
 40102c4:	dc803017 	ldw	r18,192(sp)
 40102c8:	dc402f17 	ldw	r17,188(sp)
 40102cc:	dc002e17 	ldw	r16,184(sp)
 40102d0:	dec03804 	addi	sp,sp,224
 40102d4:	f800283a 	ret
 40102d8:	d9002517 	ldw	r4,148(sp)
 40102dc:	24afc83a 	sub	r23,r4,r18
 40102e0:	05ff6e0e 	bge	zero,r23,401009c <__alt_data_end+0xfc01009c>
 40102e4:	07000404 	movi	fp,16
 40102e8:	e5c15c0e 	bge	fp,r23,401085c <___svfiprintf_internal_r+0x12c8>
 40102ec:	010100b4 	movhi	r4,1026
 40102f0:	21217104 	addi	r4,r4,-31292
 40102f4:	dc002215 	stw	r16,136(sp)
 40102f8:	dc402815 	stw	r17,160(sp)
 40102fc:	d9002115 	stw	r4,132(sp)
 4010300:	b823883a 	mov	r17,r23
 4010304:	054001c4 	movi	r21,7
 4010308:	982f883a 	mov	r23,r19
 401030c:	dc002717 	ldw	r16,156(sp)
 4010310:	9027883a 	mov	r19,r18
 4010314:	dc802317 	ldw	r18,140(sp)
 4010318:	00000306 	br	4010328 <___svfiprintf_internal_r+0xd94>
 401031c:	8c7ffc04 	addi	r17,r17,-16
 4010320:	42000204 	addi	r8,r8,8
 4010324:	e440110e 	bge	fp,r17,401036c <___svfiprintf_internal_r+0xdd8>
 4010328:	18c00404 	addi	r3,r3,16
 401032c:	10800044 	addi	r2,r2,1
 4010330:	45800015 	stw	r22,0(r8)
 4010334:	47000115 	stw	fp,4(r8)
 4010338:	d8c01c15 	stw	r3,112(sp)
 401033c:	d8801b15 	stw	r2,108(sp)
 4010340:	a8bff60e 	bge	r21,r2,401031c <__alt_data_end+0xfc01031c>
 4010344:	d9801a04 	addi	r6,sp,104
 4010348:	900b883a 	mov	r5,r18
 401034c:	8009883a 	mov	r4,r16
 4010350:	400f3c40 	call	400f3c4 <__ssprint_r>
 4010354:	103fcf1e 	bne	r2,zero,4010294 <__alt_data_end+0xfc010294>
 4010358:	8c7ffc04 	addi	r17,r17,-16
 401035c:	d8c01c17 	ldw	r3,112(sp)
 4010360:	d8801b17 	ldw	r2,108(sp)
 4010364:	d811883a 	mov	r8,sp
 4010368:	e47fef16 	blt	fp,r17,4010328 <__alt_data_end+0xfc010328>
 401036c:	9825883a 	mov	r18,r19
 4010370:	dc002217 	ldw	r16,136(sp)
 4010374:	b827883a 	mov	r19,r23
 4010378:	882f883a 	mov	r23,r17
 401037c:	dc402817 	ldw	r17,160(sp)
 4010380:	d9402117 	ldw	r5,132(sp)
 4010384:	1dc7883a 	add	r3,r3,r23
 4010388:	10800044 	addi	r2,r2,1
 401038c:	41400015 	stw	r5,0(r8)
 4010390:	45c00115 	stw	r23,4(r8)
 4010394:	d8c01c15 	stw	r3,112(sp)
 4010398:	d8801b15 	stw	r2,108(sp)
 401039c:	010001c4 	movi	r4,7
 40103a0:	2080b716 	blt	r4,r2,4010680 <___svfiprintf_internal_r+0x10ec>
 40103a4:	42000204 	addi	r8,r8,8
 40103a8:	003f3c06 	br	401009c <__alt_data_end+0xfc01009c>
 40103ac:	d9402317 	ldw	r5,140(sp)
 40103b0:	d9002717 	ldw	r4,156(sp)
 40103b4:	d9801a04 	addi	r6,sp,104
 40103b8:	400f3c40 	call	400f3c4 <__ssprint_r>
 40103bc:	103fb51e 	bne	r2,zero,4010294 <__alt_data_end+0xfc010294>
 40103c0:	d8c01c17 	ldw	r3,112(sp)
 40103c4:	d811883a 	mov	r8,sp
 40103c8:	003f7106 	br	4010190 <__alt_data_end+0xfc010190>
 40103cc:	d9402317 	ldw	r5,140(sp)
 40103d0:	d9002717 	ldw	r4,156(sp)
 40103d4:	d9801a04 	addi	r6,sp,104
 40103d8:	400f3c40 	call	400f3c4 <__ssprint_r>
 40103dc:	103fa126 	beq	r2,zero,4010264 <__alt_data_end+0xfc010264>
 40103e0:	003fac06 	br	4010294 <__alt_data_end+0xfc010294>
 40103e4:	d9402317 	ldw	r5,140(sp)
 40103e8:	d9002717 	ldw	r4,156(sp)
 40103ec:	d9801a04 	addi	r6,sp,104
 40103f0:	400f3c40 	call	400f3c4 <__ssprint_r>
 40103f4:	103fa71e 	bne	r2,zero,4010294 <__alt_data_end+0xfc010294>
 40103f8:	d811883a 	mov	r8,sp
 40103fc:	003c9e06 	br	400f678 <__alt_data_end+0xfc00f678>
 4010400:	d9402317 	ldw	r5,140(sp)
 4010404:	d9002717 	ldw	r4,156(sp)
 4010408:	d9801a04 	addi	r6,sp,104
 401040c:	400f3c40 	call	400f3c4 <__ssprint_r>
 4010410:	103fa01e 	bne	r2,zero,4010294 <__alt_data_end+0xfc010294>
 4010414:	d8c01c17 	ldw	r3,112(sp)
 4010418:	d8801b17 	ldw	r2,108(sp)
 401041c:	d811883a 	mov	r8,sp
 4010420:	003f5206 	br	401016c <__alt_data_end+0xfc01016c>
 4010424:	d9402317 	ldw	r5,140(sp)
 4010428:	d9002717 	ldw	r4,156(sp)
 401042c:	d9801a04 	addi	r6,sp,104
 4010430:	400f3c40 	call	400f3c4 <__ssprint_r>
 4010434:	103f971e 	bne	r2,zero,4010294 <__alt_data_end+0xfc010294>
 4010438:	d8c01c17 	ldw	r3,112(sp)
 401043c:	d8801b17 	ldw	r2,108(sp)
 4010440:	d811883a 	mov	r8,sp
 4010444:	003f0506 	br	401005c <__alt_data_end+0xfc01005c>
 4010448:	d9402317 	ldw	r5,140(sp)
 401044c:	d9002717 	ldw	r4,156(sp)
 4010450:	d9801a04 	addi	r6,sp,104
 4010454:	400f3c40 	call	400f3c4 <__ssprint_r>
 4010458:	103f8e1e 	bne	r2,zero,4010294 <__alt_data_end+0xfc010294>
 401045c:	d8c01c17 	ldw	r3,112(sp)
 4010460:	d8801b17 	ldw	r2,108(sp)
 4010464:	d811883a 	mov	r8,sp
 4010468:	003f0906 	br	4010090 <__alt_data_end+0xfc010090>
 401046c:	d9402017 	ldw	r5,128(sp)
 4010470:	d8001d85 	stb	zero,118(sp)
 4010474:	28007716 	blt	r5,zero,4010654 <___svfiprintf_internal_r+0x10c0>
 4010478:	00ffdfc4 	movi	r3,-129
 401047c:	9504b03a 	or	r2,r18,r20
 4010480:	80e0703a 	and	r16,r16,r3
 4010484:	103d3926 	beq	r2,zero,400f96c <__alt_data_end+0xfc00f96c>
 4010488:	002b883a 	mov	r21,zero
 401048c:	003d3c06 	br	400f980 <__alt_data_end+0xfc00f980>
 4010490:	d9402317 	ldw	r5,140(sp)
 4010494:	d9002717 	ldw	r4,156(sp)
 4010498:	d9801a04 	addi	r6,sp,104
 401049c:	400f3c40 	call	400f3c4 <__ssprint_r>
 40104a0:	103f7c1e 	bne	r2,zero,4010294 <__alt_data_end+0xfc010294>
 40104a4:	d8c01c17 	ldw	r3,112(sp)
 40104a8:	d8801b17 	ldw	r2,108(sp)
 40104ac:	d811883a 	mov	r8,sp
 40104b0:	003edd06 	br	4010028 <__alt_data_end+0xfc010028>
 40104b4:	8080100c 	andi	r2,r16,64
 40104b8:	d8001d85 	stb	zero,118(sp)
 40104bc:	10008426 	beq	r2,zero,40106d0 <___svfiprintf_internal_r+0x113c>
 40104c0:	d9402417 	ldw	r5,144(sp)
 40104c4:	d8c02017 	ldw	r3,128(sp)
 40104c8:	0029883a 	mov	r20,zero
 40104cc:	28800104 	addi	r2,r5,4
 40104d0:	2c80000b 	ldhu	r18,0(r5)
 40104d4:	183eab0e 	bge	r3,zero,400ff84 <__alt_data_end+0xfc00ff84>
 40104d8:	d8802415 	stw	r2,144(sp)
 40104dc:	002b883a 	mov	r21,zero
 40104e0:	9504b03a 	or	r2,r18,r20
 40104e4:	103e171e 	bne	r2,zero,400fd44 <__alt_data_end+0xfc00fd44>
 40104e8:	00800044 	movi	r2,1
 40104ec:	10803fcc 	andi	r2,r2,255
 40104f0:	00c00044 	movi	r3,1
 40104f4:	10c05c26 	beq	r2,r3,4010668 <___svfiprintf_internal_r+0x10d4>
 40104f8:	00c00084 	movi	r3,2
 40104fc:	10fd1e26 	beq	r2,r3,400f978 <__alt_data_end+0xfc00f978>
 4010500:	003ec406 	br	4010014 <__alt_data_end+0xfc010014>
 4010504:	d9401e17 	ldw	r5,120(sp)
 4010508:	2c69c83a 	sub	r20,r5,r17
 401050c:	003d4506 	br	400fa24 <__alt_data_end+0xfc00fa24>
 4010510:	d8802415 	stw	r2,144(sp)
 4010514:	98c00007 	ldb	r3,0(r19)
 4010518:	003c6a06 	br	400f6c4 <__alt_data_end+0xfc00f6c4>
 401051c:	d9402317 	ldw	r5,140(sp)
 4010520:	d9002717 	ldw	r4,156(sp)
 4010524:	d9801a04 	addi	r6,sp,104
 4010528:	400f3c40 	call	400f3c4 <__ssprint_r>
 401052c:	103f591e 	bne	r2,zero,4010294 <__alt_data_end+0xfc010294>
 4010530:	d8c01c17 	ldw	r3,112(sp)
 4010534:	003f4406 	br	4010248 <__alt_data_end+0xfc010248>
 4010538:	014100b4 	movhi	r5,1026
 401053c:	2960d404 	addi	r5,r5,-31920
 4010540:	d9402915 	stw	r5,164(sp)
 4010544:	003d0906 	br	400f96c <__alt_data_end+0xfc00f96c>
 4010548:	d8c02417 	ldw	r3,144(sp)
 401054c:	d9002617 	ldw	r4,152(sp)
 4010550:	d9402417 	ldw	r5,144(sp)
 4010554:	18800017 	ldw	r2,0(r3)
 4010558:	2007d7fa 	srai	r3,r4,31
 401055c:	29400104 	addi	r5,r5,4
 4010560:	d9402415 	stw	r5,144(sp)
 4010564:	11000015 	stw	r4,0(r2)
 4010568:	10c00115 	stw	r3,4(r2)
 401056c:	003c2b06 	br	400f61c <__alt_data_end+0xfc00f61c>
 4010570:	d8c01d45 	stb	r3,117(sp)
 4010574:	d8c02017 	ldw	r3,128(sp)
 4010578:	00800c04 	movi	r2,48
 401057c:	d8801d05 	stb	r2,116(sp)
 4010580:	d8001d85 	stb	zero,118(sp)
 4010584:	80800094 	ori	r2,r16,2
 4010588:	1800ac16 	blt	r3,zero,401083c <___svfiprintf_internal_r+0x12a8>
 401058c:	00bfdfc4 	movi	r2,-129
 4010590:	80a0703a 	and	r16,r16,r2
 4010594:	84000094 	ori	r16,r16,2
 4010598:	002b883a 	mov	r21,zero
 401059c:	003cf806 	br	400f980 <__alt_data_end+0xfc00f980>
 40105a0:	98c00007 	ldb	r3,0(r19)
 40105a4:	003c4706 	br	400f6c4 <__alt_data_end+0xfc00f6c4>
 40105a8:	d9402417 	ldw	r5,144(sp)
 40105ac:	2c800017 	ldw	r18,0(r5)
 40105b0:	29400104 	addi	r5,r5,4
 40105b4:	d9402415 	stw	r5,144(sp)
 40105b8:	9029d7fa 	srai	r20,r18,31
 40105bc:	a005883a 	mov	r2,r20
 40105c0:	003dd806 	br	400fd24 <__alt_data_end+0xfc00fd24>
 40105c4:	d9402417 	ldw	r5,144(sp)
 40105c8:	0029883a 	mov	r20,zero
 40105cc:	2c800017 	ldw	r18,0(r5)
 40105d0:	29400104 	addi	r5,r5,4
 40105d4:	d9402415 	stw	r5,144(sp)
 40105d8:	003cdb06 	br	400f948 <__alt_data_end+0xfc00f948>
 40105dc:	8080100c 	andi	r2,r16,64
 40105e0:	d8001d85 	stb	zero,118(sp)
 40105e4:	10003326 	beq	r2,zero,40106b4 <___svfiprintf_internal_r+0x1120>
 40105e8:	d9002417 	ldw	r4,144(sp)
 40105ec:	d9402017 	ldw	r5,128(sp)
 40105f0:	0029883a 	mov	r20,zero
 40105f4:	20800104 	addi	r2,r4,4
 40105f8:	2480000b 	ldhu	r18,0(r4)
 40105fc:	283e7e0e 	bge	r5,zero,400fff8 <__alt_data_end+0xfc00fff8>
 4010600:	9506b03a 	or	r3,r18,r20
 4010604:	d8802415 	stw	r2,144(sp)
 4010608:	183d271e 	bne	r3,zero,400faa8 <__alt_data_end+0xfc00faa8>
 401060c:	002b883a 	mov	r21,zero
 4010610:	0005883a 	mov	r2,zero
 4010614:	003fb506 	br	40104ec <__alt_data_end+0xfc0104ec>
 4010618:	98c00043 	ldbu	r3,1(r19)
 401061c:	8c400814 	ori	r17,r17,32
 4010620:	9cc00044 	addi	r19,r19,1
 4010624:	18c03fcc 	andi	r3,r3,255
 4010628:	18c0201c 	xori	r3,r3,128
 401062c:	18ffe004 	addi	r3,r3,-128
 4010630:	003c2406 	br	400f6c4 <__alt_data_end+0xfc00f6c4>
 4010634:	d8c02415 	stw	r3,144(sp)
 4010638:	002b883a 	mov	r21,zero
 401063c:	003fa806 	br	40104e0 <__alt_data_end+0xfc0104e0>
 4010640:	010100b4 	movhi	r4,1026
 4010644:	2120d404 	addi	r4,r4,-31920
 4010648:	d9002915 	stw	r4,164(sp)
 401064c:	d8c02415 	stw	r3,144(sp)
 4010650:	1021883a 	mov	r16,r2
 4010654:	9504b03a 	or	r2,r18,r20
 4010658:	103f8b1e 	bne	r2,zero,4010488 <__alt_data_end+0xfc010488>
 401065c:	002b883a 	mov	r21,zero
 4010660:	00800084 	movi	r2,2
 4010664:	003fa106 	br	40104ec <__alt_data_end+0xfc0104ec>
 4010668:	0025883a 	mov	r18,zero
 401066c:	94800c04 	addi	r18,r18,48
 4010670:	dc8019c5 	stb	r18,103(sp)
 4010674:	dd002c17 	ldw	r20,176(sp)
 4010678:	dc4019c4 	addi	r17,sp,103
 401067c:	003ce906 	br	400fa24 <__alt_data_end+0xfc00fa24>
 4010680:	d9402317 	ldw	r5,140(sp)
 4010684:	d9002717 	ldw	r4,156(sp)
 4010688:	d9801a04 	addi	r6,sp,104
 401068c:	400f3c40 	call	400f3c4 <__ssprint_r>
 4010690:	103f001e 	bne	r2,zero,4010294 <__alt_data_end+0xfc010294>
 4010694:	d8c01c17 	ldw	r3,112(sp)
 4010698:	d8801b17 	ldw	r2,108(sp)
 401069c:	d811883a 	mov	r8,sp
 40106a0:	003e7e06 	br	401009c <__alt_data_end+0xfc01009c>
 40106a4:	014100b4 	movhi	r5,1026
 40106a8:	29617104 	addi	r5,r5,-31292
 40106ac:	d9402115 	stw	r5,132(sp)
 40106b0:	003ea406 	br	4010144 <__alt_data_end+0xfc010144>
 40106b4:	d8c02417 	ldw	r3,144(sp)
 40106b8:	d9002017 	ldw	r4,128(sp)
 40106bc:	0029883a 	mov	r20,zero
 40106c0:	18800104 	addi	r2,r3,4
 40106c4:	1c800017 	ldw	r18,0(r3)
 40106c8:	203e4b0e 	bge	r4,zero,400fff8 <__alt_data_end+0xfc00fff8>
 40106cc:	003fcc06 	br	4010600 <__alt_data_end+0xfc010600>
 40106d0:	d9002417 	ldw	r4,144(sp)
 40106d4:	d9402017 	ldw	r5,128(sp)
 40106d8:	0029883a 	mov	r20,zero
 40106dc:	20800104 	addi	r2,r4,4
 40106e0:	24800017 	ldw	r18,0(r4)
 40106e4:	283e270e 	bge	r5,zero,400ff84 <__alt_data_end+0xfc00ff84>
 40106e8:	003f7b06 	br	40104d8 <__alt_data_end+0xfc0104d8>
 40106ec:	8400100c 	andi	r16,r16,64
 40106f0:	80003326 	beq	r16,zero,40107c0 <___svfiprintf_internal_r+0x122c>
 40106f4:	d9402417 	ldw	r5,144(sp)
 40106f8:	d8c02617 	ldw	r3,152(sp)
 40106fc:	28800017 	ldw	r2,0(r5)
 4010700:	29400104 	addi	r5,r5,4
 4010704:	d9402415 	stw	r5,144(sp)
 4010708:	10c0000d 	sth	r3,0(r2)
 401070c:	003bc306 	br	400f61c <__alt_data_end+0xfc00f61c>
 4010710:	d9002417 	ldw	r4,144(sp)
 4010714:	0029883a 	mov	r20,zero
 4010718:	24800017 	ldw	r18,0(r4)
 401071c:	21000104 	addi	r4,r4,4
 4010720:	d9002415 	stw	r4,144(sp)
 4010724:	003c8806 	br	400f948 <__alt_data_end+0xfc00f948>
 4010728:	d8c02417 	ldw	r3,144(sp)
 401072c:	1c800017 	ldw	r18,0(r3)
 4010730:	18c00104 	addi	r3,r3,4
 4010734:	d8c02415 	stw	r3,144(sp)
 4010738:	9029d7fa 	srai	r20,r18,31
 401073c:	a005883a 	mov	r2,r20
 4010740:	003d7806 	br	400fd24 <__alt_data_end+0xfc00fd24>
 4010744:	8809883a 	mov	r4,r17
 4010748:	da002d15 	stw	r8,180(sp)
 401074c:	40044d40 	call	40044d4 <strlen>
 4010750:	1029883a 	mov	r20,r2
 4010754:	dd401d83 	ldbu	r21,118(sp)
 4010758:	ddc02415 	stw	r23,144(sp)
 401075c:	d8002015 	stw	zero,128(sp)
 4010760:	da002d17 	ldw	r8,180(sp)
 4010764:	003caf06 	br	400fa24 <__alt_data_end+0xfc00fa24>
 4010768:	013fffc4 	movi	r4,-1
 401076c:	003df206 	br	400ff38 <__alt_data_end+0xfc00ff38>
 4010770:	dd002017 	ldw	r20,128(sp)
 4010774:	00800184 	movi	r2,6
 4010778:	1500012e 	bgeu	r2,r20,4010780 <___svfiprintf_internal_r+0x11ec>
 401077c:	1029883a 	mov	r20,r2
 4010780:	a025883a 	mov	r18,r20
 4010784:	a0004116 	blt	r20,zero,401088c <___svfiprintf_internal_r+0x12f8>
 4010788:	044100b4 	movhi	r17,1026
 401078c:	ddc02415 	stw	r23,144(sp)
 4010790:	8c60d904 	addi	r17,r17,-31900
 4010794:	003ce806 	br	400fb38 <__alt_data_end+0xfc00fb38>
 4010798:	04001004 	movi	r16,64
 401079c:	800b883a 	mov	r5,r16
 40107a0:	40033980 	call	4003398 <_malloc_r>
 40107a4:	d8c02317 	ldw	r3,140(sp)
 40107a8:	18800015 	stw	r2,0(r3)
 40107ac:	18800415 	stw	r2,16(r3)
 40107b0:	10004d26 	beq	r2,zero,40108e8 <___svfiprintf_internal_r+0x1354>
 40107b4:	d9402317 	ldw	r5,140(sp)
 40107b8:	2c000515 	stw	r16,20(r5)
 40107bc:	003b8906 	br	400f5e4 <__alt_data_end+0xfc00f5e4>
 40107c0:	d9002417 	ldw	r4,144(sp)
 40107c4:	d9402617 	ldw	r5,152(sp)
 40107c8:	20800017 	ldw	r2,0(r4)
 40107cc:	21000104 	addi	r4,r4,4
 40107d0:	d9002415 	stw	r4,144(sp)
 40107d4:	11400015 	stw	r5,0(r2)
 40107d8:	003b9006 	br	400f61c <__alt_data_end+0xfc00f61c>
 40107dc:	8080004c 	andi	r2,r16,1
 40107e0:	002b883a 	mov	r21,zero
 40107e4:	10000526 	beq	r2,zero,40107fc <___svfiprintf_internal_r+0x1268>
 40107e8:	00800c04 	movi	r2,48
 40107ec:	d88019c5 	stb	r2,103(sp)
 40107f0:	dd002c17 	ldw	r20,176(sp)
 40107f4:	dc4019c4 	addi	r17,sp,103
 40107f8:	003c8a06 	br	400fa24 <__alt_data_end+0xfc00fa24>
 40107fc:	0029883a 	mov	r20,zero
 4010800:	dc401a04 	addi	r17,sp,104
 4010804:	003c8706 	br	400fa24 <__alt_data_end+0xfc00fa24>
 4010808:	014100b4 	movhi	r5,1026
 401080c:	29617504 	addi	r5,r5,-31276
 4010810:	d9402815 	stw	r5,160(sp)
 4010814:	003cff06 	br	400fc14 <__alt_data_end+0xfc00fc14>
 4010818:	00bfffc4 	movi	r2,-1
 401081c:	003ea206 	br	40102a8 <__alt_data_end+0xfc0102a8>
 4010820:	00800044 	movi	r2,1
 4010824:	10803fcc 	andi	r2,r2,255
 4010828:	00c00044 	movi	r3,1
 401082c:	10fd4526 	beq	r2,r3,400fd44 <__alt_data_end+0xfc00fd44>
 4010830:	00c00084 	movi	r3,2
 4010834:	10fc5226 	beq	r2,r3,400f980 <__alt_data_end+0xfc00f980>
 4010838:	003c9c06 	br	400faac <__alt_data_end+0xfc00faac>
 401083c:	1021883a 	mov	r16,r2
 4010840:	002b883a 	mov	r21,zero
 4010844:	00800084 	movi	r2,2
 4010848:	003ff606 	br	4010824 <__alt_data_end+0xfc010824>
 401084c:	010100b4 	movhi	r4,1026
 4010850:	21217504 	addi	r4,r4,-31276
 4010854:	d9002815 	stw	r4,160(sp)
 4010858:	003e7206 	br	4010224 <__alt_data_end+0xfc010224>
 401085c:	014100b4 	movhi	r5,1026
 4010860:	29617104 	addi	r5,r5,-31292
 4010864:	d9402115 	stw	r5,132(sp)
 4010868:	003ec506 	br	4010380 <__alt_data_end+0xfc010380>
 401086c:	e027883a 	mov	r19,fp
 4010870:	d8002015 	stw	zero,128(sp)
 4010874:	003b9406 	br	400f6c8 <__alt_data_end+0xfc00f6c8>
 4010878:	dd002017 	ldw	r20,128(sp)
 401087c:	dd401d83 	ldbu	r21,118(sp)
 4010880:	ddc02415 	stw	r23,144(sp)
 4010884:	d8002015 	stw	zero,128(sp)
 4010888:	003c6606 	br	400fa24 <__alt_data_end+0xfc00fa24>
 401088c:	0025883a 	mov	r18,zero
 4010890:	003fbd06 	br	4010788 <__alt_data_end+0xfc010788>
 4010894:	d9402417 	ldw	r5,144(sp)
 4010898:	d8c02417 	ldw	r3,144(sp)
 401089c:	29400017 	ldw	r5,0(r5)
 40108a0:	19000104 	addi	r4,r3,4
 40108a4:	d9002415 	stw	r4,144(sp)
 40108a8:	d9402015 	stw	r5,128(sp)
 40108ac:	98c00043 	ldbu	r3,1(r19)
 40108b0:	e027883a 	mov	r19,fp
 40108b4:	283f5b0e 	bge	r5,zero,4010624 <__alt_data_end+0xfc010624>
 40108b8:	18c03fcc 	andi	r3,r3,255
 40108bc:	013fffc4 	movi	r4,-1
 40108c0:	18c0201c 	xori	r3,r3,128
 40108c4:	d9002015 	stw	r4,128(sp)
 40108c8:	18ffe004 	addi	r3,r3,-128
 40108cc:	003b7d06 	br	400f6c4 <__alt_data_end+0xfc00f6c4>
 40108d0:	dd401d85 	stb	r21,118(sp)
 40108d4:	003cf306 	br	400fca4 <__alt_data_end+0xfc00fca4>
 40108d8:	dd401d85 	stb	r21,118(sp)
 40108dc:	003d4e06 	br	400fe18 <__alt_data_end+0xfc00fe18>
 40108e0:	dd401d85 	stb	r21,118(sp)
 40108e4:	003c0e06 	br	400f920 <__alt_data_end+0xfc00f920>
 40108e8:	d9002717 	ldw	r4,156(sp)
 40108ec:	00800304 	movi	r2,12
 40108f0:	20800015 	stw	r2,0(r4)
 40108f4:	00bfffc4 	movi	r2,-1
 40108f8:	003e6b06 	br	40102a8 <__alt_data_end+0xfc0102a8>
 40108fc:	dd401d85 	stb	r21,118(sp)
 4010900:	003d0006 	br	400fd04 <__alt_data_end+0xfc00fd04>
 4010904:	dd401d85 	stb	r21,118(sp)
 4010908:	003d7106 	br	400fed0 <__alt_data_end+0xfc00fed0>
 401090c:	dd401d85 	stb	r21,118(sp)
 4010910:	003c5706 	br	400fa70 <__alt_data_end+0xfc00fa70>
 4010914:	dd401d85 	stb	r21,118(sp)
 4010918:	003c2e06 	br	400f9d4 <__alt_data_end+0xfc00f9d4>
 401091c:	dd401d85 	stb	r21,118(sp)
 4010920:	003d8c06 	br	400ff54 <__alt_data_end+0xfc00ff54>
 4010924:	dd401d85 	stb	r21,118(sp)
 4010928:	003da706 	br	400ffc8 <__alt_data_end+0xfc00ffc8>
 401092c:	dd401d85 	stb	r21,118(sp)
 4010930:	003cc806 	br	400fc54 <__alt_data_end+0xfc00fc54>

04010934 <_calloc_r>:
 4010934:	defffe04 	addi	sp,sp,-8
 4010938:	2805883a 	mov	r2,r5
 401093c:	dc000015 	stw	r16,0(sp)
 4010940:	300b883a 	mov	r5,r6
 4010944:	2021883a 	mov	r16,r4
 4010948:	1009883a 	mov	r4,r2
 401094c:	dfc00115 	stw	ra,4(sp)
 4010950:	4001a140 	call	4001a14 <__mulsi3>
 4010954:	100b883a 	mov	r5,r2
 4010958:	8009883a 	mov	r4,r16
 401095c:	40033980 	call	4003398 <_malloc_r>
 4010960:	10002926 	beq	r2,zero,4010a08 <_calloc_r+0xd4>
 4010964:	11bfff17 	ldw	r6,-4(r2)
 4010968:	1021883a 	mov	r16,r2
 401096c:	00bfff04 	movi	r2,-4
 4010970:	308c703a 	and	r6,r6,r2
 4010974:	00c00904 	movi	r3,36
 4010978:	308d883a 	add	r6,r6,r2
 401097c:	19801636 	bltu	r3,r6,40109d8 <_calloc_r+0xa4>
 4010980:	008004c4 	movi	r2,19
 4010984:	11800b2e 	bgeu	r2,r6,40109b4 <_calloc_r+0x80>
 4010988:	80000015 	stw	zero,0(r16)
 401098c:	80000115 	stw	zero,4(r16)
 4010990:	008006c4 	movi	r2,27
 4010994:	11801a2e 	bgeu	r2,r6,4010a00 <_calloc_r+0xcc>
 4010998:	80000215 	stw	zero,8(r16)
 401099c:	80000315 	stw	zero,12(r16)
 40109a0:	30c0151e 	bne	r6,r3,40109f8 <_calloc_r+0xc4>
 40109a4:	80000415 	stw	zero,16(r16)
 40109a8:	80800604 	addi	r2,r16,24
 40109ac:	80000515 	stw	zero,20(r16)
 40109b0:	00000106 	br	40109b8 <_calloc_r+0x84>
 40109b4:	8005883a 	mov	r2,r16
 40109b8:	10000015 	stw	zero,0(r2)
 40109bc:	10000115 	stw	zero,4(r2)
 40109c0:	10000215 	stw	zero,8(r2)
 40109c4:	8005883a 	mov	r2,r16
 40109c8:	dfc00117 	ldw	ra,4(sp)
 40109cc:	dc000017 	ldw	r16,0(sp)
 40109d0:	dec00204 	addi	sp,sp,8
 40109d4:	f800283a 	ret
 40109d8:	000b883a 	mov	r5,zero
 40109dc:	8009883a 	mov	r4,r16
 40109e0:	4003cec0 	call	4003cec <memset>
 40109e4:	8005883a 	mov	r2,r16
 40109e8:	dfc00117 	ldw	ra,4(sp)
 40109ec:	dc000017 	ldw	r16,0(sp)
 40109f0:	dec00204 	addi	sp,sp,8
 40109f4:	f800283a 	ret
 40109f8:	80800404 	addi	r2,r16,16
 40109fc:	003fee06 	br	40109b8 <__alt_data_end+0xfc0109b8>
 4010a00:	80800204 	addi	r2,r16,8
 4010a04:	003fec06 	br	40109b8 <__alt_data_end+0xfc0109b8>
 4010a08:	0005883a 	mov	r2,zero
 4010a0c:	003fee06 	br	40109c8 <__alt_data_end+0xfc0109c8>

04010a10 <__muldi3>:
 4010a10:	defff604 	addi	sp,sp,-40
 4010a14:	dd800615 	stw	r22,24(sp)
 4010a18:	dd400515 	stw	r21,20(sp)
 4010a1c:	dc400115 	stw	r17,4(sp)
 4010a20:	357fffcc 	andi	r21,r6,65535
 4010a24:	2022d43a 	srli	r17,r4,16
 4010a28:	25bfffcc 	andi	r22,r4,65535
 4010a2c:	dcc00315 	stw	r19,12(sp)
 4010a30:	dc800215 	stw	r18,8(sp)
 4010a34:	2027883a 	mov	r19,r4
 4010a38:	2825883a 	mov	r18,r5
 4010a3c:	b009883a 	mov	r4,r22
 4010a40:	a80b883a 	mov	r5,r21
 4010a44:	dfc00915 	stw	ra,36(sp)
 4010a48:	df000815 	stw	fp,32(sp)
 4010a4c:	ddc00715 	stw	r23,28(sp)
 4010a50:	3839883a 	mov	fp,r7
 4010a54:	302ed43a 	srli	r23,r6,16
 4010a58:	dd000415 	stw	r20,16(sp)
 4010a5c:	dc000015 	stw	r16,0(sp)
 4010a60:	3029883a 	mov	r20,r6
 4010a64:	4001a140 	call	4001a14 <__mulsi3>
 4010a68:	a80b883a 	mov	r5,r21
 4010a6c:	8809883a 	mov	r4,r17
 4010a70:	1021883a 	mov	r16,r2
 4010a74:	4001a140 	call	4001a14 <__mulsi3>
 4010a78:	8809883a 	mov	r4,r17
 4010a7c:	b80b883a 	mov	r5,r23
 4010a80:	102b883a 	mov	r21,r2
 4010a84:	4001a140 	call	4001a14 <__mulsi3>
 4010a88:	b80b883a 	mov	r5,r23
 4010a8c:	b009883a 	mov	r4,r22
 4010a90:	1023883a 	mov	r17,r2
 4010a94:	4001a140 	call	4001a14 <__mulsi3>
 4010a98:	8006d43a 	srli	r3,r16,16
 4010a9c:	1545883a 	add	r2,r2,r21
 4010aa0:	1885883a 	add	r2,r3,r2
 4010aa4:	1540022e 	bgeu	r2,r21,4010ab0 <__muldi3+0xa0>
 4010aa8:	00c00074 	movhi	r3,1
 4010aac:	88e3883a 	add	r17,r17,r3
 4010ab0:	1006d43a 	srli	r3,r2,16
 4010ab4:	1004943a 	slli	r2,r2,16
 4010ab8:	e00b883a 	mov	r5,fp
 4010abc:	9809883a 	mov	r4,r19
 4010ac0:	843fffcc 	andi	r16,r16,65535
 4010ac4:	1c63883a 	add	r17,r3,r17
 4010ac8:	1421883a 	add	r16,r2,r16
 4010acc:	4001a140 	call	4001a14 <__mulsi3>
 4010ad0:	900b883a 	mov	r5,r18
 4010ad4:	a009883a 	mov	r4,r20
 4010ad8:	1027883a 	mov	r19,r2
 4010adc:	4001a140 	call	4001a14 <__mulsi3>
 4010ae0:	9885883a 	add	r2,r19,r2
 4010ae4:	1447883a 	add	r3,r2,r17
 4010ae8:	8005883a 	mov	r2,r16
 4010aec:	dfc00917 	ldw	ra,36(sp)
 4010af0:	df000817 	ldw	fp,32(sp)
 4010af4:	ddc00717 	ldw	r23,28(sp)
 4010af8:	dd800617 	ldw	r22,24(sp)
 4010afc:	dd400517 	ldw	r21,20(sp)
 4010b00:	dd000417 	ldw	r20,16(sp)
 4010b04:	dcc00317 	ldw	r19,12(sp)
 4010b08:	dc800217 	ldw	r18,8(sp)
 4010b0c:	dc400117 	ldw	r17,4(sp)
 4010b10:	dc000017 	ldw	r16,0(sp)
 4010b14:	dec00a04 	addi	sp,sp,40
 4010b18:	f800283a 	ret

04010b1c <__fixunsdfsi>:
 4010b1c:	defffd04 	addi	sp,sp,-12
 4010b20:	000d883a 	mov	r6,zero
 4010b24:	01d07834 	movhi	r7,16864
 4010b28:	dc400115 	stw	r17,4(sp)
 4010b2c:	dc000015 	stw	r16,0(sp)
 4010b30:	dfc00215 	stw	ra,8(sp)
 4010b34:	2023883a 	mov	r17,r4
 4010b38:	2821883a 	mov	r16,r5
 4010b3c:	4012c500 	call	4012c50 <__gedf2>
 4010b40:	1000080e 	bge	r2,zero,4010b64 <__fixunsdfsi+0x48>
 4010b44:	8809883a 	mov	r4,r17
 4010b48:	800b883a 	mov	r5,r16
 4010b4c:	4013f880 	call	4013f88 <__fixdfsi>
 4010b50:	dfc00217 	ldw	ra,8(sp)
 4010b54:	dc400117 	ldw	r17,4(sp)
 4010b58:	dc000017 	ldw	r16,0(sp)
 4010b5c:	dec00304 	addi	sp,sp,12
 4010b60:	f800283a 	ret
 4010b64:	000d883a 	mov	r6,zero
 4010b68:	01d07834 	movhi	r7,16864
 4010b6c:	8809883a 	mov	r4,r17
 4010b70:	800b883a 	mov	r5,r16
 4010b74:	401368c0 	call	401368c <__subdf3>
 4010b78:	180b883a 	mov	r5,r3
 4010b7c:	1009883a 	mov	r4,r2
 4010b80:	4013f880 	call	4013f88 <__fixdfsi>
 4010b84:	00e00034 	movhi	r3,32768
 4010b88:	10c5883a 	add	r2,r2,r3
 4010b8c:	003ff006 	br	4010b50 <__alt_data_end+0xfc010b50>

04010b90 <__udivdi3>:
 4010b90:	defff404 	addi	sp,sp,-48
 4010b94:	dcc00515 	stw	r19,20(sp)
 4010b98:	dc000215 	stw	r16,8(sp)
 4010b9c:	dfc00b15 	stw	ra,44(sp)
 4010ba0:	df000a15 	stw	fp,40(sp)
 4010ba4:	ddc00915 	stw	r23,36(sp)
 4010ba8:	dd800815 	stw	r22,32(sp)
 4010bac:	dd400715 	stw	r21,28(sp)
 4010bb0:	dd000615 	stw	r20,24(sp)
 4010bb4:	dc800415 	stw	r18,16(sp)
 4010bb8:	dc400315 	stw	r17,12(sp)
 4010bbc:	2027883a 	mov	r19,r4
 4010bc0:	2821883a 	mov	r16,r5
 4010bc4:	3800461e 	bne	r7,zero,4010ce0 <__udivdi3+0x150>
 4010bc8:	3023883a 	mov	r17,r6
 4010bcc:	2025883a 	mov	r18,r4
 4010bd0:	2980572e 	bgeu	r5,r6,4010d30 <__udivdi3+0x1a0>
 4010bd4:	00bfffd4 	movui	r2,65535
 4010bd8:	282d883a 	mov	r22,r5
 4010bdc:	1180b236 	bltu	r2,r6,4010ea8 <__udivdi3+0x318>
 4010be0:	00803fc4 	movi	r2,255
 4010be4:	1185803a 	cmpltu	r2,r2,r6
 4010be8:	100490fa 	slli	r2,r2,3
 4010bec:	3086d83a 	srl	r3,r6,r2
 4010bf0:	010100b4 	movhi	r4,1026
 4010bf4:	21217904 	addi	r4,r4,-31260
 4010bf8:	20c7883a 	add	r3,r4,r3
 4010bfc:	18c00003 	ldbu	r3,0(r3)
 4010c00:	1885883a 	add	r2,r3,r2
 4010c04:	00c00804 	movi	r3,32
 4010c08:	1887c83a 	sub	r3,r3,r2
 4010c0c:	18000526 	beq	r3,zero,4010c24 <__udivdi3+0x94>
 4010c10:	80e0983a 	sll	r16,r16,r3
 4010c14:	9884d83a 	srl	r2,r19,r2
 4010c18:	30e2983a 	sll	r17,r6,r3
 4010c1c:	98e4983a 	sll	r18,r19,r3
 4010c20:	142cb03a 	or	r22,r2,r16
 4010c24:	882ad43a 	srli	r21,r17,16
 4010c28:	b009883a 	mov	r4,r22
 4010c2c:	8d3fffcc 	andi	r20,r17,65535
 4010c30:	a80b883a 	mov	r5,r21
 4010c34:	40019bc0 	call	40019bc <__umodsi3>
 4010c38:	b009883a 	mov	r4,r22
 4010c3c:	a80b883a 	mov	r5,r21
 4010c40:	1027883a 	mov	r19,r2
 4010c44:	40019580 	call	4001958 <__udivsi3>
 4010c48:	100b883a 	mov	r5,r2
 4010c4c:	a009883a 	mov	r4,r20
 4010c50:	102d883a 	mov	r22,r2
 4010c54:	4001a140 	call	4001a14 <__mulsi3>
 4010c58:	9826943a 	slli	r19,r19,16
 4010c5c:	9006d43a 	srli	r3,r18,16
 4010c60:	1cc6b03a 	or	r3,r3,r19
 4010c64:	1880052e 	bgeu	r3,r2,4010c7c <__udivdi3+0xec>
 4010c68:	1c47883a 	add	r3,r3,r17
 4010c6c:	b13fffc4 	addi	r4,r22,-1
 4010c70:	1c400136 	bltu	r3,r17,4010c78 <__udivdi3+0xe8>
 4010c74:	18814236 	bltu	r3,r2,4011180 <__udivdi3+0x5f0>
 4010c78:	202d883a 	mov	r22,r4
 4010c7c:	18a1c83a 	sub	r16,r3,r2
 4010c80:	8009883a 	mov	r4,r16
 4010c84:	a80b883a 	mov	r5,r21
 4010c88:	40019bc0 	call	40019bc <__umodsi3>
 4010c8c:	1027883a 	mov	r19,r2
 4010c90:	8009883a 	mov	r4,r16
 4010c94:	a80b883a 	mov	r5,r21
 4010c98:	9826943a 	slli	r19,r19,16
 4010c9c:	40019580 	call	4001958 <__udivsi3>
 4010ca0:	100b883a 	mov	r5,r2
 4010ca4:	a009883a 	mov	r4,r20
 4010ca8:	94bfffcc 	andi	r18,r18,65535
 4010cac:	1021883a 	mov	r16,r2
 4010cb0:	94e4b03a 	or	r18,r18,r19
 4010cb4:	4001a140 	call	4001a14 <__mulsi3>
 4010cb8:	9080052e 	bgeu	r18,r2,4010cd0 <__udivdi3+0x140>
 4010cbc:	8ca5883a 	add	r18,r17,r18
 4010cc0:	80ffffc4 	addi	r3,r16,-1
 4010cc4:	94410c36 	bltu	r18,r17,40110f8 <__udivdi3+0x568>
 4010cc8:	90810b2e 	bgeu	r18,r2,40110f8 <__udivdi3+0x568>
 4010ccc:	843fff84 	addi	r16,r16,-2
 4010cd0:	b004943a 	slli	r2,r22,16
 4010cd4:	0007883a 	mov	r3,zero
 4010cd8:	1404b03a 	or	r2,r2,r16
 4010cdc:	00005e06 	br	4010e58 <__udivdi3+0x2c8>
 4010ce0:	29c05b36 	bltu	r5,r7,4010e50 <__udivdi3+0x2c0>
 4010ce4:	00bfffd4 	movui	r2,65535
 4010ce8:	11c0672e 	bgeu	r2,r7,4010e88 <__udivdi3+0x2f8>
 4010cec:	00804034 	movhi	r2,256
 4010cf0:	10bfffc4 	addi	r2,r2,-1
 4010cf4:	11c10a36 	bltu	r2,r7,4011120 <__udivdi3+0x590>
 4010cf8:	00800404 	movi	r2,16
 4010cfc:	3886d83a 	srl	r3,r7,r2
 4010d00:	010100b4 	movhi	r4,1026
 4010d04:	21217904 	addi	r4,r4,-31260
 4010d08:	20c7883a 	add	r3,r4,r3
 4010d0c:	18c00003 	ldbu	r3,0(r3)
 4010d10:	05c00804 	movi	r23,32
 4010d14:	1885883a 	add	r2,r3,r2
 4010d18:	b8afc83a 	sub	r23,r23,r2
 4010d1c:	b800671e 	bne	r23,zero,4010ebc <__udivdi3+0x32c>
 4010d20:	3c010536 	bltu	r7,r16,4011138 <__udivdi3+0x5a8>
 4010d24:	9985403a 	cmpgeu	r2,r19,r6
 4010d28:	0007883a 	mov	r3,zero
 4010d2c:	00004a06 	br	4010e58 <__udivdi3+0x2c8>
 4010d30:	3000041e 	bne	r6,zero,4010d44 <__udivdi3+0x1b4>
 4010d34:	000b883a 	mov	r5,zero
 4010d38:	01000044 	movi	r4,1
 4010d3c:	40019580 	call	4001958 <__udivsi3>
 4010d40:	1023883a 	mov	r17,r2
 4010d44:	00bfffd4 	movui	r2,65535
 4010d48:	1440532e 	bgeu	r2,r17,4010e98 <__udivdi3+0x308>
 4010d4c:	00804034 	movhi	r2,256
 4010d50:	10bfffc4 	addi	r2,r2,-1
 4010d54:	1440f436 	bltu	r2,r17,4011128 <__udivdi3+0x598>
 4010d58:	00800404 	movi	r2,16
 4010d5c:	8886d83a 	srl	r3,r17,r2
 4010d60:	010100b4 	movhi	r4,1026
 4010d64:	21217904 	addi	r4,r4,-31260
 4010d68:	20c7883a 	add	r3,r4,r3
 4010d6c:	18c00003 	ldbu	r3,0(r3)
 4010d70:	1885883a 	add	r2,r3,r2
 4010d74:	00c00804 	movi	r3,32
 4010d78:	1887c83a 	sub	r3,r3,r2
 4010d7c:	1800a51e 	bne	r3,zero,4011014 <__udivdi3+0x484>
 4010d80:	882ad43a 	srli	r21,r17,16
 4010d84:	8461c83a 	sub	r16,r16,r17
 4010d88:	8d3fffcc 	andi	r20,r17,65535
 4010d8c:	00c00044 	movi	r3,1
 4010d90:	a80b883a 	mov	r5,r21
 4010d94:	8009883a 	mov	r4,r16
 4010d98:	d8c00115 	stw	r3,4(sp)
 4010d9c:	40019bc0 	call	40019bc <__umodsi3>
 4010da0:	a80b883a 	mov	r5,r21
 4010da4:	8009883a 	mov	r4,r16
 4010da8:	1027883a 	mov	r19,r2
 4010dac:	40019580 	call	4001958 <__udivsi3>
 4010db0:	a00b883a 	mov	r5,r20
 4010db4:	1009883a 	mov	r4,r2
 4010db8:	102d883a 	mov	r22,r2
 4010dbc:	4001a140 	call	4001a14 <__mulsi3>
 4010dc0:	9826943a 	slli	r19,r19,16
 4010dc4:	900ed43a 	srli	r7,r18,16
 4010dc8:	d8c00117 	ldw	r3,4(sp)
 4010dcc:	3cceb03a 	or	r7,r7,r19
 4010dd0:	3880052e 	bgeu	r7,r2,4010de8 <__udivdi3+0x258>
 4010dd4:	3c4f883a 	add	r7,r7,r17
 4010dd8:	b13fffc4 	addi	r4,r22,-1
 4010ddc:	3c400136 	bltu	r7,r17,4010de4 <__udivdi3+0x254>
 4010de0:	3880e436 	bltu	r7,r2,4011174 <__udivdi3+0x5e4>
 4010de4:	202d883a 	mov	r22,r4
 4010de8:	38a1c83a 	sub	r16,r7,r2
 4010dec:	8009883a 	mov	r4,r16
 4010df0:	a80b883a 	mov	r5,r21
 4010df4:	d8c00115 	stw	r3,4(sp)
 4010df8:	40019bc0 	call	40019bc <__umodsi3>
 4010dfc:	1027883a 	mov	r19,r2
 4010e00:	8009883a 	mov	r4,r16
 4010e04:	a80b883a 	mov	r5,r21
 4010e08:	9826943a 	slli	r19,r19,16
 4010e0c:	40019580 	call	4001958 <__udivsi3>
 4010e10:	a00b883a 	mov	r5,r20
 4010e14:	1009883a 	mov	r4,r2
 4010e18:	94bfffcc 	andi	r18,r18,65535
 4010e1c:	1021883a 	mov	r16,r2
 4010e20:	94e4b03a 	or	r18,r18,r19
 4010e24:	4001a140 	call	4001a14 <__mulsi3>
 4010e28:	d8c00117 	ldw	r3,4(sp)
 4010e2c:	9080052e 	bgeu	r18,r2,4010e44 <__udivdi3+0x2b4>
 4010e30:	8ca5883a 	add	r18,r17,r18
 4010e34:	813fffc4 	addi	r4,r16,-1
 4010e38:	9440ad36 	bltu	r18,r17,40110f0 <__udivdi3+0x560>
 4010e3c:	9080ac2e 	bgeu	r18,r2,40110f0 <__udivdi3+0x560>
 4010e40:	843fff84 	addi	r16,r16,-2
 4010e44:	b004943a 	slli	r2,r22,16
 4010e48:	1404b03a 	or	r2,r2,r16
 4010e4c:	00000206 	br	4010e58 <__udivdi3+0x2c8>
 4010e50:	0007883a 	mov	r3,zero
 4010e54:	0005883a 	mov	r2,zero
 4010e58:	dfc00b17 	ldw	ra,44(sp)
 4010e5c:	df000a17 	ldw	fp,40(sp)
 4010e60:	ddc00917 	ldw	r23,36(sp)
 4010e64:	dd800817 	ldw	r22,32(sp)
 4010e68:	dd400717 	ldw	r21,28(sp)
 4010e6c:	dd000617 	ldw	r20,24(sp)
 4010e70:	dcc00517 	ldw	r19,20(sp)
 4010e74:	dc800417 	ldw	r18,16(sp)
 4010e78:	dc400317 	ldw	r17,12(sp)
 4010e7c:	dc000217 	ldw	r16,8(sp)
 4010e80:	dec00c04 	addi	sp,sp,48
 4010e84:	f800283a 	ret
 4010e88:	00803fc4 	movi	r2,255
 4010e8c:	11c5803a 	cmpltu	r2,r2,r7
 4010e90:	100490fa 	slli	r2,r2,3
 4010e94:	003f9906 	br	4010cfc <__alt_data_end+0xfc010cfc>
 4010e98:	00803fc4 	movi	r2,255
 4010e9c:	1445803a 	cmpltu	r2,r2,r17
 4010ea0:	100490fa 	slli	r2,r2,3
 4010ea4:	003fad06 	br	4010d5c <__alt_data_end+0xfc010d5c>
 4010ea8:	00804034 	movhi	r2,256
 4010eac:	10bfffc4 	addi	r2,r2,-1
 4010eb0:	11809f36 	bltu	r2,r6,4011130 <__udivdi3+0x5a0>
 4010eb4:	00800404 	movi	r2,16
 4010eb8:	003f4c06 	br	4010bec <__alt_data_end+0xfc010bec>
 4010ebc:	3dce983a 	sll	r7,r7,r23
 4010ec0:	30b8d83a 	srl	fp,r6,r2
 4010ec4:	80a2d83a 	srl	r17,r16,r2
 4010ec8:	35cc983a 	sll	r6,r6,r23
 4010ecc:	3f38b03a 	or	fp,r7,fp
 4010ed0:	e024d43a 	srli	r18,fp,16
 4010ed4:	9884d83a 	srl	r2,r19,r2
 4010ed8:	85e0983a 	sll	r16,r16,r23
 4010edc:	8809883a 	mov	r4,r17
 4010ee0:	900b883a 	mov	r5,r18
 4010ee4:	d9800015 	stw	r6,0(sp)
 4010ee8:	1420b03a 	or	r16,r2,r16
 4010eec:	40019bc0 	call	40019bc <__umodsi3>
 4010ef0:	900b883a 	mov	r5,r18
 4010ef4:	8809883a 	mov	r4,r17
 4010ef8:	1029883a 	mov	r20,r2
 4010efc:	e5bfffcc 	andi	r22,fp,65535
 4010f00:	40019580 	call	4001958 <__udivsi3>
 4010f04:	100b883a 	mov	r5,r2
 4010f08:	b009883a 	mov	r4,r22
 4010f0c:	102b883a 	mov	r21,r2
 4010f10:	4001a140 	call	4001a14 <__mulsi3>
 4010f14:	a028943a 	slli	r20,r20,16
 4010f18:	8006d43a 	srli	r3,r16,16
 4010f1c:	1d06b03a 	or	r3,r3,r20
 4010f20:	1880042e 	bgeu	r3,r2,4010f34 <__udivdi3+0x3a4>
 4010f24:	1f07883a 	add	r3,r3,fp
 4010f28:	a93fffc4 	addi	r4,r21,-1
 4010f2c:	1f00892e 	bgeu	r3,fp,4011154 <__udivdi3+0x5c4>
 4010f30:	202b883a 	mov	r21,r4
 4010f34:	18a3c83a 	sub	r17,r3,r2
 4010f38:	8809883a 	mov	r4,r17
 4010f3c:	900b883a 	mov	r5,r18
 4010f40:	40019bc0 	call	40019bc <__umodsi3>
 4010f44:	1029883a 	mov	r20,r2
 4010f48:	8809883a 	mov	r4,r17
 4010f4c:	900b883a 	mov	r5,r18
 4010f50:	a028943a 	slli	r20,r20,16
 4010f54:	40019580 	call	4001958 <__udivsi3>
 4010f58:	100b883a 	mov	r5,r2
 4010f5c:	b009883a 	mov	r4,r22
 4010f60:	843fffcc 	andi	r16,r16,65535
 4010f64:	1023883a 	mov	r17,r2
 4010f68:	8520b03a 	or	r16,r16,r20
 4010f6c:	4001a140 	call	4001a14 <__mulsi3>
 4010f70:	8080042e 	bgeu	r16,r2,4010f84 <__udivdi3+0x3f4>
 4010f74:	8721883a 	add	r16,r16,fp
 4010f78:	88ffffc4 	addi	r3,r17,-1
 4010f7c:	8700712e 	bgeu	r16,fp,4011144 <__udivdi3+0x5b4>
 4010f80:	1823883a 	mov	r17,r3
 4010f84:	a80e943a 	slli	r7,r21,16
 4010f88:	d8c00017 	ldw	r3,0(sp)
 4010f8c:	80a1c83a 	sub	r16,r16,r2
 4010f90:	3c64b03a 	or	r18,r7,r17
 4010f94:	1d3fffcc 	andi	r20,r3,65535
 4010f98:	9022d43a 	srli	r17,r18,16
 4010f9c:	95bfffcc 	andi	r22,r18,65535
 4010fa0:	a00b883a 	mov	r5,r20
 4010fa4:	b009883a 	mov	r4,r22
 4010fa8:	182ad43a 	srli	r21,r3,16
 4010fac:	4001a140 	call	4001a14 <__mulsi3>
 4010fb0:	a00b883a 	mov	r5,r20
 4010fb4:	8809883a 	mov	r4,r17
 4010fb8:	1039883a 	mov	fp,r2
 4010fbc:	4001a140 	call	4001a14 <__mulsi3>
 4010fc0:	8809883a 	mov	r4,r17
 4010fc4:	a80b883a 	mov	r5,r21
 4010fc8:	1029883a 	mov	r20,r2
 4010fcc:	4001a140 	call	4001a14 <__mulsi3>
 4010fd0:	a80b883a 	mov	r5,r21
 4010fd4:	b009883a 	mov	r4,r22
 4010fd8:	1023883a 	mov	r17,r2
 4010fdc:	4001a140 	call	4001a14 <__mulsi3>
 4010fe0:	e006d43a 	srli	r3,fp,16
 4010fe4:	1505883a 	add	r2,r2,r20
 4010fe8:	1887883a 	add	r3,r3,r2
 4010fec:	1d00022e 	bgeu	r3,r20,4010ff8 <__udivdi3+0x468>
 4010ff0:	00800074 	movhi	r2,1
 4010ff4:	88a3883a 	add	r17,r17,r2
 4010ff8:	1804d43a 	srli	r2,r3,16
 4010ffc:	1463883a 	add	r17,r2,r17
 4011000:	84404436 	bltu	r16,r17,4011114 <__udivdi3+0x584>
 4011004:	84403e26 	beq	r16,r17,4011100 <__udivdi3+0x570>
 4011008:	9005883a 	mov	r2,r18
 401100c:	0007883a 	mov	r3,zero
 4011010:	003f9106 	br	4010e58 <__alt_data_end+0xfc010e58>
 4011014:	88e2983a 	sll	r17,r17,r3
 4011018:	80aed83a 	srl	r23,r16,r2
 401101c:	80e0983a 	sll	r16,r16,r3
 4011020:	882ad43a 	srli	r21,r17,16
 4011024:	9884d83a 	srl	r2,r19,r2
 4011028:	b809883a 	mov	r4,r23
 401102c:	a80b883a 	mov	r5,r21
 4011030:	98e4983a 	sll	r18,r19,r3
 4011034:	142cb03a 	or	r22,r2,r16
 4011038:	40019bc0 	call	40019bc <__umodsi3>
 401103c:	b809883a 	mov	r4,r23
 4011040:	a80b883a 	mov	r5,r21
 4011044:	1027883a 	mov	r19,r2
 4011048:	8d3fffcc 	andi	r20,r17,65535
 401104c:	40019580 	call	4001958 <__udivsi3>
 4011050:	a009883a 	mov	r4,r20
 4011054:	100b883a 	mov	r5,r2
 4011058:	102f883a 	mov	r23,r2
 401105c:	4001a140 	call	4001a14 <__mulsi3>
 4011060:	9826943a 	slli	r19,r19,16
 4011064:	b008d43a 	srli	r4,r22,16
 4011068:	24c8b03a 	or	r4,r4,r19
 401106c:	2080062e 	bgeu	r4,r2,4011088 <__udivdi3+0x4f8>
 4011070:	2449883a 	add	r4,r4,r17
 4011074:	b8ffffc4 	addi	r3,r23,-1
 4011078:	24403c36 	bltu	r4,r17,401116c <__udivdi3+0x5dc>
 401107c:	20803b2e 	bgeu	r4,r2,401116c <__udivdi3+0x5dc>
 4011080:	bdffff84 	addi	r23,r23,-2
 4011084:	2449883a 	add	r4,r4,r17
 4011088:	20a1c83a 	sub	r16,r4,r2
 401108c:	a80b883a 	mov	r5,r21
 4011090:	8009883a 	mov	r4,r16
 4011094:	40019bc0 	call	40019bc <__umodsi3>
 4011098:	a80b883a 	mov	r5,r21
 401109c:	8009883a 	mov	r4,r16
 40110a0:	1027883a 	mov	r19,r2
 40110a4:	40019580 	call	4001958 <__udivsi3>
 40110a8:	a009883a 	mov	r4,r20
 40110ac:	100b883a 	mov	r5,r2
 40110b0:	9826943a 	slli	r19,r19,16
 40110b4:	1039883a 	mov	fp,r2
 40110b8:	4001a140 	call	4001a14 <__mulsi3>
 40110bc:	b13fffcc 	andi	r4,r22,65535
 40110c0:	24c8b03a 	or	r4,r4,r19
 40110c4:	2080062e 	bgeu	r4,r2,40110e0 <__udivdi3+0x550>
 40110c8:	2449883a 	add	r4,r4,r17
 40110cc:	e0ffffc4 	addi	r3,fp,-1
 40110d0:	24402436 	bltu	r4,r17,4011164 <__udivdi3+0x5d4>
 40110d4:	2080232e 	bgeu	r4,r2,4011164 <__udivdi3+0x5d4>
 40110d8:	e73fff84 	addi	fp,fp,-2
 40110dc:	2449883a 	add	r4,r4,r17
 40110e0:	b82e943a 	slli	r23,r23,16
 40110e4:	20a1c83a 	sub	r16,r4,r2
 40110e8:	bf06b03a 	or	r3,r23,fp
 40110ec:	003f2806 	br	4010d90 <__alt_data_end+0xfc010d90>
 40110f0:	2021883a 	mov	r16,r4
 40110f4:	003f5306 	br	4010e44 <__alt_data_end+0xfc010e44>
 40110f8:	1821883a 	mov	r16,r3
 40110fc:	003ef406 	br	4010cd0 <__alt_data_end+0xfc010cd0>
 4011100:	1806943a 	slli	r3,r3,16
 4011104:	9de6983a 	sll	r19,r19,r23
 4011108:	e73fffcc 	andi	fp,fp,65535
 401110c:	1f07883a 	add	r3,r3,fp
 4011110:	98ffbd2e 	bgeu	r19,r3,4011008 <__alt_data_end+0xfc011008>
 4011114:	90bfffc4 	addi	r2,r18,-1
 4011118:	0007883a 	mov	r3,zero
 401111c:	003f4e06 	br	4010e58 <__alt_data_end+0xfc010e58>
 4011120:	00800604 	movi	r2,24
 4011124:	003ef506 	br	4010cfc <__alt_data_end+0xfc010cfc>
 4011128:	00800604 	movi	r2,24
 401112c:	003f0b06 	br	4010d5c <__alt_data_end+0xfc010d5c>
 4011130:	00800604 	movi	r2,24
 4011134:	003ead06 	br	4010bec <__alt_data_end+0xfc010bec>
 4011138:	0007883a 	mov	r3,zero
 401113c:	00800044 	movi	r2,1
 4011140:	003f4506 	br	4010e58 <__alt_data_end+0xfc010e58>
 4011144:	80bf8e2e 	bgeu	r16,r2,4010f80 <__alt_data_end+0xfc010f80>
 4011148:	8c7fff84 	addi	r17,r17,-2
 401114c:	8721883a 	add	r16,r16,fp
 4011150:	003f8c06 	br	4010f84 <__alt_data_end+0xfc010f84>
 4011154:	18bf762e 	bgeu	r3,r2,4010f30 <__alt_data_end+0xfc010f30>
 4011158:	ad7fff84 	addi	r21,r21,-2
 401115c:	1f07883a 	add	r3,r3,fp
 4011160:	003f7406 	br	4010f34 <__alt_data_end+0xfc010f34>
 4011164:	1839883a 	mov	fp,r3
 4011168:	003fdd06 	br	40110e0 <__alt_data_end+0xfc0110e0>
 401116c:	182f883a 	mov	r23,r3
 4011170:	003fc506 	br	4011088 <__alt_data_end+0xfc011088>
 4011174:	b5bfff84 	addi	r22,r22,-2
 4011178:	3c4f883a 	add	r7,r7,r17
 401117c:	003f1a06 	br	4010de8 <__alt_data_end+0xfc010de8>
 4011180:	b5bfff84 	addi	r22,r22,-2
 4011184:	1c47883a 	add	r3,r3,r17
 4011188:	003ebc06 	br	4010c7c <__alt_data_end+0xfc010c7c>

0401118c <__umoddi3>:
 401118c:	defff304 	addi	sp,sp,-52
 4011190:	df000b15 	stw	fp,44(sp)
 4011194:	dc400415 	stw	r17,16(sp)
 4011198:	dc000315 	stw	r16,12(sp)
 401119c:	dfc00c15 	stw	ra,48(sp)
 40111a0:	ddc00a15 	stw	r23,40(sp)
 40111a4:	dd800915 	stw	r22,36(sp)
 40111a8:	dd400815 	stw	r21,32(sp)
 40111ac:	dd000715 	stw	r20,28(sp)
 40111b0:	dcc00615 	stw	r19,24(sp)
 40111b4:	dc800515 	stw	r18,20(sp)
 40111b8:	2021883a 	mov	r16,r4
 40111bc:	2823883a 	mov	r17,r5
 40111c0:	2839883a 	mov	fp,r5
 40111c4:	3800401e 	bne	r7,zero,40112c8 <__umoddi3+0x13c>
 40111c8:	3027883a 	mov	r19,r6
 40111cc:	2029883a 	mov	r20,r4
 40111d0:	2980552e 	bgeu	r5,r6,4011328 <__umoddi3+0x19c>
 40111d4:	00bfffd4 	movui	r2,65535
 40111d8:	1180a236 	bltu	r2,r6,4011464 <__umoddi3+0x2d8>
 40111dc:	01003fc4 	movi	r4,255
 40111e0:	2189803a 	cmpltu	r4,r4,r6
 40111e4:	200890fa 	slli	r4,r4,3
 40111e8:	3104d83a 	srl	r2,r6,r4
 40111ec:	00c100b4 	movhi	r3,1026
 40111f0:	18e17904 	addi	r3,r3,-31260
 40111f4:	1885883a 	add	r2,r3,r2
 40111f8:	10c00003 	ldbu	r3,0(r2)
 40111fc:	00800804 	movi	r2,32
 4011200:	1909883a 	add	r4,r3,r4
 4011204:	1125c83a 	sub	r18,r2,r4
 4011208:	90000526 	beq	r18,zero,4011220 <__umoddi3+0x94>
 401120c:	8ca2983a 	sll	r17,r17,r18
 4011210:	8108d83a 	srl	r4,r16,r4
 4011214:	34a6983a 	sll	r19,r6,r18
 4011218:	84a8983a 	sll	r20,r16,r18
 401121c:	2478b03a 	or	fp,r4,r17
 4011220:	982cd43a 	srli	r22,r19,16
 4011224:	e009883a 	mov	r4,fp
 4011228:	9dffffcc 	andi	r23,r19,65535
 401122c:	b00b883a 	mov	r5,r22
 4011230:	40019bc0 	call	40019bc <__umodsi3>
 4011234:	b00b883a 	mov	r5,r22
 4011238:	e009883a 	mov	r4,fp
 401123c:	102b883a 	mov	r21,r2
 4011240:	40019580 	call	4001958 <__udivsi3>
 4011244:	100b883a 	mov	r5,r2
 4011248:	b809883a 	mov	r4,r23
 401124c:	4001a140 	call	4001a14 <__mulsi3>
 4011250:	a82a943a 	slli	r21,r21,16
 4011254:	a006d43a 	srli	r3,r20,16
 4011258:	1d46b03a 	or	r3,r3,r21
 401125c:	1880032e 	bgeu	r3,r2,401126c <__umoddi3+0xe0>
 4011260:	1cc7883a 	add	r3,r3,r19
 4011264:	1cc00136 	bltu	r3,r19,401126c <__umoddi3+0xe0>
 4011268:	18813136 	bltu	r3,r2,4011730 <__umoddi3+0x5a4>
 401126c:	18a1c83a 	sub	r16,r3,r2
 4011270:	b00b883a 	mov	r5,r22
 4011274:	8009883a 	mov	r4,r16
 4011278:	40019bc0 	call	40019bc <__umodsi3>
 401127c:	b00b883a 	mov	r5,r22
 4011280:	8009883a 	mov	r4,r16
 4011284:	1023883a 	mov	r17,r2
 4011288:	40019580 	call	4001958 <__udivsi3>
 401128c:	100b883a 	mov	r5,r2
 4011290:	b809883a 	mov	r4,r23
 4011294:	8822943a 	slli	r17,r17,16
 4011298:	4001a140 	call	4001a14 <__mulsi3>
 401129c:	a0ffffcc 	andi	r3,r20,65535
 40112a0:	1c46b03a 	or	r3,r3,r17
 40112a4:	1880042e 	bgeu	r3,r2,40112b8 <__umoddi3+0x12c>
 40112a8:	1cc7883a 	add	r3,r3,r19
 40112ac:	1cc00236 	bltu	r3,r19,40112b8 <__umoddi3+0x12c>
 40112b0:	1880012e 	bgeu	r3,r2,40112b8 <__umoddi3+0x12c>
 40112b4:	1cc7883a 	add	r3,r3,r19
 40112b8:	1885c83a 	sub	r2,r3,r2
 40112bc:	1484d83a 	srl	r2,r2,r18
 40112c0:	0007883a 	mov	r3,zero
 40112c4:	00005306 	br	4011414 <__umoddi3+0x288>
 40112c8:	29c05036 	bltu	r5,r7,401140c <__umoddi3+0x280>
 40112cc:	00bfffd4 	movui	r2,65535
 40112d0:	11c05c2e 	bgeu	r2,r7,4011444 <__umoddi3+0x2b8>
 40112d4:	00804034 	movhi	r2,256
 40112d8:	10bfffc4 	addi	r2,r2,-1
 40112dc:	11c10636 	bltu	r2,r7,40116f8 <__umoddi3+0x56c>
 40112e0:	01000404 	movi	r4,16
 40112e4:	3904d83a 	srl	r2,r7,r4
 40112e8:	00c100b4 	movhi	r3,1026
 40112ec:	18e17904 	addi	r3,r3,-31260
 40112f0:	1885883a 	add	r2,r3,r2
 40112f4:	14c00003 	ldbu	r19,0(r2)
 40112f8:	00c00804 	movi	r3,32
 40112fc:	9927883a 	add	r19,r19,r4
 4011300:	1ce9c83a 	sub	r20,r3,r19
 4011304:	a0005c1e 	bne	r20,zero,4011478 <__umoddi3+0x2ec>
 4011308:	3c400136 	bltu	r7,r17,4011310 <__umoddi3+0x184>
 401130c:	81810a36 	bltu	r16,r6,4011738 <__umoddi3+0x5ac>
 4011310:	8185c83a 	sub	r2,r16,r6
 4011314:	89e3c83a 	sub	r17,r17,r7
 4011318:	8089803a 	cmpltu	r4,r16,r2
 401131c:	8939c83a 	sub	fp,r17,r4
 4011320:	e007883a 	mov	r3,fp
 4011324:	00003b06 	br	4011414 <__umoddi3+0x288>
 4011328:	3000041e 	bne	r6,zero,401133c <__umoddi3+0x1b0>
 401132c:	000b883a 	mov	r5,zero
 4011330:	01000044 	movi	r4,1
 4011334:	40019580 	call	4001958 <__udivsi3>
 4011338:	1027883a 	mov	r19,r2
 401133c:	00bfffd4 	movui	r2,65535
 4011340:	14c0442e 	bgeu	r2,r19,4011454 <__umoddi3+0x2c8>
 4011344:	00804034 	movhi	r2,256
 4011348:	10bfffc4 	addi	r2,r2,-1
 401134c:	14c0ec36 	bltu	r2,r19,4011700 <__umoddi3+0x574>
 4011350:	00800404 	movi	r2,16
 4011354:	9886d83a 	srl	r3,r19,r2
 4011358:	010100b4 	movhi	r4,1026
 401135c:	21217904 	addi	r4,r4,-31260
 4011360:	20c7883a 	add	r3,r4,r3
 4011364:	18c00003 	ldbu	r3,0(r3)
 4011368:	1887883a 	add	r3,r3,r2
 401136c:	00800804 	movi	r2,32
 4011370:	10e5c83a 	sub	r18,r2,r3
 4011374:	9000ab1e 	bne	r18,zero,4011624 <__umoddi3+0x498>
 4011378:	982cd43a 	srli	r22,r19,16
 401137c:	8ce3c83a 	sub	r17,r17,r19
 4011380:	9dffffcc 	andi	r23,r19,65535
 4011384:	b00b883a 	mov	r5,r22
 4011388:	8809883a 	mov	r4,r17
 401138c:	40019bc0 	call	40019bc <__umodsi3>
 4011390:	b00b883a 	mov	r5,r22
 4011394:	8809883a 	mov	r4,r17
 4011398:	102b883a 	mov	r21,r2
 401139c:	40019580 	call	4001958 <__udivsi3>
 40113a0:	b80b883a 	mov	r5,r23
 40113a4:	1009883a 	mov	r4,r2
 40113a8:	4001a140 	call	4001a14 <__mulsi3>
 40113ac:	a82a943a 	slli	r21,r21,16
 40113b0:	a006d43a 	srli	r3,r20,16
 40113b4:	1d46b03a 	or	r3,r3,r21
 40113b8:	1880042e 	bgeu	r3,r2,40113cc <__umoddi3+0x240>
 40113bc:	1cc7883a 	add	r3,r3,r19
 40113c0:	1cc00236 	bltu	r3,r19,40113cc <__umoddi3+0x240>
 40113c4:	1880012e 	bgeu	r3,r2,40113cc <__umoddi3+0x240>
 40113c8:	1cc7883a 	add	r3,r3,r19
 40113cc:	18a1c83a 	sub	r16,r3,r2
 40113d0:	b00b883a 	mov	r5,r22
 40113d4:	8009883a 	mov	r4,r16
 40113d8:	40019bc0 	call	40019bc <__umodsi3>
 40113dc:	1023883a 	mov	r17,r2
 40113e0:	b00b883a 	mov	r5,r22
 40113e4:	8009883a 	mov	r4,r16
 40113e8:	40019580 	call	4001958 <__udivsi3>
 40113ec:	8822943a 	slli	r17,r17,16
 40113f0:	b80b883a 	mov	r5,r23
 40113f4:	1009883a 	mov	r4,r2
 40113f8:	4001a140 	call	4001a14 <__mulsi3>
 40113fc:	a53fffcc 	andi	r20,r20,65535
 4011400:	a446b03a 	or	r3,r20,r17
 4011404:	18bfac2e 	bgeu	r3,r2,40112b8 <__alt_data_end+0xfc0112b8>
 4011408:	003fa706 	br	40112a8 <__alt_data_end+0xfc0112a8>
 401140c:	2005883a 	mov	r2,r4
 4011410:	2807883a 	mov	r3,r5
 4011414:	dfc00c17 	ldw	ra,48(sp)
 4011418:	df000b17 	ldw	fp,44(sp)
 401141c:	ddc00a17 	ldw	r23,40(sp)
 4011420:	dd800917 	ldw	r22,36(sp)
 4011424:	dd400817 	ldw	r21,32(sp)
 4011428:	dd000717 	ldw	r20,28(sp)
 401142c:	dcc00617 	ldw	r19,24(sp)
 4011430:	dc800517 	ldw	r18,20(sp)
 4011434:	dc400417 	ldw	r17,16(sp)
 4011438:	dc000317 	ldw	r16,12(sp)
 401143c:	dec00d04 	addi	sp,sp,52
 4011440:	f800283a 	ret
 4011444:	04c03fc4 	movi	r19,255
 4011448:	99c9803a 	cmpltu	r4,r19,r7
 401144c:	200890fa 	slli	r4,r4,3
 4011450:	003fa406 	br	40112e4 <__alt_data_end+0xfc0112e4>
 4011454:	00803fc4 	movi	r2,255
 4011458:	14c5803a 	cmpltu	r2,r2,r19
 401145c:	100490fa 	slli	r2,r2,3
 4011460:	003fbc06 	br	4011354 <__alt_data_end+0xfc011354>
 4011464:	00804034 	movhi	r2,256
 4011468:	10bfffc4 	addi	r2,r2,-1
 401146c:	1180a636 	bltu	r2,r6,4011708 <__umoddi3+0x57c>
 4011470:	01000404 	movi	r4,16
 4011474:	003f5c06 	br	40111e8 <__alt_data_end+0xfc0111e8>
 4011478:	3d0e983a 	sll	r7,r7,r20
 401147c:	34ead83a 	srl	r21,r6,r19
 4011480:	8cc6d83a 	srl	r3,r17,r19
 4011484:	8d10983a 	sll	r8,r17,r20
 4011488:	3d6ab03a 	or	r21,r7,r21
 401148c:	a82cd43a 	srli	r22,r21,16
 4011490:	84e2d83a 	srl	r17,r16,r19
 4011494:	1809883a 	mov	r4,r3
 4011498:	b00b883a 	mov	r5,r22
 401149c:	8a22b03a 	or	r17,r17,r8
 40114a0:	3524983a 	sll	r18,r6,r20
 40114a4:	dc400015 	stw	r17,0(sp)
 40114a8:	d8c00115 	stw	r3,4(sp)
 40114ac:	40019bc0 	call	40019bc <__umodsi3>
 40114b0:	d8c00117 	ldw	r3,4(sp)
 40114b4:	b00b883a 	mov	r5,r22
 40114b8:	1039883a 	mov	fp,r2
 40114bc:	1809883a 	mov	r4,r3
 40114c0:	40019580 	call	4001958 <__udivsi3>
 40114c4:	adffffcc 	andi	r23,r21,65535
 40114c8:	100b883a 	mov	r5,r2
 40114cc:	b809883a 	mov	r4,r23
 40114d0:	1023883a 	mov	r17,r2
 40114d4:	4001a140 	call	4001a14 <__mulsi3>
 40114d8:	d9400017 	ldw	r5,0(sp)
 40114dc:	e008943a 	slli	r4,fp,16
 40114e0:	8520983a 	sll	r16,r16,r20
 40114e4:	2806d43a 	srli	r3,r5,16
 40114e8:	1906b03a 	or	r3,r3,r4
 40114ec:	1880042e 	bgeu	r3,r2,4011500 <__umoddi3+0x374>
 40114f0:	1d47883a 	add	r3,r3,r21
 40114f4:	893fffc4 	addi	r4,r17,-1
 40114f8:	1d40892e 	bgeu	r3,r21,4011720 <__umoddi3+0x594>
 40114fc:	2023883a 	mov	r17,r4
 4011500:	18b9c83a 	sub	fp,r3,r2
 4011504:	b00b883a 	mov	r5,r22
 4011508:	e009883a 	mov	r4,fp
 401150c:	40019bc0 	call	40019bc <__umodsi3>
 4011510:	b00b883a 	mov	r5,r22
 4011514:	e009883a 	mov	r4,fp
 4011518:	d8800215 	stw	r2,8(sp)
 401151c:	40019580 	call	4001958 <__udivsi3>
 4011520:	100b883a 	mov	r5,r2
 4011524:	b809883a 	mov	r4,r23
 4011528:	102d883a 	mov	r22,r2
 401152c:	4001a140 	call	4001a14 <__mulsi3>
 4011530:	d9800217 	ldw	r6,8(sp)
 4011534:	d8c00017 	ldw	r3,0(sp)
 4011538:	300c943a 	slli	r6,r6,16
 401153c:	1a3fffcc 	andi	r8,r3,65535
 4011540:	4190b03a 	or	r8,r8,r6
 4011544:	4080042e 	bgeu	r8,r2,4011558 <__umoddi3+0x3cc>
 4011548:	4551883a 	add	r8,r8,r21
 401154c:	b0ffffc4 	addi	r3,r22,-1
 4011550:	45406f2e 	bgeu	r8,r21,4011710 <__umoddi3+0x584>
 4011554:	182d883a 	mov	r22,r3
 4011558:	880e943a 	slli	r7,r17,16
 401155c:	9006d43a 	srli	r3,r18,16
 4011560:	91bfffcc 	andi	r6,r18,65535
 4011564:	3dacb03a 	or	r22,r7,r22
 4011568:	b02ed43a 	srli	r23,r22,16
 401156c:	b5bfffcc 	andi	r22,r22,65535
 4011570:	300b883a 	mov	r5,r6
 4011574:	b009883a 	mov	r4,r22
 4011578:	40a3c83a 	sub	r17,r8,r2
 401157c:	d8c00115 	stw	r3,4(sp)
 4011580:	d9800215 	stw	r6,8(sp)
 4011584:	4001a140 	call	4001a14 <__mulsi3>
 4011588:	d9800217 	ldw	r6,8(sp)
 401158c:	b809883a 	mov	r4,r23
 4011590:	1039883a 	mov	fp,r2
 4011594:	300b883a 	mov	r5,r6
 4011598:	4001a140 	call	4001a14 <__mulsi3>
 401159c:	d8c00117 	ldw	r3,4(sp)
 40115a0:	b809883a 	mov	r4,r23
 40115a4:	d8800215 	stw	r2,8(sp)
 40115a8:	180b883a 	mov	r5,r3
 40115ac:	4001a140 	call	4001a14 <__mulsi3>
 40115b0:	d8c00117 	ldw	r3,4(sp)
 40115b4:	b009883a 	mov	r4,r22
 40115b8:	102f883a 	mov	r23,r2
 40115bc:	180b883a 	mov	r5,r3
 40115c0:	4001a140 	call	4001a14 <__mulsi3>
 40115c4:	d9800217 	ldw	r6,8(sp)
 40115c8:	e006d43a 	srli	r3,fp,16
 40115cc:	1185883a 	add	r2,r2,r6
 40115d0:	1885883a 	add	r2,r3,r2
 40115d4:	1180022e 	bgeu	r2,r6,40115e0 <__umoddi3+0x454>
 40115d8:	00c00074 	movhi	r3,1
 40115dc:	b8ef883a 	add	r23,r23,r3
 40115e0:	1006d43a 	srli	r3,r2,16
 40115e4:	1004943a 	slli	r2,r2,16
 40115e8:	e73fffcc 	andi	fp,fp,65535
 40115ec:	1dc7883a 	add	r3,r3,r23
 40115f0:	1739883a 	add	fp,r2,fp
 40115f4:	88c03a36 	bltu	r17,r3,40116e0 <__umoddi3+0x554>
 40115f8:	88c05126 	beq	r17,r3,4011740 <__umoddi3+0x5b4>
 40115fc:	88c9c83a 	sub	r4,r17,r3
 4011600:	e00f883a 	mov	r7,fp
 4011604:	81cfc83a 	sub	r7,r16,r7
 4011608:	81c7803a 	cmpltu	r3,r16,r7
 401160c:	20c7c83a 	sub	r3,r4,r3
 4011610:	1cc4983a 	sll	r2,r3,r19
 4011614:	3d0ed83a 	srl	r7,r7,r20
 4011618:	1d06d83a 	srl	r3,r3,r20
 401161c:	11c4b03a 	or	r2,r2,r7
 4011620:	003f7c06 	br	4011414 <__alt_data_end+0xfc011414>
 4011624:	9ca6983a 	sll	r19,r19,r18
 4011628:	88f8d83a 	srl	fp,r17,r3
 401162c:	80c4d83a 	srl	r2,r16,r3
 4011630:	982cd43a 	srli	r22,r19,16
 4011634:	8ca2983a 	sll	r17,r17,r18
 4011638:	e009883a 	mov	r4,fp
 401163c:	b00b883a 	mov	r5,r22
 4011640:	146ab03a 	or	r21,r2,r17
 4011644:	40019bc0 	call	40019bc <__umodsi3>
 4011648:	b00b883a 	mov	r5,r22
 401164c:	e009883a 	mov	r4,fp
 4011650:	1029883a 	mov	r20,r2
 4011654:	9dffffcc 	andi	r23,r19,65535
 4011658:	40019580 	call	4001958 <__udivsi3>
 401165c:	b809883a 	mov	r4,r23
 4011660:	100b883a 	mov	r5,r2
 4011664:	4001a140 	call	4001a14 <__mulsi3>
 4011668:	a008943a 	slli	r4,r20,16
 401166c:	a806d43a 	srli	r3,r21,16
 4011670:	84a8983a 	sll	r20,r16,r18
 4011674:	1906b03a 	or	r3,r3,r4
 4011678:	1880042e 	bgeu	r3,r2,401168c <__umoddi3+0x500>
 401167c:	1cc7883a 	add	r3,r3,r19
 4011680:	1cc00236 	bltu	r3,r19,401168c <__umoddi3+0x500>
 4011684:	1880012e 	bgeu	r3,r2,401168c <__umoddi3+0x500>
 4011688:	1cc7883a 	add	r3,r3,r19
 401168c:	18a3c83a 	sub	r17,r3,r2
 4011690:	b00b883a 	mov	r5,r22
 4011694:	8809883a 	mov	r4,r17
 4011698:	40019bc0 	call	40019bc <__umodsi3>
 401169c:	b00b883a 	mov	r5,r22
 40116a0:	8809883a 	mov	r4,r17
 40116a4:	1021883a 	mov	r16,r2
 40116a8:	40019580 	call	4001958 <__udivsi3>
 40116ac:	100b883a 	mov	r5,r2
 40116b0:	b809883a 	mov	r4,r23
 40116b4:	8020943a 	slli	r16,r16,16
 40116b8:	4001a140 	call	4001a14 <__mulsi3>
 40116bc:	a8ffffcc 	andi	r3,r21,65535
 40116c0:	1c06b03a 	or	r3,r3,r16
 40116c4:	1880042e 	bgeu	r3,r2,40116d8 <__umoddi3+0x54c>
 40116c8:	1cc7883a 	add	r3,r3,r19
 40116cc:	1cc00236 	bltu	r3,r19,40116d8 <__umoddi3+0x54c>
 40116d0:	1880012e 	bgeu	r3,r2,40116d8 <__umoddi3+0x54c>
 40116d4:	1cc7883a 	add	r3,r3,r19
 40116d8:	18a3c83a 	sub	r17,r3,r2
 40116dc:	003f2906 	br	4011384 <__alt_data_end+0xfc011384>
 40116e0:	e48fc83a 	sub	r7,fp,r18
 40116e4:	1d49c83a 	sub	r4,r3,r21
 40116e8:	e1f9803a 	cmpltu	fp,fp,r7
 40116ec:	2739c83a 	sub	fp,r4,fp
 40116f0:	8f09c83a 	sub	r4,r17,fp
 40116f4:	003fc306 	br	4011604 <__alt_data_end+0xfc011604>
 40116f8:	01000604 	movi	r4,24
 40116fc:	003ef906 	br	40112e4 <__alt_data_end+0xfc0112e4>
 4011700:	00800604 	movi	r2,24
 4011704:	003f1306 	br	4011354 <__alt_data_end+0xfc011354>
 4011708:	01000604 	movi	r4,24
 401170c:	003eb606 	br	40111e8 <__alt_data_end+0xfc0111e8>
 4011710:	40bf902e 	bgeu	r8,r2,4011554 <__alt_data_end+0xfc011554>
 4011714:	b5bfff84 	addi	r22,r22,-2
 4011718:	4551883a 	add	r8,r8,r21
 401171c:	003f8e06 	br	4011558 <__alt_data_end+0xfc011558>
 4011720:	18bf762e 	bgeu	r3,r2,40114fc <__alt_data_end+0xfc0114fc>
 4011724:	8c7fff84 	addi	r17,r17,-2
 4011728:	1d47883a 	add	r3,r3,r21
 401172c:	003f7406 	br	4011500 <__alt_data_end+0xfc011500>
 4011730:	1cc7883a 	add	r3,r3,r19
 4011734:	003ecd06 	br	401126c <__alt_data_end+0xfc01126c>
 4011738:	8005883a 	mov	r2,r16
 401173c:	003ef806 	br	4011320 <__alt_data_end+0xfc011320>
 4011740:	873fe736 	bltu	r16,fp,40116e0 <__alt_data_end+0xfc0116e0>
 4011744:	e00f883a 	mov	r7,fp
 4011748:	0009883a 	mov	r4,zero
 401174c:	003fad06 	br	4011604 <__alt_data_end+0xfc011604>

04011750 <__eqsf2>:
 4011750:	2006d5fa 	srli	r3,r4,23
 4011754:	280cd5fa 	srli	r6,r5,23
 4011758:	01c02034 	movhi	r7,128
 401175c:	39ffffc4 	addi	r7,r7,-1
 4011760:	18c03fcc 	andi	r3,r3,255
 4011764:	02003fc4 	movi	r8,255
 4011768:	3904703a 	and	r2,r7,r4
 401176c:	31803fcc 	andi	r6,r6,255
 4011770:	394e703a 	and	r7,r7,r5
 4011774:	2008d7fa 	srli	r4,r4,31
 4011778:	280ad7fa 	srli	r5,r5,31
 401177c:	1a000d26 	beq	r3,r8,40117b4 <__eqsf2+0x64>
 4011780:	02003fc4 	movi	r8,255
 4011784:	32000826 	beq	r6,r8,40117a8 <__eqsf2+0x58>
 4011788:	19800226 	beq	r3,r6,4011794 <__eqsf2+0x44>
 401178c:	00800044 	movi	r2,1
 4011790:	f800283a 	ret
 4011794:	11fffd1e 	bne	r2,r7,401178c <__alt_data_end+0xfc01178c>
 4011798:	21400926 	beq	r4,r5,40117c0 <__eqsf2+0x70>
 401179c:	183ffb1e 	bne	r3,zero,401178c <__alt_data_end+0xfc01178c>
 40117a0:	1004c03a 	cmpne	r2,r2,zero
 40117a4:	f800283a 	ret
 40117a8:	383ff726 	beq	r7,zero,4011788 <__alt_data_end+0xfc011788>
 40117ac:	00800044 	movi	r2,1
 40117b0:	f800283a 	ret
 40117b4:	103ff226 	beq	r2,zero,4011780 <__alt_data_end+0xfc011780>
 40117b8:	00800044 	movi	r2,1
 40117bc:	f800283a 	ret
 40117c0:	0005883a 	mov	r2,zero
 40117c4:	f800283a 	ret

040117c8 <__gesf2>:
 40117c8:	2004d5fa 	srli	r2,r4,23
 40117cc:	2806d5fa 	srli	r3,r5,23
 40117d0:	01802034 	movhi	r6,128
 40117d4:	31bfffc4 	addi	r6,r6,-1
 40117d8:	10803fcc 	andi	r2,r2,255
 40117dc:	01c03fc4 	movi	r7,255
 40117e0:	3110703a 	and	r8,r6,r4
 40117e4:	18c03fcc 	andi	r3,r3,255
 40117e8:	314c703a 	and	r6,r6,r5
 40117ec:	2008d7fa 	srli	r4,r4,31
 40117f0:	280ad7fa 	srli	r5,r5,31
 40117f4:	11c01926 	beq	r2,r7,401185c <__gesf2+0x94>
 40117f8:	01c03fc4 	movi	r7,255
 40117fc:	19c00f26 	beq	r3,r7,401183c <__gesf2+0x74>
 4011800:	1000061e 	bne	r2,zero,401181c <__gesf2+0x54>
 4011804:	400f003a 	cmpeq	r7,r8,zero
 4011808:	1800071e 	bne	r3,zero,4011828 <__gesf2+0x60>
 401180c:	3000061e 	bne	r6,zero,4011828 <__gesf2+0x60>
 4011810:	0005883a 	mov	r2,zero
 4011814:	40000e1e 	bne	r8,zero,4011850 <__gesf2+0x88>
 4011818:	f800283a 	ret
 401181c:	18000a1e 	bne	r3,zero,4011848 <__gesf2+0x80>
 4011820:	30000b26 	beq	r6,zero,4011850 <__gesf2+0x88>
 4011824:	000f883a 	mov	r7,zero
 4011828:	29403fcc 	andi	r5,r5,255
 401182c:	38000726 	beq	r7,zero,401184c <__gesf2+0x84>
 4011830:	28000826 	beq	r5,zero,4011854 <__gesf2+0x8c>
 4011834:	00800044 	movi	r2,1
 4011838:	f800283a 	ret
 401183c:	303ff026 	beq	r6,zero,4011800 <__alt_data_end+0xfc011800>
 4011840:	00bfff84 	movi	r2,-2
 4011844:	f800283a 	ret
 4011848:	29403fcc 	andi	r5,r5,255
 401184c:	21400526 	beq	r4,r5,4011864 <__gesf2+0x9c>
 4011850:	203ff826 	beq	r4,zero,4011834 <__alt_data_end+0xfc011834>
 4011854:	00bfffc4 	movi	r2,-1
 4011858:	f800283a 	ret
 401185c:	403fe626 	beq	r8,zero,40117f8 <__alt_data_end+0xfc0117f8>
 4011860:	003ff706 	br	4011840 <__alt_data_end+0xfc011840>
 4011864:	18bffa16 	blt	r3,r2,4011850 <__alt_data_end+0xfc011850>
 4011868:	10c00216 	blt	r2,r3,4011874 <__gesf2+0xac>
 401186c:	323ff836 	bltu	r6,r8,4011850 <__alt_data_end+0xfc011850>
 4011870:	4180022e 	bgeu	r8,r6,401187c <__gesf2+0xb4>
 4011874:	203fef1e 	bne	r4,zero,4011834 <__alt_data_end+0xfc011834>
 4011878:	003ff606 	br	4011854 <__alt_data_end+0xfc011854>
 401187c:	0005883a 	mov	r2,zero
 4011880:	f800283a 	ret

04011884 <__lesf2>:
 4011884:	2004d5fa 	srli	r2,r4,23
 4011888:	280cd5fa 	srli	r6,r5,23
 401188c:	00c02034 	movhi	r3,128
 4011890:	18ffffc4 	addi	r3,r3,-1
 4011894:	10803fcc 	andi	r2,r2,255
 4011898:	01c03fc4 	movi	r7,255
 401189c:	1910703a 	and	r8,r3,r4
 40118a0:	31803fcc 	andi	r6,r6,255
 40118a4:	1946703a 	and	r3,r3,r5
 40118a8:	2008d7fa 	srli	r4,r4,31
 40118ac:	280ad7fa 	srli	r5,r5,31
 40118b0:	11c01b26 	beq	r2,r7,4011920 <__lesf2+0x9c>
 40118b4:	01c03fc4 	movi	r7,255
 40118b8:	31c01126 	beq	r6,r7,4011900 <__lesf2+0x7c>
 40118bc:	1000071e 	bne	r2,zero,40118dc <__lesf2+0x58>
 40118c0:	400f003a 	cmpeq	r7,r8,zero
 40118c4:	21003fcc 	andi	r4,r4,255
 40118c8:	3000081e 	bne	r6,zero,40118ec <__lesf2+0x68>
 40118cc:	1800071e 	bne	r3,zero,40118ec <__lesf2+0x68>
 40118d0:	0005883a 	mov	r2,zero
 40118d4:	40000f1e 	bne	r8,zero,4011914 <__lesf2+0x90>
 40118d8:	f800283a 	ret
 40118dc:	21003fcc 	andi	r4,r4,255
 40118e0:	30000a1e 	bne	r6,zero,401190c <__lesf2+0x88>
 40118e4:	18000b26 	beq	r3,zero,4011914 <__lesf2+0x90>
 40118e8:	000f883a 	mov	r7,zero
 40118ec:	29403fcc 	andi	r5,r5,255
 40118f0:	38000726 	beq	r7,zero,4011910 <__lesf2+0x8c>
 40118f4:	28000826 	beq	r5,zero,4011918 <__lesf2+0x94>
 40118f8:	00800044 	movi	r2,1
 40118fc:	f800283a 	ret
 4011900:	183fee26 	beq	r3,zero,40118bc <__alt_data_end+0xfc0118bc>
 4011904:	00800084 	movi	r2,2
 4011908:	f800283a 	ret
 401190c:	29403fcc 	andi	r5,r5,255
 4011910:	21400626 	beq	r4,r5,401192c <__lesf2+0xa8>
 4011914:	203ff826 	beq	r4,zero,40118f8 <__alt_data_end+0xfc0118f8>
 4011918:	00bfffc4 	movi	r2,-1
 401191c:	f800283a 	ret
 4011920:	403fe426 	beq	r8,zero,40118b4 <__alt_data_end+0xfc0118b4>
 4011924:	00800084 	movi	r2,2
 4011928:	f800283a 	ret
 401192c:	30bff916 	blt	r6,r2,4011914 <__alt_data_end+0xfc011914>
 4011930:	11800216 	blt	r2,r6,401193c <__lesf2+0xb8>
 4011934:	1a3ff736 	bltu	r3,r8,4011914 <__alt_data_end+0xfc011914>
 4011938:	40c0022e 	bgeu	r8,r3,4011944 <__lesf2+0xc0>
 401193c:	203fee1e 	bne	r4,zero,40118f8 <__alt_data_end+0xfc0118f8>
 4011940:	003ff506 	br	4011918 <__alt_data_end+0xfc011918>
 4011944:	0005883a 	mov	r2,zero
 4011948:	f800283a 	ret

0401194c <__adddf3>:
 401194c:	02c00434 	movhi	r11,16
 4011950:	5affffc4 	addi	r11,r11,-1
 4011954:	2806d7fa 	srli	r3,r5,31
 4011958:	2ad4703a 	and	r10,r5,r11
 401195c:	3ad2703a 	and	r9,r7,r11
 4011960:	3804d53a 	srli	r2,r7,20
 4011964:	3018d77a 	srli	r12,r6,29
 4011968:	280ad53a 	srli	r5,r5,20
 401196c:	501490fa 	slli	r10,r10,3
 4011970:	2010d77a 	srli	r8,r4,29
 4011974:	481290fa 	slli	r9,r9,3
 4011978:	380ed7fa 	srli	r7,r7,31
 401197c:	defffb04 	addi	sp,sp,-20
 4011980:	dc800215 	stw	r18,8(sp)
 4011984:	dc400115 	stw	r17,4(sp)
 4011988:	dc000015 	stw	r16,0(sp)
 401198c:	dfc00415 	stw	ra,16(sp)
 4011990:	dcc00315 	stw	r19,12(sp)
 4011994:	1c803fcc 	andi	r18,r3,255
 4011998:	2c01ffcc 	andi	r16,r5,2047
 401199c:	5210b03a 	or	r8,r10,r8
 40119a0:	202290fa 	slli	r17,r4,3
 40119a4:	1081ffcc 	andi	r2,r2,2047
 40119a8:	4b12b03a 	or	r9,r9,r12
 40119ac:	300c90fa 	slli	r6,r6,3
 40119b0:	91c07526 	beq	r18,r7,4011b88 <__adddf3+0x23c>
 40119b4:	8087c83a 	sub	r3,r16,r2
 40119b8:	00c0ab0e 	bge	zero,r3,4011c68 <__adddf3+0x31c>
 40119bc:	10002a1e 	bne	r2,zero,4011a68 <__adddf3+0x11c>
 40119c0:	4984b03a 	or	r2,r9,r6
 40119c4:	1000961e 	bne	r2,zero,4011c20 <__adddf3+0x2d4>
 40119c8:	888001cc 	andi	r2,r17,7
 40119cc:	10000726 	beq	r2,zero,40119ec <__adddf3+0xa0>
 40119d0:	888003cc 	andi	r2,r17,15
 40119d4:	00c00104 	movi	r3,4
 40119d8:	10c00426 	beq	r2,r3,40119ec <__adddf3+0xa0>
 40119dc:	88c7883a 	add	r3,r17,r3
 40119e0:	1c63803a 	cmpltu	r17,r3,r17
 40119e4:	4451883a 	add	r8,r8,r17
 40119e8:	1823883a 	mov	r17,r3
 40119ec:	4080202c 	andhi	r2,r8,128
 40119f0:	10005926 	beq	r2,zero,4011b58 <__adddf3+0x20c>
 40119f4:	84000044 	addi	r16,r16,1
 40119f8:	0081ffc4 	movi	r2,2047
 40119fc:	8080ba26 	beq	r16,r2,4011ce8 <__adddf3+0x39c>
 4011a00:	00bfe034 	movhi	r2,65408
 4011a04:	10bfffc4 	addi	r2,r2,-1
 4011a08:	4090703a 	and	r8,r8,r2
 4011a0c:	4004977a 	slli	r2,r8,29
 4011a10:	4010927a 	slli	r8,r8,9
 4011a14:	8822d0fa 	srli	r17,r17,3
 4011a18:	8401ffcc 	andi	r16,r16,2047
 4011a1c:	4010d33a 	srli	r8,r8,12
 4011a20:	9007883a 	mov	r3,r18
 4011a24:	1444b03a 	or	r2,r2,r17
 4011a28:	8401ffcc 	andi	r16,r16,2047
 4011a2c:	8020953a 	slli	r16,r16,20
 4011a30:	18c03fcc 	andi	r3,r3,255
 4011a34:	01000434 	movhi	r4,16
 4011a38:	213fffc4 	addi	r4,r4,-1
 4011a3c:	180697fa 	slli	r3,r3,31
 4011a40:	4110703a 	and	r8,r8,r4
 4011a44:	4410b03a 	or	r8,r8,r16
 4011a48:	40c6b03a 	or	r3,r8,r3
 4011a4c:	dfc00417 	ldw	ra,16(sp)
 4011a50:	dcc00317 	ldw	r19,12(sp)
 4011a54:	dc800217 	ldw	r18,8(sp)
 4011a58:	dc400117 	ldw	r17,4(sp)
 4011a5c:	dc000017 	ldw	r16,0(sp)
 4011a60:	dec00504 	addi	sp,sp,20
 4011a64:	f800283a 	ret
 4011a68:	0081ffc4 	movi	r2,2047
 4011a6c:	80bfd626 	beq	r16,r2,40119c8 <__alt_data_end+0xfc0119c8>
 4011a70:	4a402034 	orhi	r9,r9,128
 4011a74:	00800e04 	movi	r2,56
 4011a78:	10c09f16 	blt	r2,r3,4011cf8 <__adddf3+0x3ac>
 4011a7c:	008007c4 	movi	r2,31
 4011a80:	10c0c216 	blt	r2,r3,4011d8c <__adddf3+0x440>
 4011a84:	00800804 	movi	r2,32
 4011a88:	10c5c83a 	sub	r2,r2,r3
 4011a8c:	488a983a 	sll	r5,r9,r2
 4011a90:	30c8d83a 	srl	r4,r6,r3
 4011a94:	3084983a 	sll	r2,r6,r2
 4011a98:	48c6d83a 	srl	r3,r9,r3
 4011a9c:	290cb03a 	or	r6,r5,r4
 4011aa0:	1004c03a 	cmpne	r2,r2,zero
 4011aa4:	308cb03a 	or	r6,r6,r2
 4011aa8:	898dc83a 	sub	r6,r17,r6
 4011aac:	89a3803a 	cmpltu	r17,r17,r6
 4011ab0:	40d1c83a 	sub	r8,r8,r3
 4011ab4:	4451c83a 	sub	r8,r8,r17
 4011ab8:	3023883a 	mov	r17,r6
 4011abc:	4080202c 	andhi	r2,r8,128
 4011ac0:	10002326 	beq	r2,zero,4011b50 <__adddf3+0x204>
 4011ac4:	04c02034 	movhi	r19,128
 4011ac8:	9cffffc4 	addi	r19,r19,-1
 4011acc:	44e6703a 	and	r19,r8,r19
 4011ad0:	98007626 	beq	r19,zero,4011cac <__adddf3+0x360>
 4011ad4:	9809883a 	mov	r4,r19
 4011ad8:	40143340 	call	4014334 <__clzsi2>
 4011adc:	10fffe04 	addi	r3,r2,-8
 4011ae0:	010007c4 	movi	r4,31
 4011ae4:	20c07716 	blt	r4,r3,4011cc4 <__adddf3+0x378>
 4011ae8:	00800804 	movi	r2,32
 4011aec:	10c5c83a 	sub	r2,r2,r3
 4011af0:	8884d83a 	srl	r2,r17,r2
 4011af4:	98d0983a 	sll	r8,r19,r3
 4011af8:	88e2983a 	sll	r17,r17,r3
 4011afc:	1204b03a 	or	r2,r2,r8
 4011b00:	1c007416 	blt	r3,r16,4011cd4 <__adddf3+0x388>
 4011b04:	1c21c83a 	sub	r16,r3,r16
 4011b08:	82000044 	addi	r8,r16,1
 4011b0c:	00c007c4 	movi	r3,31
 4011b10:	1a009116 	blt	r3,r8,4011d58 <__adddf3+0x40c>
 4011b14:	00c00804 	movi	r3,32
 4011b18:	1a07c83a 	sub	r3,r3,r8
 4011b1c:	8a08d83a 	srl	r4,r17,r8
 4011b20:	88e2983a 	sll	r17,r17,r3
 4011b24:	10c6983a 	sll	r3,r2,r3
 4011b28:	1210d83a 	srl	r8,r2,r8
 4011b2c:	8804c03a 	cmpne	r2,r17,zero
 4011b30:	1906b03a 	or	r3,r3,r4
 4011b34:	18a2b03a 	or	r17,r3,r2
 4011b38:	0021883a 	mov	r16,zero
 4011b3c:	003fa206 	br	40119c8 <__alt_data_end+0xfc0119c8>
 4011b40:	1890b03a 	or	r8,r3,r2
 4011b44:	40017d26 	beq	r8,zero,401213c <__adddf3+0x7f0>
 4011b48:	1011883a 	mov	r8,r2
 4011b4c:	1823883a 	mov	r17,r3
 4011b50:	888001cc 	andi	r2,r17,7
 4011b54:	103f9e1e 	bne	r2,zero,40119d0 <__alt_data_end+0xfc0119d0>
 4011b58:	4004977a 	slli	r2,r8,29
 4011b5c:	8822d0fa 	srli	r17,r17,3
 4011b60:	4010d0fa 	srli	r8,r8,3
 4011b64:	9007883a 	mov	r3,r18
 4011b68:	1444b03a 	or	r2,r2,r17
 4011b6c:	0101ffc4 	movi	r4,2047
 4011b70:	81002426 	beq	r16,r4,4011c04 <__adddf3+0x2b8>
 4011b74:	8120703a 	and	r16,r16,r4
 4011b78:	01000434 	movhi	r4,16
 4011b7c:	213fffc4 	addi	r4,r4,-1
 4011b80:	4110703a 	and	r8,r8,r4
 4011b84:	003fa806 	br	4011a28 <__alt_data_end+0xfc011a28>
 4011b88:	8089c83a 	sub	r4,r16,r2
 4011b8c:	01005e0e 	bge	zero,r4,4011d08 <__adddf3+0x3bc>
 4011b90:	10002b26 	beq	r2,zero,4011c40 <__adddf3+0x2f4>
 4011b94:	0081ffc4 	movi	r2,2047
 4011b98:	80bf8b26 	beq	r16,r2,40119c8 <__alt_data_end+0xfc0119c8>
 4011b9c:	4a402034 	orhi	r9,r9,128
 4011ba0:	00800e04 	movi	r2,56
 4011ba4:	1100a40e 	bge	r2,r4,4011e38 <__adddf3+0x4ec>
 4011ba8:	498cb03a 	or	r6,r9,r6
 4011bac:	300ac03a 	cmpne	r5,r6,zero
 4011bb0:	0013883a 	mov	r9,zero
 4011bb4:	2c4b883a 	add	r5,r5,r17
 4011bb8:	2c63803a 	cmpltu	r17,r5,r17
 4011bbc:	4a11883a 	add	r8,r9,r8
 4011bc0:	8a11883a 	add	r8,r17,r8
 4011bc4:	2823883a 	mov	r17,r5
 4011bc8:	4080202c 	andhi	r2,r8,128
 4011bcc:	103fe026 	beq	r2,zero,4011b50 <__alt_data_end+0xfc011b50>
 4011bd0:	84000044 	addi	r16,r16,1
 4011bd4:	0081ffc4 	movi	r2,2047
 4011bd8:	8080d226 	beq	r16,r2,4011f24 <__adddf3+0x5d8>
 4011bdc:	00bfe034 	movhi	r2,65408
 4011be0:	10bfffc4 	addi	r2,r2,-1
 4011be4:	4090703a 	and	r8,r8,r2
 4011be8:	880ad07a 	srli	r5,r17,1
 4011bec:	400897fa 	slli	r4,r8,31
 4011bf0:	88c0004c 	andi	r3,r17,1
 4011bf4:	28e2b03a 	or	r17,r5,r3
 4011bf8:	4010d07a 	srli	r8,r8,1
 4011bfc:	2462b03a 	or	r17,r4,r17
 4011c00:	003f7106 	br	40119c8 <__alt_data_end+0xfc0119c8>
 4011c04:	4088b03a 	or	r4,r8,r2
 4011c08:	20014526 	beq	r4,zero,4012120 <__adddf3+0x7d4>
 4011c0c:	01000434 	movhi	r4,16
 4011c10:	42000234 	orhi	r8,r8,8
 4011c14:	213fffc4 	addi	r4,r4,-1
 4011c18:	4110703a 	and	r8,r8,r4
 4011c1c:	003f8206 	br	4011a28 <__alt_data_end+0xfc011a28>
 4011c20:	18ffffc4 	addi	r3,r3,-1
 4011c24:	1800491e 	bne	r3,zero,4011d4c <__adddf3+0x400>
 4011c28:	898bc83a 	sub	r5,r17,r6
 4011c2c:	8963803a 	cmpltu	r17,r17,r5
 4011c30:	4251c83a 	sub	r8,r8,r9
 4011c34:	4451c83a 	sub	r8,r8,r17
 4011c38:	2823883a 	mov	r17,r5
 4011c3c:	003f9f06 	br	4011abc <__alt_data_end+0xfc011abc>
 4011c40:	4984b03a 	or	r2,r9,r6
 4011c44:	103f6026 	beq	r2,zero,40119c8 <__alt_data_end+0xfc0119c8>
 4011c48:	213fffc4 	addi	r4,r4,-1
 4011c4c:	2000931e 	bne	r4,zero,4011e9c <__adddf3+0x550>
 4011c50:	898d883a 	add	r6,r17,r6
 4011c54:	3463803a 	cmpltu	r17,r6,r17
 4011c58:	4251883a 	add	r8,r8,r9
 4011c5c:	8a11883a 	add	r8,r17,r8
 4011c60:	3023883a 	mov	r17,r6
 4011c64:	003fd806 	br	4011bc8 <__alt_data_end+0xfc011bc8>
 4011c68:	1800541e 	bne	r3,zero,4011dbc <__adddf3+0x470>
 4011c6c:	80800044 	addi	r2,r16,1
 4011c70:	1081ffcc 	andi	r2,r2,2047
 4011c74:	00c00044 	movi	r3,1
 4011c78:	1880a00e 	bge	r3,r2,4011efc <__adddf3+0x5b0>
 4011c7c:	8989c83a 	sub	r4,r17,r6
 4011c80:	8905803a 	cmpltu	r2,r17,r4
 4011c84:	4267c83a 	sub	r19,r8,r9
 4011c88:	98a7c83a 	sub	r19,r19,r2
 4011c8c:	9880202c 	andhi	r2,r19,128
 4011c90:	10006326 	beq	r2,zero,4011e20 <__adddf3+0x4d4>
 4011c94:	3463c83a 	sub	r17,r6,r17
 4011c98:	4a07c83a 	sub	r3,r9,r8
 4011c9c:	344d803a 	cmpltu	r6,r6,r17
 4011ca0:	19a7c83a 	sub	r19,r3,r6
 4011ca4:	3825883a 	mov	r18,r7
 4011ca8:	983f8a1e 	bne	r19,zero,4011ad4 <__alt_data_end+0xfc011ad4>
 4011cac:	8809883a 	mov	r4,r17
 4011cb0:	40143340 	call	4014334 <__clzsi2>
 4011cb4:	10800804 	addi	r2,r2,32
 4011cb8:	10fffe04 	addi	r3,r2,-8
 4011cbc:	010007c4 	movi	r4,31
 4011cc0:	20ff890e 	bge	r4,r3,4011ae8 <__alt_data_end+0xfc011ae8>
 4011cc4:	10bff604 	addi	r2,r2,-40
 4011cc8:	8884983a 	sll	r2,r17,r2
 4011ccc:	0023883a 	mov	r17,zero
 4011cd0:	1c3f8c0e 	bge	r3,r16,4011b04 <__alt_data_end+0xfc011b04>
 4011cd4:	023fe034 	movhi	r8,65408
 4011cd8:	423fffc4 	addi	r8,r8,-1
 4011cdc:	80e1c83a 	sub	r16,r16,r3
 4011ce0:	1210703a 	and	r8,r2,r8
 4011ce4:	003f3806 	br	40119c8 <__alt_data_end+0xfc0119c8>
 4011ce8:	9007883a 	mov	r3,r18
 4011cec:	0011883a 	mov	r8,zero
 4011cf0:	0005883a 	mov	r2,zero
 4011cf4:	003f4c06 	br	4011a28 <__alt_data_end+0xfc011a28>
 4011cf8:	498cb03a 	or	r6,r9,r6
 4011cfc:	300cc03a 	cmpne	r6,r6,zero
 4011d00:	0007883a 	mov	r3,zero
 4011d04:	003f6806 	br	4011aa8 <__alt_data_end+0xfc011aa8>
 4011d08:	20009c1e 	bne	r4,zero,4011f7c <__adddf3+0x630>
 4011d0c:	80800044 	addi	r2,r16,1
 4011d10:	1141ffcc 	andi	r5,r2,2047
 4011d14:	01000044 	movi	r4,1
 4011d18:	2140670e 	bge	r4,r5,4011eb8 <__adddf3+0x56c>
 4011d1c:	0101ffc4 	movi	r4,2047
 4011d20:	11007f26 	beq	r2,r4,4011f20 <__adddf3+0x5d4>
 4011d24:	898d883a 	add	r6,r17,r6
 4011d28:	4247883a 	add	r3,r8,r9
 4011d2c:	3451803a 	cmpltu	r8,r6,r17
 4011d30:	40d1883a 	add	r8,r8,r3
 4011d34:	402297fa 	slli	r17,r8,31
 4011d38:	300cd07a 	srli	r6,r6,1
 4011d3c:	4010d07a 	srli	r8,r8,1
 4011d40:	1021883a 	mov	r16,r2
 4011d44:	89a2b03a 	or	r17,r17,r6
 4011d48:	003f1f06 	br	40119c8 <__alt_data_end+0xfc0119c8>
 4011d4c:	0081ffc4 	movi	r2,2047
 4011d50:	80bf481e 	bne	r16,r2,4011a74 <__alt_data_end+0xfc011a74>
 4011d54:	003f1c06 	br	40119c8 <__alt_data_end+0xfc0119c8>
 4011d58:	843ff844 	addi	r16,r16,-31
 4011d5c:	01000804 	movi	r4,32
 4011d60:	1406d83a 	srl	r3,r2,r16
 4011d64:	41005026 	beq	r8,r4,4011ea8 <__adddf3+0x55c>
 4011d68:	01001004 	movi	r4,64
 4011d6c:	2211c83a 	sub	r8,r4,r8
 4011d70:	1204983a 	sll	r2,r2,r8
 4011d74:	88a2b03a 	or	r17,r17,r2
 4011d78:	8822c03a 	cmpne	r17,r17,zero
 4011d7c:	1c62b03a 	or	r17,r3,r17
 4011d80:	0011883a 	mov	r8,zero
 4011d84:	0021883a 	mov	r16,zero
 4011d88:	003f7106 	br	4011b50 <__alt_data_end+0xfc011b50>
 4011d8c:	193ff804 	addi	r4,r3,-32
 4011d90:	00800804 	movi	r2,32
 4011d94:	4908d83a 	srl	r4,r9,r4
 4011d98:	18804526 	beq	r3,r2,4011eb0 <__adddf3+0x564>
 4011d9c:	00801004 	movi	r2,64
 4011da0:	10c5c83a 	sub	r2,r2,r3
 4011da4:	4886983a 	sll	r3,r9,r2
 4011da8:	198cb03a 	or	r6,r3,r6
 4011dac:	300cc03a 	cmpne	r6,r6,zero
 4011db0:	218cb03a 	or	r6,r4,r6
 4011db4:	0007883a 	mov	r3,zero
 4011db8:	003f3b06 	br	4011aa8 <__alt_data_end+0xfc011aa8>
 4011dbc:	80002a26 	beq	r16,zero,4011e68 <__adddf3+0x51c>
 4011dc0:	0101ffc4 	movi	r4,2047
 4011dc4:	11006826 	beq	r2,r4,4011f68 <__adddf3+0x61c>
 4011dc8:	00c7c83a 	sub	r3,zero,r3
 4011dcc:	42002034 	orhi	r8,r8,128
 4011dd0:	01000e04 	movi	r4,56
 4011dd4:	20c07c16 	blt	r4,r3,4011fc8 <__adddf3+0x67c>
 4011dd8:	010007c4 	movi	r4,31
 4011ddc:	20c0da16 	blt	r4,r3,4012148 <__adddf3+0x7fc>
 4011de0:	01000804 	movi	r4,32
 4011de4:	20c9c83a 	sub	r4,r4,r3
 4011de8:	4114983a 	sll	r10,r8,r4
 4011dec:	88cad83a 	srl	r5,r17,r3
 4011df0:	8908983a 	sll	r4,r17,r4
 4011df4:	40c6d83a 	srl	r3,r8,r3
 4011df8:	5162b03a 	or	r17,r10,r5
 4011dfc:	2008c03a 	cmpne	r4,r4,zero
 4011e00:	8922b03a 	or	r17,r17,r4
 4011e04:	3463c83a 	sub	r17,r6,r17
 4011e08:	48c7c83a 	sub	r3,r9,r3
 4011e0c:	344d803a 	cmpltu	r6,r6,r17
 4011e10:	1991c83a 	sub	r8,r3,r6
 4011e14:	1021883a 	mov	r16,r2
 4011e18:	3825883a 	mov	r18,r7
 4011e1c:	003f2706 	br	4011abc <__alt_data_end+0xfc011abc>
 4011e20:	24d0b03a 	or	r8,r4,r19
 4011e24:	40001b1e 	bne	r8,zero,4011e94 <__adddf3+0x548>
 4011e28:	0005883a 	mov	r2,zero
 4011e2c:	0007883a 	mov	r3,zero
 4011e30:	0021883a 	mov	r16,zero
 4011e34:	003f4d06 	br	4011b6c <__alt_data_end+0xfc011b6c>
 4011e38:	008007c4 	movi	r2,31
 4011e3c:	11003c16 	blt	r2,r4,4011f30 <__adddf3+0x5e4>
 4011e40:	00800804 	movi	r2,32
 4011e44:	1105c83a 	sub	r2,r2,r4
 4011e48:	488e983a 	sll	r7,r9,r2
 4011e4c:	310ad83a 	srl	r5,r6,r4
 4011e50:	3084983a 	sll	r2,r6,r2
 4011e54:	4912d83a 	srl	r9,r9,r4
 4011e58:	394ab03a 	or	r5,r7,r5
 4011e5c:	1004c03a 	cmpne	r2,r2,zero
 4011e60:	288ab03a 	or	r5,r5,r2
 4011e64:	003f5306 	br	4011bb4 <__alt_data_end+0xfc011bb4>
 4011e68:	4448b03a 	or	r4,r8,r17
 4011e6c:	20003e26 	beq	r4,zero,4011f68 <__adddf3+0x61c>
 4011e70:	00c6303a 	nor	r3,zero,r3
 4011e74:	18003a1e 	bne	r3,zero,4011f60 <__adddf3+0x614>
 4011e78:	3463c83a 	sub	r17,r6,r17
 4011e7c:	4a07c83a 	sub	r3,r9,r8
 4011e80:	344d803a 	cmpltu	r6,r6,r17
 4011e84:	1991c83a 	sub	r8,r3,r6
 4011e88:	1021883a 	mov	r16,r2
 4011e8c:	3825883a 	mov	r18,r7
 4011e90:	003f0a06 	br	4011abc <__alt_data_end+0xfc011abc>
 4011e94:	2023883a 	mov	r17,r4
 4011e98:	003f0d06 	br	4011ad0 <__alt_data_end+0xfc011ad0>
 4011e9c:	0081ffc4 	movi	r2,2047
 4011ea0:	80bf3f1e 	bne	r16,r2,4011ba0 <__alt_data_end+0xfc011ba0>
 4011ea4:	003ec806 	br	40119c8 <__alt_data_end+0xfc0119c8>
 4011ea8:	0005883a 	mov	r2,zero
 4011eac:	003fb106 	br	4011d74 <__alt_data_end+0xfc011d74>
 4011eb0:	0007883a 	mov	r3,zero
 4011eb4:	003fbc06 	br	4011da8 <__alt_data_end+0xfc011da8>
 4011eb8:	4444b03a 	or	r2,r8,r17
 4011ebc:	8000871e 	bne	r16,zero,40120dc <__adddf3+0x790>
 4011ec0:	1000ba26 	beq	r2,zero,40121ac <__adddf3+0x860>
 4011ec4:	4984b03a 	or	r2,r9,r6
 4011ec8:	103ebf26 	beq	r2,zero,40119c8 <__alt_data_end+0xfc0119c8>
 4011ecc:	8985883a 	add	r2,r17,r6
 4011ed0:	4247883a 	add	r3,r8,r9
 4011ed4:	1451803a 	cmpltu	r8,r2,r17
 4011ed8:	40d1883a 	add	r8,r8,r3
 4011edc:	40c0202c 	andhi	r3,r8,128
 4011ee0:	1023883a 	mov	r17,r2
 4011ee4:	183f1a26 	beq	r3,zero,4011b50 <__alt_data_end+0xfc011b50>
 4011ee8:	00bfe034 	movhi	r2,65408
 4011eec:	10bfffc4 	addi	r2,r2,-1
 4011ef0:	2021883a 	mov	r16,r4
 4011ef4:	4090703a 	and	r8,r8,r2
 4011ef8:	003eb306 	br	40119c8 <__alt_data_end+0xfc0119c8>
 4011efc:	4444b03a 	or	r2,r8,r17
 4011f00:	8000291e 	bne	r16,zero,4011fa8 <__adddf3+0x65c>
 4011f04:	10004b1e 	bne	r2,zero,4012034 <__adddf3+0x6e8>
 4011f08:	4990b03a 	or	r8,r9,r6
 4011f0c:	40008b26 	beq	r8,zero,401213c <__adddf3+0x7f0>
 4011f10:	4811883a 	mov	r8,r9
 4011f14:	3023883a 	mov	r17,r6
 4011f18:	3825883a 	mov	r18,r7
 4011f1c:	003eaa06 	br	40119c8 <__alt_data_end+0xfc0119c8>
 4011f20:	1021883a 	mov	r16,r2
 4011f24:	0011883a 	mov	r8,zero
 4011f28:	0005883a 	mov	r2,zero
 4011f2c:	003f0f06 	br	4011b6c <__alt_data_end+0xfc011b6c>
 4011f30:	217ff804 	addi	r5,r4,-32
 4011f34:	00800804 	movi	r2,32
 4011f38:	494ad83a 	srl	r5,r9,r5
 4011f3c:	20807d26 	beq	r4,r2,4012134 <__adddf3+0x7e8>
 4011f40:	00801004 	movi	r2,64
 4011f44:	1109c83a 	sub	r4,r2,r4
 4011f48:	4912983a 	sll	r9,r9,r4
 4011f4c:	498cb03a 	or	r6,r9,r6
 4011f50:	300cc03a 	cmpne	r6,r6,zero
 4011f54:	298ab03a 	or	r5,r5,r6
 4011f58:	0013883a 	mov	r9,zero
 4011f5c:	003f1506 	br	4011bb4 <__alt_data_end+0xfc011bb4>
 4011f60:	0101ffc4 	movi	r4,2047
 4011f64:	113f9a1e 	bne	r2,r4,4011dd0 <__alt_data_end+0xfc011dd0>
 4011f68:	4811883a 	mov	r8,r9
 4011f6c:	3023883a 	mov	r17,r6
 4011f70:	1021883a 	mov	r16,r2
 4011f74:	3825883a 	mov	r18,r7
 4011f78:	003e9306 	br	40119c8 <__alt_data_end+0xfc0119c8>
 4011f7c:	8000161e 	bne	r16,zero,4011fd8 <__adddf3+0x68c>
 4011f80:	444ab03a 	or	r5,r8,r17
 4011f84:	28005126 	beq	r5,zero,40120cc <__adddf3+0x780>
 4011f88:	0108303a 	nor	r4,zero,r4
 4011f8c:	20004d1e 	bne	r4,zero,40120c4 <__adddf3+0x778>
 4011f90:	89a3883a 	add	r17,r17,r6
 4011f94:	4253883a 	add	r9,r8,r9
 4011f98:	898d803a 	cmpltu	r6,r17,r6
 4011f9c:	3251883a 	add	r8,r6,r9
 4011fa0:	1021883a 	mov	r16,r2
 4011fa4:	003f0806 	br	4011bc8 <__alt_data_end+0xfc011bc8>
 4011fa8:	1000301e 	bne	r2,zero,401206c <__adddf3+0x720>
 4011fac:	4984b03a 	or	r2,r9,r6
 4011fb0:	10007126 	beq	r2,zero,4012178 <__adddf3+0x82c>
 4011fb4:	4811883a 	mov	r8,r9
 4011fb8:	3023883a 	mov	r17,r6
 4011fbc:	3825883a 	mov	r18,r7
 4011fc0:	0401ffc4 	movi	r16,2047
 4011fc4:	003e8006 	br	40119c8 <__alt_data_end+0xfc0119c8>
 4011fc8:	4462b03a 	or	r17,r8,r17
 4011fcc:	8822c03a 	cmpne	r17,r17,zero
 4011fd0:	0007883a 	mov	r3,zero
 4011fd4:	003f8b06 	br	4011e04 <__alt_data_end+0xfc011e04>
 4011fd8:	0141ffc4 	movi	r5,2047
 4011fdc:	11403b26 	beq	r2,r5,40120cc <__adddf3+0x780>
 4011fe0:	0109c83a 	sub	r4,zero,r4
 4011fe4:	42002034 	orhi	r8,r8,128
 4011fe8:	01400e04 	movi	r5,56
 4011fec:	29006716 	blt	r5,r4,401218c <__adddf3+0x840>
 4011ff0:	014007c4 	movi	r5,31
 4011ff4:	29007016 	blt	r5,r4,40121b8 <__adddf3+0x86c>
 4011ff8:	01400804 	movi	r5,32
 4011ffc:	290bc83a 	sub	r5,r5,r4
 4012000:	4154983a 	sll	r10,r8,r5
 4012004:	890ed83a 	srl	r7,r17,r4
 4012008:	894a983a 	sll	r5,r17,r5
 401200c:	4108d83a 	srl	r4,r8,r4
 4012010:	51e2b03a 	or	r17,r10,r7
 4012014:	280ac03a 	cmpne	r5,r5,zero
 4012018:	8962b03a 	or	r17,r17,r5
 401201c:	89a3883a 	add	r17,r17,r6
 4012020:	2253883a 	add	r9,r4,r9
 4012024:	898d803a 	cmpltu	r6,r17,r6
 4012028:	3251883a 	add	r8,r6,r9
 401202c:	1021883a 	mov	r16,r2
 4012030:	003ee506 	br	4011bc8 <__alt_data_end+0xfc011bc8>
 4012034:	4984b03a 	or	r2,r9,r6
 4012038:	103e6326 	beq	r2,zero,40119c8 <__alt_data_end+0xfc0119c8>
 401203c:	8987c83a 	sub	r3,r17,r6
 4012040:	88c9803a 	cmpltu	r4,r17,r3
 4012044:	4245c83a 	sub	r2,r8,r9
 4012048:	1105c83a 	sub	r2,r2,r4
 401204c:	1100202c 	andhi	r4,r2,128
 4012050:	203ebb26 	beq	r4,zero,4011b40 <__alt_data_end+0xfc011b40>
 4012054:	3463c83a 	sub	r17,r6,r17
 4012058:	4a07c83a 	sub	r3,r9,r8
 401205c:	344d803a 	cmpltu	r6,r6,r17
 4012060:	1991c83a 	sub	r8,r3,r6
 4012064:	3825883a 	mov	r18,r7
 4012068:	003e5706 	br	40119c8 <__alt_data_end+0xfc0119c8>
 401206c:	4984b03a 	or	r2,r9,r6
 4012070:	10002e26 	beq	r2,zero,401212c <__adddf3+0x7e0>
 4012074:	4004d0fa 	srli	r2,r8,3
 4012078:	8822d0fa 	srli	r17,r17,3
 401207c:	4010977a 	slli	r8,r8,29
 4012080:	10c0022c 	andhi	r3,r2,8
 4012084:	4462b03a 	or	r17,r8,r17
 4012088:	18000826 	beq	r3,zero,40120ac <__adddf3+0x760>
 401208c:	4808d0fa 	srli	r4,r9,3
 4012090:	20c0022c 	andhi	r3,r4,8
 4012094:	1800051e 	bne	r3,zero,40120ac <__adddf3+0x760>
 4012098:	300cd0fa 	srli	r6,r6,3
 401209c:	4806977a 	slli	r3,r9,29
 40120a0:	2005883a 	mov	r2,r4
 40120a4:	3825883a 	mov	r18,r7
 40120a8:	19a2b03a 	or	r17,r3,r6
 40120ac:	8810d77a 	srli	r8,r17,29
 40120b0:	100490fa 	slli	r2,r2,3
 40120b4:	882290fa 	slli	r17,r17,3
 40120b8:	0401ffc4 	movi	r16,2047
 40120bc:	4090b03a 	or	r8,r8,r2
 40120c0:	003e4106 	br	40119c8 <__alt_data_end+0xfc0119c8>
 40120c4:	0141ffc4 	movi	r5,2047
 40120c8:	117fc71e 	bne	r2,r5,4011fe8 <__alt_data_end+0xfc011fe8>
 40120cc:	4811883a 	mov	r8,r9
 40120d0:	3023883a 	mov	r17,r6
 40120d4:	1021883a 	mov	r16,r2
 40120d8:	003e3b06 	br	40119c8 <__alt_data_end+0xfc0119c8>
 40120dc:	10002f26 	beq	r2,zero,401219c <__adddf3+0x850>
 40120e0:	4984b03a 	or	r2,r9,r6
 40120e4:	10001126 	beq	r2,zero,401212c <__adddf3+0x7e0>
 40120e8:	4004d0fa 	srli	r2,r8,3
 40120ec:	8822d0fa 	srli	r17,r17,3
 40120f0:	4010977a 	slli	r8,r8,29
 40120f4:	10c0022c 	andhi	r3,r2,8
 40120f8:	4462b03a 	or	r17,r8,r17
 40120fc:	183feb26 	beq	r3,zero,40120ac <__alt_data_end+0xfc0120ac>
 4012100:	4808d0fa 	srli	r4,r9,3
 4012104:	20c0022c 	andhi	r3,r4,8
 4012108:	183fe81e 	bne	r3,zero,40120ac <__alt_data_end+0xfc0120ac>
 401210c:	300cd0fa 	srli	r6,r6,3
 4012110:	4806977a 	slli	r3,r9,29
 4012114:	2005883a 	mov	r2,r4
 4012118:	19a2b03a 	or	r17,r3,r6
 401211c:	003fe306 	br	40120ac <__alt_data_end+0xfc0120ac>
 4012120:	0011883a 	mov	r8,zero
 4012124:	0005883a 	mov	r2,zero
 4012128:	003e3f06 	br	4011a28 <__alt_data_end+0xfc011a28>
 401212c:	0401ffc4 	movi	r16,2047
 4012130:	003e2506 	br	40119c8 <__alt_data_end+0xfc0119c8>
 4012134:	0013883a 	mov	r9,zero
 4012138:	003f8406 	br	4011f4c <__alt_data_end+0xfc011f4c>
 401213c:	0005883a 	mov	r2,zero
 4012140:	0007883a 	mov	r3,zero
 4012144:	003e8906 	br	4011b6c <__alt_data_end+0xfc011b6c>
 4012148:	197ff804 	addi	r5,r3,-32
 401214c:	01000804 	movi	r4,32
 4012150:	414ad83a 	srl	r5,r8,r5
 4012154:	19002426 	beq	r3,r4,40121e8 <__adddf3+0x89c>
 4012158:	01001004 	movi	r4,64
 401215c:	20c7c83a 	sub	r3,r4,r3
 4012160:	40c6983a 	sll	r3,r8,r3
 4012164:	1c46b03a 	or	r3,r3,r17
 4012168:	1806c03a 	cmpne	r3,r3,zero
 401216c:	28e2b03a 	or	r17,r5,r3
 4012170:	0007883a 	mov	r3,zero
 4012174:	003f2306 	br	4011e04 <__alt_data_end+0xfc011e04>
 4012178:	0007883a 	mov	r3,zero
 401217c:	5811883a 	mov	r8,r11
 4012180:	00bfffc4 	movi	r2,-1
 4012184:	0401ffc4 	movi	r16,2047
 4012188:	003e7806 	br	4011b6c <__alt_data_end+0xfc011b6c>
 401218c:	4462b03a 	or	r17,r8,r17
 4012190:	8822c03a 	cmpne	r17,r17,zero
 4012194:	0009883a 	mov	r4,zero
 4012198:	003fa006 	br	401201c <__alt_data_end+0xfc01201c>
 401219c:	4811883a 	mov	r8,r9
 40121a0:	3023883a 	mov	r17,r6
 40121a4:	0401ffc4 	movi	r16,2047
 40121a8:	003e0706 	br	40119c8 <__alt_data_end+0xfc0119c8>
 40121ac:	4811883a 	mov	r8,r9
 40121b0:	3023883a 	mov	r17,r6
 40121b4:	003e0406 	br	40119c8 <__alt_data_end+0xfc0119c8>
 40121b8:	21fff804 	addi	r7,r4,-32
 40121bc:	01400804 	movi	r5,32
 40121c0:	41ced83a 	srl	r7,r8,r7
 40121c4:	21400a26 	beq	r4,r5,40121f0 <__adddf3+0x8a4>
 40121c8:	01401004 	movi	r5,64
 40121cc:	2909c83a 	sub	r4,r5,r4
 40121d0:	4108983a 	sll	r4,r8,r4
 40121d4:	2448b03a 	or	r4,r4,r17
 40121d8:	2008c03a 	cmpne	r4,r4,zero
 40121dc:	3922b03a 	or	r17,r7,r4
 40121e0:	0009883a 	mov	r4,zero
 40121e4:	003f8d06 	br	401201c <__alt_data_end+0xfc01201c>
 40121e8:	0007883a 	mov	r3,zero
 40121ec:	003fdd06 	br	4012164 <__alt_data_end+0xfc012164>
 40121f0:	0009883a 	mov	r4,zero
 40121f4:	003ff706 	br	40121d4 <__alt_data_end+0xfc0121d4>

040121f8 <__divdf3>:
 40121f8:	defff004 	addi	sp,sp,-64
 40121fc:	dc800815 	stw	r18,32(sp)
 4012200:	2824d53a 	srli	r18,r5,20
 4012204:	dd800c15 	stw	r22,48(sp)
 4012208:	282cd7fa 	srli	r22,r5,31
 401220c:	dc000615 	stw	r16,24(sp)
 4012210:	04000434 	movhi	r16,16
 4012214:	843fffc4 	addi	r16,r16,-1
 4012218:	dfc00f15 	stw	ra,60(sp)
 401221c:	df000e15 	stw	fp,56(sp)
 4012220:	ddc00d15 	stw	r23,52(sp)
 4012224:	dd400b15 	stw	r21,44(sp)
 4012228:	dd000a15 	stw	r20,40(sp)
 401222c:	dcc00915 	stw	r19,36(sp)
 4012230:	dc400715 	stw	r17,28(sp)
 4012234:	9481ffcc 	andi	r18,r18,2047
 4012238:	2c20703a 	and	r16,r5,r16
 401223c:	b2003fcc 	andi	r8,r22,255
 4012240:	90006126 	beq	r18,zero,40123c8 <__divdf3+0x1d0>
 4012244:	0081ffc4 	movi	r2,2047
 4012248:	202b883a 	mov	r21,r4
 401224c:	90803726 	beq	r18,r2,401232c <__divdf3+0x134>
 4012250:	80800434 	orhi	r2,r16,16
 4012254:	100490fa 	slli	r2,r2,3
 4012258:	2020d77a 	srli	r16,r4,29
 401225c:	202a90fa 	slli	r21,r4,3
 4012260:	94bf0044 	addi	r18,r18,-1023
 4012264:	80a0b03a 	or	r16,r16,r2
 4012268:	0013883a 	mov	r9,zero
 401226c:	000b883a 	mov	r5,zero
 4012270:	3806d53a 	srli	r3,r7,20
 4012274:	382ed7fa 	srli	r23,r7,31
 4012278:	04400434 	movhi	r17,16
 401227c:	8c7fffc4 	addi	r17,r17,-1
 4012280:	18c1ffcc 	andi	r3,r3,2047
 4012284:	3029883a 	mov	r20,r6
 4012288:	3c62703a 	and	r17,r7,r17
 401228c:	bf003fcc 	andi	fp,r23,255
 4012290:	18006e26 	beq	r3,zero,401244c <__divdf3+0x254>
 4012294:	0081ffc4 	movi	r2,2047
 4012298:	18806626 	beq	r3,r2,4012434 <__divdf3+0x23c>
 401229c:	88800434 	orhi	r2,r17,16
 40122a0:	100490fa 	slli	r2,r2,3
 40122a4:	3022d77a 	srli	r17,r6,29
 40122a8:	302890fa 	slli	r20,r6,3
 40122ac:	18ff0044 	addi	r3,r3,-1023
 40122b0:	88a2b03a 	or	r17,r17,r2
 40122b4:	000f883a 	mov	r7,zero
 40122b8:	b5e6f03a 	xor	r19,r22,r23
 40122bc:	3a4cb03a 	or	r6,r7,r9
 40122c0:	008003c4 	movi	r2,15
 40122c4:	9809883a 	mov	r4,r19
 40122c8:	90c7c83a 	sub	r3,r18,r3
 40122cc:	9cc03fcc 	andi	r19,r19,255
 40122d0:	11809636 	bltu	r2,r6,401252c <__divdf3+0x334>
 40122d4:	300c90ba 	slli	r6,r6,2
 40122d8:	00810074 	movhi	r2,1025
 40122dc:	1088bb04 	addi	r2,r2,8940
 40122e0:	308d883a 	add	r6,r6,r2
 40122e4:	30800017 	ldw	r2,0(r6)
 40122e8:	1000683a 	jmp	r2
 40122ec:	0401252c 	andhi	r16,zero,1172
 40122f0:	04012364 	muli	r16,zero,1165
 40122f4:	0401251c 	xori	r16,zero,1172
 40122f8:	04012358 	cmpnei	r16,zero,1165
 40122fc:	0401251c 	xori	r16,zero,1172
 4012300:	040124f0 	cmpltui	r16,zero,1171
 4012304:	0401251c 	xori	r16,zero,1172
 4012308:	04012358 	cmpnei	r16,zero,1165
 401230c:	04012364 	muli	r16,zero,1165
 4012310:	04012364 	muli	r16,zero,1165
 4012314:	040124f0 	cmpltui	r16,zero,1171
 4012318:	04012358 	cmpnei	r16,zero,1165
 401231c:	04012348 	cmpgei	r16,zero,1165
 4012320:	04012348 	cmpgei	r16,zero,1165
 4012324:	04012348 	cmpgei	r16,zero,1165
 4012328:	040128b4 	movhi	r16,1186
 401232c:	2404b03a 	or	r2,r4,r16
 4012330:	10006c1e 	bne	r2,zero,40124e4 <__divdf3+0x2ec>
 4012334:	02400204 	movi	r9,8
 4012338:	0021883a 	mov	r16,zero
 401233c:	002b883a 	mov	r21,zero
 4012340:	01400084 	movi	r5,2
 4012344:	003fca06 	br	4012270 <__alt_data_end+0xfc012270>
 4012348:	8023883a 	mov	r17,r16
 401234c:	a829883a 	mov	r20,r21
 4012350:	4039883a 	mov	fp,r8
 4012354:	280f883a 	mov	r7,r5
 4012358:	00800084 	movi	r2,2
 401235c:	3881601e 	bne	r7,r2,40128e0 <__divdf3+0x6e8>
 4012360:	e027883a 	mov	r19,fp
 4012364:	9900004c 	andi	r4,r19,1
 4012368:	0081ffc4 	movi	r2,2047
 401236c:	0021883a 	mov	r16,zero
 4012370:	002b883a 	mov	r21,zero
 4012374:	1004953a 	slli	r2,r2,20
 4012378:	20c03fcc 	andi	r3,r4,255
 401237c:	01400434 	movhi	r5,16
 4012380:	297fffc4 	addi	r5,r5,-1
 4012384:	180697fa 	slli	r3,r3,31
 4012388:	8160703a 	and	r16,r16,r5
 401238c:	80a0b03a 	or	r16,r16,r2
 4012390:	80c6b03a 	or	r3,r16,r3
 4012394:	a805883a 	mov	r2,r21
 4012398:	dfc00f17 	ldw	ra,60(sp)
 401239c:	df000e17 	ldw	fp,56(sp)
 40123a0:	ddc00d17 	ldw	r23,52(sp)
 40123a4:	dd800c17 	ldw	r22,48(sp)
 40123a8:	dd400b17 	ldw	r21,44(sp)
 40123ac:	dd000a17 	ldw	r20,40(sp)
 40123b0:	dcc00917 	ldw	r19,36(sp)
 40123b4:	dc800817 	ldw	r18,32(sp)
 40123b8:	dc400717 	ldw	r17,28(sp)
 40123bc:	dc000617 	ldw	r16,24(sp)
 40123c0:	dec01004 	addi	sp,sp,64
 40123c4:	f800283a 	ret
 40123c8:	2404b03a 	or	r2,r4,r16
 40123cc:	2023883a 	mov	r17,r4
 40123d0:	10003f26 	beq	r2,zero,40124d0 <__divdf3+0x2d8>
 40123d4:	80015e26 	beq	r16,zero,4012950 <__divdf3+0x758>
 40123d8:	8009883a 	mov	r4,r16
 40123dc:	d9800215 	stw	r6,8(sp)
 40123e0:	d9c00515 	stw	r7,20(sp)
 40123e4:	da000415 	stw	r8,16(sp)
 40123e8:	40143340 	call	4014334 <__clzsi2>
 40123ec:	d9800217 	ldw	r6,8(sp)
 40123f0:	d9c00517 	ldw	r7,20(sp)
 40123f4:	da000417 	ldw	r8,16(sp)
 40123f8:	113ffd44 	addi	r4,r2,-11
 40123fc:	00c00704 	movi	r3,28
 4012400:	19014f16 	blt	r3,r4,4012940 <__divdf3+0x748>
 4012404:	00c00744 	movi	r3,29
 4012408:	157ffe04 	addi	r21,r2,-8
 401240c:	1907c83a 	sub	r3,r3,r4
 4012410:	8560983a 	sll	r16,r16,r21
 4012414:	88c6d83a 	srl	r3,r17,r3
 4012418:	8d6a983a 	sll	r21,r17,r21
 401241c:	1c20b03a 	or	r16,r3,r16
 4012420:	1080fcc4 	addi	r2,r2,1011
 4012424:	00a5c83a 	sub	r18,zero,r2
 4012428:	0013883a 	mov	r9,zero
 401242c:	000b883a 	mov	r5,zero
 4012430:	003f8f06 	br	4012270 <__alt_data_end+0xfc012270>
 4012434:	3444b03a 	or	r2,r6,r17
 4012438:	1000231e 	bne	r2,zero,40124c8 <__divdf3+0x2d0>
 401243c:	0023883a 	mov	r17,zero
 4012440:	0029883a 	mov	r20,zero
 4012444:	01c00084 	movi	r7,2
 4012448:	003f9b06 	br	40122b8 <__alt_data_end+0xfc0122b8>
 401244c:	3444b03a 	or	r2,r6,r17
 4012450:	10001926 	beq	r2,zero,40124b8 <__divdf3+0x2c0>
 4012454:	88014b26 	beq	r17,zero,4012984 <__divdf3+0x78c>
 4012458:	8809883a 	mov	r4,r17
 401245c:	d9400115 	stw	r5,4(sp)
 4012460:	d9800215 	stw	r6,8(sp)
 4012464:	da000415 	stw	r8,16(sp)
 4012468:	da400315 	stw	r9,12(sp)
 401246c:	40143340 	call	4014334 <__clzsi2>
 4012470:	d9400117 	ldw	r5,4(sp)
 4012474:	d9800217 	ldw	r6,8(sp)
 4012478:	da000417 	ldw	r8,16(sp)
 401247c:	da400317 	ldw	r9,12(sp)
 4012480:	113ffd44 	addi	r4,r2,-11
 4012484:	00c00704 	movi	r3,28
 4012488:	19013a16 	blt	r3,r4,4012974 <__divdf3+0x77c>
 401248c:	00c00744 	movi	r3,29
 4012490:	153ffe04 	addi	r20,r2,-8
 4012494:	1907c83a 	sub	r3,r3,r4
 4012498:	8d22983a 	sll	r17,r17,r20
 401249c:	30c6d83a 	srl	r3,r6,r3
 40124a0:	3528983a 	sll	r20,r6,r20
 40124a4:	1c62b03a 	or	r17,r3,r17
 40124a8:	1080fcc4 	addi	r2,r2,1011
 40124ac:	0087c83a 	sub	r3,zero,r2
 40124b0:	000f883a 	mov	r7,zero
 40124b4:	003f8006 	br	40122b8 <__alt_data_end+0xfc0122b8>
 40124b8:	0023883a 	mov	r17,zero
 40124bc:	0029883a 	mov	r20,zero
 40124c0:	01c00044 	movi	r7,1
 40124c4:	003f7c06 	br	40122b8 <__alt_data_end+0xfc0122b8>
 40124c8:	01c000c4 	movi	r7,3
 40124cc:	003f7a06 	br	40122b8 <__alt_data_end+0xfc0122b8>
 40124d0:	02400104 	movi	r9,4
 40124d4:	0021883a 	mov	r16,zero
 40124d8:	002b883a 	mov	r21,zero
 40124dc:	01400044 	movi	r5,1
 40124e0:	003f6306 	br	4012270 <__alt_data_end+0xfc012270>
 40124e4:	02400304 	movi	r9,12
 40124e8:	014000c4 	movi	r5,3
 40124ec:	003f6006 	br	4012270 <__alt_data_end+0xfc012270>
 40124f0:	04000434 	movhi	r16,16
 40124f4:	0009883a 	mov	r4,zero
 40124f8:	843fffc4 	addi	r16,r16,-1
 40124fc:	057fffc4 	movi	r21,-1
 4012500:	0081ffc4 	movi	r2,2047
 4012504:	003f9b06 	br	4012374 <__alt_data_end+0xfc012374>
 4012508:	00c00044 	movi	r3,1
 401250c:	1887c83a 	sub	r3,r3,r2
 4012510:	01000e04 	movi	r4,56
 4012514:	20c1530e 	bge	r4,r3,4012a64 <__divdf3+0x86c>
 4012518:	9900004c 	andi	r4,r19,1
 401251c:	0005883a 	mov	r2,zero
 4012520:	0021883a 	mov	r16,zero
 4012524:	002b883a 	mov	r21,zero
 4012528:	003f9206 	br	4012374 <__alt_data_end+0xfc012374>
 401252c:	8c012e36 	bltu	r17,r16,40129e8 <__divdf3+0x7f0>
 4012530:	84412c26 	beq	r16,r17,40129e4 <__divdf3+0x7ec>
 4012534:	a82f883a 	mov	r23,r21
 4012538:	18ffffc4 	addi	r3,r3,-1
 401253c:	002b883a 	mov	r21,zero
 4012540:	a004d63a 	srli	r2,r20,24
 4012544:	8822923a 	slli	r17,r17,8
 4012548:	a028923a 	slli	r20,r20,8
 401254c:	8009883a 	mov	r4,r16
 4012550:	88acb03a 	or	r22,r17,r2
 4012554:	dd000015 	stw	r20,0(sp)
 4012558:	b028d43a 	srli	r20,r22,16
 401255c:	d8c00215 	stw	r3,8(sp)
 4012560:	b4bfffcc 	andi	r18,r22,65535
 4012564:	a00b883a 	mov	r5,r20
 4012568:	40019580 	call	4001958 <__udivsi3>
 401256c:	100b883a 	mov	r5,r2
 4012570:	9009883a 	mov	r4,r18
 4012574:	1023883a 	mov	r17,r2
 4012578:	4001a140 	call	4001a14 <__mulsi3>
 401257c:	8009883a 	mov	r4,r16
 4012580:	a00b883a 	mov	r5,r20
 4012584:	1039883a 	mov	fp,r2
 4012588:	40019bc0 	call	40019bc <__umodsi3>
 401258c:	1004943a 	slli	r2,r2,16
 4012590:	b808d43a 	srli	r4,r23,16
 4012594:	d8c00217 	ldw	r3,8(sp)
 4012598:	2084b03a 	or	r2,r4,r2
 401259c:	1700062e 	bgeu	r2,fp,40125b8 <__divdf3+0x3c0>
 40125a0:	1585883a 	add	r2,r2,r22
 40125a4:	893fffc4 	addi	r4,r17,-1
 40125a8:	15811d36 	bltu	r2,r22,4012a20 <__divdf3+0x828>
 40125ac:	17011c2e 	bgeu	r2,fp,4012a20 <__divdf3+0x828>
 40125b0:	8c7fff84 	addi	r17,r17,-2
 40125b4:	1585883a 	add	r2,r2,r22
 40125b8:	1739c83a 	sub	fp,r2,fp
 40125bc:	a00b883a 	mov	r5,r20
 40125c0:	e009883a 	mov	r4,fp
 40125c4:	d8c00215 	stw	r3,8(sp)
 40125c8:	40019580 	call	4001958 <__udivsi3>
 40125cc:	100b883a 	mov	r5,r2
 40125d0:	9009883a 	mov	r4,r18
 40125d4:	1021883a 	mov	r16,r2
 40125d8:	4001a140 	call	4001a14 <__mulsi3>
 40125dc:	a00b883a 	mov	r5,r20
 40125e0:	e009883a 	mov	r4,fp
 40125e4:	d8800415 	stw	r2,16(sp)
 40125e8:	40019bc0 	call	40019bc <__umodsi3>
 40125ec:	1004943a 	slli	r2,r2,16
 40125f0:	da000417 	ldw	r8,16(sp)
 40125f4:	bdffffcc 	andi	r23,r23,65535
 40125f8:	b884b03a 	or	r2,r23,r2
 40125fc:	d8c00217 	ldw	r3,8(sp)
 4012600:	1200062e 	bgeu	r2,r8,401261c <__divdf3+0x424>
 4012604:	1585883a 	add	r2,r2,r22
 4012608:	813fffc4 	addi	r4,r16,-1
 401260c:	15810236 	bltu	r2,r22,4012a18 <__divdf3+0x820>
 4012610:	1201012e 	bgeu	r2,r8,4012a18 <__divdf3+0x820>
 4012614:	843fff84 	addi	r16,r16,-2
 4012618:	1585883a 	add	r2,r2,r22
 401261c:	8822943a 	slli	r17,r17,16
 4012620:	d9800017 	ldw	r6,0(sp)
 4012624:	1211c83a 	sub	r8,r2,r8
 4012628:	8c22b03a 	or	r17,r17,r16
 401262c:	373fffcc 	andi	fp,r6,65535
 4012630:	8abfffcc 	andi	r10,r17,65535
 4012634:	8820d43a 	srli	r16,r17,16
 4012638:	5009883a 	mov	r4,r10
 401263c:	e00b883a 	mov	r5,fp
 4012640:	302ed43a 	srli	r23,r6,16
 4012644:	d8c00215 	stw	r3,8(sp)
 4012648:	da000415 	stw	r8,16(sp)
 401264c:	da800115 	stw	r10,4(sp)
 4012650:	4001a140 	call	4001a14 <__mulsi3>
 4012654:	800b883a 	mov	r5,r16
 4012658:	e009883a 	mov	r4,fp
 401265c:	d8800515 	stw	r2,20(sp)
 4012660:	4001a140 	call	4001a14 <__mulsi3>
 4012664:	8009883a 	mov	r4,r16
 4012668:	b80b883a 	mov	r5,r23
 401266c:	d8800315 	stw	r2,12(sp)
 4012670:	4001a140 	call	4001a14 <__mulsi3>
 4012674:	da800117 	ldw	r10,4(sp)
 4012678:	b80b883a 	mov	r5,r23
 401267c:	1021883a 	mov	r16,r2
 4012680:	5009883a 	mov	r4,r10
 4012684:	4001a140 	call	4001a14 <__mulsi3>
 4012688:	d9c00517 	ldw	r7,20(sp)
 401268c:	da400317 	ldw	r9,12(sp)
 4012690:	d8c00217 	ldw	r3,8(sp)
 4012694:	3808d43a 	srli	r4,r7,16
 4012698:	1245883a 	add	r2,r2,r9
 401269c:	da000417 	ldw	r8,16(sp)
 40126a0:	2085883a 	add	r2,r4,r2
 40126a4:	1240022e 	bgeu	r2,r9,40126b0 <__divdf3+0x4b8>
 40126a8:	01000074 	movhi	r4,1
 40126ac:	8121883a 	add	r16,r16,r4
 40126b0:	1008d43a 	srli	r4,r2,16
 40126b4:	1004943a 	slli	r2,r2,16
 40126b8:	39ffffcc 	andi	r7,r7,65535
 40126bc:	2409883a 	add	r4,r4,r16
 40126c0:	11c5883a 	add	r2,r2,r7
 40126c4:	4100bb36 	bltu	r8,r4,40129b4 <__divdf3+0x7bc>
 40126c8:	4100d726 	beq	r8,r4,4012a28 <__divdf3+0x830>
 40126cc:	4109c83a 	sub	r4,r8,r4
 40126d0:	a8a1c83a 	sub	r16,r21,r2
 40126d4:	ac2b803a 	cmpltu	r21,r21,r16
 40126d8:	256bc83a 	sub	r21,r4,r21
 40126dc:	b540d926 	beq	r22,r21,4012a44 <__divdf3+0x84c>
 40126e0:	a00b883a 	mov	r5,r20
 40126e4:	a809883a 	mov	r4,r21
 40126e8:	d8c00215 	stw	r3,8(sp)
 40126ec:	40019580 	call	4001958 <__udivsi3>
 40126f0:	100b883a 	mov	r5,r2
 40126f4:	9009883a 	mov	r4,r18
 40126f8:	d8800515 	stw	r2,20(sp)
 40126fc:	4001a140 	call	4001a14 <__mulsi3>
 4012700:	a809883a 	mov	r4,r21
 4012704:	a00b883a 	mov	r5,r20
 4012708:	d8800415 	stw	r2,16(sp)
 401270c:	40019bc0 	call	40019bc <__umodsi3>
 4012710:	1004943a 	slli	r2,r2,16
 4012714:	8008d43a 	srli	r4,r16,16
 4012718:	da000417 	ldw	r8,16(sp)
 401271c:	d8c00217 	ldw	r3,8(sp)
 4012720:	2084b03a 	or	r2,r4,r2
 4012724:	d9c00517 	ldw	r7,20(sp)
 4012728:	1200062e 	bgeu	r2,r8,4012744 <__divdf3+0x54c>
 401272c:	1585883a 	add	r2,r2,r22
 4012730:	393fffc4 	addi	r4,r7,-1
 4012734:	1580c536 	bltu	r2,r22,4012a4c <__divdf3+0x854>
 4012738:	1200c42e 	bgeu	r2,r8,4012a4c <__divdf3+0x854>
 401273c:	39ffff84 	addi	r7,r7,-2
 4012740:	1585883a 	add	r2,r2,r22
 4012744:	122bc83a 	sub	r21,r2,r8
 4012748:	a00b883a 	mov	r5,r20
 401274c:	a809883a 	mov	r4,r21
 4012750:	d8c00215 	stw	r3,8(sp)
 4012754:	d9c00515 	stw	r7,20(sp)
 4012758:	40019580 	call	4001958 <__udivsi3>
 401275c:	9009883a 	mov	r4,r18
 4012760:	100b883a 	mov	r5,r2
 4012764:	d8800415 	stw	r2,16(sp)
 4012768:	4001a140 	call	4001a14 <__mulsi3>
 401276c:	a809883a 	mov	r4,r21
 4012770:	a00b883a 	mov	r5,r20
 4012774:	1025883a 	mov	r18,r2
 4012778:	40019bc0 	call	40019bc <__umodsi3>
 401277c:	1004943a 	slli	r2,r2,16
 4012780:	813fffcc 	andi	r4,r16,65535
 4012784:	d8c00217 	ldw	r3,8(sp)
 4012788:	20a0b03a 	or	r16,r4,r2
 401278c:	d9c00517 	ldw	r7,20(sp)
 4012790:	da000417 	ldw	r8,16(sp)
 4012794:	8480062e 	bgeu	r16,r18,40127b0 <__divdf3+0x5b8>
 4012798:	85a1883a 	add	r16,r16,r22
 401279c:	40bfffc4 	addi	r2,r8,-1
 40127a0:	8580ac36 	bltu	r16,r22,4012a54 <__divdf3+0x85c>
 40127a4:	8480ab2e 	bgeu	r16,r18,4012a54 <__divdf3+0x85c>
 40127a8:	423fff84 	addi	r8,r8,-2
 40127ac:	85a1883a 	add	r16,r16,r22
 40127b0:	3804943a 	slli	r2,r7,16
 40127b4:	84a1c83a 	sub	r16,r16,r18
 40127b8:	e009883a 	mov	r4,fp
 40127bc:	1228b03a 	or	r20,r2,r8
 40127c0:	a1ffffcc 	andi	r7,r20,65535
 40127c4:	a024d43a 	srli	r18,r20,16
 40127c8:	380b883a 	mov	r5,r7
 40127cc:	d8c00215 	stw	r3,8(sp)
 40127d0:	d9c00515 	stw	r7,20(sp)
 40127d4:	4001a140 	call	4001a14 <__mulsi3>
 40127d8:	900b883a 	mov	r5,r18
 40127dc:	e009883a 	mov	r4,fp
 40127e0:	102b883a 	mov	r21,r2
 40127e4:	4001a140 	call	4001a14 <__mulsi3>
 40127e8:	900b883a 	mov	r5,r18
 40127ec:	b809883a 	mov	r4,r23
 40127f0:	1039883a 	mov	fp,r2
 40127f4:	4001a140 	call	4001a14 <__mulsi3>
 40127f8:	d9c00517 	ldw	r7,20(sp)
 40127fc:	b80b883a 	mov	r5,r23
 4012800:	1025883a 	mov	r18,r2
 4012804:	3809883a 	mov	r4,r7
 4012808:	4001a140 	call	4001a14 <__mulsi3>
 401280c:	a808d43a 	srli	r4,r21,16
 4012810:	1705883a 	add	r2,r2,fp
 4012814:	d8c00217 	ldw	r3,8(sp)
 4012818:	2085883a 	add	r2,r4,r2
 401281c:	1700022e 	bgeu	r2,fp,4012828 <__divdf3+0x630>
 4012820:	01000074 	movhi	r4,1
 4012824:	9125883a 	add	r18,r18,r4
 4012828:	1008d43a 	srli	r4,r2,16
 401282c:	1004943a 	slli	r2,r2,16
 4012830:	ad7fffcc 	andi	r21,r21,65535
 4012834:	2489883a 	add	r4,r4,r18
 4012838:	1545883a 	add	r2,r2,r21
 401283c:	81003836 	bltu	r16,r4,4012920 <__divdf3+0x728>
 4012840:	81003626 	beq	r16,r4,401291c <__divdf3+0x724>
 4012844:	a5000054 	ori	r20,r20,1
 4012848:	1880ffc4 	addi	r2,r3,1023
 401284c:	00bf2e0e 	bge	zero,r2,4012508 <__alt_data_end+0xfc012508>
 4012850:	a10001cc 	andi	r4,r20,7
 4012854:	20000726 	beq	r4,zero,4012874 <__divdf3+0x67c>
 4012858:	a10003cc 	andi	r4,r20,15
 401285c:	01400104 	movi	r5,4
 4012860:	21400426 	beq	r4,r5,4012874 <__divdf3+0x67c>
 4012864:	a149883a 	add	r4,r20,r5
 4012868:	2529803a 	cmpltu	r20,r4,r20
 401286c:	8d23883a 	add	r17,r17,r20
 4012870:	2029883a 	mov	r20,r4
 4012874:	8900402c 	andhi	r4,r17,256
 4012878:	20000426 	beq	r4,zero,401288c <__divdf3+0x694>
 401287c:	18810004 	addi	r2,r3,1024
 4012880:	00ffc034 	movhi	r3,65280
 4012884:	18ffffc4 	addi	r3,r3,-1
 4012888:	88e2703a 	and	r17,r17,r3
 401288c:	00c1ff84 	movi	r3,2046
 4012890:	18beb416 	blt	r3,r2,4012364 <__alt_data_end+0xfc012364>
 4012894:	a028d0fa 	srli	r20,r20,3
 4012898:	882a977a 	slli	r21,r17,29
 401289c:	8820927a 	slli	r16,r17,9
 40128a0:	1081ffcc 	andi	r2,r2,2047
 40128a4:	ad2ab03a 	or	r21,r21,r20
 40128a8:	8020d33a 	srli	r16,r16,12
 40128ac:	9900004c 	andi	r4,r19,1
 40128b0:	003eb006 	br	4012374 <__alt_data_end+0xfc012374>
 40128b4:	8080022c 	andhi	r2,r16,8
 40128b8:	10001226 	beq	r2,zero,4012904 <__divdf3+0x70c>
 40128bc:	8880022c 	andhi	r2,r17,8
 40128c0:	1000101e 	bne	r2,zero,4012904 <__divdf3+0x70c>
 40128c4:	00800434 	movhi	r2,16
 40128c8:	8c000234 	orhi	r16,r17,8
 40128cc:	10bfffc4 	addi	r2,r2,-1
 40128d0:	b809883a 	mov	r4,r23
 40128d4:	80a0703a 	and	r16,r16,r2
 40128d8:	a02b883a 	mov	r21,r20
 40128dc:	003f0806 	br	4012500 <__alt_data_end+0xfc012500>
 40128e0:	008000c4 	movi	r2,3
 40128e4:	3880b126 	beq	r7,r2,4012bac <__divdf3+0x9b4>
 40128e8:	00800044 	movi	r2,1
 40128ec:	38805b1e 	bne	r7,r2,4012a5c <__divdf3+0x864>
 40128f0:	e009883a 	mov	r4,fp
 40128f4:	0005883a 	mov	r2,zero
 40128f8:	0021883a 	mov	r16,zero
 40128fc:	002b883a 	mov	r21,zero
 4012900:	003e9c06 	br	4012374 <__alt_data_end+0xfc012374>
 4012904:	00800434 	movhi	r2,16
 4012908:	84000234 	orhi	r16,r16,8
 401290c:	10bfffc4 	addi	r2,r2,-1
 4012910:	b009883a 	mov	r4,r22
 4012914:	80a0703a 	and	r16,r16,r2
 4012918:	003ef906 	br	4012500 <__alt_data_end+0xfc012500>
 401291c:	103fca26 	beq	r2,zero,4012848 <__alt_data_end+0xfc012848>
 4012920:	b421883a 	add	r16,r22,r16
 4012924:	a17fffc4 	addi	r5,r20,-1
 4012928:	8580422e 	bgeu	r16,r22,4012a34 <__divdf3+0x83c>
 401292c:	2829883a 	mov	r20,r5
 4012930:	813fc41e 	bne	r16,r4,4012844 <__alt_data_end+0xfc012844>
 4012934:	d9800017 	ldw	r6,0(sp)
 4012938:	30bfc21e 	bne	r6,r2,4012844 <__alt_data_end+0xfc012844>
 401293c:	003fc206 	br	4012848 <__alt_data_end+0xfc012848>
 4012940:	143ff604 	addi	r16,r2,-40
 4012944:	8c20983a 	sll	r16,r17,r16
 4012948:	002b883a 	mov	r21,zero
 401294c:	003eb406 	br	4012420 <__alt_data_end+0xfc012420>
 4012950:	d9800215 	stw	r6,8(sp)
 4012954:	d9c00515 	stw	r7,20(sp)
 4012958:	da000415 	stw	r8,16(sp)
 401295c:	40143340 	call	4014334 <__clzsi2>
 4012960:	10800804 	addi	r2,r2,32
 4012964:	da000417 	ldw	r8,16(sp)
 4012968:	d9c00517 	ldw	r7,20(sp)
 401296c:	d9800217 	ldw	r6,8(sp)
 4012970:	003ea106 	br	40123f8 <__alt_data_end+0xfc0123f8>
 4012974:	147ff604 	addi	r17,r2,-40
 4012978:	3462983a 	sll	r17,r6,r17
 401297c:	0029883a 	mov	r20,zero
 4012980:	003ec906 	br	40124a8 <__alt_data_end+0xfc0124a8>
 4012984:	3009883a 	mov	r4,r6
 4012988:	d9400115 	stw	r5,4(sp)
 401298c:	d9800215 	stw	r6,8(sp)
 4012990:	da000415 	stw	r8,16(sp)
 4012994:	da400315 	stw	r9,12(sp)
 4012998:	40143340 	call	4014334 <__clzsi2>
 401299c:	10800804 	addi	r2,r2,32
 40129a0:	da400317 	ldw	r9,12(sp)
 40129a4:	da000417 	ldw	r8,16(sp)
 40129a8:	d9800217 	ldw	r6,8(sp)
 40129ac:	d9400117 	ldw	r5,4(sp)
 40129b0:	003eb306 	br	4012480 <__alt_data_end+0xfc012480>
 40129b4:	d9800017 	ldw	r6,0(sp)
 40129b8:	a9ab883a 	add	r21,r21,r6
 40129bc:	a98b803a 	cmpltu	r5,r21,r6
 40129c0:	2d8b883a 	add	r5,r5,r22
 40129c4:	2a11883a 	add	r8,r5,r8
 40129c8:	897fffc4 	addi	r5,r17,-1
 40129cc:	b2000c2e 	bgeu	r22,r8,4012a00 <__divdf3+0x808>
 40129d0:	41003f36 	bltu	r8,r4,4012ad0 <__divdf3+0x8d8>
 40129d4:	22006c26 	beq	r4,r8,4012b88 <__divdf3+0x990>
 40129d8:	4109c83a 	sub	r4,r8,r4
 40129dc:	2823883a 	mov	r17,r5
 40129e0:	003f3b06 	br	40126d0 <__alt_data_end+0xfc0126d0>
 40129e4:	ad3ed336 	bltu	r21,r20,4012534 <__alt_data_end+0xfc012534>
 40129e8:	a804d07a 	srli	r2,r21,1
 40129ec:	802e97fa 	slli	r23,r16,31
 40129f0:	a82a97fa 	slli	r21,r21,31
 40129f4:	8020d07a 	srli	r16,r16,1
 40129f8:	b8aeb03a 	or	r23,r23,r2
 40129fc:	003ed006 	br	4012540 <__alt_data_end+0xfc012540>
 4012a00:	b23ff51e 	bne	r22,r8,40129d8 <__alt_data_end+0xfc0129d8>
 4012a04:	d9800017 	ldw	r6,0(sp)
 4012a08:	a9bff12e 	bgeu	r21,r6,40129d0 <__alt_data_end+0xfc0129d0>
 4012a0c:	b109c83a 	sub	r4,r22,r4
 4012a10:	2823883a 	mov	r17,r5
 4012a14:	003f2e06 	br	40126d0 <__alt_data_end+0xfc0126d0>
 4012a18:	2021883a 	mov	r16,r4
 4012a1c:	003eff06 	br	401261c <__alt_data_end+0xfc01261c>
 4012a20:	2023883a 	mov	r17,r4
 4012a24:	003ee406 	br	40125b8 <__alt_data_end+0xfc0125b8>
 4012a28:	a8bfe236 	bltu	r21,r2,40129b4 <__alt_data_end+0xfc0129b4>
 4012a2c:	0009883a 	mov	r4,zero
 4012a30:	003f2706 	br	40126d0 <__alt_data_end+0xfc0126d0>
 4012a34:	81002d36 	bltu	r16,r4,4012aec <__divdf3+0x8f4>
 4012a38:	24005626 	beq	r4,r16,4012b94 <__divdf3+0x99c>
 4012a3c:	2829883a 	mov	r20,r5
 4012a40:	003f8006 	br	4012844 <__alt_data_end+0xfc012844>
 4012a44:	053fffc4 	movi	r20,-1
 4012a48:	003f7f06 	br	4012848 <__alt_data_end+0xfc012848>
 4012a4c:	200f883a 	mov	r7,r4
 4012a50:	003f3c06 	br	4012744 <__alt_data_end+0xfc012744>
 4012a54:	1011883a 	mov	r8,r2
 4012a58:	003f5506 	br	40127b0 <__alt_data_end+0xfc0127b0>
 4012a5c:	e027883a 	mov	r19,fp
 4012a60:	003f7906 	br	4012848 <__alt_data_end+0xfc012848>
 4012a64:	010007c4 	movi	r4,31
 4012a68:	20c02816 	blt	r4,r3,4012b0c <__divdf3+0x914>
 4012a6c:	00800804 	movi	r2,32
 4012a70:	10c5c83a 	sub	r2,r2,r3
 4012a74:	888a983a 	sll	r5,r17,r2
 4012a78:	a0c8d83a 	srl	r4,r20,r3
 4012a7c:	a084983a 	sll	r2,r20,r2
 4012a80:	88e2d83a 	srl	r17,r17,r3
 4012a84:	2906b03a 	or	r3,r5,r4
 4012a88:	1004c03a 	cmpne	r2,r2,zero
 4012a8c:	1886b03a 	or	r3,r3,r2
 4012a90:	188001cc 	andi	r2,r3,7
 4012a94:	10000726 	beq	r2,zero,4012ab4 <__divdf3+0x8bc>
 4012a98:	188003cc 	andi	r2,r3,15
 4012a9c:	01000104 	movi	r4,4
 4012aa0:	11000426 	beq	r2,r4,4012ab4 <__divdf3+0x8bc>
 4012aa4:	1805883a 	mov	r2,r3
 4012aa8:	10c00104 	addi	r3,r2,4
 4012aac:	1885803a 	cmpltu	r2,r3,r2
 4012ab0:	88a3883a 	add	r17,r17,r2
 4012ab4:	8880202c 	andhi	r2,r17,128
 4012ab8:	10002926 	beq	r2,zero,4012b60 <__divdf3+0x968>
 4012abc:	9900004c 	andi	r4,r19,1
 4012ac0:	00800044 	movi	r2,1
 4012ac4:	0021883a 	mov	r16,zero
 4012ac8:	002b883a 	mov	r21,zero
 4012acc:	003e2906 	br	4012374 <__alt_data_end+0xfc012374>
 4012ad0:	d9800017 	ldw	r6,0(sp)
 4012ad4:	8c7fff84 	addi	r17,r17,-2
 4012ad8:	a9ab883a 	add	r21,r21,r6
 4012adc:	a98b803a 	cmpltu	r5,r21,r6
 4012ae0:	2d8b883a 	add	r5,r5,r22
 4012ae4:	2a11883a 	add	r8,r5,r8
 4012ae8:	003ef806 	br	40126cc <__alt_data_end+0xfc0126cc>
 4012aec:	d9800017 	ldw	r6,0(sp)
 4012af0:	318f883a 	add	r7,r6,r6
 4012af4:	398b803a 	cmpltu	r5,r7,r6
 4012af8:	2d8d883a 	add	r6,r5,r22
 4012afc:	81a1883a 	add	r16,r16,r6
 4012b00:	a17fff84 	addi	r5,r20,-2
 4012b04:	d9c00015 	stw	r7,0(sp)
 4012b08:	003f8806 	br	401292c <__alt_data_end+0xfc01292c>
 4012b0c:	013ff844 	movi	r4,-31
 4012b10:	2085c83a 	sub	r2,r4,r2
 4012b14:	8888d83a 	srl	r4,r17,r2
 4012b18:	00800804 	movi	r2,32
 4012b1c:	18802126 	beq	r3,r2,4012ba4 <__divdf3+0x9ac>
 4012b20:	04001004 	movi	r16,64
 4012b24:	80c7c83a 	sub	r3,r16,r3
 4012b28:	88e0983a 	sll	r16,r17,r3
 4012b2c:	8504b03a 	or	r2,r16,r20
 4012b30:	1004c03a 	cmpne	r2,r2,zero
 4012b34:	2084b03a 	or	r2,r4,r2
 4012b38:	144001cc 	andi	r17,r2,7
 4012b3c:	88000d1e 	bne	r17,zero,4012b74 <__divdf3+0x97c>
 4012b40:	0021883a 	mov	r16,zero
 4012b44:	102ad0fa 	srli	r21,r2,3
 4012b48:	9900004c 	andi	r4,r19,1
 4012b4c:	0005883a 	mov	r2,zero
 4012b50:	ac6ab03a 	or	r21,r21,r17
 4012b54:	003e0706 	br	4012374 <__alt_data_end+0xfc012374>
 4012b58:	1007883a 	mov	r3,r2
 4012b5c:	0023883a 	mov	r17,zero
 4012b60:	8820927a 	slli	r16,r17,9
 4012b64:	1805883a 	mov	r2,r3
 4012b68:	8822977a 	slli	r17,r17,29
 4012b6c:	8020d33a 	srli	r16,r16,12
 4012b70:	003ff406 	br	4012b44 <__alt_data_end+0xfc012b44>
 4012b74:	10c003cc 	andi	r3,r2,15
 4012b78:	01000104 	movi	r4,4
 4012b7c:	193ff626 	beq	r3,r4,4012b58 <__alt_data_end+0xfc012b58>
 4012b80:	0023883a 	mov	r17,zero
 4012b84:	003fc806 	br	4012aa8 <__alt_data_end+0xfc012aa8>
 4012b88:	a8bfd136 	bltu	r21,r2,4012ad0 <__alt_data_end+0xfc012ad0>
 4012b8c:	2823883a 	mov	r17,r5
 4012b90:	003fa606 	br	4012a2c <__alt_data_end+0xfc012a2c>
 4012b94:	d9800017 	ldw	r6,0(sp)
 4012b98:	30bfd436 	bltu	r6,r2,4012aec <__alt_data_end+0xfc012aec>
 4012b9c:	2829883a 	mov	r20,r5
 4012ba0:	003f6406 	br	4012934 <__alt_data_end+0xfc012934>
 4012ba4:	0021883a 	mov	r16,zero
 4012ba8:	003fe006 	br	4012b2c <__alt_data_end+0xfc012b2c>
 4012bac:	00800434 	movhi	r2,16
 4012bb0:	8c000234 	orhi	r16,r17,8
 4012bb4:	10bfffc4 	addi	r2,r2,-1
 4012bb8:	e009883a 	mov	r4,fp
 4012bbc:	80a0703a 	and	r16,r16,r2
 4012bc0:	a02b883a 	mov	r21,r20
 4012bc4:	003e4e06 	br	4012500 <__alt_data_end+0xfc012500>

04012bc8 <__eqdf2>:
 4012bc8:	2804d53a 	srli	r2,r5,20
 4012bcc:	3806d53a 	srli	r3,r7,20
 4012bd0:	02000434 	movhi	r8,16
 4012bd4:	423fffc4 	addi	r8,r8,-1
 4012bd8:	1081ffcc 	andi	r2,r2,2047
 4012bdc:	0281ffc4 	movi	r10,2047
 4012be0:	2a12703a 	and	r9,r5,r8
 4012be4:	18c1ffcc 	andi	r3,r3,2047
 4012be8:	3a10703a 	and	r8,r7,r8
 4012bec:	280ad7fa 	srli	r5,r5,31
 4012bf0:	380ed7fa 	srli	r7,r7,31
 4012bf4:	12801026 	beq	r2,r10,4012c38 <__eqdf2+0x70>
 4012bf8:	0281ffc4 	movi	r10,2047
 4012bfc:	1a800a26 	beq	r3,r10,4012c28 <__eqdf2+0x60>
 4012c00:	10c00226 	beq	r2,r3,4012c0c <__eqdf2+0x44>
 4012c04:	00800044 	movi	r2,1
 4012c08:	f800283a 	ret
 4012c0c:	4a3ffd1e 	bne	r9,r8,4012c04 <__alt_data_end+0xfc012c04>
 4012c10:	21bffc1e 	bne	r4,r6,4012c04 <__alt_data_end+0xfc012c04>
 4012c14:	29c00c26 	beq	r5,r7,4012c48 <__eqdf2+0x80>
 4012c18:	103ffa1e 	bne	r2,zero,4012c04 <__alt_data_end+0xfc012c04>
 4012c1c:	2244b03a 	or	r2,r4,r9
 4012c20:	1004c03a 	cmpne	r2,r2,zero
 4012c24:	f800283a 	ret
 4012c28:	3214b03a 	or	r10,r6,r8
 4012c2c:	503ff426 	beq	r10,zero,4012c00 <__alt_data_end+0xfc012c00>
 4012c30:	00800044 	movi	r2,1
 4012c34:	f800283a 	ret
 4012c38:	2254b03a 	or	r10,r4,r9
 4012c3c:	503fee26 	beq	r10,zero,4012bf8 <__alt_data_end+0xfc012bf8>
 4012c40:	00800044 	movi	r2,1
 4012c44:	f800283a 	ret
 4012c48:	0005883a 	mov	r2,zero
 4012c4c:	f800283a 	ret

04012c50 <__gedf2>:
 4012c50:	2804d53a 	srli	r2,r5,20
 4012c54:	3806d53a 	srli	r3,r7,20
 4012c58:	02000434 	movhi	r8,16
 4012c5c:	423fffc4 	addi	r8,r8,-1
 4012c60:	1081ffcc 	andi	r2,r2,2047
 4012c64:	0241ffc4 	movi	r9,2047
 4012c68:	2a14703a 	and	r10,r5,r8
 4012c6c:	18c1ffcc 	andi	r3,r3,2047
 4012c70:	3a10703a 	and	r8,r7,r8
 4012c74:	280ad7fa 	srli	r5,r5,31
 4012c78:	380ed7fa 	srli	r7,r7,31
 4012c7c:	12401d26 	beq	r2,r9,4012cf4 <__gedf2+0xa4>
 4012c80:	0241ffc4 	movi	r9,2047
 4012c84:	1a401226 	beq	r3,r9,4012cd0 <__gedf2+0x80>
 4012c88:	1000081e 	bne	r2,zero,4012cac <__gedf2+0x5c>
 4012c8c:	2296b03a 	or	r11,r4,r10
 4012c90:	5813003a 	cmpeq	r9,r11,zero
 4012c94:	1800091e 	bne	r3,zero,4012cbc <__gedf2+0x6c>
 4012c98:	3218b03a 	or	r12,r6,r8
 4012c9c:	6000071e 	bne	r12,zero,4012cbc <__gedf2+0x6c>
 4012ca0:	0005883a 	mov	r2,zero
 4012ca4:	5800101e 	bne	r11,zero,4012ce8 <__gedf2+0x98>
 4012ca8:	f800283a 	ret
 4012cac:	18000c1e 	bne	r3,zero,4012ce0 <__gedf2+0x90>
 4012cb0:	3212b03a 	or	r9,r6,r8
 4012cb4:	48000c26 	beq	r9,zero,4012ce8 <__gedf2+0x98>
 4012cb8:	0013883a 	mov	r9,zero
 4012cbc:	39c03fcc 	andi	r7,r7,255
 4012cc0:	48000826 	beq	r9,zero,4012ce4 <__gedf2+0x94>
 4012cc4:	38000926 	beq	r7,zero,4012cec <__gedf2+0x9c>
 4012cc8:	00800044 	movi	r2,1
 4012ccc:	f800283a 	ret
 4012cd0:	3212b03a 	or	r9,r6,r8
 4012cd4:	483fec26 	beq	r9,zero,4012c88 <__alt_data_end+0xfc012c88>
 4012cd8:	00bfff84 	movi	r2,-2
 4012cdc:	f800283a 	ret
 4012ce0:	39c03fcc 	andi	r7,r7,255
 4012ce4:	29c00626 	beq	r5,r7,4012d00 <__gedf2+0xb0>
 4012ce8:	283ff726 	beq	r5,zero,4012cc8 <__alt_data_end+0xfc012cc8>
 4012cec:	00bfffc4 	movi	r2,-1
 4012cf0:	f800283a 	ret
 4012cf4:	2292b03a 	or	r9,r4,r10
 4012cf8:	483fe126 	beq	r9,zero,4012c80 <__alt_data_end+0xfc012c80>
 4012cfc:	003ff606 	br	4012cd8 <__alt_data_end+0xfc012cd8>
 4012d00:	18bff916 	blt	r3,r2,4012ce8 <__alt_data_end+0xfc012ce8>
 4012d04:	10c00316 	blt	r2,r3,4012d14 <__gedf2+0xc4>
 4012d08:	42bff736 	bltu	r8,r10,4012ce8 <__alt_data_end+0xfc012ce8>
 4012d0c:	52000326 	beq	r10,r8,4012d1c <__gedf2+0xcc>
 4012d10:	5200042e 	bgeu	r10,r8,4012d24 <__gedf2+0xd4>
 4012d14:	283fec1e 	bne	r5,zero,4012cc8 <__alt_data_end+0xfc012cc8>
 4012d18:	003ff406 	br	4012cec <__alt_data_end+0xfc012cec>
 4012d1c:	313ff236 	bltu	r6,r4,4012ce8 <__alt_data_end+0xfc012ce8>
 4012d20:	21bffc36 	bltu	r4,r6,4012d14 <__alt_data_end+0xfc012d14>
 4012d24:	0005883a 	mov	r2,zero
 4012d28:	f800283a 	ret

04012d2c <__ledf2>:
 4012d2c:	2804d53a 	srli	r2,r5,20
 4012d30:	3810d53a 	srli	r8,r7,20
 4012d34:	00c00434 	movhi	r3,16
 4012d38:	18ffffc4 	addi	r3,r3,-1
 4012d3c:	1081ffcc 	andi	r2,r2,2047
 4012d40:	0241ffc4 	movi	r9,2047
 4012d44:	28d4703a 	and	r10,r5,r3
 4012d48:	4201ffcc 	andi	r8,r8,2047
 4012d4c:	38c6703a 	and	r3,r7,r3
 4012d50:	280ad7fa 	srli	r5,r5,31
 4012d54:	380ed7fa 	srli	r7,r7,31
 4012d58:	12401f26 	beq	r2,r9,4012dd8 <__ledf2+0xac>
 4012d5c:	0241ffc4 	movi	r9,2047
 4012d60:	42401426 	beq	r8,r9,4012db4 <__ledf2+0x88>
 4012d64:	1000091e 	bne	r2,zero,4012d8c <__ledf2+0x60>
 4012d68:	2296b03a 	or	r11,r4,r10
 4012d6c:	5813003a 	cmpeq	r9,r11,zero
 4012d70:	29403fcc 	andi	r5,r5,255
 4012d74:	40000a1e 	bne	r8,zero,4012da0 <__ledf2+0x74>
 4012d78:	30d8b03a 	or	r12,r6,r3
 4012d7c:	6000081e 	bne	r12,zero,4012da0 <__ledf2+0x74>
 4012d80:	0005883a 	mov	r2,zero
 4012d84:	5800111e 	bne	r11,zero,4012dcc <__ledf2+0xa0>
 4012d88:	f800283a 	ret
 4012d8c:	29403fcc 	andi	r5,r5,255
 4012d90:	40000c1e 	bne	r8,zero,4012dc4 <__ledf2+0x98>
 4012d94:	30d2b03a 	or	r9,r6,r3
 4012d98:	48000c26 	beq	r9,zero,4012dcc <__ledf2+0xa0>
 4012d9c:	0013883a 	mov	r9,zero
 4012da0:	39c03fcc 	andi	r7,r7,255
 4012da4:	48000826 	beq	r9,zero,4012dc8 <__ledf2+0x9c>
 4012da8:	38001126 	beq	r7,zero,4012df0 <__ledf2+0xc4>
 4012dac:	00800044 	movi	r2,1
 4012db0:	f800283a 	ret
 4012db4:	30d2b03a 	or	r9,r6,r3
 4012db8:	483fea26 	beq	r9,zero,4012d64 <__alt_data_end+0xfc012d64>
 4012dbc:	00800084 	movi	r2,2
 4012dc0:	f800283a 	ret
 4012dc4:	39c03fcc 	andi	r7,r7,255
 4012dc8:	39400726 	beq	r7,r5,4012de8 <__ledf2+0xbc>
 4012dcc:	2800081e 	bne	r5,zero,4012df0 <__ledf2+0xc4>
 4012dd0:	00800044 	movi	r2,1
 4012dd4:	f800283a 	ret
 4012dd8:	2292b03a 	or	r9,r4,r10
 4012ddc:	483fdf26 	beq	r9,zero,4012d5c <__alt_data_end+0xfc012d5c>
 4012de0:	00800084 	movi	r2,2
 4012de4:	f800283a 	ret
 4012de8:	4080030e 	bge	r8,r2,4012df8 <__ledf2+0xcc>
 4012dec:	383fef26 	beq	r7,zero,4012dac <__alt_data_end+0xfc012dac>
 4012df0:	00bfffc4 	movi	r2,-1
 4012df4:	f800283a 	ret
 4012df8:	123feb16 	blt	r2,r8,4012da8 <__alt_data_end+0xfc012da8>
 4012dfc:	1abff336 	bltu	r3,r10,4012dcc <__alt_data_end+0xfc012dcc>
 4012e00:	50c00326 	beq	r10,r3,4012e10 <__ledf2+0xe4>
 4012e04:	50c0042e 	bgeu	r10,r3,4012e18 <__ledf2+0xec>
 4012e08:	283fe81e 	bne	r5,zero,4012dac <__alt_data_end+0xfc012dac>
 4012e0c:	003ff806 	br	4012df0 <__alt_data_end+0xfc012df0>
 4012e10:	313fee36 	bltu	r6,r4,4012dcc <__alt_data_end+0xfc012dcc>
 4012e14:	21bffc36 	bltu	r4,r6,4012e08 <__alt_data_end+0xfc012e08>
 4012e18:	0005883a 	mov	r2,zero
 4012e1c:	f800283a 	ret

04012e20 <__muldf3>:
 4012e20:	deffee04 	addi	sp,sp,-72
 4012e24:	dd000c15 	stw	r20,48(sp)
 4012e28:	2828d53a 	srli	r20,r5,20
 4012e2c:	ddc00f15 	stw	r23,60(sp)
 4012e30:	282ed7fa 	srli	r23,r5,31
 4012e34:	dc000815 	stw	r16,32(sp)
 4012e38:	04000434 	movhi	r16,16
 4012e3c:	dcc00b15 	stw	r19,44(sp)
 4012e40:	843fffc4 	addi	r16,r16,-1
 4012e44:	dfc01115 	stw	ra,68(sp)
 4012e48:	df001015 	stw	fp,64(sp)
 4012e4c:	dd800e15 	stw	r22,56(sp)
 4012e50:	dd400d15 	stw	r21,52(sp)
 4012e54:	dc800a15 	stw	r18,40(sp)
 4012e58:	dc400915 	stw	r17,36(sp)
 4012e5c:	a501ffcc 	andi	r20,r20,2047
 4012e60:	2c20703a 	and	r16,r5,r16
 4012e64:	b827883a 	mov	r19,r23
 4012e68:	ba403fcc 	andi	r9,r23,255
 4012e6c:	a0006026 	beq	r20,zero,4012ff0 <__muldf3+0x1d0>
 4012e70:	0081ffc4 	movi	r2,2047
 4012e74:	202d883a 	mov	r22,r4
 4012e78:	a0803626 	beq	r20,r2,4012f54 <__muldf3+0x134>
 4012e7c:	84000434 	orhi	r16,r16,16
 4012e80:	200ad77a 	srli	r5,r4,29
 4012e84:	800490fa 	slli	r2,r16,3
 4012e88:	202c90fa 	slli	r22,r4,3
 4012e8c:	a53f0044 	addi	r20,r20,-1023
 4012e90:	28a0b03a 	or	r16,r5,r2
 4012e94:	002b883a 	mov	r21,zero
 4012e98:	000b883a 	mov	r5,zero
 4012e9c:	3804d53a 	srli	r2,r7,20
 4012ea0:	3838d7fa 	srli	fp,r7,31
 4012ea4:	04400434 	movhi	r17,16
 4012ea8:	8c7fffc4 	addi	r17,r17,-1
 4012eac:	1081ffcc 	andi	r2,r2,2047
 4012eb0:	3025883a 	mov	r18,r6
 4012eb4:	3c62703a 	and	r17,r7,r17
 4012eb8:	e2803fcc 	andi	r10,fp,255
 4012ebc:	10006d26 	beq	r2,zero,4013074 <__muldf3+0x254>
 4012ec0:	00c1ffc4 	movi	r3,2047
 4012ec4:	10c06526 	beq	r2,r3,401305c <__muldf3+0x23c>
 4012ec8:	8c400434 	orhi	r17,r17,16
 4012ecc:	300ed77a 	srli	r7,r6,29
 4012ed0:	880690fa 	slli	r3,r17,3
 4012ed4:	302490fa 	slli	r18,r6,3
 4012ed8:	10bf0044 	addi	r2,r2,-1023
 4012edc:	38e2b03a 	or	r17,r7,r3
 4012ee0:	000f883a 	mov	r7,zero
 4012ee4:	a087883a 	add	r3,r20,r2
 4012ee8:	010003c4 	movi	r4,15
 4012eec:	3d44b03a 	or	r2,r7,r21
 4012ef0:	e5ccf03a 	xor	r6,fp,r23
 4012ef4:	1a000044 	addi	r8,r3,1
 4012ef8:	20809b36 	bltu	r4,r2,4013168 <__muldf3+0x348>
 4012efc:	100490ba 	slli	r2,r2,2
 4012f00:	01010074 	movhi	r4,1025
 4012f04:	210bc504 	addi	r4,r4,12052
 4012f08:	1105883a 	add	r2,r2,r4
 4012f0c:	10800017 	ldw	r2,0(r2)
 4012f10:	1000683a 	jmp	r2
 4012f14:	04013168 	cmpgeui	r16,zero,1221
 4012f18:	04012f74 	movhi	r16,1213
 4012f1c:	04012f74 	movhi	r16,1213
 4012f20:	04012f70 	cmpltui	r16,zero,1213
 4012f24:	04013144 	movi	r16,1221
 4012f28:	04013144 	movi	r16,1221
 4012f2c:	0401312c 	andhi	r16,zero,1220
 4012f30:	04012f70 	cmpltui	r16,zero,1213
 4012f34:	04013144 	movi	r16,1221
 4012f38:	0401312c 	andhi	r16,zero,1220
 4012f3c:	04013144 	movi	r16,1221
 4012f40:	04012f70 	cmpltui	r16,zero,1213
 4012f44:	04013154 	movui	r16,1221
 4012f48:	04013154 	movui	r16,1221
 4012f4c:	04013154 	movui	r16,1221
 4012f50:	040134b4 	movhi	r16,1234
 4012f54:	2404b03a 	or	r2,r4,r16
 4012f58:	1000711e 	bne	r2,zero,4013120 <__muldf3+0x300>
 4012f5c:	05400204 	movi	r21,8
 4012f60:	0021883a 	mov	r16,zero
 4012f64:	002d883a 	mov	r22,zero
 4012f68:	01400084 	movi	r5,2
 4012f6c:	003fcb06 	br	4012e9c <__alt_data_end+0xfc012e9c>
 4012f70:	500d883a 	mov	r6,r10
 4012f74:	00800084 	movi	r2,2
 4012f78:	38805926 	beq	r7,r2,40130e0 <__muldf3+0x2c0>
 4012f7c:	008000c4 	movi	r2,3
 4012f80:	3881bb26 	beq	r7,r2,4013670 <__muldf3+0x850>
 4012f84:	00800044 	movi	r2,1
 4012f88:	3881961e 	bne	r7,r2,40135e4 <__muldf3+0x7c4>
 4012f8c:	3027883a 	mov	r19,r6
 4012f90:	0005883a 	mov	r2,zero
 4012f94:	0021883a 	mov	r16,zero
 4012f98:	002d883a 	mov	r22,zero
 4012f9c:	1004953a 	slli	r2,r2,20
 4012fa0:	98c03fcc 	andi	r3,r19,255
 4012fa4:	04400434 	movhi	r17,16
 4012fa8:	8c7fffc4 	addi	r17,r17,-1
 4012fac:	180697fa 	slli	r3,r3,31
 4012fb0:	8460703a 	and	r16,r16,r17
 4012fb4:	80a0b03a 	or	r16,r16,r2
 4012fb8:	80c6b03a 	or	r3,r16,r3
 4012fbc:	b005883a 	mov	r2,r22
 4012fc0:	dfc01117 	ldw	ra,68(sp)
 4012fc4:	df001017 	ldw	fp,64(sp)
 4012fc8:	ddc00f17 	ldw	r23,60(sp)
 4012fcc:	dd800e17 	ldw	r22,56(sp)
 4012fd0:	dd400d17 	ldw	r21,52(sp)
 4012fd4:	dd000c17 	ldw	r20,48(sp)
 4012fd8:	dcc00b17 	ldw	r19,44(sp)
 4012fdc:	dc800a17 	ldw	r18,40(sp)
 4012fe0:	dc400917 	ldw	r17,36(sp)
 4012fe4:	dc000817 	ldw	r16,32(sp)
 4012fe8:	dec01204 	addi	sp,sp,72
 4012fec:	f800283a 	ret
 4012ff0:	2404b03a 	or	r2,r4,r16
 4012ff4:	202b883a 	mov	r21,r4
 4012ff8:	10004426 	beq	r2,zero,401310c <__muldf3+0x2ec>
 4012ffc:	80015126 	beq	r16,zero,4013544 <__muldf3+0x724>
 4013000:	8009883a 	mov	r4,r16
 4013004:	d9800715 	stw	r6,28(sp)
 4013008:	d9c00215 	stw	r7,8(sp)
 401300c:	da400415 	stw	r9,16(sp)
 4013010:	40143340 	call	4014334 <__clzsi2>
 4013014:	d9800717 	ldw	r6,28(sp)
 4013018:	d9c00217 	ldw	r7,8(sp)
 401301c:	da400417 	ldw	r9,16(sp)
 4013020:	113ffd44 	addi	r4,r2,-11
 4013024:	00c00704 	movi	r3,28
 4013028:	19014216 	blt	r3,r4,4013534 <__muldf3+0x714>
 401302c:	00c00744 	movi	r3,29
 4013030:	15bffe04 	addi	r22,r2,-8
 4013034:	1907c83a 	sub	r3,r3,r4
 4013038:	85a0983a 	sll	r16,r16,r22
 401303c:	a8c6d83a 	srl	r3,r21,r3
 4013040:	adac983a 	sll	r22,r21,r22
 4013044:	1c20b03a 	or	r16,r3,r16
 4013048:	1080fcc4 	addi	r2,r2,1011
 401304c:	00a9c83a 	sub	r20,zero,r2
 4013050:	002b883a 	mov	r21,zero
 4013054:	000b883a 	mov	r5,zero
 4013058:	003f9006 	br	4012e9c <__alt_data_end+0xfc012e9c>
 401305c:	3446b03a 	or	r3,r6,r17
 4013060:	1800281e 	bne	r3,zero,4013104 <__muldf3+0x2e4>
 4013064:	0023883a 	mov	r17,zero
 4013068:	0025883a 	mov	r18,zero
 401306c:	01c00084 	movi	r7,2
 4013070:	003f9c06 	br	4012ee4 <__alt_data_end+0xfc012ee4>
 4013074:	3446b03a 	or	r3,r6,r17
 4013078:	18001e26 	beq	r3,zero,40130f4 <__muldf3+0x2d4>
 401307c:	88012126 	beq	r17,zero,4013504 <__muldf3+0x6e4>
 4013080:	8809883a 	mov	r4,r17
 4013084:	d9400215 	stw	r5,8(sp)
 4013088:	d9800715 	stw	r6,28(sp)
 401308c:	da400415 	stw	r9,16(sp)
 4013090:	da800315 	stw	r10,12(sp)
 4013094:	40143340 	call	4014334 <__clzsi2>
 4013098:	d9400217 	ldw	r5,8(sp)
 401309c:	d9800717 	ldw	r6,28(sp)
 40130a0:	da400417 	ldw	r9,16(sp)
 40130a4:	da800317 	ldw	r10,12(sp)
 40130a8:	113ffd44 	addi	r4,r2,-11
 40130ac:	00c00704 	movi	r3,28
 40130b0:	19011016 	blt	r3,r4,40134f4 <__muldf3+0x6d4>
 40130b4:	00c00744 	movi	r3,29
 40130b8:	14bffe04 	addi	r18,r2,-8
 40130bc:	1907c83a 	sub	r3,r3,r4
 40130c0:	8ca2983a 	sll	r17,r17,r18
 40130c4:	30c6d83a 	srl	r3,r6,r3
 40130c8:	34a4983a 	sll	r18,r6,r18
 40130cc:	1c62b03a 	or	r17,r3,r17
 40130d0:	1080fcc4 	addi	r2,r2,1011
 40130d4:	0085c83a 	sub	r2,zero,r2
 40130d8:	000f883a 	mov	r7,zero
 40130dc:	003f8106 	br	4012ee4 <__alt_data_end+0xfc012ee4>
 40130e0:	3027883a 	mov	r19,r6
 40130e4:	0081ffc4 	movi	r2,2047
 40130e8:	0021883a 	mov	r16,zero
 40130ec:	002d883a 	mov	r22,zero
 40130f0:	003faa06 	br	4012f9c <__alt_data_end+0xfc012f9c>
 40130f4:	0023883a 	mov	r17,zero
 40130f8:	0025883a 	mov	r18,zero
 40130fc:	01c00044 	movi	r7,1
 4013100:	003f7806 	br	4012ee4 <__alt_data_end+0xfc012ee4>
 4013104:	01c000c4 	movi	r7,3
 4013108:	003f7606 	br	4012ee4 <__alt_data_end+0xfc012ee4>
 401310c:	05400104 	movi	r21,4
 4013110:	0021883a 	mov	r16,zero
 4013114:	002d883a 	mov	r22,zero
 4013118:	01400044 	movi	r5,1
 401311c:	003f5f06 	br	4012e9c <__alt_data_end+0xfc012e9c>
 4013120:	05400304 	movi	r21,12
 4013124:	014000c4 	movi	r5,3
 4013128:	003f5c06 	br	4012e9c <__alt_data_end+0xfc012e9c>
 401312c:	04000434 	movhi	r16,16
 4013130:	0027883a 	mov	r19,zero
 4013134:	843fffc4 	addi	r16,r16,-1
 4013138:	05bfffc4 	movi	r22,-1
 401313c:	0081ffc4 	movi	r2,2047
 4013140:	003f9606 	br	4012f9c <__alt_data_end+0xfc012f9c>
 4013144:	8023883a 	mov	r17,r16
 4013148:	b025883a 	mov	r18,r22
 401314c:	280f883a 	mov	r7,r5
 4013150:	003f8806 	br	4012f74 <__alt_data_end+0xfc012f74>
 4013154:	8023883a 	mov	r17,r16
 4013158:	b025883a 	mov	r18,r22
 401315c:	480d883a 	mov	r6,r9
 4013160:	280f883a 	mov	r7,r5
 4013164:	003f8306 	br	4012f74 <__alt_data_end+0xfc012f74>
 4013168:	b026d43a 	srli	r19,r22,16
 401316c:	902ed43a 	srli	r23,r18,16
 4013170:	b5bfffcc 	andi	r22,r22,65535
 4013174:	94bfffcc 	andi	r18,r18,65535
 4013178:	b00b883a 	mov	r5,r22
 401317c:	9009883a 	mov	r4,r18
 4013180:	d8c00515 	stw	r3,20(sp)
 4013184:	d9800715 	stw	r6,28(sp)
 4013188:	da000615 	stw	r8,24(sp)
 401318c:	4001a140 	call	4001a14 <__mulsi3>
 4013190:	980b883a 	mov	r5,r19
 4013194:	9009883a 	mov	r4,r18
 4013198:	1029883a 	mov	r20,r2
 401319c:	4001a140 	call	4001a14 <__mulsi3>
 40131a0:	b80b883a 	mov	r5,r23
 40131a4:	9809883a 	mov	r4,r19
 40131a8:	102b883a 	mov	r21,r2
 40131ac:	4001a140 	call	4001a14 <__mulsi3>
 40131b0:	b809883a 	mov	r4,r23
 40131b4:	b00b883a 	mov	r5,r22
 40131b8:	1039883a 	mov	fp,r2
 40131bc:	4001a140 	call	4001a14 <__mulsi3>
 40131c0:	a008d43a 	srli	r4,r20,16
 40131c4:	1545883a 	add	r2,r2,r21
 40131c8:	d8c00517 	ldw	r3,20(sp)
 40131cc:	2085883a 	add	r2,r4,r2
 40131d0:	d9800717 	ldw	r6,28(sp)
 40131d4:	da000617 	ldw	r8,24(sp)
 40131d8:	1540022e 	bgeu	r2,r21,40131e4 <__muldf3+0x3c4>
 40131dc:	01000074 	movhi	r4,1
 40131e0:	e139883a 	add	fp,fp,r4
 40131e4:	100e943a 	slli	r7,r2,16
 40131e8:	1004d43a 	srli	r2,r2,16
 40131ec:	882ad43a 	srli	r21,r17,16
 40131f0:	a53fffcc 	andi	r20,r20,65535
 40131f4:	8c7fffcc 	andi	r17,r17,65535
 40131f8:	3d29883a 	add	r20,r7,r20
 40131fc:	b00b883a 	mov	r5,r22
 4013200:	8809883a 	mov	r4,r17
 4013204:	d8c00515 	stw	r3,20(sp)
 4013208:	d9800715 	stw	r6,28(sp)
 401320c:	da000615 	stw	r8,24(sp)
 4013210:	dd000115 	stw	r20,4(sp)
 4013214:	d8800015 	stw	r2,0(sp)
 4013218:	4001a140 	call	4001a14 <__mulsi3>
 401321c:	980b883a 	mov	r5,r19
 4013220:	8809883a 	mov	r4,r17
 4013224:	d8800215 	stw	r2,8(sp)
 4013228:	4001a140 	call	4001a14 <__mulsi3>
 401322c:	9809883a 	mov	r4,r19
 4013230:	a80b883a 	mov	r5,r21
 4013234:	1029883a 	mov	r20,r2
 4013238:	4001a140 	call	4001a14 <__mulsi3>
 401323c:	b00b883a 	mov	r5,r22
 4013240:	a809883a 	mov	r4,r21
 4013244:	d8800415 	stw	r2,16(sp)
 4013248:	4001a140 	call	4001a14 <__mulsi3>
 401324c:	d9c00217 	ldw	r7,8(sp)
 4013250:	1505883a 	add	r2,r2,r20
 4013254:	d8c00517 	ldw	r3,20(sp)
 4013258:	3826d43a 	srli	r19,r7,16
 401325c:	d9800717 	ldw	r6,28(sp)
 4013260:	da000617 	ldw	r8,24(sp)
 4013264:	9885883a 	add	r2,r19,r2
 4013268:	da400417 	ldw	r9,16(sp)
 401326c:	1500022e 	bgeu	r2,r20,4013278 <__muldf3+0x458>
 4013270:	01000074 	movhi	r4,1
 4013274:	4913883a 	add	r9,r9,r4
 4013278:	1028d43a 	srli	r20,r2,16
 401327c:	1004943a 	slli	r2,r2,16
 4013280:	802cd43a 	srli	r22,r16,16
 4013284:	843fffcc 	andi	r16,r16,65535
 4013288:	3cffffcc 	andi	r19,r7,65535
 401328c:	9009883a 	mov	r4,r18
 4013290:	800b883a 	mov	r5,r16
 4013294:	a269883a 	add	r20,r20,r9
 4013298:	d8c00515 	stw	r3,20(sp)
 401329c:	d9800715 	stw	r6,28(sp)
 40132a0:	da000615 	stw	r8,24(sp)
 40132a4:	14e7883a 	add	r19,r2,r19
 40132a8:	4001a140 	call	4001a14 <__mulsi3>
 40132ac:	9009883a 	mov	r4,r18
 40132b0:	b00b883a 	mov	r5,r22
 40132b4:	d8800315 	stw	r2,12(sp)
 40132b8:	4001a140 	call	4001a14 <__mulsi3>
 40132bc:	b809883a 	mov	r4,r23
 40132c0:	b00b883a 	mov	r5,r22
 40132c4:	d8800215 	stw	r2,8(sp)
 40132c8:	4001a140 	call	4001a14 <__mulsi3>
 40132cc:	b80b883a 	mov	r5,r23
 40132d0:	8009883a 	mov	r4,r16
 40132d4:	d8800415 	stw	r2,16(sp)
 40132d8:	4001a140 	call	4001a14 <__mulsi3>
 40132dc:	da800317 	ldw	r10,12(sp)
 40132e0:	d9c00217 	ldw	r7,8(sp)
 40132e4:	d9000017 	ldw	r4,0(sp)
 40132e8:	502ed43a 	srli	r23,r10,16
 40132ec:	11c5883a 	add	r2,r2,r7
 40132f0:	24e5883a 	add	r18,r4,r19
 40132f4:	b885883a 	add	r2,r23,r2
 40132f8:	d8c00517 	ldw	r3,20(sp)
 40132fc:	d9800717 	ldw	r6,28(sp)
 4013300:	da000617 	ldw	r8,24(sp)
 4013304:	da400417 	ldw	r9,16(sp)
 4013308:	11c0022e 	bgeu	r2,r7,4013314 <__muldf3+0x4f4>
 401330c:	01000074 	movhi	r4,1
 4013310:	4913883a 	add	r9,r9,r4
 4013314:	100ed43a 	srli	r7,r2,16
 4013318:	1004943a 	slli	r2,r2,16
 401331c:	55ffffcc 	andi	r23,r10,65535
 4013320:	3a53883a 	add	r9,r7,r9
 4013324:	8809883a 	mov	r4,r17
 4013328:	800b883a 	mov	r5,r16
 401332c:	d8c00515 	stw	r3,20(sp)
 4013330:	d9800715 	stw	r6,28(sp)
 4013334:	da000615 	stw	r8,24(sp)
 4013338:	da400415 	stw	r9,16(sp)
 401333c:	15ef883a 	add	r23,r2,r23
 4013340:	4001a140 	call	4001a14 <__mulsi3>
 4013344:	8809883a 	mov	r4,r17
 4013348:	b00b883a 	mov	r5,r22
 401334c:	d8800215 	stw	r2,8(sp)
 4013350:	4001a140 	call	4001a14 <__mulsi3>
 4013354:	b00b883a 	mov	r5,r22
 4013358:	a809883a 	mov	r4,r21
 401335c:	d8800315 	stw	r2,12(sp)
 4013360:	4001a140 	call	4001a14 <__mulsi3>
 4013364:	8009883a 	mov	r4,r16
 4013368:	a80b883a 	mov	r5,r21
 401336c:	1023883a 	mov	r17,r2
 4013370:	4001a140 	call	4001a14 <__mulsi3>
 4013374:	d9c00217 	ldw	r7,8(sp)
 4013378:	da800317 	ldw	r10,12(sp)
 401337c:	d8c00517 	ldw	r3,20(sp)
 4013380:	3808d43a 	srli	r4,r7,16
 4013384:	1285883a 	add	r2,r2,r10
 4013388:	d9800717 	ldw	r6,28(sp)
 401338c:	2085883a 	add	r2,r4,r2
 4013390:	da000617 	ldw	r8,24(sp)
 4013394:	da400417 	ldw	r9,16(sp)
 4013398:	1280022e 	bgeu	r2,r10,40133a4 <__muldf3+0x584>
 401339c:	01000074 	movhi	r4,1
 40133a0:	8923883a 	add	r17,r17,r4
 40133a4:	1008943a 	slli	r4,r2,16
 40133a8:	39ffffcc 	andi	r7,r7,65535
 40133ac:	e4b9883a 	add	fp,fp,r18
 40133b0:	21cf883a 	add	r7,r4,r7
 40133b4:	e4e7803a 	cmpltu	r19,fp,r19
 40133b8:	3d0f883a 	add	r7,r7,r20
 40133bc:	bf39883a 	add	fp,r23,fp
 40133c0:	99c9883a 	add	r4,r19,r7
 40133c4:	e5ef803a 	cmpltu	r23,fp,r23
 40133c8:	490b883a 	add	r5,r9,r4
 40133cc:	1004d43a 	srli	r2,r2,16
 40133d0:	b965883a 	add	r18,r23,r5
 40133d4:	24c9803a 	cmpltu	r4,r4,r19
 40133d8:	3d29803a 	cmpltu	r20,r7,r20
 40133dc:	a128b03a 	or	r20,r20,r4
 40133e0:	95ef803a 	cmpltu	r23,r18,r23
 40133e4:	2a53803a 	cmpltu	r9,r5,r9
 40133e8:	a0a9883a 	add	r20,r20,r2
 40133ec:	4deeb03a 	or	r23,r9,r23
 40133f0:	a5ef883a 	add	r23,r20,r23
 40133f4:	bc63883a 	add	r17,r23,r17
 40133f8:	e004927a 	slli	r2,fp,9
 40133fc:	d9000117 	ldw	r4,4(sp)
 4013400:	882e927a 	slli	r23,r17,9
 4013404:	9022d5fa 	srli	r17,r18,23
 4013408:	e038d5fa 	srli	fp,fp,23
 401340c:	1104b03a 	or	r2,r2,r4
 4013410:	9024927a 	slli	r18,r18,9
 4013414:	1004c03a 	cmpne	r2,r2,zero
 4013418:	bc62b03a 	or	r17,r23,r17
 401341c:	1738b03a 	or	fp,r2,fp
 4013420:	8880402c 	andhi	r2,r17,256
 4013424:	e4a4b03a 	or	r18,fp,r18
 4013428:	10000726 	beq	r2,zero,4013448 <__muldf3+0x628>
 401342c:	9006d07a 	srli	r3,r18,1
 4013430:	880497fa 	slli	r2,r17,31
 4013434:	9480004c 	andi	r18,r18,1
 4013438:	8822d07a 	srli	r17,r17,1
 401343c:	1ca4b03a 	or	r18,r3,r18
 4013440:	14a4b03a 	or	r18,r2,r18
 4013444:	4007883a 	mov	r3,r8
 4013448:	1880ffc4 	addi	r2,r3,1023
 401344c:	0080460e 	bge	zero,r2,4013568 <__muldf3+0x748>
 4013450:	910001cc 	andi	r4,r18,7
 4013454:	20000726 	beq	r4,zero,4013474 <__muldf3+0x654>
 4013458:	910003cc 	andi	r4,r18,15
 401345c:	01400104 	movi	r5,4
 4013460:	21400426 	beq	r4,r5,4013474 <__muldf3+0x654>
 4013464:	9149883a 	add	r4,r18,r5
 4013468:	24a5803a 	cmpltu	r18,r4,r18
 401346c:	8ca3883a 	add	r17,r17,r18
 4013470:	2025883a 	mov	r18,r4
 4013474:	8900402c 	andhi	r4,r17,256
 4013478:	20000426 	beq	r4,zero,401348c <__muldf3+0x66c>
 401347c:	18810004 	addi	r2,r3,1024
 4013480:	00ffc034 	movhi	r3,65280
 4013484:	18ffffc4 	addi	r3,r3,-1
 4013488:	88e2703a 	and	r17,r17,r3
 401348c:	00c1ff84 	movi	r3,2046
 4013490:	18bf1316 	blt	r3,r2,40130e0 <__alt_data_end+0xfc0130e0>
 4013494:	882c977a 	slli	r22,r17,29
 4013498:	9024d0fa 	srli	r18,r18,3
 401349c:	8822927a 	slli	r17,r17,9
 40134a0:	1081ffcc 	andi	r2,r2,2047
 40134a4:	b4acb03a 	or	r22,r22,r18
 40134a8:	8820d33a 	srli	r16,r17,12
 40134ac:	3027883a 	mov	r19,r6
 40134b0:	003eba06 	br	4012f9c <__alt_data_end+0xfc012f9c>
 40134b4:	8080022c 	andhi	r2,r16,8
 40134b8:	10000926 	beq	r2,zero,40134e0 <__muldf3+0x6c0>
 40134bc:	8880022c 	andhi	r2,r17,8
 40134c0:	1000071e 	bne	r2,zero,40134e0 <__muldf3+0x6c0>
 40134c4:	00800434 	movhi	r2,16
 40134c8:	8c000234 	orhi	r16,r17,8
 40134cc:	10bfffc4 	addi	r2,r2,-1
 40134d0:	e027883a 	mov	r19,fp
 40134d4:	80a0703a 	and	r16,r16,r2
 40134d8:	902d883a 	mov	r22,r18
 40134dc:	003f1706 	br	401313c <__alt_data_end+0xfc01313c>
 40134e0:	00800434 	movhi	r2,16
 40134e4:	84000234 	orhi	r16,r16,8
 40134e8:	10bfffc4 	addi	r2,r2,-1
 40134ec:	80a0703a 	and	r16,r16,r2
 40134f0:	003f1206 	br	401313c <__alt_data_end+0xfc01313c>
 40134f4:	147ff604 	addi	r17,r2,-40
 40134f8:	3462983a 	sll	r17,r6,r17
 40134fc:	0025883a 	mov	r18,zero
 4013500:	003ef306 	br	40130d0 <__alt_data_end+0xfc0130d0>
 4013504:	3009883a 	mov	r4,r6
 4013508:	d9400215 	stw	r5,8(sp)
 401350c:	d9800715 	stw	r6,28(sp)
 4013510:	da400415 	stw	r9,16(sp)
 4013514:	da800315 	stw	r10,12(sp)
 4013518:	40143340 	call	4014334 <__clzsi2>
 401351c:	10800804 	addi	r2,r2,32
 4013520:	da800317 	ldw	r10,12(sp)
 4013524:	da400417 	ldw	r9,16(sp)
 4013528:	d9800717 	ldw	r6,28(sp)
 401352c:	d9400217 	ldw	r5,8(sp)
 4013530:	003edd06 	br	40130a8 <__alt_data_end+0xfc0130a8>
 4013534:	143ff604 	addi	r16,r2,-40
 4013538:	ac20983a 	sll	r16,r21,r16
 401353c:	002d883a 	mov	r22,zero
 4013540:	003ec106 	br	4013048 <__alt_data_end+0xfc013048>
 4013544:	d9800715 	stw	r6,28(sp)
 4013548:	d9c00215 	stw	r7,8(sp)
 401354c:	da400415 	stw	r9,16(sp)
 4013550:	40143340 	call	4014334 <__clzsi2>
 4013554:	10800804 	addi	r2,r2,32
 4013558:	da400417 	ldw	r9,16(sp)
 401355c:	d9c00217 	ldw	r7,8(sp)
 4013560:	d9800717 	ldw	r6,28(sp)
 4013564:	003eae06 	br	4013020 <__alt_data_end+0xfc013020>
 4013568:	00c00044 	movi	r3,1
 401356c:	1887c83a 	sub	r3,r3,r2
 4013570:	01000e04 	movi	r4,56
 4013574:	20fe8516 	blt	r4,r3,4012f8c <__alt_data_end+0xfc012f8c>
 4013578:	010007c4 	movi	r4,31
 401357c:	20c01b16 	blt	r4,r3,40135ec <__muldf3+0x7cc>
 4013580:	00800804 	movi	r2,32
 4013584:	10c5c83a 	sub	r2,r2,r3
 4013588:	888a983a 	sll	r5,r17,r2
 401358c:	90c8d83a 	srl	r4,r18,r3
 4013590:	9084983a 	sll	r2,r18,r2
 4013594:	88e2d83a 	srl	r17,r17,r3
 4013598:	2906b03a 	or	r3,r5,r4
 401359c:	1004c03a 	cmpne	r2,r2,zero
 40135a0:	1886b03a 	or	r3,r3,r2
 40135a4:	188001cc 	andi	r2,r3,7
 40135a8:	10000726 	beq	r2,zero,40135c8 <__muldf3+0x7a8>
 40135ac:	188003cc 	andi	r2,r3,15
 40135b0:	01000104 	movi	r4,4
 40135b4:	11000426 	beq	r2,r4,40135c8 <__muldf3+0x7a8>
 40135b8:	1805883a 	mov	r2,r3
 40135bc:	10c00104 	addi	r3,r2,4
 40135c0:	1885803a 	cmpltu	r2,r3,r2
 40135c4:	88a3883a 	add	r17,r17,r2
 40135c8:	8880202c 	andhi	r2,r17,128
 40135cc:	10001c26 	beq	r2,zero,4013640 <__muldf3+0x820>
 40135d0:	3027883a 	mov	r19,r6
 40135d4:	00800044 	movi	r2,1
 40135d8:	0021883a 	mov	r16,zero
 40135dc:	002d883a 	mov	r22,zero
 40135e0:	003e6e06 	br	4012f9c <__alt_data_end+0xfc012f9c>
 40135e4:	4007883a 	mov	r3,r8
 40135e8:	003f9706 	br	4013448 <__alt_data_end+0xfc013448>
 40135ec:	017ff844 	movi	r5,-31
 40135f0:	2885c83a 	sub	r2,r5,r2
 40135f4:	888ad83a 	srl	r5,r17,r2
 40135f8:	00800804 	movi	r2,32
 40135fc:	18801a26 	beq	r3,r2,4013668 <__muldf3+0x848>
 4013600:	01001004 	movi	r4,64
 4013604:	20c7c83a 	sub	r3,r4,r3
 4013608:	88e2983a 	sll	r17,r17,r3
 401360c:	8ca4b03a 	or	r18,r17,r18
 4013610:	9004c03a 	cmpne	r2,r18,zero
 4013614:	2884b03a 	or	r2,r5,r2
 4013618:	144001cc 	andi	r17,r2,7
 401361c:	88000d1e 	bne	r17,zero,4013654 <__muldf3+0x834>
 4013620:	0021883a 	mov	r16,zero
 4013624:	102cd0fa 	srli	r22,r2,3
 4013628:	3027883a 	mov	r19,r6
 401362c:	0005883a 	mov	r2,zero
 4013630:	b46cb03a 	or	r22,r22,r17
 4013634:	003e5906 	br	4012f9c <__alt_data_end+0xfc012f9c>
 4013638:	1007883a 	mov	r3,r2
 401363c:	0023883a 	mov	r17,zero
 4013640:	8820927a 	slli	r16,r17,9
 4013644:	1805883a 	mov	r2,r3
 4013648:	8822977a 	slli	r17,r17,29
 401364c:	8020d33a 	srli	r16,r16,12
 4013650:	003ff406 	br	4013624 <__alt_data_end+0xfc013624>
 4013654:	10c003cc 	andi	r3,r2,15
 4013658:	01000104 	movi	r4,4
 401365c:	193ff626 	beq	r3,r4,4013638 <__alt_data_end+0xfc013638>
 4013660:	0023883a 	mov	r17,zero
 4013664:	003fd506 	br	40135bc <__alt_data_end+0xfc0135bc>
 4013668:	0023883a 	mov	r17,zero
 401366c:	003fe706 	br	401360c <__alt_data_end+0xfc01360c>
 4013670:	00800434 	movhi	r2,16
 4013674:	8c000234 	orhi	r16,r17,8
 4013678:	10bfffc4 	addi	r2,r2,-1
 401367c:	3027883a 	mov	r19,r6
 4013680:	80a0703a 	and	r16,r16,r2
 4013684:	902d883a 	mov	r22,r18
 4013688:	003eac06 	br	401313c <__alt_data_end+0xfc01313c>

0401368c <__subdf3>:
 401368c:	02000434 	movhi	r8,16
 4013690:	423fffc4 	addi	r8,r8,-1
 4013694:	defffb04 	addi	sp,sp,-20
 4013698:	2a14703a 	and	r10,r5,r8
 401369c:	3812d53a 	srli	r9,r7,20
 40136a0:	3a10703a 	and	r8,r7,r8
 40136a4:	2006d77a 	srli	r3,r4,29
 40136a8:	3004d77a 	srli	r2,r6,29
 40136ac:	dc000015 	stw	r16,0(sp)
 40136b0:	501490fa 	slli	r10,r10,3
 40136b4:	2820d53a 	srli	r16,r5,20
 40136b8:	401090fa 	slli	r8,r8,3
 40136bc:	dc800215 	stw	r18,8(sp)
 40136c0:	dc400115 	stw	r17,4(sp)
 40136c4:	dfc00415 	stw	ra,16(sp)
 40136c8:	202290fa 	slli	r17,r4,3
 40136cc:	dcc00315 	stw	r19,12(sp)
 40136d0:	4a41ffcc 	andi	r9,r9,2047
 40136d4:	0101ffc4 	movi	r4,2047
 40136d8:	2824d7fa 	srli	r18,r5,31
 40136dc:	8401ffcc 	andi	r16,r16,2047
 40136e0:	50c6b03a 	or	r3,r10,r3
 40136e4:	380ed7fa 	srli	r7,r7,31
 40136e8:	408ab03a 	or	r5,r8,r2
 40136ec:	300c90fa 	slli	r6,r6,3
 40136f0:	49009626 	beq	r9,r4,401394c <__subdf3+0x2c0>
 40136f4:	39c0005c 	xori	r7,r7,1
 40136f8:	8245c83a 	sub	r2,r16,r9
 40136fc:	3c807426 	beq	r7,r18,40138d0 <__subdf3+0x244>
 4013700:	0080af0e 	bge	zero,r2,40139c0 <__subdf3+0x334>
 4013704:	48002a1e 	bne	r9,zero,40137b0 <__subdf3+0x124>
 4013708:	2988b03a 	or	r4,r5,r6
 401370c:	20009a1e 	bne	r4,zero,4013978 <__subdf3+0x2ec>
 4013710:	888001cc 	andi	r2,r17,7
 4013714:	10000726 	beq	r2,zero,4013734 <__subdf3+0xa8>
 4013718:	888003cc 	andi	r2,r17,15
 401371c:	01000104 	movi	r4,4
 4013720:	11000426 	beq	r2,r4,4013734 <__subdf3+0xa8>
 4013724:	890b883a 	add	r5,r17,r4
 4013728:	2c63803a 	cmpltu	r17,r5,r17
 401372c:	1c47883a 	add	r3,r3,r17
 4013730:	2823883a 	mov	r17,r5
 4013734:	1880202c 	andhi	r2,r3,128
 4013738:	10005926 	beq	r2,zero,40138a0 <__subdf3+0x214>
 401373c:	84000044 	addi	r16,r16,1
 4013740:	0081ffc4 	movi	r2,2047
 4013744:	8080be26 	beq	r16,r2,4013a40 <__subdf3+0x3b4>
 4013748:	017fe034 	movhi	r5,65408
 401374c:	297fffc4 	addi	r5,r5,-1
 4013750:	1946703a 	and	r3,r3,r5
 4013754:	1804977a 	slli	r2,r3,29
 4013758:	1806927a 	slli	r3,r3,9
 401375c:	8822d0fa 	srli	r17,r17,3
 4013760:	8401ffcc 	andi	r16,r16,2047
 4013764:	180ad33a 	srli	r5,r3,12
 4013768:	9100004c 	andi	r4,r18,1
 401376c:	1444b03a 	or	r2,r2,r17
 4013770:	80c1ffcc 	andi	r3,r16,2047
 4013774:	1820953a 	slli	r16,r3,20
 4013778:	20c03fcc 	andi	r3,r4,255
 401377c:	180897fa 	slli	r4,r3,31
 4013780:	00c00434 	movhi	r3,16
 4013784:	18ffffc4 	addi	r3,r3,-1
 4013788:	28c6703a 	and	r3,r5,r3
 401378c:	1c06b03a 	or	r3,r3,r16
 4013790:	1906b03a 	or	r3,r3,r4
 4013794:	dfc00417 	ldw	ra,16(sp)
 4013798:	dcc00317 	ldw	r19,12(sp)
 401379c:	dc800217 	ldw	r18,8(sp)
 40137a0:	dc400117 	ldw	r17,4(sp)
 40137a4:	dc000017 	ldw	r16,0(sp)
 40137a8:	dec00504 	addi	sp,sp,20
 40137ac:	f800283a 	ret
 40137b0:	0101ffc4 	movi	r4,2047
 40137b4:	813fd626 	beq	r16,r4,4013710 <__alt_data_end+0xfc013710>
 40137b8:	29402034 	orhi	r5,r5,128
 40137bc:	01000e04 	movi	r4,56
 40137c0:	2080a316 	blt	r4,r2,4013a50 <__subdf3+0x3c4>
 40137c4:	010007c4 	movi	r4,31
 40137c8:	2080c616 	blt	r4,r2,4013ae4 <__subdf3+0x458>
 40137cc:	01000804 	movi	r4,32
 40137d0:	2089c83a 	sub	r4,r4,r2
 40137d4:	2910983a 	sll	r8,r5,r4
 40137d8:	308ed83a 	srl	r7,r6,r2
 40137dc:	3108983a 	sll	r4,r6,r4
 40137e0:	2884d83a 	srl	r2,r5,r2
 40137e4:	41ccb03a 	or	r6,r8,r7
 40137e8:	2008c03a 	cmpne	r4,r4,zero
 40137ec:	310cb03a 	or	r6,r6,r4
 40137f0:	898dc83a 	sub	r6,r17,r6
 40137f4:	89a3803a 	cmpltu	r17,r17,r6
 40137f8:	1887c83a 	sub	r3,r3,r2
 40137fc:	1c47c83a 	sub	r3,r3,r17
 4013800:	3023883a 	mov	r17,r6
 4013804:	1880202c 	andhi	r2,r3,128
 4013808:	10002326 	beq	r2,zero,4013898 <__subdf3+0x20c>
 401380c:	04c02034 	movhi	r19,128
 4013810:	9cffffc4 	addi	r19,r19,-1
 4013814:	1ce6703a 	and	r19,r3,r19
 4013818:	98007a26 	beq	r19,zero,4013a04 <__subdf3+0x378>
 401381c:	9809883a 	mov	r4,r19
 4013820:	40143340 	call	4014334 <__clzsi2>
 4013824:	113ffe04 	addi	r4,r2,-8
 4013828:	00c007c4 	movi	r3,31
 401382c:	19007b16 	blt	r3,r4,4013a1c <__subdf3+0x390>
 4013830:	00800804 	movi	r2,32
 4013834:	1105c83a 	sub	r2,r2,r4
 4013838:	8884d83a 	srl	r2,r17,r2
 401383c:	9906983a 	sll	r3,r19,r4
 4013840:	8922983a 	sll	r17,r17,r4
 4013844:	10c4b03a 	or	r2,r2,r3
 4013848:	24007816 	blt	r4,r16,4013a2c <__subdf3+0x3a0>
 401384c:	2421c83a 	sub	r16,r4,r16
 4013850:	80c00044 	addi	r3,r16,1
 4013854:	010007c4 	movi	r4,31
 4013858:	20c09516 	blt	r4,r3,4013ab0 <__subdf3+0x424>
 401385c:	01400804 	movi	r5,32
 4013860:	28cbc83a 	sub	r5,r5,r3
 4013864:	88c8d83a 	srl	r4,r17,r3
 4013868:	8962983a 	sll	r17,r17,r5
 401386c:	114a983a 	sll	r5,r2,r5
 4013870:	10c6d83a 	srl	r3,r2,r3
 4013874:	8804c03a 	cmpne	r2,r17,zero
 4013878:	290ab03a 	or	r5,r5,r4
 401387c:	28a2b03a 	or	r17,r5,r2
 4013880:	0021883a 	mov	r16,zero
 4013884:	003fa206 	br	4013710 <__alt_data_end+0xfc013710>
 4013888:	2090b03a 	or	r8,r4,r2
 401388c:	40018e26 	beq	r8,zero,4013ec8 <__subdf3+0x83c>
 4013890:	1007883a 	mov	r3,r2
 4013894:	2023883a 	mov	r17,r4
 4013898:	888001cc 	andi	r2,r17,7
 401389c:	103f9e1e 	bne	r2,zero,4013718 <__alt_data_end+0xfc013718>
 40138a0:	1804977a 	slli	r2,r3,29
 40138a4:	8822d0fa 	srli	r17,r17,3
 40138a8:	1810d0fa 	srli	r8,r3,3
 40138ac:	9100004c 	andi	r4,r18,1
 40138b0:	1444b03a 	or	r2,r2,r17
 40138b4:	00c1ffc4 	movi	r3,2047
 40138b8:	80c02826 	beq	r16,r3,401395c <__subdf3+0x2d0>
 40138bc:	01400434 	movhi	r5,16
 40138c0:	297fffc4 	addi	r5,r5,-1
 40138c4:	80e0703a 	and	r16,r16,r3
 40138c8:	414a703a 	and	r5,r8,r5
 40138cc:	003fa806 	br	4013770 <__alt_data_end+0xfc013770>
 40138d0:	0080630e 	bge	zero,r2,4013a60 <__subdf3+0x3d4>
 40138d4:	48003026 	beq	r9,zero,4013998 <__subdf3+0x30c>
 40138d8:	0101ffc4 	movi	r4,2047
 40138dc:	813f8c26 	beq	r16,r4,4013710 <__alt_data_end+0xfc013710>
 40138e0:	29402034 	orhi	r5,r5,128
 40138e4:	01000e04 	movi	r4,56
 40138e8:	2080a90e 	bge	r4,r2,4013b90 <__subdf3+0x504>
 40138ec:	298cb03a 	or	r6,r5,r6
 40138f0:	3012c03a 	cmpne	r9,r6,zero
 40138f4:	0005883a 	mov	r2,zero
 40138f8:	4c53883a 	add	r9,r9,r17
 40138fc:	4c63803a 	cmpltu	r17,r9,r17
 4013900:	10c7883a 	add	r3,r2,r3
 4013904:	88c7883a 	add	r3,r17,r3
 4013908:	4823883a 	mov	r17,r9
 401390c:	1880202c 	andhi	r2,r3,128
 4013910:	1000d026 	beq	r2,zero,4013c54 <__subdf3+0x5c8>
 4013914:	84000044 	addi	r16,r16,1
 4013918:	0081ffc4 	movi	r2,2047
 401391c:	8080fe26 	beq	r16,r2,4013d18 <__subdf3+0x68c>
 4013920:	00bfe034 	movhi	r2,65408
 4013924:	10bfffc4 	addi	r2,r2,-1
 4013928:	1886703a 	and	r3,r3,r2
 401392c:	880ad07a 	srli	r5,r17,1
 4013930:	180497fa 	slli	r2,r3,31
 4013934:	8900004c 	andi	r4,r17,1
 4013938:	2922b03a 	or	r17,r5,r4
 401393c:	1806d07a 	srli	r3,r3,1
 4013940:	1462b03a 	or	r17,r2,r17
 4013944:	3825883a 	mov	r18,r7
 4013948:	003f7106 	br	4013710 <__alt_data_end+0xfc013710>
 401394c:	2984b03a 	or	r2,r5,r6
 4013950:	103f6826 	beq	r2,zero,40136f4 <__alt_data_end+0xfc0136f4>
 4013954:	39c03fcc 	andi	r7,r7,255
 4013958:	003f6706 	br	40136f8 <__alt_data_end+0xfc0136f8>
 401395c:	4086b03a 	or	r3,r8,r2
 4013960:	18015226 	beq	r3,zero,4013eac <__subdf3+0x820>
 4013964:	00c00434 	movhi	r3,16
 4013968:	41400234 	orhi	r5,r8,8
 401396c:	18ffffc4 	addi	r3,r3,-1
 4013970:	28ca703a 	and	r5,r5,r3
 4013974:	003f7e06 	br	4013770 <__alt_data_end+0xfc013770>
 4013978:	10bfffc4 	addi	r2,r2,-1
 401397c:	1000491e 	bne	r2,zero,4013aa4 <__subdf3+0x418>
 4013980:	898fc83a 	sub	r7,r17,r6
 4013984:	89e3803a 	cmpltu	r17,r17,r7
 4013988:	1947c83a 	sub	r3,r3,r5
 401398c:	1c47c83a 	sub	r3,r3,r17
 4013990:	3823883a 	mov	r17,r7
 4013994:	003f9b06 	br	4013804 <__alt_data_end+0xfc013804>
 4013998:	2988b03a 	or	r4,r5,r6
 401399c:	203f5c26 	beq	r4,zero,4013710 <__alt_data_end+0xfc013710>
 40139a0:	10bfffc4 	addi	r2,r2,-1
 40139a4:	1000931e 	bne	r2,zero,4013bf4 <__subdf3+0x568>
 40139a8:	898d883a 	add	r6,r17,r6
 40139ac:	3463803a 	cmpltu	r17,r6,r17
 40139b0:	1947883a 	add	r3,r3,r5
 40139b4:	88c7883a 	add	r3,r17,r3
 40139b8:	3023883a 	mov	r17,r6
 40139bc:	003fd306 	br	401390c <__alt_data_end+0xfc01390c>
 40139c0:	1000541e 	bne	r2,zero,4013b14 <__subdf3+0x488>
 40139c4:	80800044 	addi	r2,r16,1
 40139c8:	1081ffcc 	andi	r2,r2,2047
 40139cc:	01000044 	movi	r4,1
 40139d0:	2080a20e 	bge	r4,r2,4013c5c <__subdf3+0x5d0>
 40139d4:	8989c83a 	sub	r4,r17,r6
 40139d8:	8905803a 	cmpltu	r2,r17,r4
 40139dc:	1967c83a 	sub	r19,r3,r5
 40139e0:	98a7c83a 	sub	r19,r19,r2
 40139e4:	9880202c 	andhi	r2,r19,128
 40139e8:	10006326 	beq	r2,zero,4013b78 <__subdf3+0x4ec>
 40139ec:	3463c83a 	sub	r17,r6,r17
 40139f0:	28c7c83a 	sub	r3,r5,r3
 40139f4:	344d803a 	cmpltu	r6,r6,r17
 40139f8:	19a7c83a 	sub	r19,r3,r6
 40139fc:	3825883a 	mov	r18,r7
 4013a00:	983f861e 	bne	r19,zero,401381c <__alt_data_end+0xfc01381c>
 4013a04:	8809883a 	mov	r4,r17
 4013a08:	40143340 	call	4014334 <__clzsi2>
 4013a0c:	10800804 	addi	r2,r2,32
 4013a10:	113ffe04 	addi	r4,r2,-8
 4013a14:	00c007c4 	movi	r3,31
 4013a18:	193f850e 	bge	r3,r4,4013830 <__alt_data_end+0xfc013830>
 4013a1c:	10bff604 	addi	r2,r2,-40
 4013a20:	8884983a 	sll	r2,r17,r2
 4013a24:	0023883a 	mov	r17,zero
 4013a28:	243f880e 	bge	r4,r16,401384c <__alt_data_end+0xfc01384c>
 4013a2c:	00ffe034 	movhi	r3,65408
 4013a30:	18ffffc4 	addi	r3,r3,-1
 4013a34:	8121c83a 	sub	r16,r16,r4
 4013a38:	10c6703a 	and	r3,r2,r3
 4013a3c:	003f3406 	br	4013710 <__alt_data_end+0xfc013710>
 4013a40:	9100004c 	andi	r4,r18,1
 4013a44:	000b883a 	mov	r5,zero
 4013a48:	0005883a 	mov	r2,zero
 4013a4c:	003f4806 	br	4013770 <__alt_data_end+0xfc013770>
 4013a50:	298cb03a 	or	r6,r5,r6
 4013a54:	300cc03a 	cmpne	r6,r6,zero
 4013a58:	0005883a 	mov	r2,zero
 4013a5c:	003f6406 	br	40137f0 <__alt_data_end+0xfc0137f0>
 4013a60:	10009a1e 	bne	r2,zero,4013ccc <__subdf3+0x640>
 4013a64:	82400044 	addi	r9,r16,1
 4013a68:	4881ffcc 	andi	r2,r9,2047
 4013a6c:	02800044 	movi	r10,1
 4013a70:	5080670e 	bge	r10,r2,4013c10 <__subdf3+0x584>
 4013a74:	0081ffc4 	movi	r2,2047
 4013a78:	4880af26 	beq	r9,r2,4013d38 <__subdf3+0x6ac>
 4013a7c:	898d883a 	add	r6,r17,r6
 4013a80:	1945883a 	add	r2,r3,r5
 4013a84:	3447803a 	cmpltu	r3,r6,r17
 4013a88:	1887883a 	add	r3,r3,r2
 4013a8c:	182297fa 	slli	r17,r3,31
 4013a90:	300cd07a 	srli	r6,r6,1
 4013a94:	1806d07a 	srli	r3,r3,1
 4013a98:	4821883a 	mov	r16,r9
 4013a9c:	89a2b03a 	or	r17,r17,r6
 4013aa0:	003f1b06 	br	4013710 <__alt_data_end+0xfc013710>
 4013aa4:	0101ffc4 	movi	r4,2047
 4013aa8:	813f441e 	bne	r16,r4,40137bc <__alt_data_end+0xfc0137bc>
 4013aac:	003f1806 	br	4013710 <__alt_data_end+0xfc013710>
 4013ab0:	843ff844 	addi	r16,r16,-31
 4013ab4:	01400804 	movi	r5,32
 4013ab8:	1408d83a 	srl	r4,r2,r16
 4013abc:	19405026 	beq	r3,r5,4013c00 <__subdf3+0x574>
 4013ac0:	01401004 	movi	r5,64
 4013ac4:	28c7c83a 	sub	r3,r5,r3
 4013ac8:	10c4983a 	sll	r2,r2,r3
 4013acc:	88a2b03a 	or	r17,r17,r2
 4013ad0:	8822c03a 	cmpne	r17,r17,zero
 4013ad4:	2462b03a 	or	r17,r4,r17
 4013ad8:	0007883a 	mov	r3,zero
 4013adc:	0021883a 	mov	r16,zero
 4013ae0:	003f6d06 	br	4013898 <__alt_data_end+0xfc013898>
 4013ae4:	11fff804 	addi	r7,r2,-32
 4013ae8:	01000804 	movi	r4,32
 4013aec:	29ced83a 	srl	r7,r5,r7
 4013af0:	11004526 	beq	r2,r4,4013c08 <__subdf3+0x57c>
 4013af4:	01001004 	movi	r4,64
 4013af8:	2089c83a 	sub	r4,r4,r2
 4013afc:	2904983a 	sll	r2,r5,r4
 4013b00:	118cb03a 	or	r6,r2,r6
 4013b04:	300cc03a 	cmpne	r6,r6,zero
 4013b08:	398cb03a 	or	r6,r7,r6
 4013b0c:	0005883a 	mov	r2,zero
 4013b10:	003f3706 	br	40137f0 <__alt_data_end+0xfc0137f0>
 4013b14:	80002a26 	beq	r16,zero,4013bc0 <__subdf3+0x534>
 4013b18:	0101ffc4 	movi	r4,2047
 4013b1c:	49006626 	beq	r9,r4,4013cb8 <__subdf3+0x62c>
 4013b20:	0085c83a 	sub	r2,zero,r2
 4013b24:	18c02034 	orhi	r3,r3,128
 4013b28:	01000e04 	movi	r4,56
 4013b2c:	20807e16 	blt	r4,r2,4013d28 <__subdf3+0x69c>
 4013b30:	010007c4 	movi	r4,31
 4013b34:	2080e716 	blt	r4,r2,4013ed4 <__subdf3+0x848>
 4013b38:	01000804 	movi	r4,32
 4013b3c:	2089c83a 	sub	r4,r4,r2
 4013b40:	1914983a 	sll	r10,r3,r4
 4013b44:	8890d83a 	srl	r8,r17,r2
 4013b48:	8908983a 	sll	r4,r17,r4
 4013b4c:	1884d83a 	srl	r2,r3,r2
 4013b50:	5222b03a 	or	r17,r10,r8
 4013b54:	2006c03a 	cmpne	r3,r4,zero
 4013b58:	88e2b03a 	or	r17,r17,r3
 4013b5c:	3463c83a 	sub	r17,r6,r17
 4013b60:	2885c83a 	sub	r2,r5,r2
 4013b64:	344d803a 	cmpltu	r6,r6,r17
 4013b68:	1187c83a 	sub	r3,r2,r6
 4013b6c:	4821883a 	mov	r16,r9
 4013b70:	3825883a 	mov	r18,r7
 4013b74:	003f2306 	br	4013804 <__alt_data_end+0xfc013804>
 4013b78:	24d0b03a 	or	r8,r4,r19
 4013b7c:	40001b1e 	bne	r8,zero,4013bec <__subdf3+0x560>
 4013b80:	0005883a 	mov	r2,zero
 4013b84:	0009883a 	mov	r4,zero
 4013b88:	0021883a 	mov	r16,zero
 4013b8c:	003f4906 	br	40138b4 <__alt_data_end+0xfc0138b4>
 4013b90:	010007c4 	movi	r4,31
 4013b94:	20803a16 	blt	r4,r2,4013c80 <__subdf3+0x5f4>
 4013b98:	01000804 	movi	r4,32
 4013b9c:	2089c83a 	sub	r4,r4,r2
 4013ba0:	2912983a 	sll	r9,r5,r4
 4013ba4:	3090d83a 	srl	r8,r6,r2
 4013ba8:	3108983a 	sll	r4,r6,r4
 4013bac:	2884d83a 	srl	r2,r5,r2
 4013bb0:	4a12b03a 	or	r9,r9,r8
 4013bb4:	2008c03a 	cmpne	r4,r4,zero
 4013bb8:	4912b03a 	or	r9,r9,r4
 4013bbc:	003f4e06 	br	40138f8 <__alt_data_end+0xfc0138f8>
 4013bc0:	1c48b03a 	or	r4,r3,r17
 4013bc4:	20003c26 	beq	r4,zero,4013cb8 <__subdf3+0x62c>
 4013bc8:	0084303a 	nor	r2,zero,r2
 4013bcc:	1000381e 	bne	r2,zero,4013cb0 <__subdf3+0x624>
 4013bd0:	3463c83a 	sub	r17,r6,r17
 4013bd4:	28c5c83a 	sub	r2,r5,r3
 4013bd8:	344d803a 	cmpltu	r6,r6,r17
 4013bdc:	1187c83a 	sub	r3,r2,r6
 4013be0:	4821883a 	mov	r16,r9
 4013be4:	3825883a 	mov	r18,r7
 4013be8:	003f0606 	br	4013804 <__alt_data_end+0xfc013804>
 4013bec:	2023883a 	mov	r17,r4
 4013bf0:	003f0906 	br	4013818 <__alt_data_end+0xfc013818>
 4013bf4:	0101ffc4 	movi	r4,2047
 4013bf8:	813f3a1e 	bne	r16,r4,40138e4 <__alt_data_end+0xfc0138e4>
 4013bfc:	003ec406 	br	4013710 <__alt_data_end+0xfc013710>
 4013c00:	0005883a 	mov	r2,zero
 4013c04:	003fb106 	br	4013acc <__alt_data_end+0xfc013acc>
 4013c08:	0005883a 	mov	r2,zero
 4013c0c:	003fbc06 	br	4013b00 <__alt_data_end+0xfc013b00>
 4013c10:	1c44b03a 	or	r2,r3,r17
 4013c14:	80008e1e 	bne	r16,zero,4013e50 <__subdf3+0x7c4>
 4013c18:	1000c826 	beq	r2,zero,4013f3c <__subdf3+0x8b0>
 4013c1c:	2984b03a 	or	r2,r5,r6
 4013c20:	103ebb26 	beq	r2,zero,4013710 <__alt_data_end+0xfc013710>
 4013c24:	8989883a 	add	r4,r17,r6
 4013c28:	1945883a 	add	r2,r3,r5
 4013c2c:	2447803a 	cmpltu	r3,r4,r17
 4013c30:	1887883a 	add	r3,r3,r2
 4013c34:	1880202c 	andhi	r2,r3,128
 4013c38:	2023883a 	mov	r17,r4
 4013c3c:	103f1626 	beq	r2,zero,4013898 <__alt_data_end+0xfc013898>
 4013c40:	00bfe034 	movhi	r2,65408
 4013c44:	10bfffc4 	addi	r2,r2,-1
 4013c48:	5021883a 	mov	r16,r10
 4013c4c:	1886703a 	and	r3,r3,r2
 4013c50:	003eaf06 	br	4013710 <__alt_data_end+0xfc013710>
 4013c54:	3825883a 	mov	r18,r7
 4013c58:	003f0f06 	br	4013898 <__alt_data_end+0xfc013898>
 4013c5c:	1c44b03a 	or	r2,r3,r17
 4013c60:	8000251e 	bne	r16,zero,4013cf8 <__subdf3+0x66c>
 4013c64:	1000661e 	bne	r2,zero,4013e00 <__subdf3+0x774>
 4013c68:	2990b03a 	or	r8,r5,r6
 4013c6c:	40009626 	beq	r8,zero,4013ec8 <__subdf3+0x83c>
 4013c70:	2807883a 	mov	r3,r5
 4013c74:	3023883a 	mov	r17,r6
 4013c78:	3825883a 	mov	r18,r7
 4013c7c:	003ea406 	br	4013710 <__alt_data_end+0xfc013710>
 4013c80:	127ff804 	addi	r9,r2,-32
 4013c84:	01000804 	movi	r4,32
 4013c88:	2a52d83a 	srl	r9,r5,r9
 4013c8c:	11008c26 	beq	r2,r4,4013ec0 <__subdf3+0x834>
 4013c90:	01001004 	movi	r4,64
 4013c94:	2085c83a 	sub	r2,r4,r2
 4013c98:	2884983a 	sll	r2,r5,r2
 4013c9c:	118cb03a 	or	r6,r2,r6
 4013ca0:	300cc03a 	cmpne	r6,r6,zero
 4013ca4:	4992b03a 	or	r9,r9,r6
 4013ca8:	0005883a 	mov	r2,zero
 4013cac:	003f1206 	br	40138f8 <__alt_data_end+0xfc0138f8>
 4013cb0:	0101ffc4 	movi	r4,2047
 4013cb4:	493f9c1e 	bne	r9,r4,4013b28 <__alt_data_end+0xfc013b28>
 4013cb8:	2807883a 	mov	r3,r5
 4013cbc:	3023883a 	mov	r17,r6
 4013cc0:	4821883a 	mov	r16,r9
 4013cc4:	3825883a 	mov	r18,r7
 4013cc8:	003e9106 	br	4013710 <__alt_data_end+0xfc013710>
 4013ccc:	80001f1e 	bne	r16,zero,4013d4c <__subdf3+0x6c0>
 4013cd0:	1c48b03a 	or	r4,r3,r17
 4013cd4:	20005a26 	beq	r4,zero,4013e40 <__subdf3+0x7b4>
 4013cd8:	0084303a 	nor	r2,zero,r2
 4013cdc:	1000561e 	bne	r2,zero,4013e38 <__subdf3+0x7ac>
 4013ce0:	89a3883a 	add	r17,r17,r6
 4013ce4:	1945883a 	add	r2,r3,r5
 4013ce8:	898d803a 	cmpltu	r6,r17,r6
 4013cec:	3087883a 	add	r3,r6,r2
 4013cf0:	4821883a 	mov	r16,r9
 4013cf4:	003f0506 	br	401390c <__alt_data_end+0xfc01390c>
 4013cf8:	10002b1e 	bne	r2,zero,4013da8 <__subdf3+0x71c>
 4013cfc:	2984b03a 	or	r2,r5,r6
 4013d00:	10008026 	beq	r2,zero,4013f04 <__subdf3+0x878>
 4013d04:	2807883a 	mov	r3,r5
 4013d08:	3023883a 	mov	r17,r6
 4013d0c:	3825883a 	mov	r18,r7
 4013d10:	0401ffc4 	movi	r16,2047
 4013d14:	003e7e06 	br	4013710 <__alt_data_end+0xfc013710>
 4013d18:	3809883a 	mov	r4,r7
 4013d1c:	0011883a 	mov	r8,zero
 4013d20:	0005883a 	mov	r2,zero
 4013d24:	003ee306 	br	40138b4 <__alt_data_end+0xfc0138b4>
 4013d28:	1c62b03a 	or	r17,r3,r17
 4013d2c:	8822c03a 	cmpne	r17,r17,zero
 4013d30:	0005883a 	mov	r2,zero
 4013d34:	003f8906 	br	4013b5c <__alt_data_end+0xfc013b5c>
 4013d38:	3809883a 	mov	r4,r7
 4013d3c:	4821883a 	mov	r16,r9
 4013d40:	0011883a 	mov	r8,zero
 4013d44:	0005883a 	mov	r2,zero
 4013d48:	003eda06 	br	40138b4 <__alt_data_end+0xfc0138b4>
 4013d4c:	0101ffc4 	movi	r4,2047
 4013d50:	49003b26 	beq	r9,r4,4013e40 <__subdf3+0x7b4>
 4013d54:	0085c83a 	sub	r2,zero,r2
 4013d58:	18c02034 	orhi	r3,r3,128
 4013d5c:	01000e04 	movi	r4,56
 4013d60:	20806e16 	blt	r4,r2,4013f1c <__subdf3+0x890>
 4013d64:	010007c4 	movi	r4,31
 4013d68:	20807716 	blt	r4,r2,4013f48 <__subdf3+0x8bc>
 4013d6c:	01000804 	movi	r4,32
 4013d70:	2089c83a 	sub	r4,r4,r2
 4013d74:	1914983a 	sll	r10,r3,r4
 4013d78:	8890d83a 	srl	r8,r17,r2
 4013d7c:	8908983a 	sll	r4,r17,r4
 4013d80:	1884d83a 	srl	r2,r3,r2
 4013d84:	5222b03a 	or	r17,r10,r8
 4013d88:	2006c03a 	cmpne	r3,r4,zero
 4013d8c:	88e2b03a 	or	r17,r17,r3
 4013d90:	89a3883a 	add	r17,r17,r6
 4013d94:	1145883a 	add	r2,r2,r5
 4013d98:	898d803a 	cmpltu	r6,r17,r6
 4013d9c:	3087883a 	add	r3,r6,r2
 4013da0:	4821883a 	mov	r16,r9
 4013da4:	003ed906 	br	401390c <__alt_data_end+0xfc01390c>
 4013da8:	2984b03a 	or	r2,r5,r6
 4013dac:	10004226 	beq	r2,zero,4013eb8 <__subdf3+0x82c>
 4013db0:	1808d0fa 	srli	r4,r3,3
 4013db4:	8822d0fa 	srli	r17,r17,3
 4013db8:	1806977a 	slli	r3,r3,29
 4013dbc:	2080022c 	andhi	r2,r4,8
 4013dc0:	1c62b03a 	or	r17,r3,r17
 4013dc4:	10000826 	beq	r2,zero,4013de8 <__subdf3+0x75c>
 4013dc8:	2812d0fa 	srli	r9,r5,3
 4013dcc:	4880022c 	andhi	r2,r9,8
 4013dd0:	1000051e 	bne	r2,zero,4013de8 <__subdf3+0x75c>
 4013dd4:	300cd0fa 	srli	r6,r6,3
 4013dd8:	2804977a 	slli	r2,r5,29
 4013ddc:	4809883a 	mov	r4,r9
 4013de0:	3825883a 	mov	r18,r7
 4013de4:	11a2b03a 	or	r17,r2,r6
 4013de8:	8806d77a 	srli	r3,r17,29
 4013dec:	200890fa 	slli	r4,r4,3
 4013df0:	882290fa 	slli	r17,r17,3
 4013df4:	0401ffc4 	movi	r16,2047
 4013df8:	1906b03a 	or	r3,r3,r4
 4013dfc:	003e4406 	br	4013710 <__alt_data_end+0xfc013710>
 4013e00:	2984b03a 	or	r2,r5,r6
 4013e04:	103e4226 	beq	r2,zero,4013710 <__alt_data_end+0xfc013710>
 4013e08:	8989c83a 	sub	r4,r17,r6
 4013e0c:	8911803a 	cmpltu	r8,r17,r4
 4013e10:	1945c83a 	sub	r2,r3,r5
 4013e14:	1205c83a 	sub	r2,r2,r8
 4013e18:	1200202c 	andhi	r8,r2,128
 4013e1c:	403e9a26 	beq	r8,zero,4013888 <__alt_data_end+0xfc013888>
 4013e20:	3463c83a 	sub	r17,r6,r17
 4013e24:	28c5c83a 	sub	r2,r5,r3
 4013e28:	344d803a 	cmpltu	r6,r6,r17
 4013e2c:	1187c83a 	sub	r3,r2,r6
 4013e30:	3825883a 	mov	r18,r7
 4013e34:	003e3606 	br	4013710 <__alt_data_end+0xfc013710>
 4013e38:	0101ffc4 	movi	r4,2047
 4013e3c:	493fc71e 	bne	r9,r4,4013d5c <__alt_data_end+0xfc013d5c>
 4013e40:	2807883a 	mov	r3,r5
 4013e44:	3023883a 	mov	r17,r6
 4013e48:	4821883a 	mov	r16,r9
 4013e4c:	003e3006 	br	4013710 <__alt_data_end+0xfc013710>
 4013e50:	10003626 	beq	r2,zero,4013f2c <__subdf3+0x8a0>
 4013e54:	2984b03a 	or	r2,r5,r6
 4013e58:	10001726 	beq	r2,zero,4013eb8 <__subdf3+0x82c>
 4013e5c:	1808d0fa 	srli	r4,r3,3
 4013e60:	8822d0fa 	srli	r17,r17,3
 4013e64:	1806977a 	slli	r3,r3,29
 4013e68:	2080022c 	andhi	r2,r4,8
 4013e6c:	1c62b03a 	or	r17,r3,r17
 4013e70:	10000726 	beq	r2,zero,4013e90 <__subdf3+0x804>
 4013e74:	2812d0fa 	srli	r9,r5,3
 4013e78:	4880022c 	andhi	r2,r9,8
 4013e7c:	1000041e 	bne	r2,zero,4013e90 <__subdf3+0x804>
 4013e80:	300cd0fa 	srli	r6,r6,3
 4013e84:	2804977a 	slli	r2,r5,29
 4013e88:	4809883a 	mov	r4,r9
 4013e8c:	11a2b03a 	or	r17,r2,r6
 4013e90:	8806d77a 	srli	r3,r17,29
 4013e94:	200890fa 	slli	r4,r4,3
 4013e98:	882290fa 	slli	r17,r17,3
 4013e9c:	3825883a 	mov	r18,r7
 4013ea0:	1906b03a 	or	r3,r3,r4
 4013ea4:	0401ffc4 	movi	r16,2047
 4013ea8:	003e1906 	br	4013710 <__alt_data_end+0xfc013710>
 4013eac:	000b883a 	mov	r5,zero
 4013eb0:	0005883a 	mov	r2,zero
 4013eb4:	003e2e06 	br	4013770 <__alt_data_end+0xfc013770>
 4013eb8:	0401ffc4 	movi	r16,2047
 4013ebc:	003e1406 	br	4013710 <__alt_data_end+0xfc013710>
 4013ec0:	0005883a 	mov	r2,zero
 4013ec4:	003f7506 	br	4013c9c <__alt_data_end+0xfc013c9c>
 4013ec8:	0005883a 	mov	r2,zero
 4013ecc:	0009883a 	mov	r4,zero
 4013ed0:	003e7806 	br	40138b4 <__alt_data_end+0xfc0138b4>
 4013ed4:	123ff804 	addi	r8,r2,-32
 4013ed8:	01000804 	movi	r4,32
 4013edc:	1a10d83a 	srl	r8,r3,r8
 4013ee0:	11002526 	beq	r2,r4,4013f78 <__subdf3+0x8ec>
 4013ee4:	01001004 	movi	r4,64
 4013ee8:	2085c83a 	sub	r2,r4,r2
 4013eec:	1884983a 	sll	r2,r3,r2
 4013ef0:	1444b03a 	or	r2,r2,r17
 4013ef4:	1004c03a 	cmpne	r2,r2,zero
 4013ef8:	40a2b03a 	or	r17,r8,r2
 4013efc:	0005883a 	mov	r2,zero
 4013f00:	003f1606 	br	4013b5c <__alt_data_end+0xfc013b5c>
 4013f04:	02000434 	movhi	r8,16
 4013f08:	0009883a 	mov	r4,zero
 4013f0c:	423fffc4 	addi	r8,r8,-1
 4013f10:	00bfffc4 	movi	r2,-1
 4013f14:	0401ffc4 	movi	r16,2047
 4013f18:	003e6606 	br	40138b4 <__alt_data_end+0xfc0138b4>
 4013f1c:	1c62b03a 	or	r17,r3,r17
 4013f20:	8822c03a 	cmpne	r17,r17,zero
 4013f24:	0005883a 	mov	r2,zero
 4013f28:	003f9906 	br	4013d90 <__alt_data_end+0xfc013d90>
 4013f2c:	2807883a 	mov	r3,r5
 4013f30:	3023883a 	mov	r17,r6
 4013f34:	0401ffc4 	movi	r16,2047
 4013f38:	003df506 	br	4013710 <__alt_data_end+0xfc013710>
 4013f3c:	2807883a 	mov	r3,r5
 4013f40:	3023883a 	mov	r17,r6
 4013f44:	003df206 	br	4013710 <__alt_data_end+0xfc013710>
 4013f48:	123ff804 	addi	r8,r2,-32
 4013f4c:	01000804 	movi	r4,32
 4013f50:	1a10d83a 	srl	r8,r3,r8
 4013f54:	11000a26 	beq	r2,r4,4013f80 <__subdf3+0x8f4>
 4013f58:	01001004 	movi	r4,64
 4013f5c:	2085c83a 	sub	r2,r4,r2
 4013f60:	1884983a 	sll	r2,r3,r2
 4013f64:	1444b03a 	or	r2,r2,r17
 4013f68:	1004c03a 	cmpne	r2,r2,zero
 4013f6c:	40a2b03a 	or	r17,r8,r2
 4013f70:	0005883a 	mov	r2,zero
 4013f74:	003f8606 	br	4013d90 <__alt_data_end+0xfc013d90>
 4013f78:	0005883a 	mov	r2,zero
 4013f7c:	003fdc06 	br	4013ef0 <__alt_data_end+0xfc013ef0>
 4013f80:	0005883a 	mov	r2,zero
 4013f84:	003ff706 	br	4013f64 <__alt_data_end+0xfc013f64>

04013f88 <__fixdfsi>:
 4013f88:	280cd53a 	srli	r6,r5,20
 4013f8c:	00c00434 	movhi	r3,16
 4013f90:	18ffffc4 	addi	r3,r3,-1
 4013f94:	3181ffcc 	andi	r6,r6,2047
 4013f98:	01c0ff84 	movi	r7,1022
 4013f9c:	28c6703a 	and	r3,r5,r3
 4013fa0:	280ad7fa 	srli	r5,r5,31
 4013fa4:	3980120e 	bge	r7,r6,4013ff0 <__fixdfsi+0x68>
 4013fa8:	00810744 	movi	r2,1053
 4013fac:	11800c16 	blt	r2,r6,4013fe0 <__fixdfsi+0x58>
 4013fb0:	00810cc4 	movi	r2,1075
 4013fb4:	1185c83a 	sub	r2,r2,r6
 4013fb8:	01c007c4 	movi	r7,31
 4013fbc:	18c00434 	orhi	r3,r3,16
 4013fc0:	38800d16 	blt	r7,r2,4013ff8 <__fixdfsi+0x70>
 4013fc4:	31befb44 	addi	r6,r6,-1043
 4013fc8:	2084d83a 	srl	r2,r4,r2
 4013fcc:	1986983a 	sll	r3,r3,r6
 4013fd0:	1884b03a 	or	r2,r3,r2
 4013fd4:	28000726 	beq	r5,zero,4013ff4 <__fixdfsi+0x6c>
 4013fd8:	0085c83a 	sub	r2,zero,r2
 4013fdc:	f800283a 	ret
 4013fe0:	00a00034 	movhi	r2,32768
 4013fe4:	10bfffc4 	addi	r2,r2,-1
 4013fe8:	2885883a 	add	r2,r5,r2
 4013fec:	f800283a 	ret
 4013ff0:	0005883a 	mov	r2,zero
 4013ff4:	f800283a 	ret
 4013ff8:	008104c4 	movi	r2,1043
 4013ffc:	1185c83a 	sub	r2,r2,r6
 4014000:	1884d83a 	srl	r2,r3,r2
 4014004:	003ff306 	br	4013fd4 <__alt_data_end+0xfc013fd4>

04014008 <__floatsidf>:
 4014008:	defffd04 	addi	sp,sp,-12
 401400c:	dfc00215 	stw	ra,8(sp)
 4014010:	dc400115 	stw	r17,4(sp)
 4014014:	dc000015 	stw	r16,0(sp)
 4014018:	20002b26 	beq	r4,zero,40140c8 <__floatsidf+0xc0>
 401401c:	2023883a 	mov	r17,r4
 4014020:	2020d7fa 	srli	r16,r4,31
 4014024:	20002d16 	blt	r4,zero,40140dc <__floatsidf+0xd4>
 4014028:	8809883a 	mov	r4,r17
 401402c:	40143340 	call	4014334 <__clzsi2>
 4014030:	01410784 	movi	r5,1054
 4014034:	288bc83a 	sub	r5,r5,r2
 4014038:	01010cc4 	movi	r4,1075
 401403c:	2149c83a 	sub	r4,r4,r5
 4014040:	00c007c4 	movi	r3,31
 4014044:	1900160e 	bge	r3,r4,40140a0 <__floatsidf+0x98>
 4014048:	00c104c4 	movi	r3,1043
 401404c:	1947c83a 	sub	r3,r3,r5
 4014050:	88c6983a 	sll	r3,r17,r3
 4014054:	00800434 	movhi	r2,16
 4014058:	10bfffc4 	addi	r2,r2,-1
 401405c:	1886703a 	and	r3,r3,r2
 4014060:	2941ffcc 	andi	r5,r5,2047
 4014064:	800d883a 	mov	r6,r16
 4014068:	0005883a 	mov	r2,zero
 401406c:	280a953a 	slli	r5,r5,20
 4014070:	31803fcc 	andi	r6,r6,255
 4014074:	01000434 	movhi	r4,16
 4014078:	300c97fa 	slli	r6,r6,31
 401407c:	213fffc4 	addi	r4,r4,-1
 4014080:	1906703a 	and	r3,r3,r4
 4014084:	1946b03a 	or	r3,r3,r5
 4014088:	1986b03a 	or	r3,r3,r6
 401408c:	dfc00217 	ldw	ra,8(sp)
 4014090:	dc400117 	ldw	r17,4(sp)
 4014094:	dc000017 	ldw	r16,0(sp)
 4014098:	dec00304 	addi	sp,sp,12
 401409c:	f800283a 	ret
 40140a0:	00c002c4 	movi	r3,11
 40140a4:	1887c83a 	sub	r3,r3,r2
 40140a8:	88c6d83a 	srl	r3,r17,r3
 40140ac:	8904983a 	sll	r2,r17,r4
 40140b0:	01000434 	movhi	r4,16
 40140b4:	213fffc4 	addi	r4,r4,-1
 40140b8:	2941ffcc 	andi	r5,r5,2047
 40140bc:	1906703a 	and	r3,r3,r4
 40140c0:	800d883a 	mov	r6,r16
 40140c4:	003fe906 	br	401406c <__alt_data_end+0xfc01406c>
 40140c8:	000d883a 	mov	r6,zero
 40140cc:	000b883a 	mov	r5,zero
 40140d0:	0007883a 	mov	r3,zero
 40140d4:	0005883a 	mov	r2,zero
 40140d8:	003fe406 	br	401406c <__alt_data_end+0xfc01406c>
 40140dc:	0123c83a 	sub	r17,zero,r4
 40140e0:	003fd106 	br	4014028 <__alt_data_end+0xfc014028>

040140e4 <__floatunsidf>:
 40140e4:	defffe04 	addi	sp,sp,-8
 40140e8:	dc000015 	stw	r16,0(sp)
 40140ec:	dfc00115 	stw	ra,4(sp)
 40140f0:	2021883a 	mov	r16,r4
 40140f4:	20002226 	beq	r4,zero,4014180 <__floatunsidf+0x9c>
 40140f8:	40143340 	call	4014334 <__clzsi2>
 40140fc:	01010784 	movi	r4,1054
 4014100:	2089c83a 	sub	r4,r4,r2
 4014104:	01810cc4 	movi	r6,1075
 4014108:	310dc83a 	sub	r6,r6,r4
 401410c:	00c007c4 	movi	r3,31
 4014110:	1980120e 	bge	r3,r6,401415c <__floatunsidf+0x78>
 4014114:	00c104c4 	movi	r3,1043
 4014118:	1907c83a 	sub	r3,r3,r4
 401411c:	80ca983a 	sll	r5,r16,r3
 4014120:	00800434 	movhi	r2,16
 4014124:	10bfffc4 	addi	r2,r2,-1
 4014128:	2101ffcc 	andi	r4,r4,2047
 401412c:	0021883a 	mov	r16,zero
 4014130:	288a703a 	and	r5,r5,r2
 4014134:	2008953a 	slli	r4,r4,20
 4014138:	00c00434 	movhi	r3,16
 401413c:	18ffffc4 	addi	r3,r3,-1
 4014140:	28c6703a 	and	r3,r5,r3
 4014144:	8005883a 	mov	r2,r16
 4014148:	1906b03a 	or	r3,r3,r4
 401414c:	dfc00117 	ldw	ra,4(sp)
 4014150:	dc000017 	ldw	r16,0(sp)
 4014154:	dec00204 	addi	sp,sp,8
 4014158:	f800283a 	ret
 401415c:	00c002c4 	movi	r3,11
 4014160:	188bc83a 	sub	r5,r3,r2
 4014164:	814ad83a 	srl	r5,r16,r5
 4014168:	00c00434 	movhi	r3,16
 401416c:	18ffffc4 	addi	r3,r3,-1
 4014170:	81a0983a 	sll	r16,r16,r6
 4014174:	2101ffcc 	andi	r4,r4,2047
 4014178:	28ca703a 	and	r5,r5,r3
 401417c:	003fed06 	br	4014134 <__alt_data_end+0xfc014134>
 4014180:	0009883a 	mov	r4,zero
 4014184:	000b883a 	mov	r5,zero
 4014188:	003fea06 	br	4014134 <__alt_data_end+0xfc014134>

0401418c <__truncdfsf2>:
 401418c:	2810d53a 	srli	r8,r5,20
 4014190:	01c00434 	movhi	r7,16
 4014194:	39ffffc4 	addi	r7,r7,-1
 4014198:	29ce703a 	and	r7,r5,r7
 401419c:	4201ffcc 	andi	r8,r8,2047
 40141a0:	380e90fa 	slli	r7,r7,3
 40141a4:	200cd77a 	srli	r6,r4,29
 40141a8:	42400044 	addi	r9,r8,1
 40141ac:	4a41ffcc 	andi	r9,r9,2047
 40141b0:	00c00044 	movi	r3,1
 40141b4:	280ad7fa 	srli	r5,r5,31
 40141b8:	31ceb03a 	or	r7,r6,r7
 40141bc:	200490fa 	slli	r2,r4,3
 40141c0:	1a40230e 	bge	r3,r9,4014250 <__truncdfsf2+0xc4>
 40141c4:	40ff2004 	addi	r3,r8,-896
 40141c8:	01803f84 	movi	r6,254
 40141cc:	30c01516 	blt	r6,r3,4014224 <__truncdfsf2+0x98>
 40141d0:	00c0380e 	bge	zero,r3,40142b4 <__truncdfsf2+0x128>
 40141d4:	200c91ba 	slli	r6,r4,6
 40141d8:	380e90fa 	slli	r7,r7,3
 40141dc:	1004d77a 	srli	r2,r2,29
 40141e0:	300cc03a 	cmpne	r6,r6,zero
 40141e4:	31ccb03a 	or	r6,r6,r7
 40141e8:	308cb03a 	or	r6,r6,r2
 40141ec:	308001cc 	andi	r2,r6,7
 40141f0:	10000426 	beq	r2,zero,4014204 <__truncdfsf2+0x78>
 40141f4:	308003cc 	andi	r2,r6,15
 40141f8:	01000104 	movi	r4,4
 40141fc:	11000126 	beq	r2,r4,4014204 <__truncdfsf2+0x78>
 4014200:	31800104 	addi	r6,r6,4
 4014204:	3081002c 	andhi	r2,r6,1024
 4014208:	10001626 	beq	r2,zero,4014264 <__truncdfsf2+0xd8>
 401420c:	18c00044 	addi	r3,r3,1
 4014210:	00803fc4 	movi	r2,255
 4014214:	18800326 	beq	r3,r2,4014224 <__truncdfsf2+0x98>
 4014218:	300c91ba 	slli	r6,r6,6
 401421c:	300cd27a 	srli	r6,r6,9
 4014220:	00000206 	br	401422c <__truncdfsf2+0xa0>
 4014224:	00ffffc4 	movi	r3,-1
 4014228:	000d883a 	mov	r6,zero
 401422c:	18c03fcc 	andi	r3,r3,255
 4014230:	180895fa 	slli	r4,r3,23
 4014234:	00c02034 	movhi	r3,128
 4014238:	280a97fa 	slli	r5,r5,31
 401423c:	18ffffc4 	addi	r3,r3,-1
 4014240:	30c6703a 	and	r3,r6,r3
 4014244:	1906b03a 	or	r3,r3,r4
 4014248:	1944b03a 	or	r2,r3,r5
 401424c:	f800283a 	ret
 4014250:	40000b1e 	bne	r8,zero,4014280 <__truncdfsf2+0xf4>
 4014254:	388cb03a 	or	r6,r7,r2
 4014258:	0007883a 	mov	r3,zero
 401425c:	30000426 	beq	r6,zero,4014270 <__truncdfsf2+0xe4>
 4014260:	01800144 	movi	r6,5
 4014264:	00803fc4 	movi	r2,255
 4014268:	300cd0fa 	srli	r6,r6,3
 401426c:	18800a26 	beq	r3,r2,4014298 <__truncdfsf2+0x10c>
 4014270:	00802034 	movhi	r2,128
 4014274:	10bfffc4 	addi	r2,r2,-1
 4014278:	308c703a 	and	r6,r6,r2
 401427c:	003feb06 	br	401422c <__alt_data_end+0xfc01422c>
 4014280:	3888b03a 	or	r4,r7,r2
 4014284:	203fe726 	beq	r4,zero,4014224 <__alt_data_end+0xfc014224>
 4014288:	380c90fa 	slli	r6,r7,3
 401428c:	00c03fc4 	movi	r3,255
 4014290:	31808034 	orhi	r6,r6,512
 4014294:	003fd506 	br	40141ec <__alt_data_end+0xfc0141ec>
 4014298:	303fe226 	beq	r6,zero,4014224 <__alt_data_end+0xfc014224>
 401429c:	00802034 	movhi	r2,128
 40142a0:	31801034 	orhi	r6,r6,64
 40142a4:	10bfffc4 	addi	r2,r2,-1
 40142a8:	00ffffc4 	movi	r3,-1
 40142ac:	308c703a 	and	r6,r6,r2
 40142b0:	003fde06 	br	401422c <__alt_data_end+0xfc01422c>
 40142b4:	013ffa44 	movi	r4,-23
 40142b8:	19000e16 	blt	r3,r4,40142f4 <__truncdfsf2+0x168>
 40142bc:	01000784 	movi	r4,30
 40142c0:	20c9c83a 	sub	r4,r4,r3
 40142c4:	018007c4 	movi	r6,31
 40142c8:	39c02034 	orhi	r7,r7,128
 40142cc:	31000b16 	blt	r6,r4,40142fc <__truncdfsf2+0x170>
 40142d0:	423f2084 	addi	r8,r8,-894
 40142d4:	120c983a 	sll	r6,r2,r8
 40142d8:	3a0e983a 	sll	r7,r7,r8
 40142dc:	1104d83a 	srl	r2,r2,r4
 40142e0:	300cc03a 	cmpne	r6,r6,zero
 40142e4:	31ceb03a 	or	r7,r6,r7
 40142e8:	388cb03a 	or	r6,r7,r2
 40142ec:	0007883a 	mov	r3,zero
 40142f0:	003fbe06 	br	40141ec <__alt_data_end+0xfc0141ec>
 40142f4:	0007883a 	mov	r3,zero
 40142f8:	003fd906 	br	4014260 <__alt_data_end+0xfc014260>
 40142fc:	01bfff84 	movi	r6,-2
 4014300:	30cdc83a 	sub	r6,r6,r3
 4014304:	00c00804 	movi	r3,32
 4014308:	398cd83a 	srl	r6,r7,r6
 401430c:	20c00726 	beq	r4,r3,401432c <__truncdfsf2+0x1a0>
 4014310:	423f2884 	addi	r8,r8,-862
 4014314:	3a0e983a 	sll	r7,r7,r8
 4014318:	3884b03a 	or	r2,r7,r2
 401431c:	1004c03a 	cmpne	r2,r2,zero
 4014320:	118cb03a 	or	r6,r2,r6
 4014324:	0007883a 	mov	r3,zero
 4014328:	003fb006 	br	40141ec <__alt_data_end+0xfc0141ec>
 401432c:	000f883a 	mov	r7,zero
 4014330:	003ff906 	br	4014318 <__alt_data_end+0xfc014318>

04014334 <__clzsi2>:
 4014334:	00bfffd4 	movui	r2,65535
 4014338:	11000536 	bltu	r2,r4,4014350 <__clzsi2+0x1c>
 401433c:	00803fc4 	movi	r2,255
 4014340:	11000f36 	bltu	r2,r4,4014380 <__clzsi2+0x4c>
 4014344:	00800804 	movi	r2,32
 4014348:	0007883a 	mov	r3,zero
 401434c:	00000506 	br	4014364 <__clzsi2+0x30>
 4014350:	00804034 	movhi	r2,256
 4014354:	10bfffc4 	addi	r2,r2,-1
 4014358:	11000c2e 	bgeu	r2,r4,401438c <__clzsi2+0x58>
 401435c:	00800204 	movi	r2,8
 4014360:	00c00604 	movi	r3,24
 4014364:	20c8d83a 	srl	r4,r4,r3
 4014368:	00c100b4 	movhi	r3,1026
 401436c:	18e17904 	addi	r3,r3,-31260
 4014370:	1909883a 	add	r4,r3,r4
 4014374:	20c00003 	ldbu	r3,0(r4)
 4014378:	10c5c83a 	sub	r2,r2,r3
 401437c:	f800283a 	ret
 4014380:	00800604 	movi	r2,24
 4014384:	00c00204 	movi	r3,8
 4014388:	003ff606 	br	4014364 <__alt_data_end+0xfc014364>
 401438c:	00800404 	movi	r2,16
 4014390:	1007883a 	mov	r3,r2
 4014394:	003ff306 	br	4014364 <__alt_data_end+0xfc014364>

04014398 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4014398:	defffe04 	addi	sp,sp,-8
 401439c:	dfc00115 	stw	ra,4(sp)
 40143a0:	df000015 	stw	fp,0(sp)
 40143a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40143a8:	d0a00c17 	ldw	r2,-32720(gp)
 40143ac:	10000326 	beq	r2,zero,40143bc <alt_get_errno+0x24>
 40143b0:	d0a00c17 	ldw	r2,-32720(gp)
 40143b4:	103ee83a 	callr	r2
 40143b8:	00000106 	br	40143c0 <alt_get_errno+0x28>
 40143bc:	d0a75d04 	addi	r2,gp,-25228
}
 40143c0:	e037883a 	mov	sp,fp
 40143c4:	dfc00117 	ldw	ra,4(sp)
 40143c8:	df000017 	ldw	fp,0(sp)
 40143cc:	dec00204 	addi	sp,sp,8
 40143d0:	f800283a 	ret

040143d4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 40143d4:	defffb04 	addi	sp,sp,-20
 40143d8:	dfc00415 	stw	ra,16(sp)
 40143dc:	df000315 	stw	fp,12(sp)
 40143e0:	df000304 	addi	fp,sp,12
 40143e4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 40143e8:	e0bfff17 	ldw	r2,-4(fp)
 40143ec:	10000816 	blt	r2,zero,4014410 <close+0x3c>
 40143f0:	01400304 	movi	r5,12
 40143f4:	e13fff17 	ldw	r4,-4(fp)
 40143f8:	4001a140 	call	4001a14 <__mulsi3>
 40143fc:	1007883a 	mov	r3,r2
 4014400:	008100b4 	movhi	r2,1026
 4014404:	10a44204 	addi	r2,r2,-28408
 4014408:	1885883a 	add	r2,r3,r2
 401440c:	00000106 	br	4014414 <close+0x40>
 4014410:	0005883a 	mov	r2,zero
 4014414:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 4014418:	e0bffd17 	ldw	r2,-12(fp)
 401441c:	10001926 	beq	r2,zero,4014484 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4014420:	e0bffd17 	ldw	r2,-12(fp)
 4014424:	10800017 	ldw	r2,0(r2)
 4014428:	10800417 	ldw	r2,16(r2)
 401442c:	10000626 	beq	r2,zero,4014448 <close+0x74>
 4014430:	e0bffd17 	ldw	r2,-12(fp)
 4014434:	10800017 	ldw	r2,0(r2)
 4014438:	10800417 	ldw	r2,16(r2)
 401443c:	e13ffd17 	ldw	r4,-12(fp)
 4014440:	103ee83a 	callr	r2
 4014444:	00000106 	br	401444c <close+0x78>
 4014448:	0005883a 	mov	r2,zero
 401444c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4014450:	e13fff17 	ldw	r4,-4(fp)
 4014454:	4014d600 	call	4014d60 <alt_release_fd>
    if (rval < 0)
 4014458:	e0bffe17 	ldw	r2,-8(fp)
 401445c:	1000070e 	bge	r2,zero,401447c <close+0xa8>
    {
      ALT_ERRNO = -rval;
 4014460:	40143980 	call	4014398 <alt_get_errno>
 4014464:	1007883a 	mov	r3,r2
 4014468:	e0bffe17 	ldw	r2,-8(fp)
 401446c:	0085c83a 	sub	r2,zero,r2
 4014470:	18800015 	stw	r2,0(r3)
      return -1;
 4014474:	00bfffc4 	movi	r2,-1
 4014478:	00000706 	br	4014498 <close+0xc4>
    }
    return 0;
 401447c:	0005883a 	mov	r2,zero
 4014480:	00000506 	br	4014498 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4014484:	40143980 	call	4014398 <alt_get_errno>
 4014488:	1007883a 	mov	r3,r2
 401448c:	00801444 	movi	r2,81
 4014490:	18800015 	stw	r2,0(r3)
    return -1;
 4014494:	00bfffc4 	movi	r2,-1
  }
}
 4014498:	e037883a 	mov	sp,fp
 401449c:	dfc00117 	ldw	ra,4(sp)
 40144a0:	df000017 	ldw	fp,0(sp)
 40144a4:	dec00204 	addi	sp,sp,8
 40144a8:	f800283a 	ret

040144ac <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 40144ac:	deffff04 	addi	sp,sp,-4
 40144b0:	df000015 	stw	fp,0(sp)
 40144b4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 40144b8:	0001883a 	nop
 40144bc:	e037883a 	mov	sp,fp
 40144c0:	df000017 	ldw	fp,0(sp)
 40144c4:	dec00104 	addi	sp,sp,4
 40144c8:	f800283a 	ret

040144cc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 40144cc:	defffc04 	addi	sp,sp,-16
 40144d0:	df000315 	stw	fp,12(sp)
 40144d4:	df000304 	addi	fp,sp,12
 40144d8:	e13ffd15 	stw	r4,-12(fp)
 40144dc:	e17ffe15 	stw	r5,-8(fp)
 40144e0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 40144e4:	e0bfff17 	ldw	r2,-4(fp)
}
 40144e8:	e037883a 	mov	sp,fp
 40144ec:	df000017 	ldw	fp,0(sp)
 40144f0:	dec00104 	addi	sp,sp,4
 40144f4:	f800283a 	ret

040144f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40144f8:	defffe04 	addi	sp,sp,-8
 40144fc:	dfc00115 	stw	ra,4(sp)
 4014500:	df000015 	stw	fp,0(sp)
 4014504:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4014508:	d0a00c17 	ldw	r2,-32720(gp)
 401450c:	10000326 	beq	r2,zero,401451c <alt_get_errno+0x24>
 4014510:	d0a00c17 	ldw	r2,-32720(gp)
 4014514:	103ee83a 	callr	r2
 4014518:	00000106 	br	4014520 <alt_get_errno+0x28>
 401451c:	d0a75d04 	addi	r2,gp,-25228
}
 4014520:	e037883a 	mov	sp,fp
 4014524:	dfc00117 	ldw	ra,4(sp)
 4014528:	df000017 	ldw	fp,0(sp)
 401452c:	dec00204 	addi	sp,sp,8
 4014530:	f800283a 	ret

04014534 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 4014534:	defffb04 	addi	sp,sp,-20
 4014538:	dfc00415 	stw	ra,16(sp)
 401453c:	df000315 	stw	fp,12(sp)
 4014540:	df000304 	addi	fp,sp,12
 4014544:	e13ffe15 	stw	r4,-8(fp)
 4014548:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401454c:	e0bffe17 	ldw	r2,-8(fp)
 4014550:	10000816 	blt	r2,zero,4014574 <fstat+0x40>
 4014554:	01400304 	movi	r5,12
 4014558:	e13ffe17 	ldw	r4,-8(fp)
 401455c:	4001a140 	call	4001a14 <__mulsi3>
 4014560:	1007883a 	mov	r3,r2
 4014564:	008100b4 	movhi	r2,1026
 4014568:	10a44204 	addi	r2,r2,-28408
 401456c:	1885883a 	add	r2,r3,r2
 4014570:	00000106 	br	4014578 <fstat+0x44>
 4014574:	0005883a 	mov	r2,zero
 4014578:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 401457c:	e0bffd17 	ldw	r2,-12(fp)
 4014580:	10001026 	beq	r2,zero,40145c4 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 4014584:	e0bffd17 	ldw	r2,-12(fp)
 4014588:	10800017 	ldw	r2,0(r2)
 401458c:	10800817 	ldw	r2,32(r2)
 4014590:	10000726 	beq	r2,zero,40145b0 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 4014594:	e0bffd17 	ldw	r2,-12(fp)
 4014598:	10800017 	ldw	r2,0(r2)
 401459c:	10800817 	ldw	r2,32(r2)
 40145a0:	e17fff17 	ldw	r5,-4(fp)
 40145a4:	e13ffd17 	ldw	r4,-12(fp)
 40145a8:	103ee83a 	callr	r2
 40145ac:	00000a06 	br	40145d8 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 40145b0:	e0bfff17 	ldw	r2,-4(fp)
 40145b4:	00c80004 	movi	r3,8192
 40145b8:	10c00115 	stw	r3,4(r2)
      return 0;
 40145bc:	0005883a 	mov	r2,zero
 40145c0:	00000506 	br	40145d8 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 40145c4:	40144f80 	call	40144f8 <alt_get_errno>
 40145c8:	1007883a 	mov	r3,r2
 40145cc:	00801444 	movi	r2,81
 40145d0:	18800015 	stw	r2,0(r3)
    return -1;
 40145d4:	00bfffc4 	movi	r2,-1
  }
}
 40145d8:	e037883a 	mov	sp,fp
 40145dc:	dfc00117 	ldw	ra,4(sp)
 40145e0:	df000017 	ldw	fp,0(sp)
 40145e4:	dec00204 	addi	sp,sp,8
 40145e8:	f800283a 	ret

040145ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40145ec:	defffe04 	addi	sp,sp,-8
 40145f0:	dfc00115 	stw	ra,4(sp)
 40145f4:	df000015 	stw	fp,0(sp)
 40145f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40145fc:	d0a00c17 	ldw	r2,-32720(gp)
 4014600:	10000326 	beq	r2,zero,4014610 <alt_get_errno+0x24>
 4014604:	d0a00c17 	ldw	r2,-32720(gp)
 4014608:	103ee83a 	callr	r2
 401460c:	00000106 	br	4014614 <alt_get_errno+0x28>
 4014610:	d0a75d04 	addi	r2,gp,-25228
}
 4014614:	e037883a 	mov	sp,fp
 4014618:	dfc00117 	ldw	ra,4(sp)
 401461c:	df000017 	ldw	fp,0(sp)
 4014620:	dec00204 	addi	sp,sp,8
 4014624:	f800283a 	ret

04014628 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 4014628:	deffed04 	addi	sp,sp,-76
 401462c:	dfc01215 	stw	ra,72(sp)
 4014630:	df001115 	stw	fp,68(sp)
 4014634:	df001104 	addi	fp,sp,68
 4014638:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401463c:	e0bfff17 	ldw	r2,-4(fp)
 4014640:	10000816 	blt	r2,zero,4014664 <isatty+0x3c>
 4014644:	01400304 	movi	r5,12
 4014648:	e13fff17 	ldw	r4,-4(fp)
 401464c:	4001a140 	call	4001a14 <__mulsi3>
 4014650:	1007883a 	mov	r3,r2
 4014654:	008100b4 	movhi	r2,1026
 4014658:	10a44204 	addi	r2,r2,-28408
 401465c:	1885883a 	add	r2,r3,r2
 4014660:	00000106 	br	4014668 <isatty+0x40>
 4014664:	0005883a 	mov	r2,zero
 4014668:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 401466c:	e0bfef17 	ldw	r2,-68(fp)
 4014670:	10000e26 	beq	r2,zero,40146ac <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 4014674:	e0bfef17 	ldw	r2,-68(fp)
 4014678:	10800017 	ldw	r2,0(r2)
 401467c:	10800817 	ldw	r2,32(r2)
 4014680:	1000021e 	bne	r2,zero,401468c <isatty+0x64>
    {
      return 1;
 4014684:	00800044 	movi	r2,1
 4014688:	00000d06 	br	40146c0 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 401468c:	e0bff004 	addi	r2,fp,-64
 4014690:	100b883a 	mov	r5,r2
 4014694:	e13fff17 	ldw	r4,-4(fp)
 4014698:	40145340 	call	4014534 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 401469c:	e0bff117 	ldw	r2,-60(fp)
 40146a0:	10880020 	cmpeqi	r2,r2,8192
 40146a4:	10803fcc 	andi	r2,r2,255
 40146a8:	00000506 	br	40146c0 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 40146ac:	40145ec0 	call	40145ec <alt_get_errno>
 40146b0:	1007883a 	mov	r3,r2
 40146b4:	00801444 	movi	r2,81
 40146b8:	18800015 	stw	r2,0(r3)
    return 0;
 40146bc:	0005883a 	mov	r2,zero
  }
}
 40146c0:	e037883a 	mov	sp,fp
 40146c4:	dfc00117 	ldw	ra,4(sp)
 40146c8:	df000017 	ldw	fp,0(sp)
 40146cc:	dec00204 	addi	sp,sp,8
 40146d0:	f800283a 	ret

040146d4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 40146d4:	defffc04 	addi	sp,sp,-16
 40146d8:	df000315 	stw	fp,12(sp)
 40146dc:	df000304 	addi	fp,sp,12
 40146e0:	e13ffd15 	stw	r4,-12(fp)
 40146e4:	e17ffe15 	stw	r5,-8(fp)
 40146e8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 40146ec:	e0fffe17 	ldw	r3,-8(fp)
 40146f0:	e0bffd17 	ldw	r2,-12(fp)
 40146f4:	18800c26 	beq	r3,r2,4014728 <alt_load_section+0x54>
  {
    while( to != end )
 40146f8:	00000806 	br	401471c <alt_load_section+0x48>
    {
      *to++ = *from++;
 40146fc:	e0bffe17 	ldw	r2,-8(fp)
 4014700:	10c00104 	addi	r3,r2,4
 4014704:	e0fffe15 	stw	r3,-8(fp)
 4014708:	e0fffd17 	ldw	r3,-12(fp)
 401470c:	19000104 	addi	r4,r3,4
 4014710:	e13ffd15 	stw	r4,-12(fp)
 4014714:	18c00017 	ldw	r3,0(r3)
 4014718:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 401471c:	e0fffe17 	ldw	r3,-8(fp)
 4014720:	e0bfff17 	ldw	r2,-4(fp)
 4014724:	18bff51e 	bne	r3,r2,40146fc <__alt_data_end+0xfc0146fc>
    {
      *to++ = *from++;
    }
  }
}
 4014728:	0001883a 	nop
 401472c:	e037883a 	mov	sp,fp
 4014730:	df000017 	ldw	fp,0(sp)
 4014734:	dec00104 	addi	sp,sp,4
 4014738:	f800283a 	ret

0401473c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 401473c:	defffe04 	addi	sp,sp,-8
 4014740:	dfc00115 	stw	ra,4(sp)
 4014744:	df000015 	stw	fp,0(sp)
 4014748:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 401474c:	018100b4 	movhi	r6,1026
 4014750:	31a90104 	addi	r6,r6,-23548
 4014754:	014100b4 	movhi	r5,1026
 4014758:	2961cf04 	addi	r5,r5,-30916
 401475c:	010100b4 	movhi	r4,1026
 4014760:	21290104 	addi	r4,r4,-23548
 4014764:	40146d40 	call	40146d4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 4014768:	01810034 	movhi	r6,1024
 401476c:	31808c04 	addi	r6,r6,560
 4014770:	01410034 	movhi	r5,1024
 4014774:	29400804 	addi	r5,r5,32
 4014778:	01010034 	movhi	r4,1024
 401477c:	21000804 	addi	r4,r4,32
 4014780:	40146d40 	call	40146d4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 4014784:	018100b4 	movhi	r6,1026
 4014788:	31a1cf04 	addi	r6,r6,-30916
 401478c:	01410074 	movhi	r5,1025
 4014790:	295f4c04 	addi	r5,r5,32048
 4014794:	01010074 	movhi	r4,1025
 4014798:	211f4c04 	addi	r4,r4,32048
 401479c:	40146d40 	call	40146d4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 40147a0:	40144ac0 	call	40144ac <alt_dcache_flush_all>
  alt_icache_flush_all();
 40147a4:	40173180 	call	4017318 <alt_icache_flush_all>
}
 40147a8:	0001883a 	nop
 40147ac:	e037883a 	mov	sp,fp
 40147b0:	dfc00117 	ldw	ra,4(sp)
 40147b4:	df000017 	ldw	fp,0(sp)
 40147b8:	dec00204 	addi	sp,sp,8
 40147bc:	f800283a 	ret

040147c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40147c0:	defffe04 	addi	sp,sp,-8
 40147c4:	dfc00115 	stw	ra,4(sp)
 40147c8:	df000015 	stw	fp,0(sp)
 40147cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40147d0:	d0a00c17 	ldw	r2,-32720(gp)
 40147d4:	10000326 	beq	r2,zero,40147e4 <alt_get_errno+0x24>
 40147d8:	d0a00c17 	ldw	r2,-32720(gp)
 40147dc:	103ee83a 	callr	r2
 40147e0:	00000106 	br	40147e8 <alt_get_errno+0x28>
 40147e4:	d0a75d04 	addi	r2,gp,-25228
}
 40147e8:	e037883a 	mov	sp,fp
 40147ec:	dfc00117 	ldw	ra,4(sp)
 40147f0:	df000017 	ldw	fp,0(sp)
 40147f4:	dec00204 	addi	sp,sp,8
 40147f8:	f800283a 	ret

040147fc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 40147fc:	defff904 	addi	sp,sp,-28
 4014800:	dfc00615 	stw	ra,24(sp)
 4014804:	df000515 	stw	fp,20(sp)
 4014808:	df000504 	addi	fp,sp,20
 401480c:	e13ffd15 	stw	r4,-12(fp)
 4014810:	e17ffe15 	stw	r5,-8(fp)
 4014814:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 4014818:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401481c:	e0bffd17 	ldw	r2,-12(fp)
 4014820:	10000816 	blt	r2,zero,4014844 <lseek+0x48>
 4014824:	01400304 	movi	r5,12
 4014828:	e13ffd17 	ldw	r4,-12(fp)
 401482c:	4001a140 	call	4001a14 <__mulsi3>
 4014830:	1007883a 	mov	r3,r2
 4014834:	008100b4 	movhi	r2,1026
 4014838:	10a44204 	addi	r2,r2,-28408
 401483c:	1885883a 	add	r2,r3,r2
 4014840:	00000106 	br	4014848 <lseek+0x4c>
 4014844:	0005883a 	mov	r2,zero
 4014848:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 401484c:	e0bffc17 	ldw	r2,-16(fp)
 4014850:	10001026 	beq	r2,zero,4014894 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 4014854:	e0bffc17 	ldw	r2,-16(fp)
 4014858:	10800017 	ldw	r2,0(r2)
 401485c:	10800717 	ldw	r2,28(r2)
 4014860:	10000926 	beq	r2,zero,4014888 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 4014864:	e0bffc17 	ldw	r2,-16(fp)
 4014868:	10800017 	ldw	r2,0(r2)
 401486c:	10800717 	ldw	r2,28(r2)
 4014870:	e1bfff17 	ldw	r6,-4(fp)
 4014874:	e17ffe17 	ldw	r5,-8(fp)
 4014878:	e13ffc17 	ldw	r4,-16(fp)
 401487c:	103ee83a 	callr	r2
 4014880:	e0bffb15 	stw	r2,-20(fp)
 4014884:	00000506 	br	401489c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 4014888:	00bfde84 	movi	r2,-134
 401488c:	e0bffb15 	stw	r2,-20(fp)
 4014890:	00000206 	br	401489c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 4014894:	00bfebc4 	movi	r2,-81
 4014898:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 401489c:	e0bffb17 	ldw	r2,-20(fp)
 40148a0:	1000070e 	bge	r2,zero,40148c0 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 40148a4:	40147c00 	call	40147c0 <alt_get_errno>
 40148a8:	1007883a 	mov	r3,r2
 40148ac:	e0bffb17 	ldw	r2,-20(fp)
 40148b0:	0085c83a 	sub	r2,zero,r2
 40148b4:	18800015 	stw	r2,0(r3)
    rc = -1;
 40148b8:	00bfffc4 	movi	r2,-1
 40148bc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 40148c0:	e0bffb17 	ldw	r2,-20(fp)
}
 40148c4:	e037883a 	mov	sp,fp
 40148c8:	dfc00117 	ldw	ra,4(sp)
 40148cc:	df000017 	ldw	fp,0(sp)
 40148d0:	dec00204 	addi	sp,sp,8
 40148d4:	f800283a 	ret

040148d8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 40148d8:	defffd04 	addi	sp,sp,-12
 40148dc:	dfc00215 	stw	ra,8(sp)
 40148e0:	df000115 	stw	fp,4(sp)
 40148e4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 40148e8:	0009883a 	mov	r4,zero
 40148ec:	40150040 	call	4015004 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 40148f0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 40148f4:	401503c0 	call	401503c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 40148f8:	018100b4 	movhi	r6,1026
 40148fc:	31a1bc04 	addi	r6,r6,-30992
 4014900:	014100b4 	movhi	r5,1026
 4014904:	2961bc04 	addi	r5,r5,-30992
 4014908:	010100b4 	movhi	r4,1026
 401490c:	2121bc04 	addi	r4,r4,-30992
 4014910:	40176bc0 	call	40176bc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4014914:	4016f7c0 	call	4016f7c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4014918:	01010074 	movhi	r4,1025
 401491c:	211bf704 	addi	r4,r4,28636
 4014920:	401799c0 	call	401799c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4014924:	d0a76417 	ldw	r2,-25200(gp)
 4014928:	d0e76517 	ldw	r3,-25196(gp)
 401492c:	d1276617 	ldw	r4,-25192(gp)
 4014930:	200d883a 	mov	r6,r4
 4014934:	180b883a 	mov	r5,r3
 4014938:	1009883a 	mov	r4,r2
 401493c:	400126c0 	call	400126c <main>
 4014940:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 4014944:	01000044 	movi	r4,1
 4014948:	40143d40 	call	40143d4 <close>
  exit (result);
 401494c:	e13fff17 	ldw	r4,-4(fp)
 4014950:	40179b00 	call	40179b0 <exit>

04014954 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 4014954:	defffe04 	addi	sp,sp,-8
 4014958:	df000115 	stw	fp,4(sp)
 401495c:	df000104 	addi	fp,sp,4
 4014960:	e13fff15 	stw	r4,-4(fp)
}
 4014964:	0001883a 	nop
 4014968:	e037883a 	mov	sp,fp
 401496c:	df000017 	ldw	fp,0(sp)
 4014970:	dec00104 	addi	sp,sp,4
 4014974:	f800283a 	ret

04014978 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 4014978:	defffe04 	addi	sp,sp,-8
 401497c:	df000115 	stw	fp,4(sp)
 4014980:	df000104 	addi	fp,sp,4
 4014984:	e13fff15 	stw	r4,-4(fp)
}
 4014988:	0001883a 	nop
 401498c:	e037883a 	mov	sp,fp
 4014990:	df000017 	ldw	fp,0(sp)
 4014994:	dec00104 	addi	sp,sp,4
 4014998:	f800283a 	ret

0401499c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401499c:	defffe04 	addi	sp,sp,-8
 40149a0:	dfc00115 	stw	ra,4(sp)
 40149a4:	df000015 	stw	fp,0(sp)
 40149a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40149ac:	d0a00c17 	ldw	r2,-32720(gp)
 40149b0:	10000326 	beq	r2,zero,40149c0 <alt_get_errno+0x24>
 40149b4:	d0a00c17 	ldw	r2,-32720(gp)
 40149b8:	103ee83a 	callr	r2
 40149bc:	00000106 	br	40149c4 <alt_get_errno+0x28>
 40149c0:	d0a75d04 	addi	r2,gp,-25228
}
 40149c4:	e037883a 	mov	sp,fp
 40149c8:	dfc00117 	ldw	ra,4(sp)
 40149cc:	df000017 	ldw	fp,0(sp)
 40149d0:	dec00204 	addi	sp,sp,8
 40149d4:	f800283a 	ret

040149d8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 40149d8:	defffb04 	addi	sp,sp,-20
 40149dc:	dfc00415 	stw	ra,16(sp)
 40149e0:	df000315 	stw	fp,12(sp)
 40149e4:	dc000215 	stw	r16,8(sp)
 40149e8:	df000304 	addi	fp,sp,12
 40149ec:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 40149f0:	e0bffe17 	ldw	r2,-8(fp)
 40149f4:	10800217 	ldw	r2,8(r2)
 40149f8:	10d00034 	orhi	r3,r2,16384
 40149fc:	e0bffe17 	ldw	r2,-8(fp)
 4014a00:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4014a04:	e03ffd15 	stw	zero,-12(fp)
 4014a08:	00002306 	br	4014a98 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4014a0c:	040100b4 	movhi	r16,1026
 4014a10:	84244204 	addi	r16,r16,-28408
 4014a14:	e0bffd17 	ldw	r2,-12(fp)
 4014a18:	01400304 	movi	r5,12
 4014a1c:	1009883a 	mov	r4,r2
 4014a20:	4001a140 	call	4001a14 <__mulsi3>
 4014a24:	8085883a 	add	r2,r16,r2
 4014a28:	10c00017 	ldw	r3,0(r2)
 4014a2c:	e0bffe17 	ldw	r2,-8(fp)
 4014a30:	10800017 	ldw	r2,0(r2)
 4014a34:	1880151e 	bne	r3,r2,4014a8c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4014a38:	040100b4 	movhi	r16,1026
 4014a3c:	84244204 	addi	r16,r16,-28408
 4014a40:	e0bffd17 	ldw	r2,-12(fp)
 4014a44:	01400304 	movi	r5,12
 4014a48:	1009883a 	mov	r4,r2
 4014a4c:	4001a140 	call	4001a14 <__mulsi3>
 4014a50:	8085883a 	add	r2,r16,r2
 4014a54:	10800204 	addi	r2,r2,8
 4014a58:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4014a5c:	10000b0e 	bge	r2,zero,4014a8c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 4014a60:	01400304 	movi	r5,12
 4014a64:	e13ffd17 	ldw	r4,-12(fp)
 4014a68:	4001a140 	call	4001a14 <__mulsi3>
 4014a6c:	1007883a 	mov	r3,r2
 4014a70:	008100b4 	movhi	r2,1026
 4014a74:	10a44204 	addi	r2,r2,-28408
 4014a78:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4014a7c:	e0bffe17 	ldw	r2,-8(fp)
 4014a80:	18800226 	beq	r3,r2,4014a8c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4014a84:	00bffcc4 	movi	r2,-13
 4014a88:	00000806 	br	4014aac <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4014a8c:	e0bffd17 	ldw	r2,-12(fp)
 4014a90:	10800044 	addi	r2,r2,1
 4014a94:	e0bffd15 	stw	r2,-12(fp)
 4014a98:	d0a00b17 	ldw	r2,-32724(gp)
 4014a9c:	1007883a 	mov	r3,r2
 4014aa0:	e0bffd17 	ldw	r2,-12(fp)
 4014aa4:	18bfd92e 	bgeu	r3,r2,4014a0c <__alt_data_end+0xfc014a0c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4014aa8:	0005883a 	mov	r2,zero
}
 4014aac:	e6ffff04 	addi	sp,fp,-4
 4014ab0:	dfc00217 	ldw	ra,8(sp)
 4014ab4:	df000117 	ldw	fp,4(sp)
 4014ab8:	dc000017 	ldw	r16,0(sp)
 4014abc:	dec00304 	addi	sp,sp,12
 4014ac0:	f800283a 	ret

04014ac4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4014ac4:	defff604 	addi	sp,sp,-40
 4014ac8:	dfc00915 	stw	ra,36(sp)
 4014acc:	df000815 	stw	fp,32(sp)
 4014ad0:	df000804 	addi	fp,sp,32
 4014ad4:	e13ffd15 	stw	r4,-12(fp)
 4014ad8:	e17ffe15 	stw	r5,-8(fp)
 4014adc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4014ae0:	00bfffc4 	movi	r2,-1
 4014ae4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4014ae8:	00bffb44 	movi	r2,-19
 4014aec:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4014af0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4014af4:	d1600904 	addi	r5,gp,-32732
 4014af8:	e13ffd17 	ldw	r4,-12(fp)
 4014afc:	401703c0 	call	401703c <alt_find_dev>
 4014b00:	e0bff815 	stw	r2,-32(fp)
 4014b04:	e0bff817 	ldw	r2,-32(fp)
 4014b08:	1000051e 	bne	r2,zero,4014b20 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4014b0c:	e13ffd17 	ldw	r4,-12(fp)
 4014b10:	40170cc0 	call	40170cc <alt_find_file>
 4014b14:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 4014b18:	00800044 	movi	r2,1
 4014b1c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4014b20:	e0bff817 	ldw	r2,-32(fp)
 4014b24:	10002b26 	beq	r2,zero,4014bd4 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4014b28:	e13ff817 	ldw	r4,-32(fp)
 4014b2c:	40172540 	call	4017254 <alt_get_fd>
 4014b30:	e0bff915 	stw	r2,-28(fp)
 4014b34:	e0bff917 	ldw	r2,-28(fp)
 4014b38:	1000030e 	bge	r2,zero,4014b48 <open+0x84>
    {
      status = index;
 4014b3c:	e0bff917 	ldw	r2,-28(fp)
 4014b40:	e0bffa15 	stw	r2,-24(fp)
 4014b44:	00002506 	br	4014bdc <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 4014b48:	01400304 	movi	r5,12
 4014b4c:	e13ff917 	ldw	r4,-28(fp)
 4014b50:	4001a140 	call	4001a14 <__mulsi3>
 4014b54:	1007883a 	mov	r3,r2
 4014b58:	008100b4 	movhi	r2,1026
 4014b5c:	10a44204 	addi	r2,r2,-28408
 4014b60:	1885883a 	add	r2,r3,r2
 4014b64:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4014b68:	e0fffe17 	ldw	r3,-8(fp)
 4014b6c:	00900034 	movhi	r2,16384
 4014b70:	10bfffc4 	addi	r2,r2,-1
 4014b74:	1886703a 	and	r3,r3,r2
 4014b78:	e0bffc17 	ldw	r2,-16(fp)
 4014b7c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4014b80:	e0bffb17 	ldw	r2,-20(fp)
 4014b84:	1000051e 	bne	r2,zero,4014b9c <open+0xd8>
 4014b88:	e13ffc17 	ldw	r4,-16(fp)
 4014b8c:	40149d80 	call	40149d8 <alt_file_locked>
 4014b90:	e0bffa15 	stw	r2,-24(fp)
 4014b94:	e0bffa17 	ldw	r2,-24(fp)
 4014b98:	10001016 	blt	r2,zero,4014bdc <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4014b9c:	e0bff817 	ldw	r2,-32(fp)
 4014ba0:	10800317 	ldw	r2,12(r2)
 4014ba4:	10000826 	beq	r2,zero,4014bc8 <open+0x104>
 4014ba8:	e0bff817 	ldw	r2,-32(fp)
 4014bac:	10800317 	ldw	r2,12(r2)
 4014bb0:	e1ffff17 	ldw	r7,-4(fp)
 4014bb4:	e1bffe17 	ldw	r6,-8(fp)
 4014bb8:	e17ffd17 	ldw	r5,-12(fp)
 4014bbc:	e13ffc17 	ldw	r4,-16(fp)
 4014bc0:	103ee83a 	callr	r2
 4014bc4:	00000106 	br	4014bcc <open+0x108>
 4014bc8:	0005883a 	mov	r2,zero
 4014bcc:	e0bffa15 	stw	r2,-24(fp)
 4014bd0:	00000206 	br	4014bdc <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4014bd4:	00bffb44 	movi	r2,-19
 4014bd8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4014bdc:	e0bffa17 	ldw	r2,-24(fp)
 4014be0:	1000090e 	bge	r2,zero,4014c08 <open+0x144>
  {
    alt_release_fd (index);  
 4014be4:	e13ff917 	ldw	r4,-28(fp)
 4014be8:	4014d600 	call	4014d60 <alt_release_fd>
    ALT_ERRNO = -status;
 4014bec:	401499c0 	call	401499c <alt_get_errno>
 4014bf0:	1007883a 	mov	r3,r2
 4014bf4:	e0bffa17 	ldw	r2,-24(fp)
 4014bf8:	0085c83a 	sub	r2,zero,r2
 4014bfc:	18800015 	stw	r2,0(r3)
    return -1;
 4014c00:	00bfffc4 	movi	r2,-1
 4014c04:	00000106 	br	4014c0c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 4014c08:	e0bff917 	ldw	r2,-28(fp)
}
 4014c0c:	e037883a 	mov	sp,fp
 4014c10:	dfc00117 	ldw	ra,4(sp)
 4014c14:	df000017 	ldw	fp,0(sp)
 4014c18:	dec00204 	addi	sp,sp,8
 4014c1c:	f800283a 	ret

04014c20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4014c20:	defffe04 	addi	sp,sp,-8
 4014c24:	dfc00115 	stw	ra,4(sp)
 4014c28:	df000015 	stw	fp,0(sp)
 4014c2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4014c30:	d0a00c17 	ldw	r2,-32720(gp)
 4014c34:	10000326 	beq	r2,zero,4014c44 <alt_get_errno+0x24>
 4014c38:	d0a00c17 	ldw	r2,-32720(gp)
 4014c3c:	103ee83a 	callr	r2
 4014c40:	00000106 	br	4014c48 <alt_get_errno+0x28>
 4014c44:	d0a75d04 	addi	r2,gp,-25228
}
 4014c48:	e037883a 	mov	sp,fp
 4014c4c:	dfc00117 	ldw	ra,4(sp)
 4014c50:	df000017 	ldw	fp,0(sp)
 4014c54:	dec00204 	addi	sp,sp,8
 4014c58:	f800283a 	ret

04014c5c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 4014c5c:	defff904 	addi	sp,sp,-28
 4014c60:	dfc00615 	stw	ra,24(sp)
 4014c64:	df000515 	stw	fp,20(sp)
 4014c68:	df000504 	addi	fp,sp,20
 4014c6c:	e13ffd15 	stw	r4,-12(fp)
 4014c70:	e17ffe15 	stw	r5,-8(fp)
 4014c74:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4014c78:	e0bffd17 	ldw	r2,-12(fp)
 4014c7c:	10000816 	blt	r2,zero,4014ca0 <read+0x44>
 4014c80:	01400304 	movi	r5,12
 4014c84:	e13ffd17 	ldw	r4,-12(fp)
 4014c88:	4001a140 	call	4001a14 <__mulsi3>
 4014c8c:	1007883a 	mov	r3,r2
 4014c90:	008100b4 	movhi	r2,1026
 4014c94:	10a44204 	addi	r2,r2,-28408
 4014c98:	1885883a 	add	r2,r3,r2
 4014c9c:	00000106 	br	4014ca4 <read+0x48>
 4014ca0:	0005883a 	mov	r2,zero
 4014ca4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4014ca8:	e0bffb17 	ldw	r2,-20(fp)
 4014cac:	10002226 	beq	r2,zero,4014d38 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4014cb0:	e0bffb17 	ldw	r2,-20(fp)
 4014cb4:	10800217 	ldw	r2,8(r2)
 4014cb8:	108000cc 	andi	r2,r2,3
 4014cbc:	10800060 	cmpeqi	r2,r2,1
 4014cc0:	1000181e 	bne	r2,zero,4014d24 <read+0xc8>
        (fd->dev->read))
 4014cc4:	e0bffb17 	ldw	r2,-20(fp)
 4014cc8:	10800017 	ldw	r2,0(r2)
 4014ccc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4014cd0:	10001426 	beq	r2,zero,4014d24 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 4014cd4:	e0bffb17 	ldw	r2,-20(fp)
 4014cd8:	10800017 	ldw	r2,0(r2)
 4014cdc:	10800517 	ldw	r2,20(r2)
 4014ce0:	e0ffff17 	ldw	r3,-4(fp)
 4014ce4:	180d883a 	mov	r6,r3
 4014ce8:	e17ffe17 	ldw	r5,-8(fp)
 4014cec:	e13ffb17 	ldw	r4,-20(fp)
 4014cf0:	103ee83a 	callr	r2
 4014cf4:	e0bffc15 	stw	r2,-16(fp)
 4014cf8:	e0bffc17 	ldw	r2,-16(fp)
 4014cfc:	1000070e 	bge	r2,zero,4014d1c <read+0xc0>
        {
          ALT_ERRNO = -rval;
 4014d00:	4014c200 	call	4014c20 <alt_get_errno>
 4014d04:	1007883a 	mov	r3,r2
 4014d08:	e0bffc17 	ldw	r2,-16(fp)
 4014d0c:	0085c83a 	sub	r2,zero,r2
 4014d10:	18800015 	stw	r2,0(r3)
          return -1;
 4014d14:	00bfffc4 	movi	r2,-1
 4014d18:	00000c06 	br	4014d4c <read+0xf0>
        }
        return rval;
 4014d1c:	e0bffc17 	ldw	r2,-16(fp)
 4014d20:	00000a06 	br	4014d4c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 4014d24:	4014c200 	call	4014c20 <alt_get_errno>
 4014d28:	1007883a 	mov	r3,r2
 4014d2c:	00800344 	movi	r2,13
 4014d30:	18800015 	stw	r2,0(r3)
 4014d34:	00000406 	br	4014d48 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 4014d38:	4014c200 	call	4014c20 <alt_get_errno>
 4014d3c:	1007883a 	mov	r3,r2
 4014d40:	00801444 	movi	r2,81
 4014d44:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4014d48:	00bfffc4 	movi	r2,-1
}
 4014d4c:	e037883a 	mov	sp,fp
 4014d50:	dfc00117 	ldw	ra,4(sp)
 4014d54:	df000017 	ldw	fp,0(sp)
 4014d58:	dec00204 	addi	sp,sp,8
 4014d5c:	f800283a 	ret

04014d60 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4014d60:	defffc04 	addi	sp,sp,-16
 4014d64:	dfc00315 	stw	ra,12(sp)
 4014d68:	df000215 	stw	fp,8(sp)
 4014d6c:	dc000115 	stw	r16,4(sp)
 4014d70:	df000204 	addi	fp,sp,8
 4014d74:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 4014d78:	e0bffe17 	ldw	r2,-8(fp)
 4014d7c:	108000d0 	cmplti	r2,r2,3
 4014d80:	1000111e 	bne	r2,zero,4014dc8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 4014d84:	040100b4 	movhi	r16,1026
 4014d88:	84244204 	addi	r16,r16,-28408
 4014d8c:	e0bffe17 	ldw	r2,-8(fp)
 4014d90:	01400304 	movi	r5,12
 4014d94:	1009883a 	mov	r4,r2
 4014d98:	4001a140 	call	4001a14 <__mulsi3>
 4014d9c:	8085883a 	add	r2,r16,r2
 4014da0:	10800204 	addi	r2,r2,8
 4014da4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4014da8:	040100b4 	movhi	r16,1026
 4014dac:	84244204 	addi	r16,r16,-28408
 4014db0:	e0bffe17 	ldw	r2,-8(fp)
 4014db4:	01400304 	movi	r5,12
 4014db8:	1009883a 	mov	r4,r2
 4014dbc:	4001a140 	call	4001a14 <__mulsi3>
 4014dc0:	8085883a 	add	r2,r16,r2
 4014dc4:	10000015 	stw	zero,0(r2)
  }
}
 4014dc8:	0001883a 	nop
 4014dcc:	e6ffff04 	addi	sp,fp,-4
 4014dd0:	dfc00217 	ldw	ra,8(sp)
 4014dd4:	df000117 	ldw	fp,4(sp)
 4014dd8:	dc000017 	ldw	r16,0(sp)
 4014ddc:	dec00304 	addi	sp,sp,12
 4014de0:	f800283a 	ret

04014de4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 4014de4:	defff904 	addi	sp,sp,-28
 4014de8:	df000615 	stw	fp,24(sp)
 4014dec:	df000604 	addi	fp,sp,24
 4014df0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4014df4:	0005303a 	rdctl	r2,status
 4014df8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4014dfc:	e0fffe17 	ldw	r3,-8(fp)
 4014e00:	00bfff84 	movi	r2,-2
 4014e04:	1884703a 	and	r2,r3,r2
 4014e08:	1001703a 	wrctl	status,r2
  
  return context;
 4014e0c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 4014e10:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 4014e14:	d0a00d17 	ldw	r2,-32716(gp)
 4014e18:	10c000c4 	addi	r3,r2,3
 4014e1c:	00bfff04 	movi	r2,-4
 4014e20:	1884703a 	and	r2,r3,r2
 4014e24:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 4014e28:	d0e00d17 	ldw	r3,-32716(gp)
 4014e2c:	e0bfff17 	ldw	r2,-4(fp)
 4014e30:	1887883a 	add	r3,r3,r2
 4014e34:	00820034 	movhi	r2,2048
 4014e38:	10800004 	addi	r2,r2,0
 4014e3c:	10c0062e 	bgeu	r2,r3,4014e58 <sbrk+0x74>
 4014e40:	e0bffb17 	ldw	r2,-20(fp)
 4014e44:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014e48:	e0bffa17 	ldw	r2,-24(fp)
 4014e4c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 4014e50:	00bfffc4 	movi	r2,-1
 4014e54:	00000b06 	br	4014e84 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 4014e58:	d0a00d17 	ldw	r2,-32716(gp)
 4014e5c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 4014e60:	d0e00d17 	ldw	r3,-32716(gp)
 4014e64:	e0bfff17 	ldw	r2,-4(fp)
 4014e68:	1885883a 	add	r2,r3,r2
 4014e6c:	d0a00d15 	stw	r2,-32716(gp)
 4014e70:	e0bffb17 	ldw	r2,-20(fp)
 4014e74:	e0bffc15 	stw	r2,-16(fp)
 4014e78:	e0bffc17 	ldw	r2,-16(fp)
 4014e7c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 4014e80:	e0bffd17 	ldw	r2,-12(fp)
} 
 4014e84:	e037883a 	mov	sp,fp
 4014e88:	df000017 	ldw	fp,0(sp)
 4014e8c:	dec00104 	addi	sp,sp,4
 4014e90:	f800283a 	ret

04014e94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4014e94:	defffe04 	addi	sp,sp,-8
 4014e98:	dfc00115 	stw	ra,4(sp)
 4014e9c:	df000015 	stw	fp,0(sp)
 4014ea0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4014ea4:	d0a00c17 	ldw	r2,-32720(gp)
 4014ea8:	10000326 	beq	r2,zero,4014eb8 <alt_get_errno+0x24>
 4014eac:	d0a00c17 	ldw	r2,-32720(gp)
 4014eb0:	103ee83a 	callr	r2
 4014eb4:	00000106 	br	4014ebc <alt_get_errno+0x28>
 4014eb8:	d0a75d04 	addi	r2,gp,-25228
}
 4014ebc:	e037883a 	mov	sp,fp
 4014ec0:	dfc00117 	ldw	ra,4(sp)
 4014ec4:	df000017 	ldw	fp,0(sp)
 4014ec8:	dec00204 	addi	sp,sp,8
 4014ecc:	f800283a 	ret

04014ed0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4014ed0:	defff904 	addi	sp,sp,-28
 4014ed4:	dfc00615 	stw	ra,24(sp)
 4014ed8:	df000515 	stw	fp,20(sp)
 4014edc:	df000504 	addi	fp,sp,20
 4014ee0:	e13ffd15 	stw	r4,-12(fp)
 4014ee4:	e17ffe15 	stw	r5,-8(fp)
 4014ee8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4014eec:	e0bffd17 	ldw	r2,-12(fp)
 4014ef0:	10000816 	blt	r2,zero,4014f14 <write+0x44>
 4014ef4:	01400304 	movi	r5,12
 4014ef8:	e13ffd17 	ldw	r4,-12(fp)
 4014efc:	4001a140 	call	4001a14 <__mulsi3>
 4014f00:	1007883a 	mov	r3,r2
 4014f04:	008100b4 	movhi	r2,1026
 4014f08:	10a44204 	addi	r2,r2,-28408
 4014f0c:	1885883a 	add	r2,r3,r2
 4014f10:	00000106 	br	4014f18 <write+0x48>
 4014f14:	0005883a 	mov	r2,zero
 4014f18:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4014f1c:	e0bffb17 	ldw	r2,-20(fp)
 4014f20:	10002126 	beq	r2,zero,4014fa8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4014f24:	e0bffb17 	ldw	r2,-20(fp)
 4014f28:	10800217 	ldw	r2,8(r2)
 4014f2c:	108000cc 	andi	r2,r2,3
 4014f30:	10001826 	beq	r2,zero,4014f94 <write+0xc4>
 4014f34:	e0bffb17 	ldw	r2,-20(fp)
 4014f38:	10800017 	ldw	r2,0(r2)
 4014f3c:	10800617 	ldw	r2,24(r2)
 4014f40:	10001426 	beq	r2,zero,4014f94 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4014f44:	e0bffb17 	ldw	r2,-20(fp)
 4014f48:	10800017 	ldw	r2,0(r2)
 4014f4c:	10800617 	ldw	r2,24(r2)
 4014f50:	e0ffff17 	ldw	r3,-4(fp)
 4014f54:	180d883a 	mov	r6,r3
 4014f58:	e17ffe17 	ldw	r5,-8(fp)
 4014f5c:	e13ffb17 	ldw	r4,-20(fp)
 4014f60:	103ee83a 	callr	r2
 4014f64:	e0bffc15 	stw	r2,-16(fp)
 4014f68:	e0bffc17 	ldw	r2,-16(fp)
 4014f6c:	1000070e 	bge	r2,zero,4014f8c <write+0xbc>
      {
        ALT_ERRNO = -rval;
 4014f70:	4014e940 	call	4014e94 <alt_get_errno>
 4014f74:	1007883a 	mov	r3,r2
 4014f78:	e0bffc17 	ldw	r2,-16(fp)
 4014f7c:	0085c83a 	sub	r2,zero,r2
 4014f80:	18800015 	stw	r2,0(r3)
        return -1;
 4014f84:	00bfffc4 	movi	r2,-1
 4014f88:	00000c06 	br	4014fbc <write+0xec>
      }
      return rval;
 4014f8c:	e0bffc17 	ldw	r2,-16(fp)
 4014f90:	00000a06 	br	4014fbc <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4014f94:	4014e940 	call	4014e94 <alt_get_errno>
 4014f98:	1007883a 	mov	r3,r2
 4014f9c:	00800344 	movi	r2,13
 4014fa0:	18800015 	stw	r2,0(r3)
 4014fa4:	00000406 	br	4014fb8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4014fa8:	4014e940 	call	4014e94 <alt_get_errno>
 4014fac:	1007883a 	mov	r3,r2
 4014fb0:	00801444 	movi	r2,81
 4014fb4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4014fb8:	00bfffc4 	movi	r2,-1
}
 4014fbc:	e037883a 	mov	sp,fp
 4014fc0:	dfc00117 	ldw	ra,4(sp)
 4014fc4:	df000017 	ldw	fp,0(sp)
 4014fc8:	dec00204 	addi	sp,sp,8
 4014fcc:	f800283a 	ret

04014fd0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4014fd0:	defffd04 	addi	sp,sp,-12
 4014fd4:	dfc00215 	stw	ra,8(sp)
 4014fd8:	df000115 	stw	fp,4(sp)
 4014fdc:	df000104 	addi	fp,sp,4
 4014fe0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4014fe4:	d1600904 	addi	r5,gp,-32732
 4014fe8:	e13fff17 	ldw	r4,-4(fp)
 4014fec:	4016ed80 	call	4016ed8 <alt_dev_llist_insert>
}
 4014ff0:	e037883a 	mov	sp,fp
 4014ff4:	dfc00117 	ldw	ra,4(sp)
 4014ff8:	df000017 	ldw	fp,0(sp)
 4014ffc:	dec00204 	addi	sp,sp,8
 4015000:	f800283a 	ret

04015004 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4015004:	defffd04 	addi	sp,sp,-12
 4015008:	dfc00215 	stw	ra,8(sp)
 401500c:	df000115 	stw	fp,4(sp)
 4015010:	df000104 	addi	fp,sp,4
 4015014:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_CPU, nios2_cpu);
 4015018:	40178dc0 	call	40178dc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 401501c:	00800044 	movi	r2,1
 4015020:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4015024:	0001883a 	nop
 4015028:	e037883a 	mov	sp,fp
 401502c:	dfc00117 	ldw	ra,4(sp)
 4015030:	df000017 	ldw	fp,0(sp)
 4015034:	dec00204 	addi	sp,sp,8
 4015038:	f800283a 	ret

0401503c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 401503c:	defffe04 	addi	sp,sp,-8
 4015040:	dfc00115 	stw	ra,4(sp)
 4015044:	df000015 	stw	fp,0(sp)
 4015048:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 401504c:	01800084 	movi	r6,2
 4015050:	000b883a 	mov	r5,zero
 4015054:	010100b4 	movhi	r4,1026
 4015058:	2124ac04 	addi	r4,r4,-27984
 401505c:	401522c0 	call	401522c <altera_avalon_jtag_uart_init>
 4015060:	010100b4 	movhi	r4,1026
 4015064:	2124a204 	addi	r4,r4,-28024
 4015068:	4014fd00 	call	4014fd0 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERF_CNT, perf_cnt);
 401506c:	00c00044 	movi	r3,1
 4015070:	00820034 	movhi	r2,2048
 4015074:	10840004 	addi	r2,r2,4096
 4015078:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_M2S, sgdma_m2s);
 401507c:	000d883a 	mov	r6,zero
 4015080:	000b883a 	mov	r5,zero
 4015084:	010100b4 	movhi	r4,1026
 4015088:	2128ba04 	addi	r4,r4,-23832
 401508c:	401681c0 	call	401681c <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_S2M, sgdma_s2m);
 4015090:	01800044 	movi	r6,1
 4015094:	000b883a 	mov	r5,zero
 4015098:	010100b4 	movhi	r4,1026
 401509c:	2128c604 	addi	r4,r4,-23784
 40150a0:	401681c0 	call	401681c <alt_avalon_sgdma_init>
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
 40150a4:	010100b4 	movhi	r4,1026
 40150a8:	2128d204 	addi	r4,r4,-23736
 40150ac:	40171d40 	call	40171d4 <alt_fs_reg>
}
 40150b0:	0001883a 	nop
 40150b4:	e037883a 	mov	sp,fp
 40150b8:	dfc00117 	ldw	ra,4(sp)
 40150bc:	df000017 	ldw	fp,0(sp)
 40150c0:	dec00204 	addi	sp,sp,8
 40150c4:	f800283a 	ret

040150c8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 40150c8:	defffa04 	addi	sp,sp,-24
 40150cc:	dfc00515 	stw	ra,20(sp)
 40150d0:	df000415 	stw	fp,16(sp)
 40150d4:	df000404 	addi	fp,sp,16
 40150d8:	e13ffd15 	stw	r4,-12(fp)
 40150dc:	e17ffe15 	stw	r5,-8(fp)
 40150e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40150e4:	e0bffd17 	ldw	r2,-12(fp)
 40150e8:	10800017 	ldw	r2,0(r2)
 40150ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 40150f0:	e0bffc17 	ldw	r2,-16(fp)
 40150f4:	10c00a04 	addi	r3,r2,40
 40150f8:	e0bffd17 	ldw	r2,-12(fp)
 40150fc:	10800217 	ldw	r2,8(r2)
 4015100:	100f883a 	mov	r7,r2
 4015104:	e1bfff17 	ldw	r6,-4(fp)
 4015108:	e17ffe17 	ldw	r5,-8(fp)
 401510c:	1809883a 	mov	r4,r3
 4015110:	40156f00 	call	40156f0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4015114:	e037883a 	mov	sp,fp
 4015118:	dfc00117 	ldw	ra,4(sp)
 401511c:	df000017 	ldw	fp,0(sp)
 4015120:	dec00204 	addi	sp,sp,8
 4015124:	f800283a 	ret

04015128 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4015128:	defffa04 	addi	sp,sp,-24
 401512c:	dfc00515 	stw	ra,20(sp)
 4015130:	df000415 	stw	fp,16(sp)
 4015134:	df000404 	addi	fp,sp,16
 4015138:	e13ffd15 	stw	r4,-12(fp)
 401513c:	e17ffe15 	stw	r5,-8(fp)
 4015140:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4015144:	e0bffd17 	ldw	r2,-12(fp)
 4015148:	10800017 	ldw	r2,0(r2)
 401514c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4015150:	e0bffc17 	ldw	r2,-16(fp)
 4015154:	10c00a04 	addi	r3,r2,40
 4015158:	e0bffd17 	ldw	r2,-12(fp)
 401515c:	10800217 	ldw	r2,8(r2)
 4015160:	100f883a 	mov	r7,r2
 4015164:	e1bfff17 	ldw	r6,-4(fp)
 4015168:	e17ffe17 	ldw	r5,-8(fp)
 401516c:	1809883a 	mov	r4,r3
 4015170:	401590c0 	call	401590c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4015174:	e037883a 	mov	sp,fp
 4015178:	dfc00117 	ldw	ra,4(sp)
 401517c:	df000017 	ldw	fp,0(sp)
 4015180:	dec00204 	addi	sp,sp,8
 4015184:	f800283a 	ret

04015188 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4015188:	defffc04 	addi	sp,sp,-16
 401518c:	dfc00315 	stw	ra,12(sp)
 4015190:	df000215 	stw	fp,8(sp)
 4015194:	df000204 	addi	fp,sp,8
 4015198:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 401519c:	e0bfff17 	ldw	r2,-4(fp)
 40151a0:	10800017 	ldw	r2,0(r2)
 40151a4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 40151a8:	e0bffe17 	ldw	r2,-8(fp)
 40151ac:	10c00a04 	addi	r3,r2,40
 40151b0:	e0bfff17 	ldw	r2,-4(fp)
 40151b4:	10800217 	ldw	r2,8(r2)
 40151b8:	100b883a 	mov	r5,r2
 40151bc:	1809883a 	mov	r4,r3
 40151c0:	40155980 	call	4015598 <altera_avalon_jtag_uart_close>
}
 40151c4:	e037883a 	mov	sp,fp
 40151c8:	dfc00117 	ldw	ra,4(sp)
 40151cc:	df000017 	ldw	fp,0(sp)
 40151d0:	dec00204 	addi	sp,sp,8
 40151d4:	f800283a 	ret

040151d8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 40151d8:	defffa04 	addi	sp,sp,-24
 40151dc:	dfc00515 	stw	ra,20(sp)
 40151e0:	df000415 	stw	fp,16(sp)
 40151e4:	df000404 	addi	fp,sp,16
 40151e8:	e13ffd15 	stw	r4,-12(fp)
 40151ec:	e17ffe15 	stw	r5,-8(fp)
 40151f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 40151f4:	e0bffd17 	ldw	r2,-12(fp)
 40151f8:	10800017 	ldw	r2,0(r2)
 40151fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4015200:	e0bffc17 	ldw	r2,-16(fp)
 4015204:	10800a04 	addi	r2,r2,40
 4015208:	e1bfff17 	ldw	r6,-4(fp)
 401520c:	e17ffe17 	ldw	r5,-8(fp)
 4015210:	1009883a 	mov	r4,r2
 4015214:	40156000 	call	4015600 <altera_avalon_jtag_uart_ioctl>
}
 4015218:	e037883a 	mov	sp,fp
 401521c:	dfc00117 	ldw	ra,4(sp)
 4015220:	df000017 	ldw	fp,0(sp)
 4015224:	dec00204 	addi	sp,sp,8
 4015228:	f800283a 	ret

0401522c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 401522c:	defffa04 	addi	sp,sp,-24
 4015230:	dfc00515 	stw	ra,20(sp)
 4015234:	df000415 	stw	fp,16(sp)
 4015238:	df000404 	addi	fp,sp,16
 401523c:	e13ffd15 	stw	r4,-12(fp)
 4015240:	e17ffe15 	stw	r5,-8(fp)
 4015244:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4015248:	e0bffd17 	ldw	r2,-12(fp)
 401524c:	00c00044 	movi	r3,1
 4015250:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4015254:	e0bffd17 	ldw	r2,-12(fp)
 4015258:	10800017 	ldw	r2,0(r2)
 401525c:	10800104 	addi	r2,r2,4
 4015260:	1007883a 	mov	r3,r2
 4015264:	e0bffd17 	ldw	r2,-12(fp)
 4015268:	10800817 	ldw	r2,32(r2)
 401526c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4015270:	e0bffe17 	ldw	r2,-8(fp)
 4015274:	e0ffff17 	ldw	r3,-4(fp)
 4015278:	d8000015 	stw	zero,0(sp)
 401527c:	e1fffd17 	ldw	r7,-12(fp)
 4015280:	01810074 	movhi	r6,1025
 4015284:	3194bb04 	addi	r6,r6,21228
 4015288:	180b883a 	mov	r5,r3
 401528c:	1009883a 	mov	r4,r2
 4015290:	40173380 	call	4017338 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 4015294:	e0bffd17 	ldw	r2,-12(fp)
 4015298:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 401529c:	e0bffd17 	ldw	r2,-12(fp)
 40152a0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 40152a4:	d0e76817 	ldw	r3,-25184(gp)
 40152a8:	e1fffd17 	ldw	r7,-12(fp)
 40152ac:	01810074 	movhi	r6,1025
 40152b0:	31953e04 	addi	r6,r6,21752
 40152b4:	180b883a 	mov	r5,r3
 40152b8:	1009883a 	mov	r4,r2
 40152bc:	4016d480 	call	4016d48 <alt_alarm_start>
 40152c0:	1000040e 	bge	r2,zero,40152d4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 40152c4:	e0fffd17 	ldw	r3,-12(fp)
 40152c8:	00a00034 	movhi	r2,32768
 40152cc:	10bfffc4 	addi	r2,r2,-1
 40152d0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 40152d4:	0001883a 	nop
 40152d8:	e037883a 	mov	sp,fp
 40152dc:	dfc00117 	ldw	ra,4(sp)
 40152e0:	df000017 	ldw	fp,0(sp)
 40152e4:	dec00204 	addi	sp,sp,8
 40152e8:	f800283a 	ret

040152ec <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 40152ec:	defff804 	addi	sp,sp,-32
 40152f0:	df000715 	stw	fp,28(sp)
 40152f4:	df000704 	addi	fp,sp,28
 40152f8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 40152fc:	e0bfff17 	ldw	r2,-4(fp)
 4015300:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 4015304:	e0bffb17 	ldw	r2,-20(fp)
 4015308:	10800017 	ldw	r2,0(r2)
 401530c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4015310:	e0bffc17 	ldw	r2,-16(fp)
 4015314:	10800104 	addi	r2,r2,4
 4015318:	10800037 	ldwio	r2,0(r2)
 401531c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4015320:	e0bffd17 	ldw	r2,-12(fp)
 4015324:	1080c00c 	andi	r2,r2,768
 4015328:	10006d26 	beq	r2,zero,40154e0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 401532c:	e0bffd17 	ldw	r2,-12(fp)
 4015330:	1080400c 	andi	r2,r2,256
 4015334:	10003526 	beq	r2,zero,401540c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4015338:	00800074 	movhi	r2,1
 401533c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4015340:	e0bffb17 	ldw	r2,-20(fp)
 4015344:	10800a17 	ldw	r2,40(r2)
 4015348:	10800044 	addi	r2,r2,1
 401534c:	1081ffcc 	andi	r2,r2,2047
 4015350:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 4015354:	e0bffb17 	ldw	r2,-20(fp)
 4015358:	10c00b17 	ldw	r3,44(r2)
 401535c:	e0bffe17 	ldw	r2,-8(fp)
 4015360:	18801526 	beq	r3,r2,40153b8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4015364:	e0bffc17 	ldw	r2,-16(fp)
 4015368:	10800037 	ldwio	r2,0(r2)
 401536c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4015370:	e0bff917 	ldw	r2,-28(fp)
 4015374:	10a0000c 	andi	r2,r2,32768
 4015378:	10001126 	beq	r2,zero,40153c0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 401537c:	e0bffb17 	ldw	r2,-20(fp)
 4015380:	10800a17 	ldw	r2,40(r2)
 4015384:	e0fff917 	ldw	r3,-28(fp)
 4015388:	1809883a 	mov	r4,r3
 401538c:	e0fffb17 	ldw	r3,-20(fp)
 4015390:	1885883a 	add	r2,r3,r2
 4015394:	10800e04 	addi	r2,r2,56
 4015398:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401539c:	e0bffb17 	ldw	r2,-20(fp)
 40153a0:	10800a17 	ldw	r2,40(r2)
 40153a4:	10800044 	addi	r2,r2,1
 40153a8:	10c1ffcc 	andi	r3,r2,2047
 40153ac:	e0bffb17 	ldw	r2,-20(fp)
 40153b0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 40153b4:	003fe206 	br	4015340 <__alt_data_end+0xfc015340>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 40153b8:	0001883a 	nop
 40153bc:	00000106 	br	40153c4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 40153c0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 40153c4:	e0bff917 	ldw	r2,-28(fp)
 40153c8:	10bfffec 	andhi	r2,r2,65535
 40153cc:	10000f26 	beq	r2,zero,401540c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40153d0:	e0bffb17 	ldw	r2,-20(fp)
 40153d4:	10c00817 	ldw	r3,32(r2)
 40153d8:	00bfff84 	movi	r2,-2
 40153dc:	1886703a 	and	r3,r3,r2
 40153e0:	e0bffb17 	ldw	r2,-20(fp)
 40153e4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 40153e8:	e0bffc17 	ldw	r2,-16(fp)
 40153ec:	10800104 	addi	r2,r2,4
 40153f0:	1007883a 	mov	r3,r2
 40153f4:	e0bffb17 	ldw	r2,-20(fp)
 40153f8:	10800817 	ldw	r2,32(r2)
 40153fc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4015400:	e0bffc17 	ldw	r2,-16(fp)
 4015404:	10800104 	addi	r2,r2,4
 4015408:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 401540c:	e0bffd17 	ldw	r2,-12(fp)
 4015410:	1080800c 	andi	r2,r2,512
 4015414:	103fbe26 	beq	r2,zero,4015310 <__alt_data_end+0xfc015310>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4015418:	e0bffd17 	ldw	r2,-12(fp)
 401541c:	1004d43a 	srli	r2,r2,16
 4015420:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 4015424:	00001406 	br	4015478 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4015428:	e0bffc17 	ldw	r2,-16(fp)
 401542c:	e0fffb17 	ldw	r3,-20(fp)
 4015430:	18c00d17 	ldw	r3,52(r3)
 4015434:	e13ffb17 	ldw	r4,-20(fp)
 4015438:	20c7883a 	add	r3,r4,r3
 401543c:	18c20e04 	addi	r3,r3,2104
 4015440:	18c00003 	ldbu	r3,0(r3)
 4015444:	18c03fcc 	andi	r3,r3,255
 4015448:	18c0201c 	xori	r3,r3,128
 401544c:	18ffe004 	addi	r3,r3,-128
 4015450:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4015454:	e0bffb17 	ldw	r2,-20(fp)
 4015458:	10800d17 	ldw	r2,52(r2)
 401545c:	10800044 	addi	r2,r2,1
 4015460:	10c1ffcc 	andi	r3,r2,2047
 4015464:	e0bffb17 	ldw	r2,-20(fp)
 4015468:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 401546c:	e0bffa17 	ldw	r2,-24(fp)
 4015470:	10bfffc4 	addi	r2,r2,-1
 4015474:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 4015478:	e0bffa17 	ldw	r2,-24(fp)
 401547c:	10000526 	beq	r2,zero,4015494 <altera_avalon_jtag_uart_irq+0x1a8>
 4015480:	e0bffb17 	ldw	r2,-20(fp)
 4015484:	10c00d17 	ldw	r3,52(r2)
 4015488:	e0bffb17 	ldw	r2,-20(fp)
 401548c:	10800c17 	ldw	r2,48(r2)
 4015490:	18bfe51e 	bne	r3,r2,4015428 <__alt_data_end+0xfc015428>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 4015494:	e0bffa17 	ldw	r2,-24(fp)
 4015498:	103f9d26 	beq	r2,zero,4015310 <__alt_data_end+0xfc015310>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 401549c:	e0bffb17 	ldw	r2,-20(fp)
 40154a0:	10c00817 	ldw	r3,32(r2)
 40154a4:	00bfff44 	movi	r2,-3
 40154a8:	1886703a 	and	r3,r3,r2
 40154ac:	e0bffb17 	ldw	r2,-20(fp)
 40154b0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40154b4:	e0bffb17 	ldw	r2,-20(fp)
 40154b8:	10800017 	ldw	r2,0(r2)
 40154bc:	10800104 	addi	r2,r2,4
 40154c0:	1007883a 	mov	r3,r2
 40154c4:	e0bffb17 	ldw	r2,-20(fp)
 40154c8:	10800817 	ldw	r2,32(r2)
 40154cc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40154d0:	e0bffc17 	ldw	r2,-16(fp)
 40154d4:	10800104 	addi	r2,r2,4
 40154d8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 40154dc:	003f8c06 	br	4015310 <__alt_data_end+0xfc015310>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 40154e0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 40154e4:	0001883a 	nop
 40154e8:	e037883a 	mov	sp,fp
 40154ec:	df000017 	ldw	fp,0(sp)
 40154f0:	dec00104 	addi	sp,sp,4
 40154f4:	f800283a 	ret

040154f8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 40154f8:	defff804 	addi	sp,sp,-32
 40154fc:	df000715 	stw	fp,28(sp)
 4015500:	df000704 	addi	fp,sp,28
 4015504:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 4015508:	e0bffb17 	ldw	r2,-20(fp)
 401550c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4015510:	e0bff917 	ldw	r2,-28(fp)
 4015514:	10800017 	ldw	r2,0(r2)
 4015518:	10800104 	addi	r2,r2,4
 401551c:	10800037 	ldwio	r2,0(r2)
 4015520:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4015524:	e0bffa17 	ldw	r2,-24(fp)
 4015528:	1081000c 	andi	r2,r2,1024
 401552c:	10000b26 	beq	r2,zero,401555c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4015530:	e0bff917 	ldw	r2,-28(fp)
 4015534:	10800017 	ldw	r2,0(r2)
 4015538:	10800104 	addi	r2,r2,4
 401553c:	1007883a 	mov	r3,r2
 4015540:	e0bff917 	ldw	r2,-28(fp)
 4015544:	10800817 	ldw	r2,32(r2)
 4015548:	10810014 	ori	r2,r2,1024
 401554c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 4015550:	e0bff917 	ldw	r2,-28(fp)
 4015554:	10000915 	stw	zero,36(r2)
 4015558:	00000a06 	br	4015584 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 401555c:	e0bff917 	ldw	r2,-28(fp)
 4015560:	10c00917 	ldw	r3,36(r2)
 4015564:	00a00034 	movhi	r2,32768
 4015568:	10bfff04 	addi	r2,r2,-4
 401556c:	10c00536 	bltu	r2,r3,4015584 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 4015570:	e0bff917 	ldw	r2,-28(fp)
 4015574:	10800917 	ldw	r2,36(r2)
 4015578:	10c00044 	addi	r3,r2,1
 401557c:	e0bff917 	ldw	r2,-28(fp)
 4015580:	10c00915 	stw	r3,36(r2)
 4015584:	d0a76817 	ldw	r2,-25184(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4015588:	e037883a 	mov	sp,fp
 401558c:	df000017 	ldw	fp,0(sp)
 4015590:	dec00104 	addi	sp,sp,4
 4015594:	f800283a 	ret

04015598 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4015598:	defffd04 	addi	sp,sp,-12
 401559c:	df000215 	stw	fp,8(sp)
 40155a0:	df000204 	addi	fp,sp,8
 40155a4:	e13ffe15 	stw	r4,-8(fp)
 40155a8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 40155ac:	00000506 	br	40155c4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 40155b0:	e0bfff17 	ldw	r2,-4(fp)
 40155b4:	1090000c 	andi	r2,r2,16384
 40155b8:	10000226 	beq	r2,zero,40155c4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 40155bc:	00bffd44 	movi	r2,-11
 40155c0:	00000b06 	br	40155f0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 40155c4:	e0bffe17 	ldw	r2,-8(fp)
 40155c8:	10c00d17 	ldw	r3,52(r2)
 40155cc:	e0bffe17 	ldw	r2,-8(fp)
 40155d0:	10800c17 	ldw	r2,48(r2)
 40155d4:	18800526 	beq	r3,r2,40155ec <altera_avalon_jtag_uart_close+0x54>
 40155d8:	e0bffe17 	ldw	r2,-8(fp)
 40155dc:	10c00917 	ldw	r3,36(r2)
 40155e0:	e0bffe17 	ldw	r2,-8(fp)
 40155e4:	10800117 	ldw	r2,4(r2)
 40155e8:	18bff136 	bltu	r3,r2,40155b0 <__alt_data_end+0xfc0155b0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 40155ec:	0005883a 	mov	r2,zero
}
 40155f0:	e037883a 	mov	sp,fp
 40155f4:	df000017 	ldw	fp,0(sp)
 40155f8:	dec00104 	addi	sp,sp,4
 40155fc:	f800283a 	ret

04015600 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4015600:	defffa04 	addi	sp,sp,-24
 4015604:	df000515 	stw	fp,20(sp)
 4015608:	df000504 	addi	fp,sp,20
 401560c:	e13ffd15 	stw	r4,-12(fp)
 4015610:	e17ffe15 	stw	r5,-8(fp)
 4015614:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 4015618:	00bff9c4 	movi	r2,-25
 401561c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 4015620:	e0bffe17 	ldw	r2,-8(fp)
 4015624:	10da8060 	cmpeqi	r3,r2,27137
 4015628:	1800031e 	bne	r3,zero,4015638 <altera_avalon_jtag_uart_ioctl+0x38>
 401562c:	109a80a0 	cmpeqi	r2,r2,27138
 4015630:	1000181e 	bne	r2,zero,4015694 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 4015634:	00002906 	br	40156dc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4015638:	e0bffd17 	ldw	r2,-12(fp)
 401563c:	10c00117 	ldw	r3,4(r2)
 4015640:	00a00034 	movhi	r2,32768
 4015644:	10bfffc4 	addi	r2,r2,-1
 4015648:	18802126 	beq	r3,r2,40156d0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 401564c:	e0bfff17 	ldw	r2,-4(fp)
 4015650:	10800017 	ldw	r2,0(r2)
 4015654:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4015658:	e0bffc17 	ldw	r2,-16(fp)
 401565c:	10800090 	cmplti	r2,r2,2
 4015660:	1000061e 	bne	r2,zero,401567c <altera_avalon_jtag_uart_ioctl+0x7c>
 4015664:	e0fffc17 	ldw	r3,-16(fp)
 4015668:	00a00034 	movhi	r2,32768
 401566c:	10bfffc4 	addi	r2,r2,-1
 4015670:	18800226 	beq	r3,r2,401567c <altera_avalon_jtag_uart_ioctl+0x7c>
 4015674:	e0bffc17 	ldw	r2,-16(fp)
 4015678:	00000206 	br	4015684 <altera_avalon_jtag_uart_ioctl+0x84>
 401567c:	00a00034 	movhi	r2,32768
 4015680:	10bfff84 	addi	r2,r2,-2
 4015684:	e0fffd17 	ldw	r3,-12(fp)
 4015688:	18800115 	stw	r2,4(r3)
      rc = 0;
 401568c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4015690:	00000f06 	br	40156d0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 4015694:	e0bffd17 	ldw	r2,-12(fp)
 4015698:	10c00117 	ldw	r3,4(r2)
 401569c:	00a00034 	movhi	r2,32768
 40156a0:	10bfffc4 	addi	r2,r2,-1
 40156a4:	18800c26 	beq	r3,r2,40156d8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 40156a8:	e0bffd17 	ldw	r2,-12(fp)
 40156ac:	10c00917 	ldw	r3,36(r2)
 40156b0:	e0bffd17 	ldw	r2,-12(fp)
 40156b4:	10800117 	ldw	r2,4(r2)
 40156b8:	1885803a 	cmpltu	r2,r3,r2
 40156bc:	10c03fcc 	andi	r3,r2,255
 40156c0:	e0bfff17 	ldw	r2,-4(fp)
 40156c4:	10c00015 	stw	r3,0(r2)
      rc = 0;
 40156c8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 40156cc:	00000206 	br	40156d8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 40156d0:	0001883a 	nop
 40156d4:	00000106 	br	40156dc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 40156d8:	0001883a 	nop

  default:
    break;
  }

  return rc;
 40156dc:	e0bffb17 	ldw	r2,-20(fp)
}
 40156e0:	e037883a 	mov	sp,fp
 40156e4:	df000017 	ldw	fp,0(sp)
 40156e8:	dec00104 	addi	sp,sp,4
 40156ec:	f800283a 	ret

040156f0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 40156f0:	defff304 	addi	sp,sp,-52
 40156f4:	dfc00c15 	stw	ra,48(sp)
 40156f8:	df000b15 	stw	fp,44(sp)
 40156fc:	df000b04 	addi	fp,sp,44
 4015700:	e13ffc15 	stw	r4,-16(fp)
 4015704:	e17ffd15 	stw	r5,-12(fp)
 4015708:	e1bffe15 	stw	r6,-8(fp)
 401570c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 4015710:	e0bffd17 	ldw	r2,-12(fp)
 4015714:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4015718:	00004706 	br	4015838 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 401571c:	e0bffc17 	ldw	r2,-16(fp)
 4015720:	10800a17 	ldw	r2,40(r2)
 4015724:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 4015728:	e0bffc17 	ldw	r2,-16(fp)
 401572c:	10800b17 	ldw	r2,44(r2)
 4015730:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 4015734:	e0fff717 	ldw	r3,-36(fp)
 4015738:	e0bff817 	ldw	r2,-32(fp)
 401573c:	18800536 	bltu	r3,r2,4015754 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4015740:	e0fff717 	ldw	r3,-36(fp)
 4015744:	e0bff817 	ldw	r2,-32(fp)
 4015748:	1885c83a 	sub	r2,r3,r2
 401574c:	e0bff615 	stw	r2,-40(fp)
 4015750:	00000406 	br	4015764 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4015754:	00c20004 	movi	r3,2048
 4015758:	e0bff817 	ldw	r2,-32(fp)
 401575c:	1885c83a 	sub	r2,r3,r2
 4015760:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4015764:	e0bff617 	ldw	r2,-40(fp)
 4015768:	10001e26 	beq	r2,zero,40157e4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 401576c:	e0fffe17 	ldw	r3,-8(fp)
 4015770:	e0bff617 	ldw	r2,-40(fp)
 4015774:	1880022e 	bgeu	r3,r2,4015780 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 4015778:	e0bffe17 	ldw	r2,-8(fp)
 401577c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4015780:	e0bffc17 	ldw	r2,-16(fp)
 4015784:	10c00e04 	addi	r3,r2,56
 4015788:	e0bff817 	ldw	r2,-32(fp)
 401578c:	1885883a 	add	r2,r3,r2
 4015790:	e1bff617 	ldw	r6,-40(fp)
 4015794:	100b883a 	mov	r5,r2
 4015798:	e13ff517 	ldw	r4,-44(fp)
 401579c:	4003ba40 	call	4003ba4 <memcpy>
      ptr   += n;
 40157a0:	e0fff517 	ldw	r3,-44(fp)
 40157a4:	e0bff617 	ldw	r2,-40(fp)
 40157a8:	1885883a 	add	r2,r3,r2
 40157ac:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 40157b0:	e0fffe17 	ldw	r3,-8(fp)
 40157b4:	e0bff617 	ldw	r2,-40(fp)
 40157b8:	1885c83a 	sub	r2,r3,r2
 40157bc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40157c0:	e0fff817 	ldw	r3,-32(fp)
 40157c4:	e0bff617 	ldw	r2,-40(fp)
 40157c8:	1885883a 	add	r2,r3,r2
 40157cc:	10c1ffcc 	andi	r3,r2,2047
 40157d0:	e0bffc17 	ldw	r2,-16(fp)
 40157d4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 40157d8:	e0bffe17 	ldw	r2,-8(fp)
 40157dc:	00bfcf16 	blt	zero,r2,401571c <__alt_data_end+0xfc01571c>
 40157e0:	00000106 	br	40157e8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 40157e4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 40157e8:	e0fff517 	ldw	r3,-44(fp)
 40157ec:	e0bffd17 	ldw	r2,-12(fp)
 40157f0:	1880141e 	bne	r3,r2,4015844 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 40157f4:	e0bfff17 	ldw	r2,-4(fp)
 40157f8:	1090000c 	andi	r2,r2,16384
 40157fc:	1000131e 	bne	r2,zero,401584c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4015800:	0001883a 	nop
 4015804:	e0bffc17 	ldw	r2,-16(fp)
 4015808:	10c00a17 	ldw	r3,40(r2)
 401580c:	e0bff717 	ldw	r2,-36(fp)
 4015810:	1880051e 	bne	r3,r2,4015828 <altera_avalon_jtag_uart_read+0x138>
 4015814:	e0bffc17 	ldw	r2,-16(fp)
 4015818:	10c00917 	ldw	r3,36(r2)
 401581c:	e0bffc17 	ldw	r2,-16(fp)
 4015820:	10800117 	ldw	r2,4(r2)
 4015824:	18bff736 	bltu	r3,r2,4015804 <__alt_data_end+0xfc015804>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4015828:	e0bffc17 	ldw	r2,-16(fp)
 401582c:	10c00a17 	ldw	r3,40(r2)
 4015830:	e0bff717 	ldw	r2,-36(fp)
 4015834:	18800726 	beq	r3,r2,4015854 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4015838:	e0bffe17 	ldw	r2,-8(fp)
 401583c:	00bfb716 	blt	zero,r2,401571c <__alt_data_end+0xfc01571c>
 4015840:	00000506 	br	4015858 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 4015844:	0001883a 	nop
 4015848:	00000306 	br	4015858 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 401584c:	0001883a 	nop
 4015850:	00000106 	br	4015858 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 4015854:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4015858:	e0fff517 	ldw	r3,-44(fp)
 401585c:	e0bffd17 	ldw	r2,-12(fp)
 4015860:	18801826 	beq	r3,r2,40158c4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4015864:	0005303a 	rdctl	r2,status
 4015868:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401586c:	e0fffb17 	ldw	r3,-20(fp)
 4015870:	00bfff84 	movi	r2,-2
 4015874:	1884703a 	and	r2,r3,r2
 4015878:	1001703a 	wrctl	status,r2
  
  return context;
 401587c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4015880:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4015884:	e0bffc17 	ldw	r2,-16(fp)
 4015888:	10800817 	ldw	r2,32(r2)
 401588c:	10c00054 	ori	r3,r2,1
 4015890:	e0bffc17 	ldw	r2,-16(fp)
 4015894:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4015898:	e0bffc17 	ldw	r2,-16(fp)
 401589c:	10800017 	ldw	r2,0(r2)
 40158a0:	10800104 	addi	r2,r2,4
 40158a4:	1007883a 	mov	r3,r2
 40158a8:	e0bffc17 	ldw	r2,-16(fp)
 40158ac:	10800817 	ldw	r2,32(r2)
 40158b0:	18800035 	stwio	r2,0(r3)
 40158b4:	e0bffa17 	ldw	r2,-24(fp)
 40158b8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40158bc:	e0bff917 	ldw	r2,-28(fp)
 40158c0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 40158c4:	e0fff517 	ldw	r3,-44(fp)
 40158c8:	e0bffd17 	ldw	r2,-12(fp)
 40158cc:	18800426 	beq	r3,r2,40158e0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 40158d0:	e0fff517 	ldw	r3,-44(fp)
 40158d4:	e0bffd17 	ldw	r2,-12(fp)
 40158d8:	1885c83a 	sub	r2,r3,r2
 40158dc:	00000606 	br	40158f8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 40158e0:	e0bfff17 	ldw	r2,-4(fp)
 40158e4:	1090000c 	andi	r2,r2,16384
 40158e8:	10000226 	beq	r2,zero,40158f4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 40158ec:	00bffd44 	movi	r2,-11
 40158f0:	00000106 	br	40158f8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 40158f4:	00bffec4 	movi	r2,-5
}
 40158f8:	e037883a 	mov	sp,fp
 40158fc:	dfc00117 	ldw	ra,4(sp)
 4015900:	df000017 	ldw	fp,0(sp)
 4015904:	dec00204 	addi	sp,sp,8
 4015908:	f800283a 	ret

0401590c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 401590c:	defff304 	addi	sp,sp,-52
 4015910:	dfc00c15 	stw	ra,48(sp)
 4015914:	df000b15 	stw	fp,44(sp)
 4015918:	df000b04 	addi	fp,sp,44
 401591c:	e13ffc15 	stw	r4,-16(fp)
 4015920:	e17ffd15 	stw	r5,-12(fp)
 4015924:	e1bffe15 	stw	r6,-8(fp)
 4015928:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 401592c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4015930:	e0bffd17 	ldw	r2,-12(fp)
 4015934:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4015938:	00003706 	br	4015a18 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 401593c:	e0bffc17 	ldw	r2,-16(fp)
 4015940:	10800c17 	ldw	r2,48(r2)
 4015944:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 4015948:	e0bffc17 	ldw	r2,-16(fp)
 401594c:	10800d17 	ldw	r2,52(r2)
 4015950:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 4015954:	e0fff917 	ldw	r3,-28(fp)
 4015958:	e0bff517 	ldw	r2,-44(fp)
 401595c:	1880062e 	bgeu	r3,r2,4015978 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4015960:	e0fff517 	ldw	r3,-44(fp)
 4015964:	e0bff917 	ldw	r2,-28(fp)
 4015968:	1885c83a 	sub	r2,r3,r2
 401596c:	10bfffc4 	addi	r2,r2,-1
 4015970:	e0bff615 	stw	r2,-40(fp)
 4015974:	00000b06 	br	40159a4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 4015978:	e0bff517 	ldw	r2,-44(fp)
 401597c:	10000526 	beq	r2,zero,4015994 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4015980:	00c20004 	movi	r3,2048
 4015984:	e0bff917 	ldw	r2,-28(fp)
 4015988:	1885c83a 	sub	r2,r3,r2
 401598c:	e0bff615 	stw	r2,-40(fp)
 4015990:	00000406 	br	40159a4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4015994:	00c1ffc4 	movi	r3,2047
 4015998:	e0bff917 	ldw	r2,-28(fp)
 401599c:	1885c83a 	sub	r2,r3,r2
 40159a0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 40159a4:	e0bff617 	ldw	r2,-40(fp)
 40159a8:	10001e26 	beq	r2,zero,4015a24 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 40159ac:	e0fffe17 	ldw	r3,-8(fp)
 40159b0:	e0bff617 	ldw	r2,-40(fp)
 40159b4:	1880022e 	bgeu	r3,r2,40159c0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 40159b8:	e0bffe17 	ldw	r2,-8(fp)
 40159bc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 40159c0:	e0bffc17 	ldw	r2,-16(fp)
 40159c4:	10c20e04 	addi	r3,r2,2104
 40159c8:	e0bff917 	ldw	r2,-28(fp)
 40159cc:	1885883a 	add	r2,r3,r2
 40159d0:	e1bff617 	ldw	r6,-40(fp)
 40159d4:	e17ffd17 	ldw	r5,-12(fp)
 40159d8:	1009883a 	mov	r4,r2
 40159dc:	4003ba40 	call	4003ba4 <memcpy>
      ptr   += n;
 40159e0:	e0fffd17 	ldw	r3,-12(fp)
 40159e4:	e0bff617 	ldw	r2,-40(fp)
 40159e8:	1885883a 	add	r2,r3,r2
 40159ec:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 40159f0:	e0fffe17 	ldw	r3,-8(fp)
 40159f4:	e0bff617 	ldw	r2,-40(fp)
 40159f8:	1885c83a 	sub	r2,r3,r2
 40159fc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4015a00:	e0fff917 	ldw	r3,-28(fp)
 4015a04:	e0bff617 	ldw	r2,-40(fp)
 4015a08:	1885883a 	add	r2,r3,r2
 4015a0c:	10c1ffcc 	andi	r3,r2,2047
 4015a10:	e0bffc17 	ldw	r2,-16(fp)
 4015a14:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4015a18:	e0bffe17 	ldw	r2,-8(fp)
 4015a1c:	00bfc716 	blt	zero,r2,401593c <__alt_data_end+0xfc01593c>
 4015a20:	00000106 	br	4015a28 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 4015a24:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4015a28:	0005303a 	rdctl	r2,status
 4015a2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4015a30:	e0fffb17 	ldw	r3,-20(fp)
 4015a34:	00bfff84 	movi	r2,-2
 4015a38:	1884703a 	and	r2,r3,r2
 4015a3c:	1001703a 	wrctl	status,r2
  
  return context;
 4015a40:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4015a44:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4015a48:	e0bffc17 	ldw	r2,-16(fp)
 4015a4c:	10800817 	ldw	r2,32(r2)
 4015a50:	10c00094 	ori	r3,r2,2
 4015a54:	e0bffc17 	ldw	r2,-16(fp)
 4015a58:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4015a5c:	e0bffc17 	ldw	r2,-16(fp)
 4015a60:	10800017 	ldw	r2,0(r2)
 4015a64:	10800104 	addi	r2,r2,4
 4015a68:	1007883a 	mov	r3,r2
 4015a6c:	e0bffc17 	ldw	r2,-16(fp)
 4015a70:	10800817 	ldw	r2,32(r2)
 4015a74:	18800035 	stwio	r2,0(r3)
 4015a78:	e0bffa17 	ldw	r2,-24(fp)
 4015a7c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4015a80:	e0bff817 	ldw	r2,-32(fp)
 4015a84:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4015a88:	e0bffe17 	ldw	r2,-8(fp)
 4015a8c:	0080100e 	bge	zero,r2,4015ad0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 4015a90:	e0bfff17 	ldw	r2,-4(fp)
 4015a94:	1090000c 	andi	r2,r2,16384
 4015a98:	1000101e 	bne	r2,zero,4015adc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 4015a9c:	0001883a 	nop
 4015aa0:	e0bffc17 	ldw	r2,-16(fp)
 4015aa4:	10c00d17 	ldw	r3,52(r2)
 4015aa8:	e0bff517 	ldw	r2,-44(fp)
 4015aac:	1880051e 	bne	r3,r2,4015ac4 <altera_avalon_jtag_uart_write+0x1b8>
 4015ab0:	e0bffc17 	ldw	r2,-16(fp)
 4015ab4:	10c00917 	ldw	r3,36(r2)
 4015ab8:	e0bffc17 	ldw	r2,-16(fp)
 4015abc:	10800117 	ldw	r2,4(r2)
 4015ac0:	18bff736 	bltu	r3,r2,4015aa0 <__alt_data_end+0xfc015aa0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 4015ac4:	e0bffc17 	ldw	r2,-16(fp)
 4015ac8:	10800917 	ldw	r2,36(r2)
 4015acc:	1000051e 	bne	r2,zero,4015ae4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 4015ad0:	e0bffe17 	ldw	r2,-8(fp)
 4015ad4:	00bfd016 	blt	zero,r2,4015a18 <__alt_data_end+0xfc015a18>
 4015ad8:	00000306 	br	4015ae8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 4015adc:	0001883a 	nop
 4015ae0:	00000106 	br	4015ae8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 4015ae4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4015ae8:	e0fffd17 	ldw	r3,-12(fp)
 4015aec:	e0bff717 	ldw	r2,-36(fp)
 4015af0:	18800426 	beq	r3,r2,4015b04 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 4015af4:	e0fffd17 	ldw	r3,-12(fp)
 4015af8:	e0bff717 	ldw	r2,-36(fp)
 4015afc:	1885c83a 	sub	r2,r3,r2
 4015b00:	00000606 	br	4015b1c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 4015b04:	e0bfff17 	ldw	r2,-4(fp)
 4015b08:	1090000c 	andi	r2,r2,16384
 4015b0c:	10000226 	beq	r2,zero,4015b18 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 4015b10:	00bffd44 	movi	r2,-11
 4015b14:	00000106 	br	4015b1c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 4015b18:	00bffec4 	movi	r2,-5
}
 4015b1c:	e037883a 	mov	sp,fp
 4015b20:	dfc00117 	ldw	ra,4(sp)
 4015b24:	df000017 	ldw	fp,0(sp)
 4015b28:	dec00204 	addi	sp,sp,8
 4015b2c:	f800283a 	ret

04015b30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4015b30:	defffe04 	addi	sp,sp,-8
 4015b34:	dfc00115 	stw	ra,4(sp)
 4015b38:	df000015 	stw	fp,0(sp)
 4015b3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4015b40:	d0a00c17 	ldw	r2,-32720(gp)
 4015b44:	10000326 	beq	r2,zero,4015b54 <alt_get_errno+0x24>
 4015b48:	d0a00c17 	ldw	r2,-32720(gp)
 4015b4c:	103ee83a 	callr	r2
 4015b50:	00000106 	br	4015b58 <alt_get_errno+0x28>
 4015b54:	d0a75d04 	addi	r2,gp,-25228
}
 4015b58:	e037883a 	mov	sp,fp
 4015b5c:	dfc00117 	ldw	ra,4(sp)
 4015b60:	df000017 	ldw	fp,0(sp)
 4015b64:	dec00204 	addi	sp,sp,8
 4015b68:	f800283a 	ret

04015b6c <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
 4015b6c:	defffc04 	addi	sp,sp,-16
 4015b70:	df000315 	stw	fp,12(sp)
 4015b74:	df000304 	addi	fp,sp,12
 4015b78:	e13ffe15 	stw	r4,-8(fp)
 4015b7c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
 4015b80:	e0bffe17 	ldw	r2,-8(fp)
 4015b84:	10800317 	ldw	r2,12(r2)
 4015b88:	10800037 	ldwio	r2,0(r2)
 4015b8c:	1080040c 	andi	r2,r2,16
 4015b90:	10000226 	beq	r2,zero,4015b9c <alt_avalon_sgdma_do_async_transfer+0x30>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
 4015b94:	00bffc04 	movi	r2,-16
 4015b98:	00003906 	br	4015c80 <alt_avalon_sgdma_do_async_transfer+0x114>
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 4015b9c:	e0bffe17 	ldw	r2,-8(fp)
 4015ba0:	10800317 	ldw	r2,12(r2)
 4015ba4:	10800404 	addi	r2,r2,16
 4015ba8:	e0fffe17 	ldw	r3,-8(fp)
 4015bac:	18c00317 	ldw	r3,12(r3)
 4015bb0:	18c00404 	addi	r3,r3,16
 4015bb4:	19000037 	ldwio	r4,0(r3)
 4015bb8:	00fff7c4 	movi	r3,-33
 4015bbc:	20c6703a 	and	r3,r4,r3
 4015bc0:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 4015bc4:	e0bffe17 	ldw	r2,-8(fp)
 4015bc8:	10800317 	ldw	r2,12(r2)
 4015bcc:	00c03fc4 	movi	r3,255
 4015bd0:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
 4015bd4:	e0bffe17 	ldw	r2,-8(fp)
 4015bd8:	10800317 	ldw	r2,12(r2)
 4015bdc:	10800804 	addi	r2,r2,32
 4015be0:	e0ffff17 	ldw	r3,-4(fp)
 4015be4:	10c00035 	stwio	r3,0(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
 4015be8:	e0bffe17 	ldw	r2,-8(fp)
 4015bec:	10800917 	ldw	r2,36(r2)
 4015bf0:	10001126 	beq	r2,zero,4015c38 <alt_avalon_sgdma_do_async_transfer+0xcc>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 4015bf4:	e0bffe17 	ldw	r2,-8(fp)
 4015bf8:	10800317 	ldw	r2,12(r2)
 4015bfc:	10800404 	addi	r2,r2,16
 4015c00:	10800037 	ldwio	r2,0(r2)
 4015c04:	e0bffd15 	stw	r2,-12(fp)

    control |= (dev->chain_control                          |
 4015c08:	e0bffe17 	ldw	r2,-8(fp)
 4015c0c:	10c00b17 	ldw	r3,44(r2)
 4015c10:	e0bffd17 	ldw	r2,-12(fp)
 4015c14:	1884b03a 	or	r2,r3,r2
 4015c18:	10801814 	ori	r2,r2,96
 4015c1c:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 4015c20:	e0bffe17 	ldw	r2,-8(fp)
 4015c24:	10800317 	ldw	r2,12(r2)
 4015c28:	10800404 	addi	r2,r2,16
 4015c2c:	e0fffd17 	ldw	r3,-12(fp)
 4015c30:	10c00035 	stwio	r3,0(r2)
 4015c34:	00001106 	br	4015c7c <alt_avalon_sgdma_do_async_transfer+0x110>
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 4015c38:	e0bffe17 	ldw	r2,-8(fp)
 4015c3c:	10800317 	ldw	r2,12(r2)
 4015c40:	10800404 	addi	r2,r2,16
 4015c44:	10800037 	ldwio	r2,0(r2)
 4015c48:	e0bffd15 	stw	r2,-12(fp)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
 4015c4c:	e0bffd17 	ldw	r2,-12(fp)
 4015c50:	10801814 	ori	r2,r2,96
 4015c54:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;
 4015c58:	e0fffd17 	ldw	r3,-12(fp)
 4015c5c:	00bffbc4 	movi	r2,-17
 4015c60:	1884703a 	and	r2,r3,r2
 4015c64:	e0bffd15 	stw	r2,-12(fp)

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 4015c68:	e0bffe17 	ldw	r2,-8(fp)
 4015c6c:	10800317 	ldw	r2,12(r2)
 4015c70:	10800404 	addi	r2,r2,16
 4015c74:	e0fffd17 	ldw	r3,-12(fp)
 4015c78:	10c00035 	stwio	r3,0(r2)

  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
 4015c7c:	0005883a 	mov	r2,zero
}
 4015c80:	e037883a 	mov	sp,fp
 4015c84:	df000017 	ldw	fp,0(sp)
 4015c88:	dec00104 	addi	sp,sp,4
 4015c8c:	f800283a 	ret

04015c90 <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
 4015c90:	defffc04 	addi	sp,sp,-16
 4015c94:	df000315 	stw	fp,12(sp)
 4015c98:	df000304 	addi	fp,sp,12
 4015c9c:	e13ffe15 	stw	r4,-8(fp)
 4015ca0:	e17fff15 	stw	r5,-4(fp)
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
 4015ca4:	0001883a 	nop
 4015ca8:	e0bffe17 	ldw	r2,-8(fp)
 4015cac:	10800317 	ldw	r2,12(r2)
 4015cb0:	10800037 	ldwio	r2,0(r2)
 4015cb4:	1080040c 	andi	r2,r2,16
 4015cb8:	103ffb1e 	bne	r2,zero,4015ca8 <__alt_data_end+0xfc015ca8>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 4015cbc:	e0bffe17 	ldw	r2,-8(fp)
 4015cc0:	10800317 	ldw	r2,12(r2)
 4015cc4:	10800404 	addi	r2,r2,16
 4015cc8:	e0fffe17 	ldw	r3,-8(fp)
 4015ccc:	18c00317 	ldw	r3,12(r3)
 4015cd0:	18c00404 	addi	r3,r3,16
 4015cd4:	19000037 	ldwio	r4,0(r3)
 4015cd8:	00fff7c4 	movi	r3,-33
 4015cdc:	20c6703a 	and	r3,r4,r3
 4015ce0:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 4015ce4:	e0bffe17 	ldw	r2,-8(fp)
 4015ce8:	10800317 	ldw	r2,12(r2)
 4015cec:	00c03fc4 	movi	r3,255
 4015cf0:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
 4015cf4:	e0bffe17 	ldw	r2,-8(fp)
 4015cf8:	10800317 	ldw	r2,12(r2)
 4015cfc:	10800804 	addi	r2,r2,32
 4015d00:	e0ffff17 	ldw	r3,-4(fp)
 4015d04:	10c00035 	stwio	r3,0(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 4015d08:	e0bffe17 	ldw	r2,-8(fp)
 4015d0c:	10800317 	ldw	r2,12(r2)
 4015d10:	10800404 	addi	r2,r2,16
 4015d14:	e0fffe17 	ldw	r3,-8(fp)
 4015d18:	18c00317 	ldw	r3,12(r3)
 4015d1c:	18c00404 	addi	r3,r3,16
 4015d20:	18c00037 	ldwio	r3,0(r3)
 4015d24:	18c01814 	ori	r3,r3,96
 4015d28:	10c00035 	stwio	r3,0(r2)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
 4015d2c:	0001883a 	nop
 4015d30:	e0bffe17 	ldw	r2,-8(fp)
 4015d34:	10800317 	ldw	r2,12(r2)
 4015d38:	10800037 	ldwio	r2,0(r2)
 4015d3c:	1080040c 	andi	r2,r2,16
 4015d40:	103ffb1e 	bne	r2,zero,4015d30 <__alt_data_end+0xfc015d30>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
 4015d44:	e0bffe17 	ldw	r2,-8(fp)
 4015d48:	10800317 	ldw	r2,12(r2)
 4015d4c:	10800404 	addi	r2,r2,16
 4015d50:	e0fffe17 	ldw	r3,-8(fp)
 4015d54:	18c00317 	ldw	r3,12(r3)
 4015d58:	18c00404 	addi	r3,r3,16
 4015d5c:	19000037 	ldwio	r4,0(r3)
 4015d60:	00fff7c4 	movi	r3,-33
 4015d64:	20c6703a 	and	r3,r4,r3
 4015d68:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
 4015d6c:	e0bffe17 	ldw	r2,-8(fp)
 4015d70:	10800317 	ldw	r2,12(r2)
 4015d74:	10800037 	ldwio	r2,0(r2)
 4015d78:	e0bffd05 	stb	r2,-12(fp)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 4015d7c:	e0bffe17 	ldw	r2,-8(fp)
 4015d80:	10800317 	ldw	r2,12(r2)
 4015d84:	00c03fc4 	movi	r3,255
 4015d88:	10c00035 	stwio	r3,0(r2)

  return status;
 4015d8c:	e0bffd03 	ldbu	r2,-12(fp)
}
 4015d90:	e037883a 	mov	sp,fp
 4015d94:	df000017 	ldw	fp,0(sp)
 4015d98:	dec00104 	addi	sp,sp,4
 4015d9c:	f800283a 	ret

04015da0 <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
 4015da0:	defff404 	addi	sp,sp,-48
 4015da4:	dfc00b15 	stw	ra,44(sp)
 4015da8:	df000a15 	stw	fp,40(sp)
 4015dac:	df000a04 	addi	fp,sp,40
 4015db0:	e13ffb15 	stw	r4,-20(fp)
 4015db4:	e17ffc15 	stw	r5,-16(fp)
 4015db8:	e1bffd15 	stw	r6,-12(fp)
 4015dbc:	e1fffe15 	stw	r7,-8(fp)
 4015dc0:	e0800217 	ldw	r2,8(fp)
 4015dc4:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
 4015dc8:	e0bfff0b 	ldhu	r2,-4(fp)
 4015dcc:	d8000415 	stw	zero,16(sp)
 4015dd0:	d8000315 	stw	zero,12(sp)
 4015dd4:	e0c00417 	ldw	r3,16(fp)
 4015dd8:	d8c00215 	stw	r3,8(sp)
 4015ddc:	e0c00317 	ldw	r3,12(fp)
 4015de0:	d8c00115 	stw	r3,4(sp)
 4015de4:	d8800015 	stw	r2,0(sp)
 4015de8:	e1fffe17 	ldw	r7,-8(fp)
 4015dec:	e1bffd17 	ldw	r6,-12(fp)
 4015df0:	e17ffc17 	ldw	r5,-16(fp)
 4015df4:	e13ffb17 	ldw	r4,-20(fp)
 4015df8:	4015e140 	call	4015e14 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
 4015dfc:	0001883a 	nop
 4015e00:	e037883a 	mov	sp,fp
 4015e04:	dfc00117 	ldw	ra,4(sp)
 4015e08:	df000017 	ldw	fp,0(sp)
 4015e0c:	dec00204 	addi	sp,sp,8
 4015e10:	f800283a 	ret

04015e14 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
 4015e14:	defff204 	addi	sp,sp,-56
 4015e18:	dfc00d15 	stw	ra,52(sp)
 4015e1c:	df000c15 	stw	fp,48(sp)
 4015e20:	df000c04 	addi	fp,sp,48
 4015e24:	e13ffb15 	stw	r4,-20(fp)
 4015e28:	e17ffc15 	stw	r5,-16(fp)
 4015e2c:	e1bffd15 	stw	r6,-12(fp)
 4015e30:	e1fffe15 	stw	r7,-8(fp)
 4015e34:	e0800217 	ldw	r2,8(fp)
 4015e38:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
 4015e3c:	e0bfff0b 	ldhu	r2,-4(fp)
 4015e40:	d8000615 	stw	zero,24(sp)
 4015e44:	e0c00617 	ldw	r3,24(fp)
 4015e48:	d8c00515 	stw	r3,20(sp)
 4015e4c:	e0c00517 	ldw	r3,20(fp)
 4015e50:	d8c00415 	stw	r3,16(sp)
 4015e54:	e0c00417 	ldw	r3,16(fp)
 4015e58:	d8c00315 	stw	r3,12(sp)
 4015e5c:	e0c00317 	ldw	r3,12(fp)
 4015e60:	d8c00215 	stw	r3,8(sp)
 4015e64:	d8000115 	stw	zero,4(sp)
 4015e68:	d8800015 	stw	r2,0(sp)
 4015e6c:	e1fffe17 	ldw	r7,-8(fp)
 4015e70:	e1bffd17 	ldw	r6,-12(fp)
 4015e74:	e17ffc17 	ldw	r5,-16(fp)
 4015e78:	e13ffb17 	ldw	r4,-20(fp)
 4015e7c:	40163a80 	call	40163a8 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
 4015e80:	0001883a 	nop
 4015e84:	e037883a 	mov	sp,fp
 4015e88:	dfc00117 	ldw	ra,4(sp)
 4015e8c:	df000017 	ldw	fp,0(sp)
 4015e90:	dec00204 	addi	sp,sp,8
 4015e94:	f800283a 	ret

04015e98 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
 4015e98:	defff804 	addi	sp,sp,-32
 4015e9c:	dfc00715 	stw	ra,28(sp)
 4015ea0:	df000615 	stw	fp,24(sp)
 4015ea4:	df000604 	addi	fp,sp,24
 4015ea8:	e13ffc15 	stw	r4,-16(fp)
 4015eac:	e17ffd15 	stw	r5,-12(fp)
 4015eb0:	e1bffe15 	stw	r6,-8(fp)
 4015eb4:	3805883a 	mov	r2,r7
 4015eb8:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
 4015ebc:	e0ffff0b 	ldhu	r3,-4(fp)
 4015ec0:	d8000115 	stw	zero,4(sp)
 4015ec4:	e0800217 	ldw	r2,8(fp)
 4015ec8:	d8800015 	stw	r2,0(sp)
 4015ecc:	180f883a 	mov	r7,r3
 4015ed0:	e1bffe17 	ldw	r6,-8(fp)
 4015ed4:	e17ffd17 	ldw	r5,-12(fp)
 4015ed8:	e13ffc17 	ldw	r4,-16(fp)
 4015edc:	4015ef80 	call	4015ef8 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
 4015ee0:	0001883a 	nop
 4015ee4:	e037883a 	mov	sp,fp
 4015ee8:	dfc00117 	ldw	ra,4(sp)
 4015eec:	df000017 	ldw	fp,0(sp)
 4015ef0:	dec00204 	addi	sp,sp,8
 4015ef4:	f800283a 	ret

04015ef8 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
 4015ef8:	defff304 	addi	sp,sp,-52
 4015efc:	dfc00c15 	stw	ra,48(sp)
 4015f00:	df000b15 	stw	fp,44(sp)
 4015f04:	df000b04 	addi	fp,sp,44
 4015f08:	e13ffc15 	stw	r4,-16(fp)
 4015f0c:	e17ffd15 	stw	r5,-12(fp)
 4015f10:	e1bffe15 	stw	r6,-8(fp)
 4015f14:	3805883a 	mov	r2,r7
 4015f18:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
 4015f1c:	e0bfff0b 	ldhu	r2,-4(fp)
 4015f20:	d8000615 	stw	zero,24(sp)
 4015f24:	e0c00317 	ldw	r3,12(fp)
 4015f28:	d8c00515 	stw	r3,20(sp)
 4015f2c:	d8000415 	stw	zero,16(sp)
 4015f30:	e0c00217 	ldw	r3,8(fp)
 4015f34:	d8c00315 	stw	r3,12(sp)
 4015f38:	d8000215 	stw	zero,8(sp)
 4015f3c:	d8000115 	stw	zero,4(sp)
 4015f40:	d8800015 	stw	r2,0(sp)
 4015f44:	e1fffe17 	ldw	r7,-8(fp)
 4015f48:	000d883a 	mov	r6,zero
 4015f4c:	e17ffd17 	ldw	r5,-12(fp)
 4015f50:	e13ffc17 	ldw	r4,-16(fp)
 4015f54:	40163a80 	call	40163a8 <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
 4015f58:	0001883a 	nop
 4015f5c:	e037883a 	mov	sp,fp
 4015f60:	dfc00117 	ldw	ra,4(sp)
 4015f64:	df000017 	ldw	fp,0(sp)
 4015f68:	dec00204 	addi	sp,sp,8
 4015f6c:	f800283a 	ret

04015f70 <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
 4015f70:	defff404 	addi	sp,sp,-48
 4015f74:	dfc00b15 	stw	ra,44(sp)
 4015f78:	df000a15 	stw	fp,40(sp)
 4015f7c:	df000a04 	addi	fp,sp,40
 4015f80:	e13ffb15 	stw	r4,-20(fp)
 4015f84:	e17ffc15 	stw	r5,-16(fp)
 4015f88:	e1bffd15 	stw	r6,-12(fp)
 4015f8c:	3807883a 	mov	r3,r7
 4015f90:	e0800517 	ldw	r2,20(fp)
 4015f94:	e0fffe0d 	sth	r3,-8(fp)
 4015f98:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
 4015f9c:	e0fffe0b 	ldhu	r3,-8(fp)
 4015fa0:	e0bfff03 	ldbu	r2,-4(fp)
 4015fa4:	d8800415 	stw	r2,16(sp)
 4015fa8:	d8000315 	stw	zero,12(sp)
 4015fac:	e0800417 	ldw	r2,16(fp)
 4015fb0:	d8800215 	stw	r2,8(sp)
 4015fb4:	e0800317 	ldw	r2,12(fp)
 4015fb8:	d8800115 	stw	r2,4(sp)
 4015fbc:	e0800217 	ldw	r2,8(fp)
 4015fc0:	d8800015 	stw	r2,0(sp)
 4015fc4:	180f883a 	mov	r7,r3
 4015fc8:	e1bffd17 	ldw	r6,-12(fp)
 4015fcc:	e17ffc17 	ldw	r5,-16(fp)
 4015fd0:	e13ffb17 	ldw	r4,-20(fp)
 4015fd4:	4015ff00 	call	4015ff0 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
 4015fd8:	0001883a 	nop
 4015fdc:	e037883a 	mov	sp,fp
 4015fe0:	dfc00117 	ldw	ra,4(sp)
 4015fe4:	df000017 	ldw	fp,0(sp)
 4015fe8:	dec00204 	addi	sp,sp,8
 4015fec:	f800283a 	ret

04015ff0 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
 4015ff0:	defff204 	addi	sp,sp,-56
 4015ff4:	dfc00d15 	stw	ra,52(sp)
 4015ff8:	df000c15 	stw	fp,48(sp)
 4015ffc:	df000c04 	addi	fp,sp,48
 4016000:	e13ffb15 	stw	r4,-20(fp)
 4016004:	e17ffc15 	stw	r5,-16(fp)
 4016008:	e1bffd15 	stw	r6,-12(fp)
 401600c:	3807883a 	mov	r3,r7
 4016010:	e0800617 	ldw	r2,24(fp)
 4016014:	e0fffe0d 	sth	r3,-8(fp)
 4016018:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
 401601c:	e0bffe0b 	ldhu	r2,-8(fp)
 4016020:	e0ffff03 	ldbu	r3,-4(fp)
 4016024:	d8c00615 	stw	r3,24(sp)
 4016028:	d8000515 	stw	zero,20(sp)
 401602c:	e0c00517 	ldw	r3,20(fp)
 4016030:	d8c00415 	stw	r3,16(sp)
 4016034:	e0c00317 	ldw	r3,12(fp)
 4016038:	d8c00315 	stw	r3,12(sp)
 401603c:	e0c00217 	ldw	r3,8(fp)
 4016040:	d8c00215 	stw	r3,8(sp)
 4016044:	e0c00417 	ldw	r3,16(fp)
 4016048:	d8c00115 	stw	r3,4(sp)
 401604c:	d8800015 	stw	r2,0(sp)
 4016050:	000f883a 	mov	r7,zero
 4016054:	e1bffd17 	ldw	r6,-12(fp)
 4016058:	e17ffc17 	ldw	r5,-16(fp)
 401605c:	e13ffb17 	ldw	r4,-20(fp)
 4016060:	40163a80 	call	40163a8 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
 4016064:	0001883a 	nop
 4016068:	e037883a 	mov	sp,fp
 401606c:	dfc00117 	ldw	ra,4(sp)
 4016070:	df000017 	ldw	fp,0(sp)
 4016074:	dec00204 	addi	sp,sp,8
 4016078:	f800283a 	ret

0401607c <alt_avalon_sgdma_register_callback>:
void alt_avalon_sgdma_register_callback(
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
 401607c:	defffb04 	addi	sp,sp,-20
 4016080:	df000415 	stw	fp,16(sp)
 4016084:	df000404 	addi	fp,sp,16
 4016088:	e13ffc15 	stw	r4,-16(fp)
 401608c:	e17ffd15 	stw	r5,-12(fp)
 4016090:	e1bffe15 	stw	r6,-8(fp)
 4016094:	e1ffff15 	stw	r7,-4(fp)
  dev->callback         = callback;
 4016098:	e0bffc17 	ldw	r2,-16(fp)
 401609c:	e0fffd17 	ldw	r3,-12(fp)
 40160a0:	10c00915 	stw	r3,36(r2)
  dev->callback_context = context;
 40160a4:	e0bffc17 	ldw	r2,-16(fp)
 40160a8:	e0ffff17 	ldw	r3,-4(fp)
 40160ac:	10c00a15 	stw	r3,40(r2)
  dev->chain_control    = chain_control;
 40160b0:	e0bffc17 	ldw	r2,-16(fp)
 40160b4:	e0fffe17 	ldw	r3,-8(fp)
 40160b8:	10c00b15 	stw	r3,44(r2)
}
 40160bc:	0001883a 	nop
 40160c0:	e037883a 	mov	sp,fp
 40160c4:	df000017 	ldw	fp,0(sp)
 40160c8:	dec00104 	addi	sp,sp,4
 40160cc:	f800283a 	ret

040160d0 <alt_avalon_sgdma_start>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct.
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
 40160d0:	defffd04 	addi	sp,sp,-12
 40160d4:	df000215 	stw	fp,8(sp)
 40160d8:	df000204 	addi	fp,sp,8
 40160dc:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 40160e0:	e0bfff17 	ldw	r2,-4(fp)
 40160e4:	10800317 	ldw	r2,12(r2)
 40160e8:	10800404 	addi	r2,r2,16
 40160ec:	10800037 	ldwio	r2,0(r2)
 40160f0:	e0bffe15 	stw	r2,-8(fp)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
 40160f4:	e0bffe17 	ldw	r2,-8(fp)
 40160f8:	10800814 	ori	r2,r2,32
 40160fc:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 4016100:	e0bfff17 	ldw	r2,-4(fp)
 4016104:	10800317 	ldw	r2,12(r2)
 4016108:	10800404 	addi	r2,r2,16
 401610c:	e0fffe17 	ldw	r3,-8(fp)
 4016110:	10c00035 	stwio	r3,0(r2)
}
 4016114:	0001883a 	nop
 4016118:	e037883a 	mov	sp,fp
 401611c:	df000017 	ldw	fp,0(sp)
 4016120:	dec00104 	addi	sp,sp,4
 4016124:	f800283a 	ret

04016128 <alt_avalon_sgdma_stop>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
 4016128:	defffd04 	addi	sp,sp,-12
 401612c:	df000215 	stw	fp,8(sp)
 4016130:	df000204 	addi	fp,sp,8
 4016134:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 4016138:	e0bfff17 	ldw	r2,-4(fp)
 401613c:	10800317 	ldw	r2,12(r2)
 4016140:	10800404 	addi	r2,r2,16
 4016144:	10800037 	ldwio	r2,0(r2)
 4016148:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
 401614c:	e0fffe17 	ldw	r3,-8(fp)
 4016150:	00bff7c4 	movi	r2,-33
 4016154:	1884703a 	and	r2,r3,r2
 4016158:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 401615c:	e0bfff17 	ldw	r2,-4(fp)
 4016160:	10800317 	ldw	r2,12(r2)
 4016164:	10800404 	addi	r2,r2,16
 4016168:	e0fffe17 	ldw	r3,-8(fp)
 401616c:	10c00035 	stwio	r3,0(r2)
}
 4016170:	0001883a 	nop
 4016174:	e037883a 	mov	sp,fp
 4016178:	df000017 	ldw	fp,0(sp)
 401617c:	dec00104 	addi	sp,sp,4
 4016180:	f800283a 	ret

04016184 <alt_avalon_sgdma_check_descriptor_status>:
 * - 0 if the descriptor is error-free, not "owned by hardware", or
 *   a previously requested transfer has appeared to have completed
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
 4016184:	defffe04 	addi	sp,sp,-8
 4016188:	df000115 	stw	fp,4(sp)
 401618c:	df000104 	addi	fp,sp,4
 4016190:	e13fff15 	stw	r4,-4(fp)
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
 4016194:	e0bfff17 	ldw	r2,-4(fp)
 4016198:	10800784 	addi	r2,r2,30
 401619c:	10800023 	ldbuio	r2,0(r2)
 40161a0:	10803fcc 	andi	r2,r2,255
 40161a4:	10801fcc 	andi	r2,r2,127
 40161a8:	10000226 	beq	r2,zero,40161b4 <alt_avalon_sgdma_check_descriptor_status+0x30>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
 40161ac:	00bffec4 	movi	r2,-5
 40161b0:	00000906 	br	40161d8 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

  if( IORD_8DIRECT(&desc->control, 0) &
 40161b4:	e0bfff17 	ldw	r2,-4(fp)
 40161b8:	108007c4 	addi	r2,r2,31
 40161bc:	10800023 	ldbuio	r2,0(r2)
 40161c0:	10803fcc 	andi	r2,r2,255
 40161c4:	1080200c 	andi	r2,r2,128
 40161c8:	10000226 	beq	r2,zero,40161d4 <alt_avalon_sgdma_check_descriptor_status+0x50>
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
 40161cc:	00bfe244 	movi	r2,-119
 40161d0:	00000106 	br	40161d8 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

    return 0;
 40161d4:	0005883a 	mov	r2,zero
}
 40161d8:	e037883a 	mov	sp,fp
 40161dc:	df000017 	ldw	fp,0(sp)
 40161e0:	dec00104 	addi	sp,sp,4
 40161e4:	f800283a 	ret

040161e8 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
 40161e8:	defffc04 	addi	sp,sp,-16
 40161ec:	dfc00315 	stw	ra,12(sp)
 40161f0:	df000215 	stw	fp,8(sp)
 40161f4:	df000204 	addi	fp,sp,8
 40161f8:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
 40161fc:	d1600e04 	addi	r5,gp,-32712
 4016200:	e13fff17 	ldw	r4,-4(fp)
 4016204:	401703c0 	call	401703c <alt_find_dev>
 4016208:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev) {
 401620c:	e0bffe17 	ldw	r2,-8(fp)
 4016210:	1000041e 	bne	r2,zero,4016224 <alt_avalon_sgdma_open+0x3c>
    ALT_ERRNO = ENODEV;
 4016214:	4015b300 	call	4015b30 <alt_get_errno>
 4016218:	1007883a 	mov	r3,r2
 401621c:	008004c4 	movi	r2,19
 4016220:	18800015 	stw	r2,0(r3)
  }

  return dev;
 4016224:	e0bffe17 	ldw	r2,-8(fp)
}
 4016228:	e037883a 	mov	sp,fp
 401622c:	dfc00117 	ldw	ra,4(sp)
 4016230:	df000017 	ldw	fp,0(sp)
 4016234:	dec00204 	addi	sp,sp,8
 4016238:	f800283a 	ret

0401623c <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
 401623c:	defff104 	addi	sp,sp,-60
 4016240:	dfc00e15 	stw	ra,56(sp)
 4016244:	df000d15 	stw	fp,52(sp)
 4016248:	df000d04 	addi	fp,sp,52
 401624c:	e13ffa15 	stw	r4,-24(fp)
 4016250:	e17ffb15 	stw	r5,-20(fp)
 4016254:	e1bffc15 	stw	r6,-16(fp)
 4016258:	e1fffd15 	stw	r7,-12(fp)
 401625c:	e0c00217 	ldw	r3,8(fp)
 4016260:	e0800617 	ldw	r2,24(fp)
 4016264:	e0fffe0d 	sth	r3,-8(fp)
 4016268:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
 401626c:	e0bffe0b 	ldhu	r2,-8(fp)
 4016270:	e0ffff03 	ldbu	r3,-4(fp)
 4016274:	d8c00615 	stw	r3,24(sp)
 4016278:	d8000515 	stw	zero,20(sp)
 401627c:	d8000415 	stw	zero,16(sp)
 4016280:	e0c00517 	ldw	r3,20(fp)
 4016284:	d8c00315 	stw	r3,12(sp)
 4016288:	e0c00417 	ldw	r3,16(fp)
 401628c:	d8c00215 	stw	r3,8(sp)
 4016290:	e0c00317 	ldw	r3,12(fp)
 4016294:	d8c00115 	stw	r3,4(sp)
 4016298:	d8800015 	stw	r2,0(sp)
 401629c:	e1fffd17 	ldw	r7,-12(fp)
 40162a0:	e1bffc17 	ldw	r6,-16(fp)
 40162a4:	e17ffb17 	ldw	r5,-20(fp)
 40162a8:	e13ffa17 	ldw	r4,-24(fp)
 40162ac:	40163a80 	call	40163a8 <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
 40162b0:	0001883a 	nop
 40162b4:	e037883a 	mov	sp,fp
 40162b8:	dfc00117 	ldw	ra,4(sp)
 40162bc:	df000017 	ldw	fp,0(sp)
 40162c0:	dec00204 	addi	sp,sp,8
 40162c4:	f800283a 	ret

040162c8 <alt_avalon_sgdma_enable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
 40162c8:	defffc04 	addi	sp,sp,-16
 40162cc:	df000315 	stw	fp,12(sp)
 40162d0:	df000304 	addi	fp,sp,12
 40162d4:	e13ffe15 	stw	r4,-8(fp)
 40162d8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 40162dc:	e0bffe17 	ldw	r2,-8(fp)
 40162e0:	10800317 	ldw	r2,12(r2)
 40162e4:	10800404 	addi	r2,r2,16
 40162e8:	10800037 	ldwio	r2,0(r2)
 40162ec:	e0bffd15 	stw	r2,-12(fp)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
 40162f0:	e0fffd17 	ldw	r3,-12(fp)
 40162f4:	00a00434 	movhi	r2,32784
 40162f8:	10bfffc4 	addi	r2,r2,-1
 40162fc:	1884703a 	and	r2,r3,r2
 4016300:	e0bffd15 	stw	r2,-12(fp)
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
 4016304:	e0bfff17 	ldw	r2,-4(fp)
 4016308:	1004953a 	slli	r2,r2,20
 401630c:	10dffc2c 	andhi	r3,r2,32752

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
 4016310:	e0bffd17 	ldw	r2,-12(fp)
 4016314:	1884b03a 	or	r2,r3,r2
 4016318:	10800134 	orhi	r2,r2,4
 401631c:	e0bffd15 	stw	r2,-12(fp)
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 4016320:	e0bffe17 	ldw	r2,-8(fp)
 4016324:	10800317 	ldw	r2,12(r2)
 4016328:	10800404 	addi	r2,r2,16
 401632c:	e0fffd17 	ldw	r3,-12(fp)
 4016330:	10c00035 	stwio	r3,0(r2)
  
  return;
 4016334:	0001883a 	nop
}
 4016338:	e037883a 	mov	sp,fp
 401633c:	df000017 	ldw	fp,0(sp)
 4016340:	dec00104 	addi	sp,sp,4
 4016344:	f800283a 	ret

04016348 <alt_avalon_sgdma_disable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
 4016348:	defffd04 	addi	sp,sp,-12
 401634c:	df000215 	stw	fp,8(sp)
 4016350:	df000204 	addi	fp,sp,8
 4016354:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 4016358:	e0bfff17 	ldw	r2,-4(fp)
 401635c:	10800317 	ldw	r2,12(r2)
 4016360:	10800404 	addi	r2,r2,16
 4016364:	10800037 	ldwio	r2,0(r2)
 4016368:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;
 401636c:	e0fffe17 	ldw	r3,-8(fp)
 4016370:	00bfff34 	movhi	r2,65532
 4016374:	10bfffc4 	addi	r2,r2,-1
 4016378:	1884703a 	and	r2,r3,r2
 401637c:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 4016380:	e0bfff17 	ldw	r2,-4(fp)
 4016384:	10800317 	ldw	r2,12(r2)
 4016388:	10800404 	addi	r2,r2,16
 401638c:	e0fffe17 	ldw	r3,-8(fp)
 4016390:	10c00035 	stwio	r3,0(r2)
  
  return;
 4016394:	0001883a 	nop
}
 4016398:	e037883a 	mov	sp,fp
 401639c:	df000017 	ldw	fp,0(sp)
 40163a0:	dec00104 	addi	sp,sp,4
 40163a4:	f800283a 	ret

040163a8 <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
 40163a8:	defff804 	addi	sp,sp,-32
 40163ac:	dfc00715 	stw	ra,28(sp)
 40163b0:	df000615 	stw	fp,24(sp)
 40163b4:	df000604 	addi	fp,sp,24
 40163b8:	e13ffa15 	stw	r4,-24(fp)
 40163bc:	e17ffb15 	stw	r5,-20(fp)
 40163c0:	e1bffc15 	stw	r6,-16(fp)
 40163c4:	e1fffd15 	stw	r7,-12(fp)
 40163c8:	e0c00217 	ldw	r3,8(fp)
 40163cc:	e0800817 	ldw	r2,32(fp)
 40163d0:	e0fffe0d 	sth	r3,-8(fp)
 40163d4:	e0bfff05 	stb	r2,-4(fp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
 40163d8:	e0bffb17 	ldw	r2,-20(fp)
 40163dc:	108007c4 	addi	r2,r2,31
 40163e0:	e0fffb17 	ldw	r3,-20(fp)
 40163e4:	18c007c3 	ldbu	r3,31(r3)
 40163e8:	19003fcc 	andi	r4,r3,255
 40163ec:	00ffdfc4 	movi	r3,-129
 40163f0:	20c6703a 	and	r3,r4,r3
 40163f4:	10c00025 	stbio	r3,0(r2)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
 40163f8:	e0bffa17 	ldw	r2,-24(fp)
 40163fc:	e0fffc17 	ldw	r3,-16(fp)
 4016400:	19403fcc 	andi	r5,r3,255
 4016404:	10c00003 	ldbu	r3,0(r2)
 4016408:	1806703a 	and	r3,r3,zero
 401640c:	1809883a 	mov	r4,r3
 4016410:	2807883a 	mov	r3,r5
 4016414:	20c6b03a 	or	r3,r4,r3
 4016418:	10c00005 	stb	r3,0(r2)
 401641c:	e0fffc17 	ldw	r3,-16(fp)
 4016420:	1806d23a 	srli	r3,r3,8
 4016424:	19403fcc 	andi	r5,r3,255
 4016428:	10c00043 	ldbu	r3,1(r2)
 401642c:	1806703a 	and	r3,r3,zero
 4016430:	1809883a 	mov	r4,r3
 4016434:	2807883a 	mov	r3,r5
 4016438:	20c6b03a 	or	r3,r4,r3
 401643c:	10c00045 	stb	r3,1(r2)
 4016440:	e0fffc17 	ldw	r3,-16(fp)
 4016444:	1806d43a 	srli	r3,r3,16
 4016448:	19403fcc 	andi	r5,r3,255
 401644c:	10c00083 	ldbu	r3,2(r2)
 4016450:	1806703a 	and	r3,r3,zero
 4016454:	1809883a 	mov	r4,r3
 4016458:	2807883a 	mov	r3,r5
 401645c:	20c6b03a 	or	r3,r4,r3
 4016460:	10c00085 	stb	r3,2(r2)
 4016464:	e0fffc17 	ldw	r3,-16(fp)
 4016468:	180ad63a 	srli	r5,r3,24
 401646c:	10c000c3 	ldbu	r3,3(r2)
 4016470:	1806703a 	and	r3,r3,zero
 4016474:	1809883a 	mov	r4,r3
 4016478:	2807883a 	mov	r3,r5
 401647c:	20c6b03a 	or	r3,r4,r3
 4016480:	10c000c5 	stb	r3,3(r2)
  desc->write_addr               = write_addr;
 4016484:	e0bffa17 	ldw	r2,-24(fp)
 4016488:	e0fffd17 	ldw	r3,-12(fp)
 401648c:	19403fcc 	andi	r5,r3,255
 4016490:	10c00203 	ldbu	r3,8(r2)
 4016494:	1806703a 	and	r3,r3,zero
 4016498:	1809883a 	mov	r4,r3
 401649c:	2807883a 	mov	r3,r5
 40164a0:	20c6b03a 	or	r3,r4,r3
 40164a4:	10c00205 	stb	r3,8(r2)
 40164a8:	e0fffd17 	ldw	r3,-12(fp)
 40164ac:	1806d23a 	srli	r3,r3,8
 40164b0:	19403fcc 	andi	r5,r3,255
 40164b4:	10c00243 	ldbu	r3,9(r2)
 40164b8:	1806703a 	and	r3,r3,zero
 40164bc:	1809883a 	mov	r4,r3
 40164c0:	2807883a 	mov	r3,r5
 40164c4:	20c6b03a 	or	r3,r4,r3
 40164c8:	10c00245 	stb	r3,9(r2)
 40164cc:	e0fffd17 	ldw	r3,-12(fp)
 40164d0:	1806d43a 	srli	r3,r3,16
 40164d4:	19403fcc 	andi	r5,r3,255
 40164d8:	10c00283 	ldbu	r3,10(r2)
 40164dc:	1806703a 	and	r3,r3,zero
 40164e0:	1809883a 	mov	r4,r3
 40164e4:	2807883a 	mov	r3,r5
 40164e8:	20c6b03a 	or	r3,r4,r3
 40164ec:	10c00285 	stb	r3,10(r2)
 40164f0:	e0fffd17 	ldw	r3,-12(fp)
 40164f4:	180ad63a 	srli	r5,r3,24
 40164f8:	10c002c3 	ldbu	r3,11(r2)
 40164fc:	1806703a 	and	r3,r3,zero
 4016500:	1809883a 	mov	r4,r3
 4016504:	2807883a 	mov	r3,r5
 4016508:	20c6b03a 	or	r3,r4,r3
 401650c:	10c002c5 	stb	r3,11(r2)
  desc->next                     = (alt_u32 *) next;
 4016510:	e0bffa17 	ldw	r2,-24(fp)
 4016514:	e0fffb17 	ldw	r3,-20(fp)
 4016518:	19403fcc 	andi	r5,r3,255
 401651c:	10c00403 	ldbu	r3,16(r2)
 4016520:	1806703a 	and	r3,r3,zero
 4016524:	1809883a 	mov	r4,r3
 4016528:	2807883a 	mov	r3,r5
 401652c:	20c6b03a 	or	r3,r4,r3
 4016530:	10c00405 	stb	r3,16(r2)
 4016534:	e0fffb17 	ldw	r3,-20(fp)
 4016538:	1806d23a 	srli	r3,r3,8
 401653c:	19403fcc 	andi	r5,r3,255
 4016540:	10c00443 	ldbu	r3,17(r2)
 4016544:	1806703a 	and	r3,r3,zero
 4016548:	1809883a 	mov	r4,r3
 401654c:	2807883a 	mov	r3,r5
 4016550:	20c6b03a 	or	r3,r4,r3
 4016554:	10c00445 	stb	r3,17(r2)
 4016558:	e0fffb17 	ldw	r3,-20(fp)
 401655c:	1806d43a 	srli	r3,r3,16
 4016560:	19403fcc 	andi	r5,r3,255
 4016564:	10c00483 	ldbu	r3,18(r2)
 4016568:	1806703a 	and	r3,r3,zero
 401656c:	1809883a 	mov	r4,r3
 4016570:	2807883a 	mov	r3,r5
 4016574:	20c6b03a 	or	r3,r4,r3
 4016578:	10c00485 	stb	r3,18(r2)
 401657c:	e0fffb17 	ldw	r3,-20(fp)
 4016580:	180ad63a 	srli	r5,r3,24
 4016584:	10c004c3 	ldbu	r3,19(r2)
 4016588:	1806703a 	and	r3,r3,zero
 401658c:	1809883a 	mov	r4,r3
 4016590:	2807883a 	mov	r3,r5
 4016594:	20c6b03a 	or	r3,r4,r3
 4016598:	10c004c5 	stb	r3,19(r2)
  desc->read_addr_pad            = 0x0;
 401659c:	e0bffa17 	ldw	r2,-24(fp)
 40165a0:	10c00103 	ldbu	r3,4(r2)
 40165a4:	1806703a 	and	r3,r3,zero
 40165a8:	10c00105 	stb	r3,4(r2)
 40165ac:	10c00143 	ldbu	r3,5(r2)
 40165b0:	1806703a 	and	r3,r3,zero
 40165b4:	10c00145 	stb	r3,5(r2)
 40165b8:	10c00183 	ldbu	r3,6(r2)
 40165bc:	1806703a 	and	r3,r3,zero
 40165c0:	10c00185 	stb	r3,6(r2)
 40165c4:	10c001c3 	ldbu	r3,7(r2)
 40165c8:	1806703a 	and	r3,r3,zero
 40165cc:	10c001c5 	stb	r3,7(r2)
  desc->write_addr_pad           = 0x0;
 40165d0:	e0bffa17 	ldw	r2,-24(fp)
 40165d4:	10c00303 	ldbu	r3,12(r2)
 40165d8:	1806703a 	and	r3,r3,zero
 40165dc:	10c00305 	stb	r3,12(r2)
 40165e0:	10c00343 	ldbu	r3,13(r2)
 40165e4:	1806703a 	and	r3,r3,zero
 40165e8:	10c00345 	stb	r3,13(r2)
 40165ec:	10c00383 	ldbu	r3,14(r2)
 40165f0:	1806703a 	and	r3,r3,zero
 40165f4:	10c00385 	stb	r3,14(r2)
 40165f8:	10c003c3 	ldbu	r3,15(r2)
 40165fc:	1806703a 	and	r3,r3,zero
 4016600:	10c003c5 	stb	r3,15(r2)
  desc->next_pad                 = 0x0;
 4016604:	e0bffa17 	ldw	r2,-24(fp)
 4016608:	10c00503 	ldbu	r3,20(r2)
 401660c:	1806703a 	and	r3,r3,zero
 4016610:	10c00505 	stb	r3,20(r2)
 4016614:	10c00543 	ldbu	r3,21(r2)
 4016618:	1806703a 	and	r3,r3,zero
 401661c:	10c00545 	stb	r3,21(r2)
 4016620:	10c00583 	ldbu	r3,22(r2)
 4016624:	1806703a 	and	r3,r3,zero
 4016628:	10c00585 	stb	r3,22(r2)
 401662c:	10c005c3 	ldbu	r3,23(r2)
 4016630:	1806703a 	and	r3,r3,zero
 4016634:	10c005c5 	stb	r3,23(r2)
  desc->bytes_to_transfer        = length_or_eop;
 4016638:	e0bffa17 	ldw	r2,-24(fp)
 401663c:	e0fffe17 	ldw	r3,-8(fp)
 4016640:	19403fcc 	andi	r5,r3,255
 4016644:	10c00603 	ldbu	r3,24(r2)
 4016648:	1806703a 	and	r3,r3,zero
 401664c:	1809883a 	mov	r4,r3
 4016650:	2807883a 	mov	r3,r5
 4016654:	20c6b03a 	or	r3,r4,r3
 4016658:	10c00605 	stb	r3,24(r2)
 401665c:	e0fffe17 	ldw	r3,-8(fp)
 4016660:	1806d23a 	srli	r3,r3,8
 4016664:	19403fcc 	andi	r5,r3,255
 4016668:	10c00643 	ldbu	r3,25(r2)
 401666c:	1806703a 	and	r3,r3,zero
 4016670:	1809883a 	mov	r4,r3
 4016674:	2807883a 	mov	r3,r5
 4016678:	20c6b03a 	or	r3,r4,r3
 401667c:	10c00645 	stb	r3,25(r2)
  desc->actual_bytes_transferred = 0;
 4016680:	e0bffa17 	ldw	r2,-24(fp)
 4016684:	10c00703 	ldbu	r3,28(r2)
 4016688:	1806703a 	and	r3,r3,zero
 401668c:	10c00705 	stb	r3,28(r2)
 4016690:	10c00743 	ldbu	r3,29(r2)
 4016694:	1806703a 	and	r3,r3,zero
 4016698:	10c00745 	stb	r3,29(r2)
  desc->status                   = 0x0;
 401669c:	e0bffa17 	ldw	r2,-24(fp)
 40166a0:	10000785 	stb	zero,30(r2)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
 40166a4:	e0800617 	ldw	r2,24(fp)
 40166a8:	1007883a 	mov	r3,r2
 40166ac:	e0bffa17 	ldw	r2,-24(fp)
 40166b0:	10c00685 	stb	r3,26(r2)
  desc->write_burst              = write_burst;
 40166b4:	e0800717 	ldw	r2,28(fp)
 40166b8:	1007883a 	mov	r3,r2
 40166bc:	e0bffa17 	ldw	r2,-24(fp)
 40166c0:	10c006c5 	stb	r3,27(r2)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
 40166c4:	e0800317 	ldw	r2,12(fp)
 40166c8:	10000226 	beq	r2,zero,40166d4 <alt_avalon_sgdma_construct_descriptor_burst+0x32c>
 40166cc:	00bfe044 	movi	r2,-127
 40166d0:	00000106 	br	40166d8 <alt_avalon_sgdma_construct_descriptor_burst+0x330>
 40166d4:	00bfe004 	movi	r2,-128
 40166d8:	e0c00417 	ldw	r3,16(fp)
 40166dc:	18000226 	beq	r3,zero,40166e8 <alt_avalon_sgdma_construct_descriptor_burst+0x340>
 40166e0:	00c00084 	movi	r3,2
 40166e4:	00000106 	br	40166ec <alt_avalon_sgdma_construct_descriptor_burst+0x344>
 40166e8:	0007883a 	mov	r3,zero
 40166ec:	10c4b03a 	or	r2,r2,r3
 40166f0:	1007883a 	mov	r3,r2
 40166f4:	e0800517 	ldw	r2,20(fp)
 40166f8:	10000226 	beq	r2,zero,4016704 <alt_avalon_sgdma_construct_descriptor_burst+0x35c>
 40166fc:	00800104 	movi	r2,4
 4016700:	00000106 	br	4016708 <alt_avalon_sgdma_construct_descriptor_burst+0x360>
 4016704:	0005883a 	mov	r2,zero
 4016708:	1884b03a 	or	r2,r3,r2
 401670c:	1007883a 	mov	r3,r2
 4016710:	e0bfff03 	ldbu	r2,-4(fp)
 4016714:	10000426 	beq	r2,zero,4016728 <alt_avalon_sgdma_construct_descriptor_burst+0x380>
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_GENERATE_EOP_MSK : 0x0)        |
    (read_fixed ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_READ_FIXED_ADDRESS_MSK : 0x0)  |
    (write_fixed_or_sop ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_WRITE_FIXED_ADDRESS_MSK : 0x0) |
    (atlantic_channel ? ( (atlantic_channel & 0x0F) << 3) : 0)
 4016718:	e0bfff03 	ldbu	r2,-4(fp)
 401671c:	108003cc 	andi	r2,r2,15
 4016720:	100490fa 	slli	r2,r2,3
 4016724:	00000106 	br	401672c <alt_avalon_sgdma_construct_descriptor_burst+0x384>
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
 4016728:	0005883a 	mov	r2,zero
 401672c:	1884b03a 	or	r2,r3,r2
 4016730:	1007883a 	mov	r3,r2
 4016734:	e0bffa17 	ldw	r2,-24(fp)
 4016738:	10c007c5 	stb	r3,31(r2)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
 401673c:	01400804 	movi	r5,32
 4016740:	e13ffa17 	ldw	r4,-24(fp)
 4016744:	4016e740 	call	4016e74 <alt_dcache_flush>
}
 4016748:	0001883a 	nop
 401674c:	e037883a 	mov	sp,fp
 4016750:	dfc00117 	ldw	ra,4(sp)
 4016754:	df000017 	ldw	fp,0(sp)
 4016758:	dec00204 	addi	sp,sp,8
 401675c:	f800283a 	ret

04016760 <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
 4016760:	defff904 	addi	sp,sp,-28
 4016764:	dfc00615 	stw	ra,24(sp)
 4016768:	df000515 	stw	fp,20(sp)
 401676c:	df000504 	addi	fp,sp,20
 4016770:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev *dev = (alt_sgdma_dev *) context;
 4016774:	e0bfff17 	ldw	r2,-4(fp)
 4016778:	e0bffb15 	stw	r2,-20(fp)
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
 401677c:	e0bffb17 	ldw	r2,-20(fp)
 4016780:	10800317 	ldw	r2,12(r2)
 4016784:	10800404 	addi	r2,r2,16
 4016788:	e0fffb17 	ldw	r3,-20(fp)
 401678c:	18c00317 	ldw	r3,12(r3)
 4016790:	18c00404 	addi	r3,r3,16
 4016794:	18c00037 	ldwio	r3,0(r3)
 4016798:	18e00034 	orhi	r3,r3,32768
 401679c:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 40167a0:	e0bffb17 	ldw	r2,-20(fp)
 40167a4:	10800317 	ldw	r2,12(r2)
 40167a8:	10800404 	addi	r2,r2,16
 40167ac:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
 40167b0:	e0bffb17 	ldw	r2,-20(fp)
 40167b4:	10800917 	ldw	r2,36(r2)
 40167b8:	10001226 	beq	r2,zero,4016804 <alt_avalon_sgdma_irq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40167bc:	0005303a 	rdctl	r2,status
 40167c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40167c4:	e0fffd17 	ldw	r3,-12(fp)
 40167c8:	00bfff84 	movi	r2,-2
 40167cc:	1884703a 	and	r2,r3,r2
 40167d0:	1001703a 	wrctl	status,r2
  
  return context;
 40167d4:	e0bffd17 	ldw	r2,-12(fp)
    cpu_sr = alt_irq_disable_all();
 40167d8:	e0bffc15 	stw	r2,-16(fp)
    (dev->callback)(dev->callback_context);
 40167dc:	e0bffb17 	ldw	r2,-20(fp)
 40167e0:	10800917 	ldw	r2,36(r2)
 40167e4:	e0fffb17 	ldw	r3,-20(fp)
 40167e8:	18c00a17 	ldw	r3,40(r3)
 40167ec:	1809883a 	mov	r4,r3
 40167f0:	103ee83a 	callr	r2
 40167f4:	e0bffc17 	ldw	r2,-16(fp)
 40167f8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40167fc:	e0bffe17 	ldw	r2,-8(fp)
 4016800:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
 4016804:	0001883a 	nop
 4016808:	e037883a 	mov	sp,fp
 401680c:	dfc00117 	ldw	ra,4(sp)
 4016810:	df000017 	ldw	fp,0(sp)
 4016814:	dec00204 	addi	sp,sp,8
 4016818:	f800283a 	ret

0401681c <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
 401681c:	defffa04 	addi	sp,sp,-24
 4016820:	dfc00515 	stw	ra,20(sp)
 4016824:	df000415 	stw	fp,16(sp)
 4016828:	df000404 	addi	fp,sp,16
 401682c:	e13ffd15 	stw	r4,-12(fp)
 4016830:	e17ffe15 	stw	r5,-8(fp)
 4016834:	e1bfff15 	stw	r6,-4(fp)

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 4016838:	e0bffd17 	ldw	r2,-12(fp)
 401683c:	10800317 	ldw	r2,12(r2)
 4016840:	10800404 	addi	r2,r2,16
 4016844:	00c00074 	movhi	r3,1
 4016848:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 401684c:	e0bffd17 	ldw	r2,-12(fp)
 4016850:	10800317 	ldw	r2,12(r2)
 4016854:	10800404 	addi	r2,r2,16
 4016858:	00c00074 	movhi	r3,1
 401685c:	10c00035 	stwio	r3,0(r2)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
 4016860:	e0bffd17 	ldw	r2,-12(fp)
 4016864:	10800317 	ldw	r2,12(r2)
 4016868:	10800404 	addi	r2,r2,16
 401686c:	0007883a 	mov	r3,zero
 4016870:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 4016874:	e0bffd17 	ldw	r2,-12(fp)
 4016878:	10800317 	ldw	r2,12(r2)
 401687c:	00c03fc4 	movi	r3,255
 4016880:	10c00035 	stwio	r3,0(r2)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
 4016884:	d1600e04 	addi	r5,gp,-32712
 4016888:	e13ffd17 	ldw	r4,-12(fp)
 401688c:	4016ed80 	call	4016ed8 <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
 4016890:	d8000015 	stw	zero,0(sp)
 4016894:	e1fffd17 	ldw	r7,-12(fp)
 4016898:	01810074 	movhi	r6,1025
 401689c:	3199d804 	addi	r6,r6,26464
 40168a0:	e17fff17 	ldw	r5,-4(fp)
 40168a4:	e13ffe17 	ldw	r4,-8(fp)
 40168a8:	40173380 	call	4017338 <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
 40168ac:	0001883a 	nop
 40168b0:	e037883a 	mov	sp,fp
 40168b4:	dfc00117 	ldw	ra,4(sp)
 40168b8:	df000017 	ldw	fp,0(sp)
 40168bc:	dec00204 	addi	sp,sp,8
 40168c0:	f800283a 	ret

040168c4 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
 40168c4:	defff404 	addi	sp,sp,-48
 40168c8:	df000b15 	stw	fp,44(sp)
 40168cc:	df000b04 	addi	fp,sp,44
 40168d0:	e13ffc15 	stw	r4,-16(fp)
 40168d4:	e17ffd15 	stw	r5,-12(fp)
 40168d8:	e1bffe15 	stw	r6,-8(fp)
 40168dc:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
 40168e0:	e0bffc17 	ldw	r2,-16(fp)
 40168e4:	10800017 	ldw	r2,0(r2)
 40168e8:	e0bff515 	stw	r2,-44(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
 40168ec:	e0bff517 	ldw	r2,-44(fp)
 40168f0:	10800217 	ldw	r2,8(r2)
 40168f4:	e0bff615 	stw	r2,-40(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
 40168f8:	e0bff617 	ldw	r2,-40(fp)
 40168fc:	10bfffc4 	addi	r2,r2,-1
 4016900:	e0bffb15 	stw	r2,-20(fp)

  while (*++ptr != 0)
 4016904:	e0bffb17 	ldw	r2,-20(fp)
 4016908:	10800044 	addi	r2,r2,1
 401690c:	e0bffb15 	stw	r2,-20(fp)
 4016910:	e0bffb17 	ldw	r2,-20(fp)
 4016914:	10800003 	ldbu	r2,0(r2)
 4016918:	10803fcc 	andi	r2,r2,255
 401691c:	1080201c 	xori	r2,r2,128
 4016920:	10bfe004 	addi	r2,r2,-128
 4016924:	103ff71e 	bne	r2,zero,4016904 <__alt_data_end+0xfc016904>
    ;

  return ptr - string;
 4016928:	e0fffb17 	ldw	r3,-20(fp)
 401692c:	e0bff617 	ldw	r2,-40(fp)
 4016930:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
 4016934:	10800044 	addi	r2,r2,1
 4016938:	1007883a 	mov	r3,r2
 401693c:	e0bffd17 	ldw	r2,-12(fp)
 4016940:	10c5883a 	add	r2,r2,r3
 4016944:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
 4016948:	d0a01004 	addi	r2,gp,-32704
 401694c:	1007883a 	mov	r3,r2
  r4 = (int)name;
 4016950:	e0bffd17 	ldw	r2,-12(fp)
 4016954:	1009883a 	mov	r4,r2
  r5 = flags;
 4016958:	e17ffe17 	ldw	r5,-8(fp)
  r6 = mode;
 401695c:	e1bfff17 	ldw	r6,-4(fp)
 4016960:	e0bffd17 	ldw	r2,-12(fp)
 4016964:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
 4016968:	e0bff917 	ldw	r2,-28(fp)
 401696c:	10bfffc4 	addi	r2,r2,-1
 4016970:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
 4016974:	e0bffa17 	ldw	r2,-24(fp)
 4016978:	10800044 	addi	r2,r2,1
 401697c:	e0bffa15 	stw	r2,-24(fp)
 4016980:	e0bffa17 	ldw	r2,-24(fp)
 4016984:	10800003 	ldbu	r2,0(r2)
 4016988:	10803fcc 	andi	r2,r2,255
 401698c:	1080201c 	xori	r2,r2,128
 4016990:	10bfe004 	addi	r2,r2,-128
 4016994:	103ff71e 	bne	r2,zero,4016974 <__alt_data_end+0xfc016974>
    ;

  return ptr - string;
 4016998:	e1fffa17 	ldw	r7,-24(fp)
 401699c:	e0bff917 	ldw	r2,-28(fp)
 40169a0:	3885c83a 	sub	r2,r7,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
 40169a4:	100f883a 	mov	r7,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6), "r" (r7) : "memory" );
 40169a8:	003da07a 	break	1

  handle = (void *)r2;
 40169ac:	e0bff715 	stw	r2,-36(fp)
  error = r3;
 40169b0:	e0fff815 	stw	r3,-32(fp)

  if (error == 0)
 40169b4:	e0bff817 	ldw	r2,-32(fp)
 40169b8:	1000031e 	bne	r2,zero,40169c8 <alt_hostfs_open+0x104>
    fd->priv = handle;
 40169bc:	e0bffc17 	ldw	r2,-16(fp)
 40169c0:	e0fff717 	ldw	r3,-36(fp)
 40169c4:	10c00115 	stw	r3,4(r2)

  return -error;
 40169c8:	e0bff817 	ldw	r2,-32(fp)
 40169cc:	0085c83a 	sub	r2,zero,r2
}
 40169d0:	e037883a 	mov	sp,fp
 40169d4:	df000017 	ldw	fp,0(sp)
 40169d8:	dec00104 	addi	sp,sp,4
 40169dc:	f800283a 	ret

040169e0 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
 40169e0:	defffd04 	addi	sp,sp,-12
 40169e4:	df000215 	stw	fp,8(sp)
 40169e8:	df000204 	addi	fp,sp,8
 40169ec:	e13fff15 	stw	r4,-4(fp)

  /* Input and output parameters for the hostcall */
  register int r3 asm ("r3");
  register int r4 asm ("r4");

  r3 = (int)&hcinfo;
 40169f0:	d0a01304 	addi	r2,gp,-32692
 40169f4:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
 40169f8:	e0bfff17 	ldw	r2,-4(fp)
 40169fc:	10800117 	ldw	r2,4(r2)
 4016a00:	1009883a 	mov	r4,r2

  __asm__ volatile("break 1" : "+r" (r3) : "r" (r4) );
 4016a04:	003da07a 	break	1

  error = r3;
 4016a08:	e0fffe15 	stw	r3,-8(fp)

  return -error;
 4016a0c:	e0bffe17 	ldw	r2,-8(fp)
 4016a10:	0085c83a 	sub	r2,zero,r2
}
 4016a14:	e037883a 	mov	sp,fp
 4016a18:	df000017 	ldw	fp,0(sp)
 4016a1c:	dec00104 	addi	sp,sp,4
 4016a20:	f800283a 	ret

04016a24 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
 4016a24:	defffa04 	addi	sp,sp,-24
 4016a28:	df000515 	stw	fp,20(sp)
 4016a2c:	df000504 	addi	fp,sp,20
 4016a30:	e13ffd15 	stw	r4,-12(fp)
 4016a34:	e17ffe15 	stw	r5,-8(fp)
 4016a38:	e1bfff15 	stw	r6,-4(fp)
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");


  r3 = (int)&hcinfo;
 4016a3c:	d0a01604 	addi	r2,gp,-32680
 4016a40:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
 4016a44:	e0bffd17 	ldw	r2,-12(fp)
 4016a48:	10800117 	ldw	r2,4(r2)
 4016a4c:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
 4016a50:	e0bffe17 	ldw	r2,-8(fp)
 4016a54:	100b883a 	mov	r5,r2
  r6 = len;
 4016a58:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
 4016a5c:	003da07a 	break	1

  rc = r2;
 4016a60:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
 4016a64:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
 4016a68:	e0bffc17 	ldw	r2,-16(fp)
 4016a6c:	10000326 	beq	r2,zero,4016a7c <alt_hostfs_read+0x58>
 4016a70:	e0bffc17 	ldw	r2,-16(fp)
 4016a74:	0085c83a 	sub	r2,zero,r2
 4016a78:	00000106 	br	4016a80 <alt_hostfs_read+0x5c>
 4016a7c:	e0bffb17 	ldw	r2,-20(fp)
}
 4016a80:	e037883a 	mov	sp,fp
 4016a84:	df000017 	ldw	fp,0(sp)
 4016a88:	dec00104 	addi	sp,sp,4
 4016a8c:	f800283a 	ret

04016a90 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
 4016a90:	defffa04 	addi	sp,sp,-24
 4016a94:	df000515 	stw	fp,20(sp)
 4016a98:	df000504 	addi	fp,sp,20
 4016a9c:	e13ffd15 	stw	r4,-12(fp)
 4016aa0:	e17ffe15 	stw	r5,-8(fp)
 4016aa4:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
 4016aa8:	d0a01904 	addi	r2,gp,-32668
 4016aac:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
 4016ab0:	e0bffd17 	ldw	r2,-12(fp)
 4016ab4:	10800117 	ldw	r2,4(r2)
 4016ab8:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
 4016abc:	e0bffe17 	ldw	r2,-8(fp)
 4016ac0:	100b883a 	mov	r5,r2
  r6 = len;
 4016ac4:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
 4016ac8:	003da07a 	break	1

  rc = r2;
 4016acc:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
 4016ad0:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
 4016ad4:	e0bffc17 	ldw	r2,-16(fp)
 4016ad8:	10000326 	beq	r2,zero,4016ae8 <alt_hostfs_write+0x58>
 4016adc:	e0bffc17 	ldw	r2,-16(fp)
 4016ae0:	0085c83a 	sub	r2,zero,r2
 4016ae4:	00000106 	br	4016aec <alt_hostfs_write+0x5c>
 4016ae8:	e0bffb17 	ldw	r2,-20(fp)
}
 4016aec:	e037883a 	mov	sp,fp
 4016af0:	df000017 	ldw	fp,0(sp)
 4016af4:	dec00104 	addi	sp,sp,4
 4016af8:	f800283a 	ret

04016afc <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
 4016afc:	defffa04 	addi	sp,sp,-24
 4016b00:	df000515 	stw	fp,20(sp)
 4016b04:	df000504 	addi	fp,sp,20
 4016b08:	e13ffd15 	stw	r4,-12(fp)
 4016b0c:	e17ffe15 	stw	r5,-8(fp)
 4016b10:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
 4016b14:	d0a01c04 	addi	r2,gp,-32656
 4016b18:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
 4016b1c:	e0bffd17 	ldw	r2,-12(fp)
 4016b20:	10800117 	ldw	r2,4(r2)
 4016b24:	1009883a 	mov	r4,r2
  r5 = ptr;
 4016b28:	e17ffe17 	ldw	r5,-8(fp)
  r6 = dir;
 4016b2c:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
 4016b30:	003da07a 	break	1

  rc = r2;
 4016b34:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
 4016b38:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
 4016b3c:	e0bffc17 	ldw	r2,-16(fp)
 4016b40:	10000326 	beq	r2,zero,4016b50 <alt_hostfs_seek+0x54>
 4016b44:	e0bffc17 	ldw	r2,-16(fp)
 4016b48:	0085c83a 	sub	r2,zero,r2
 4016b4c:	00000106 	br	4016b54 <alt_hostfs_seek+0x58>
 4016b50:	e0bffb17 	ldw	r2,-20(fp)
}
 4016b54:	e037883a 	mov	sp,fp
 4016b58:	df000017 	ldw	fp,0(sp)
 4016b5c:	dec00104 	addi	sp,sp,4
 4016b60:	f800283a 	ret

04016b64 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
 4016b64:	deffe904 	addi	sp,sp,-92
 4016b68:	df001615 	stw	fp,88(sp)
 4016b6c:	df001604 	addi	fp,sp,88
 4016b70:	e13ffe15 	stw	r4,-8(fp)
 4016b74:	e17fff15 	stw	r5,-4(fp)
  register int r2 asm ("r2");
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");

  r3 = (int)&hcinfo;
 4016b78:	d0a01f04 	addi	r2,gp,-32644
 4016b7c:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
 4016b80:	e0bffe17 	ldw	r2,-8(fp)
 4016b84:	10800117 	ldw	r2,4(r2)
 4016b88:	1009883a 	mov	r4,r2
  r5 = (int)&hoststat;
 4016b8c:	e0bfee04 	addi	r2,fp,-72
 4016b90:	100b883a 	mov	r5,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5) : "memory" );
 4016b94:	003da07a 	break	1

  rc = r2;
 4016b98:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
 4016b9c:	e0ffec15 	stw	r3,-80(fp)

  if (error == 0)
 4016ba0:	e0bfec17 	ldw	r2,-80(fp)
 4016ba4:	1000621e 	bne	r2,zero,4016d30 <alt_hostfs_fstat+0x1cc>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
 4016ba8:	e0bfee04 	addi	r2,fp,-72
 4016bac:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
 4016bb0:	e0bfea17 	ldw	r2,-88(fp)
 4016bb4:	10801004 	addi	r2,r2,64
 4016bb8:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
 4016bbc:	00001606 	br	4016c18 <alt_hostfs_fstat+0xb4>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
 4016bc0:	e0bfea17 	ldw	r2,-88(fp)
 4016bc4:	10800017 	ldw	r2,0(r2)
 4016bc8:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
 4016bcc:	e0bfea17 	ldw	r2,-88(fp)
 4016bd0:	10800017 	ldw	r2,0(r2)
 4016bd4:	10803fec 	andhi	r2,r2,255
 4016bd8:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
 4016bdc:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
 4016be0:	e0bfea17 	ldw	r2,-88(fp)
 4016be4:	10800017 	ldw	r2,0(r2)
 4016be8:	10bfc00c 	andi	r2,r2,65280
 4016bec:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
 4016bf0:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
 4016bf4:	e0bfea17 	ldw	r2,-88(fp)
 4016bf8:	10800017 	ldw	r2,0(r2)
 4016bfc:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
 4016c00:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
 4016c04:	e0bfea17 	ldw	r2,-88(fp)
 4016c08:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
 4016c0c:	e0bfea17 	ldw	r2,-88(fp)
 4016c10:	10800104 	addi	r2,r2,4
 4016c14:	e0bfea15 	stw	r2,-88(fp)
 4016c18:	e0ffea17 	ldw	r3,-88(fp)
 4016c1c:	e0bfed17 	ldw	r2,-76(fp)
 4016c20:	18bfe736 	bltu	r3,r2,4016bc0 <__alt_data_end+0xfc016bc0>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
 4016c24:	e0bfff17 	ldw	r2,-4(fp)
 4016c28:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
 4016c2c:	e0bfea17 	ldw	r2,-88(fp)
 4016c30:	10800f04 	addi	r2,r2,60
 4016c34:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
 4016c38:	00000506 	br	4016c50 <alt_hostfs_fstat+0xec>
      *ptr = 0;
 4016c3c:	e0bfea17 	ldw	r2,-88(fp)
 4016c40:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
 4016c44:	e0bfea17 	ldw	r2,-88(fp)
 4016c48:	10800104 	addi	r2,r2,4
 4016c4c:	e0bfea15 	stw	r2,-88(fp)
 4016c50:	e0ffea17 	ldw	r3,-88(fp)
 4016c54:	e0bfed17 	ldw	r2,-76(fp)
 4016c58:	18bff836 	bltu	r3,r2,4016c3c <__alt_data_end+0xfc016c3c>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
 4016c5c:	e0bfee17 	ldw	r2,-72(fp)
 4016c60:	1007883a 	mov	r3,r2
 4016c64:	e0bfff17 	ldw	r2,-4(fp)
 4016c68:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
 4016c6c:	e0bfef17 	ldw	r2,-68(fp)
 4016c70:	1007883a 	mov	r3,r2
 4016c74:	e0bfff17 	ldw	r2,-4(fp)
 4016c78:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
 4016c7c:	e0fff017 	ldw	r3,-64(fp)
 4016c80:	e0bfff17 	ldw	r2,-4(fp)
 4016c84:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
 4016c88:	e0bff117 	ldw	r2,-60(fp)
 4016c8c:	1007883a 	mov	r3,r2
 4016c90:	e0bfff17 	ldw	r2,-4(fp)
 4016c94:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
 4016c98:	e0bff217 	ldw	r2,-56(fp)
 4016c9c:	1007883a 	mov	r3,r2
 4016ca0:	e0bfff17 	ldw	r2,-4(fp)
 4016ca4:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
 4016ca8:	e0bff317 	ldw	r2,-52(fp)
 4016cac:	1007883a 	mov	r3,r2
 4016cb0:	e0bfff17 	ldw	r2,-4(fp)
 4016cb4:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
 4016cb8:	e0bff417 	ldw	r2,-48(fp)
 4016cbc:	1007883a 	mov	r3,r2
 4016cc0:	e0bfff17 	ldw	r2,-4(fp)
 4016cc4:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
 4016cc8:	e0bff617 	ldw	r2,-40(fp)
 4016ccc:	1007883a 	mov	r3,r2
 4016cd0:	e0bfff17 	ldw	r2,-4(fp)
 4016cd4:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
 4016cd8:	e0bffb17 	ldw	r2,-20(fp)
 4016cdc:	1007883a 	mov	r3,r2
 4016ce0:	e0bfff17 	ldw	r2,-4(fp)
 4016ce4:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
 4016ce8:	e0bffc17 	ldw	r2,-16(fp)
 4016cec:	1007883a 	mov	r3,r2
 4016cf0:	e0bfff17 	ldw	r2,-4(fp)
 4016cf4:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
 4016cf8:	e0bffd17 	ldw	r2,-12(fp)
 4016cfc:	1007883a 	mov	r3,r2
 4016d00:	e0bfff17 	ldw	r2,-4(fp)
 4016d04:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
 4016d08:	e0bff817 	ldw	r2,-32(fp)
 4016d0c:	1007883a 	mov	r3,r2
 4016d10:	e0bfff17 	ldw	r2,-4(fp)
 4016d14:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
 4016d18:	e0bffa17 	ldw	r2,-24(fp)
 4016d1c:	1007883a 	mov	r3,r2
 4016d20:	e0bfff17 	ldw	r2,-4(fp)
 4016d24:	10c00c15 	stw	r3,48(r2)

    return rc;
 4016d28:	e0bfeb17 	ldw	r2,-84(fp)
 4016d2c:	00000206 	br	4016d38 <alt_hostfs_fstat+0x1d4>
  }
  else
    return -error;
 4016d30:	e0bfec17 	ldw	r2,-80(fp)
 4016d34:	0085c83a 	sub	r2,zero,r2
}
 4016d38:	e037883a 	mov	sp,fp
 4016d3c:	df000017 	ldw	fp,0(sp)
 4016d40:	dec00104 	addi	sp,sp,4
 4016d44:	f800283a 	ret

04016d48 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4016d48:	defff504 	addi	sp,sp,-44
 4016d4c:	df000a15 	stw	fp,40(sp)
 4016d50:	df000a04 	addi	fp,sp,40
 4016d54:	e13ffc15 	stw	r4,-16(fp)
 4016d58:	e17ffd15 	stw	r5,-12(fp)
 4016d5c:	e1bffe15 	stw	r6,-8(fp)
 4016d60:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4016d64:	e03ff615 	stw	zero,-40(fp)
 4016d68:	d0a76817 	ldw	r2,-25184(gp)
  
  if (alt_ticks_per_second ())
 4016d6c:	10003c26 	beq	r2,zero,4016e60 <alt_alarm_start+0x118>
  {
    if (alarm)
 4016d70:	e0bffc17 	ldw	r2,-16(fp)
 4016d74:	10003826 	beq	r2,zero,4016e58 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 4016d78:	e0bffc17 	ldw	r2,-16(fp)
 4016d7c:	e0fffe17 	ldw	r3,-8(fp)
 4016d80:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 4016d84:	e0bffc17 	ldw	r2,-16(fp)
 4016d88:	e0ffff17 	ldw	r3,-4(fp)
 4016d8c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4016d90:	0005303a 	rdctl	r2,status
 4016d94:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4016d98:	e0fff917 	ldw	r3,-28(fp)
 4016d9c:	00bfff84 	movi	r2,-2
 4016da0:	1884703a 	and	r2,r3,r2
 4016da4:	1001703a 	wrctl	status,r2
  
  return context;
 4016da8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 4016dac:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4016db0:	d0a76917 	ldw	r2,-25180(gp)
      
      current_nticks = alt_nticks();
 4016db4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4016db8:	e0fffd17 	ldw	r3,-12(fp)
 4016dbc:	e0bff617 	ldw	r2,-40(fp)
 4016dc0:	1885883a 	add	r2,r3,r2
 4016dc4:	10c00044 	addi	r3,r2,1
 4016dc8:	e0bffc17 	ldw	r2,-16(fp)
 4016dcc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4016dd0:	e0bffc17 	ldw	r2,-16(fp)
 4016dd4:	10c00217 	ldw	r3,8(r2)
 4016dd8:	e0bff617 	ldw	r2,-40(fp)
 4016ddc:	1880042e 	bgeu	r3,r2,4016df0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 4016de0:	e0bffc17 	ldw	r2,-16(fp)
 4016de4:	00c00044 	movi	r3,1
 4016de8:	10c00405 	stb	r3,16(r2)
 4016dec:	00000206 	br	4016df8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 4016df0:	e0bffc17 	ldw	r2,-16(fp)
 4016df4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4016df8:	e0bffc17 	ldw	r2,-16(fp)
 4016dfc:	d0e02304 	addi	r3,gp,-32628
 4016e00:	e0fffa15 	stw	r3,-24(fp)
 4016e04:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4016e08:	e0bffb17 	ldw	r2,-20(fp)
 4016e0c:	e0fffa17 	ldw	r3,-24(fp)
 4016e10:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4016e14:	e0bffa17 	ldw	r2,-24(fp)
 4016e18:	10c00017 	ldw	r3,0(r2)
 4016e1c:	e0bffb17 	ldw	r2,-20(fp)
 4016e20:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4016e24:	e0bffa17 	ldw	r2,-24(fp)
 4016e28:	10800017 	ldw	r2,0(r2)
 4016e2c:	e0fffb17 	ldw	r3,-20(fp)
 4016e30:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4016e34:	e0bffa17 	ldw	r2,-24(fp)
 4016e38:	e0fffb17 	ldw	r3,-20(fp)
 4016e3c:	10c00015 	stw	r3,0(r2)
 4016e40:	e0bff817 	ldw	r2,-32(fp)
 4016e44:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4016e48:	e0bff717 	ldw	r2,-36(fp)
 4016e4c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4016e50:	0005883a 	mov	r2,zero
 4016e54:	00000306 	br	4016e64 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 4016e58:	00bffa84 	movi	r2,-22
 4016e5c:	00000106 	br	4016e64 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 4016e60:	00bfde84 	movi	r2,-134
  }
}
 4016e64:	e037883a 	mov	sp,fp
 4016e68:	df000017 	ldw	fp,0(sp)
 4016e6c:	dec00104 	addi	sp,sp,4
 4016e70:	f800283a 	ret

04016e74 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
 4016e74:	defffd04 	addi	sp,sp,-12
 4016e78:	df000215 	stw	fp,8(sp)
 4016e7c:	df000204 	addi	fp,sp,8
 4016e80:	e13ffe15 	stw	r4,-8(fp)
 4016e84:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4016e88:	0001883a 	nop
 4016e8c:	e037883a 	mov	sp,fp
 4016e90:	df000017 	ldw	fp,0(sp)
 4016e94:	dec00104 	addi	sp,sp,4
 4016e98:	f800283a 	ret

04016e9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4016e9c:	defffe04 	addi	sp,sp,-8
 4016ea0:	dfc00115 	stw	ra,4(sp)
 4016ea4:	df000015 	stw	fp,0(sp)
 4016ea8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4016eac:	d0a00c17 	ldw	r2,-32720(gp)
 4016eb0:	10000326 	beq	r2,zero,4016ec0 <alt_get_errno+0x24>
 4016eb4:	d0a00c17 	ldw	r2,-32720(gp)
 4016eb8:	103ee83a 	callr	r2
 4016ebc:	00000106 	br	4016ec4 <alt_get_errno+0x28>
 4016ec0:	d0a75d04 	addi	r2,gp,-25228
}
 4016ec4:	e037883a 	mov	sp,fp
 4016ec8:	dfc00117 	ldw	ra,4(sp)
 4016ecc:	df000017 	ldw	fp,0(sp)
 4016ed0:	dec00204 	addi	sp,sp,8
 4016ed4:	f800283a 	ret

04016ed8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4016ed8:	defffa04 	addi	sp,sp,-24
 4016edc:	dfc00515 	stw	ra,20(sp)
 4016ee0:	df000415 	stw	fp,16(sp)
 4016ee4:	df000404 	addi	fp,sp,16
 4016ee8:	e13ffe15 	stw	r4,-8(fp)
 4016eec:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4016ef0:	e0bffe17 	ldw	r2,-8(fp)
 4016ef4:	10000326 	beq	r2,zero,4016f04 <alt_dev_llist_insert+0x2c>
 4016ef8:	e0bffe17 	ldw	r2,-8(fp)
 4016efc:	10800217 	ldw	r2,8(r2)
 4016f00:	1000061e 	bne	r2,zero,4016f1c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 4016f04:	4016e9c0 	call	4016e9c <alt_get_errno>
 4016f08:	1007883a 	mov	r3,r2
 4016f0c:	00800584 	movi	r2,22
 4016f10:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4016f14:	00bffa84 	movi	r2,-22
 4016f18:	00001306 	br	4016f68 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4016f1c:	e0bffe17 	ldw	r2,-8(fp)
 4016f20:	e0ffff17 	ldw	r3,-4(fp)
 4016f24:	e0fffc15 	stw	r3,-16(fp)
 4016f28:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4016f2c:	e0bffd17 	ldw	r2,-12(fp)
 4016f30:	e0fffc17 	ldw	r3,-16(fp)
 4016f34:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4016f38:	e0bffc17 	ldw	r2,-16(fp)
 4016f3c:	10c00017 	ldw	r3,0(r2)
 4016f40:	e0bffd17 	ldw	r2,-12(fp)
 4016f44:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4016f48:	e0bffc17 	ldw	r2,-16(fp)
 4016f4c:	10800017 	ldw	r2,0(r2)
 4016f50:	e0fffd17 	ldw	r3,-12(fp)
 4016f54:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4016f58:	e0bffc17 	ldw	r2,-16(fp)
 4016f5c:	e0fffd17 	ldw	r3,-12(fp)
 4016f60:	10c00015 	stw	r3,0(r2)

  return 0;  
 4016f64:	0005883a 	mov	r2,zero
}
 4016f68:	e037883a 	mov	sp,fp
 4016f6c:	dfc00117 	ldw	ra,4(sp)
 4016f70:	df000017 	ldw	fp,0(sp)
 4016f74:	dec00204 	addi	sp,sp,8
 4016f78:	f800283a 	ret

04016f7c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4016f7c:	defffd04 	addi	sp,sp,-12
 4016f80:	dfc00215 	stw	ra,8(sp)
 4016f84:	df000115 	stw	fp,4(sp)
 4016f88:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4016f8c:	00810074 	movhi	r2,1025
 4016f90:	109f4b04 	addi	r2,r2,32044
 4016f94:	e0bfff15 	stw	r2,-4(fp)
 4016f98:	00000606 	br	4016fb4 <_do_ctors+0x38>
        (*ctor) (); 
 4016f9c:	e0bfff17 	ldw	r2,-4(fp)
 4016fa0:	10800017 	ldw	r2,0(r2)
 4016fa4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4016fa8:	e0bfff17 	ldw	r2,-4(fp)
 4016fac:	10bfff04 	addi	r2,r2,-4
 4016fb0:	e0bfff15 	stw	r2,-4(fp)
 4016fb4:	e0ffff17 	ldw	r3,-4(fp)
 4016fb8:	00810074 	movhi	r2,1025
 4016fbc:	109f4c04 	addi	r2,r2,32048
 4016fc0:	18bff62e 	bgeu	r3,r2,4016f9c <__alt_data_end+0xfc016f9c>
        (*ctor) (); 
}
 4016fc4:	0001883a 	nop
 4016fc8:	e037883a 	mov	sp,fp
 4016fcc:	dfc00117 	ldw	ra,4(sp)
 4016fd0:	df000017 	ldw	fp,0(sp)
 4016fd4:	dec00204 	addi	sp,sp,8
 4016fd8:	f800283a 	ret

04016fdc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4016fdc:	defffd04 	addi	sp,sp,-12
 4016fe0:	dfc00215 	stw	ra,8(sp)
 4016fe4:	df000115 	stw	fp,4(sp)
 4016fe8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4016fec:	00810074 	movhi	r2,1025
 4016ff0:	109f4b04 	addi	r2,r2,32044
 4016ff4:	e0bfff15 	stw	r2,-4(fp)
 4016ff8:	00000606 	br	4017014 <_do_dtors+0x38>
        (*dtor) (); 
 4016ffc:	e0bfff17 	ldw	r2,-4(fp)
 4017000:	10800017 	ldw	r2,0(r2)
 4017004:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4017008:	e0bfff17 	ldw	r2,-4(fp)
 401700c:	10bfff04 	addi	r2,r2,-4
 4017010:	e0bfff15 	stw	r2,-4(fp)
 4017014:	e0ffff17 	ldw	r3,-4(fp)
 4017018:	00810074 	movhi	r2,1025
 401701c:	109f4c04 	addi	r2,r2,32048
 4017020:	18bff62e 	bgeu	r3,r2,4016ffc <__alt_data_end+0xfc016ffc>
        (*dtor) (); 
}
 4017024:	0001883a 	nop
 4017028:	e037883a 	mov	sp,fp
 401702c:	dfc00117 	ldw	ra,4(sp)
 4017030:	df000017 	ldw	fp,0(sp)
 4017034:	dec00204 	addi	sp,sp,8
 4017038:	f800283a 	ret

0401703c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 401703c:	defffa04 	addi	sp,sp,-24
 4017040:	dfc00515 	stw	ra,20(sp)
 4017044:	df000415 	stw	fp,16(sp)
 4017048:	df000404 	addi	fp,sp,16
 401704c:	e13ffe15 	stw	r4,-8(fp)
 4017050:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4017054:	e0bfff17 	ldw	r2,-4(fp)
 4017058:	10800017 	ldw	r2,0(r2)
 401705c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4017060:	e13ffe17 	ldw	r4,-8(fp)
 4017064:	40044d40 	call	40044d4 <strlen>
 4017068:	10800044 	addi	r2,r2,1
 401706c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4017070:	00000d06 	br	40170a8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4017074:	e0bffc17 	ldw	r2,-16(fp)
 4017078:	10800217 	ldw	r2,8(r2)
 401707c:	e0fffd17 	ldw	r3,-12(fp)
 4017080:	180d883a 	mov	r6,r3
 4017084:	e17ffe17 	ldw	r5,-8(fp)
 4017088:	1009883a 	mov	r4,r2
 401708c:	40179e80 	call	40179e8 <memcmp>
 4017090:	1000021e 	bne	r2,zero,401709c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4017094:	e0bffc17 	ldw	r2,-16(fp)
 4017098:	00000706 	br	40170b8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 401709c:	e0bffc17 	ldw	r2,-16(fp)
 40170a0:	10800017 	ldw	r2,0(r2)
 40170a4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 40170a8:	e0fffc17 	ldw	r3,-16(fp)
 40170ac:	e0bfff17 	ldw	r2,-4(fp)
 40170b0:	18bff01e 	bne	r3,r2,4017074 <__alt_data_end+0xfc017074>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 40170b4:	0005883a 	mov	r2,zero
}
 40170b8:	e037883a 	mov	sp,fp
 40170bc:	dfc00117 	ldw	ra,4(sp)
 40170c0:	df000017 	ldw	fp,0(sp)
 40170c4:	dec00204 	addi	sp,sp,8
 40170c8:	f800283a 	ret

040170cc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 40170cc:	defffb04 	addi	sp,sp,-20
 40170d0:	dfc00415 	stw	ra,16(sp)
 40170d4:	df000315 	stw	fp,12(sp)
 40170d8:	df000304 	addi	fp,sp,12
 40170dc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 40170e0:	d0a00717 	ldw	r2,-32740(gp)
 40170e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40170e8:	00003106 	br	40171b0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 40170ec:	e0bffd17 	ldw	r2,-12(fp)
 40170f0:	10800217 	ldw	r2,8(r2)
 40170f4:	1009883a 	mov	r4,r2
 40170f8:	40044d40 	call	40044d4 <strlen>
 40170fc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4017100:	e0bffd17 	ldw	r2,-12(fp)
 4017104:	10c00217 	ldw	r3,8(r2)
 4017108:	e0bffe17 	ldw	r2,-8(fp)
 401710c:	10bfffc4 	addi	r2,r2,-1
 4017110:	1885883a 	add	r2,r3,r2
 4017114:	10800003 	ldbu	r2,0(r2)
 4017118:	10803fcc 	andi	r2,r2,255
 401711c:	1080201c 	xori	r2,r2,128
 4017120:	10bfe004 	addi	r2,r2,-128
 4017124:	10800bd8 	cmpnei	r2,r2,47
 4017128:	1000031e 	bne	r2,zero,4017138 <alt_find_file+0x6c>
    {
      len -= 1;
 401712c:	e0bffe17 	ldw	r2,-8(fp)
 4017130:	10bfffc4 	addi	r2,r2,-1
 4017134:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4017138:	e0bffe17 	ldw	r2,-8(fp)
 401713c:	e0ffff17 	ldw	r3,-4(fp)
 4017140:	1885883a 	add	r2,r3,r2
 4017144:	10800003 	ldbu	r2,0(r2)
 4017148:	10803fcc 	andi	r2,r2,255
 401714c:	1080201c 	xori	r2,r2,128
 4017150:	10bfe004 	addi	r2,r2,-128
 4017154:	10800be0 	cmpeqi	r2,r2,47
 4017158:	1000081e 	bne	r2,zero,401717c <alt_find_file+0xb0>
 401715c:	e0bffe17 	ldw	r2,-8(fp)
 4017160:	e0ffff17 	ldw	r3,-4(fp)
 4017164:	1885883a 	add	r2,r3,r2
 4017168:	10800003 	ldbu	r2,0(r2)
 401716c:	10803fcc 	andi	r2,r2,255
 4017170:	1080201c 	xori	r2,r2,128
 4017174:	10bfe004 	addi	r2,r2,-128
 4017178:	10000a1e 	bne	r2,zero,40171a4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 401717c:	e0bffd17 	ldw	r2,-12(fp)
 4017180:	10800217 	ldw	r2,8(r2)
 4017184:	e0fffe17 	ldw	r3,-8(fp)
 4017188:	180d883a 	mov	r6,r3
 401718c:	e17fff17 	ldw	r5,-4(fp)
 4017190:	1009883a 	mov	r4,r2
 4017194:	40179e80 	call	40179e8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4017198:	1000021e 	bne	r2,zero,40171a4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 401719c:	e0bffd17 	ldw	r2,-12(fp)
 40171a0:	00000706 	br	40171c0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 40171a4:	e0bffd17 	ldw	r2,-12(fp)
 40171a8:	10800017 	ldw	r2,0(r2)
 40171ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40171b0:	e0fffd17 	ldw	r3,-12(fp)
 40171b4:	d0a00704 	addi	r2,gp,-32740
 40171b8:	18bfcc1e 	bne	r3,r2,40170ec <__alt_data_end+0xfc0170ec>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 40171bc:	0005883a 	mov	r2,zero
}
 40171c0:	e037883a 	mov	sp,fp
 40171c4:	dfc00117 	ldw	ra,4(sp)
 40171c8:	df000017 	ldw	fp,0(sp)
 40171cc:	dec00204 	addi	sp,sp,8
 40171d0:	f800283a 	ret

040171d4 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
 40171d4:	defffc04 	addi	sp,sp,-16
 40171d8:	df000315 	stw	fp,12(sp)
 40171dc:	df000304 	addi	fp,sp,12
 40171e0:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
 40171e4:	e0bfff17 	ldw	r2,-4(fp)
 40171e8:	10800217 	ldw	r2,8(r2)
 40171ec:	1000021e 	bne	r2,zero,40171f8 <alt_fs_reg+0x24>
  {
    return -ENODEV;
 40171f0:	00bffb44 	movi	r2,-19
 40171f4:	00001306 	br	4017244 <alt_fs_reg+0x70>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
 40171f8:	e0bfff17 	ldw	r2,-4(fp)
 40171fc:	d0e00704 	addi	r3,gp,-32740
 4017200:	e0fffd15 	stw	r3,-12(fp)
 4017204:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4017208:	e0bffe17 	ldw	r2,-8(fp)
 401720c:	e0fffd17 	ldw	r3,-12(fp)
 4017210:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4017214:	e0bffd17 	ldw	r2,-12(fp)
 4017218:	10c00017 	ldw	r3,0(r2)
 401721c:	e0bffe17 	ldw	r2,-8(fp)
 4017220:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4017224:	e0bffd17 	ldw	r2,-12(fp)
 4017228:	10800017 	ldw	r2,0(r2)
 401722c:	e0fffe17 	ldw	r3,-8(fp)
 4017230:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4017234:	e0bffd17 	ldw	r2,-12(fp)
 4017238:	e0fffe17 	ldw	r3,-8(fp)
 401723c:	10c00015 	stw	r3,0(r2)

  return 0;
 4017240:	0005883a 	mov	r2,zero
} 
 4017244:	e037883a 	mov	sp,fp
 4017248:	df000017 	ldw	fp,0(sp)
 401724c:	dec00104 	addi	sp,sp,4
 4017250:	f800283a 	ret

04017254 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4017254:	defffa04 	addi	sp,sp,-24
 4017258:	dfc00515 	stw	ra,20(sp)
 401725c:	df000415 	stw	fp,16(sp)
 4017260:	dc000315 	stw	r16,12(sp)
 4017264:	df000404 	addi	fp,sp,16
 4017268:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 401726c:	00bffa04 	movi	r2,-24
 4017270:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4017274:	e03ffc15 	stw	zero,-16(fp)
 4017278:	00001d06 	br	40172f0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 401727c:	040100b4 	movhi	r16,1026
 4017280:	84244204 	addi	r16,r16,-28408
 4017284:	e0bffc17 	ldw	r2,-16(fp)
 4017288:	01400304 	movi	r5,12
 401728c:	1009883a 	mov	r4,r2
 4017290:	4001a140 	call	4001a14 <__mulsi3>
 4017294:	8085883a 	add	r2,r16,r2
 4017298:	10800017 	ldw	r2,0(r2)
 401729c:	1000111e 	bne	r2,zero,40172e4 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 40172a0:	040100b4 	movhi	r16,1026
 40172a4:	84244204 	addi	r16,r16,-28408
 40172a8:	e0bffc17 	ldw	r2,-16(fp)
 40172ac:	01400304 	movi	r5,12
 40172b0:	1009883a 	mov	r4,r2
 40172b4:	4001a140 	call	4001a14 <__mulsi3>
 40172b8:	8085883a 	add	r2,r16,r2
 40172bc:	e0fffe17 	ldw	r3,-8(fp)
 40172c0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 40172c4:	d0e00b17 	ldw	r3,-32724(gp)
 40172c8:	e0bffc17 	ldw	r2,-16(fp)
 40172cc:	1880020e 	bge	r3,r2,40172d8 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 40172d0:	e0bffc17 	ldw	r2,-16(fp)
 40172d4:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
 40172d8:	e0bffc17 	ldw	r2,-16(fp)
 40172dc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 40172e0:	00000606 	br	40172fc <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40172e4:	e0bffc17 	ldw	r2,-16(fp)
 40172e8:	10800044 	addi	r2,r2,1
 40172ec:	e0bffc15 	stw	r2,-16(fp)
 40172f0:	e0bffc17 	ldw	r2,-16(fp)
 40172f4:	10800810 	cmplti	r2,r2,32
 40172f8:	103fe01e 	bne	r2,zero,401727c <__alt_data_end+0xfc01727c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 40172fc:	e0bffd17 	ldw	r2,-12(fp)
}
 4017300:	e6ffff04 	addi	sp,fp,-4
 4017304:	dfc00217 	ldw	ra,8(sp)
 4017308:	df000117 	ldw	fp,4(sp)
 401730c:	dc000017 	ldw	r16,0(sp)
 4017310:	dec00304 	addi	sp,sp,12
 4017314:	f800283a 	ret

04017318 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4017318:	deffff04 	addi	sp,sp,-4
 401731c:	df000015 	stw	fp,0(sp)
 4017320:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 4017324:	0001883a 	nop
 4017328:	e037883a 	mov	sp,fp
 401732c:	df000017 	ldw	fp,0(sp)
 4017330:	dec00104 	addi	sp,sp,4
 4017334:	f800283a 	ret

04017338 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4017338:	defff904 	addi	sp,sp,-28
 401733c:	dfc00615 	stw	ra,24(sp)
 4017340:	df000515 	stw	fp,20(sp)
 4017344:	df000504 	addi	fp,sp,20
 4017348:	e13ffc15 	stw	r4,-16(fp)
 401734c:	e17ffd15 	stw	r5,-12(fp)
 4017350:	e1bffe15 	stw	r6,-8(fp)
 4017354:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4017358:	e0800217 	ldw	r2,8(fp)
 401735c:	d8800015 	stw	r2,0(sp)
 4017360:	e1ffff17 	ldw	r7,-4(fp)
 4017364:	e1bffe17 	ldw	r6,-8(fp)
 4017368:	e17ffd17 	ldw	r5,-12(fp)
 401736c:	e13ffc17 	ldw	r4,-16(fp)
 4017370:	40174e80 	call	40174e8 <alt_iic_isr_register>
}  
 4017374:	e037883a 	mov	sp,fp
 4017378:	dfc00117 	ldw	ra,4(sp)
 401737c:	df000017 	ldw	fp,0(sp)
 4017380:	dec00204 	addi	sp,sp,8
 4017384:	f800283a 	ret

04017388 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4017388:	defff904 	addi	sp,sp,-28
 401738c:	df000615 	stw	fp,24(sp)
 4017390:	df000604 	addi	fp,sp,24
 4017394:	e13ffe15 	stw	r4,-8(fp)
 4017398:	e17fff15 	stw	r5,-4(fp)
 401739c:	e0bfff17 	ldw	r2,-4(fp)
 40173a0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40173a4:	0005303a 	rdctl	r2,status
 40173a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40173ac:	e0fffb17 	ldw	r3,-20(fp)
 40173b0:	00bfff84 	movi	r2,-2
 40173b4:	1884703a 	and	r2,r3,r2
 40173b8:	1001703a 	wrctl	status,r2
  
  return context;
 40173bc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 40173c0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 40173c4:	00c00044 	movi	r3,1
 40173c8:	e0bffa17 	ldw	r2,-24(fp)
 40173cc:	1884983a 	sll	r2,r3,r2
 40173d0:	1007883a 	mov	r3,r2
 40173d4:	d0a76717 	ldw	r2,-25188(gp)
 40173d8:	1884b03a 	or	r2,r3,r2
 40173dc:	d0a76715 	stw	r2,-25188(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40173e0:	d0a76717 	ldw	r2,-25188(gp)
 40173e4:	100170fa 	wrctl	ienable,r2
 40173e8:	e0bffc17 	ldw	r2,-16(fp)
 40173ec:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40173f0:	e0bffd17 	ldw	r2,-12(fp)
 40173f4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 40173f8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 40173fc:	0001883a 	nop
}
 4017400:	e037883a 	mov	sp,fp
 4017404:	df000017 	ldw	fp,0(sp)
 4017408:	dec00104 	addi	sp,sp,4
 401740c:	f800283a 	ret

04017410 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4017410:	defff904 	addi	sp,sp,-28
 4017414:	df000615 	stw	fp,24(sp)
 4017418:	df000604 	addi	fp,sp,24
 401741c:	e13ffe15 	stw	r4,-8(fp)
 4017420:	e17fff15 	stw	r5,-4(fp)
 4017424:	e0bfff17 	ldw	r2,-4(fp)
 4017428:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401742c:	0005303a 	rdctl	r2,status
 4017430:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4017434:	e0fffb17 	ldw	r3,-20(fp)
 4017438:	00bfff84 	movi	r2,-2
 401743c:	1884703a 	and	r2,r3,r2
 4017440:	1001703a 	wrctl	status,r2
  
  return context;
 4017444:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4017448:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 401744c:	00c00044 	movi	r3,1
 4017450:	e0bffa17 	ldw	r2,-24(fp)
 4017454:	1884983a 	sll	r2,r3,r2
 4017458:	0084303a 	nor	r2,zero,r2
 401745c:	1007883a 	mov	r3,r2
 4017460:	d0a76717 	ldw	r2,-25188(gp)
 4017464:	1884703a 	and	r2,r3,r2
 4017468:	d0a76715 	stw	r2,-25188(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 401746c:	d0a76717 	ldw	r2,-25188(gp)
 4017470:	100170fa 	wrctl	ienable,r2
 4017474:	e0bffc17 	ldw	r2,-16(fp)
 4017478:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401747c:	e0bffd17 	ldw	r2,-12(fp)
 4017480:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4017484:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 4017488:	0001883a 	nop
}
 401748c:	e037883a 	mov	sp,fp
 4017490:	df000017 	ldw	fp,0(sp)
 4017494:	dec00104 	addi	sp,sp,4
 4017498:	f800283a 	ret

0401749c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 401749c:	defffc04 	addi	sp,sp,-16
 40174a0:	df000315 	stw	fp,12(sp)
 40174a4:	df000304 	addi	fp,sp,12
 40174a8:	e13ffe15 	stw	r4,-8(fp)
 40174ac:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 40174b0:	000530fa 	rdctl	r2,ienable
 40174b4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 40174b8:	00c00044 	movi	r3,1
 40174bc:	e0bfff17 	ldw	r2,-4(fp)
 40174c0:	1884983a 	sll	r2,r3,r2
 40174c4:	1007883a 	mov	r3,r2
 40174c8:	e0bffd17 	ldw	r2,-12(fp)
 40174cc:	1884703a 	and	r2,r3,r2
 40174d0:	1004c03a 	cmpne	r2,r2,zero
 40174d4:	10803fcc 	andi	r2,r2,255
}
 40174d8:	e037883a 	mov	sp,fp
 40174dc:	df000017 	ldw	fp,0(sp)
 40174e0:	dec00104 	addi	sp,sp,4
 40174e4:	f800283a 	ret

040174e8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 40174e8:	defff504 	addi	sp,sp,-44
 40174ec:	dfc00a15 	stw	ra,40(sp)
 40174f0:	df000915 	stw	fp,36(sp)
 40174f4:	df000904 	addi	fp,sp,36
 40174f8:	e13ffc15 	stw	r4,-16(fp)
 40174fc:	e17ffd15 	stw	r5,-12(fp)
 4017500:	e1bffe15 	stw	r6,-8(fp)
 4017504:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 4017508:	00bffa84 	movi	r2,-22
 401750c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4017510:	e0bffd17 	ldw	r2,-12(fp)
 4017514:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4017518:	e0bff817 	ldw	r2,-32(fp)
 401751c:	10800808 	cmpgei	r2,r2,32
 4017520:	1000271e 	bne	r2,zero,40175c0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4017524:	0005303a 	rdctl	r2,status
 4017528:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401752c:	e0fffb17 	ldw	r3,-20(fp)
 4017530:	00bfff84 	movi	r2,-2
 4017534:	1884703a 	and	r2,r3,r2
 4017538:	1001703a 	wrctl	status,r2
  
  return context;
 401753c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 4017540:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 4017544:	008100b4 	movhi	r2,1026
 4017548:	10b05104 	addi	r2,r2,-16060
 401754c:	e0fff817 	ldw	r3,-32(fp)
 4017550:	180690fa 	slli	r3,r3,3
 4017554:	10c5883a 	add	r2,r2,r3
 4017558:	e0fffe17 	ldw	r3,-8(fp)
 401755c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 4017560:	008100b4 	movhi	r2,1026
 4017564:	10b05104 	addi	r2,r2,-16060
 4017568:	e0fff817 	ldw	r3,-32(fp)
 401756c:	180690fa 	slli	r3,r3,3
 4017570:	10c5883a 	add	r2,r2,r3
 4017574:	10800104 	addi	r2,r2,4
 4017578:	e0ffff17 	ldw	r3,-4(fp)
 401757c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4017580:	e0bffe17 	ldw	r2,-8(fp)
 4017584:	10000526 	beq	r2,zero,401759c <alt_iic_isr_register+0xb4>
 4017588:	e0bff817 	ldw	r2,-32(fp)
 401758c:	100b883a 	mov	r5,r2
 4017590:	e13ffc17 	ldw	r4,-16(fp)
 4017594:	40173880 	call	4017388 <alt_ic_irq_enable>
 4017598:	00000406 	br	40175ac <alt_iic_isr_register+0xc4>
 401759c:	e0bff817 	ldw	r2,-32(fp)
 40175a0:	100b883a 	mov	r5,r2
 40175a4:	e13ffc17 	ldw	r4,-16(fp)
 40175a8:	40174100 	call	4017410 <alt_ic_irq_disable>
 40175ac:	e0bff715 	stw	r2,-36(fp)
 40175b0:	e0bffa17 	ldw	r2,-24(fp)
 40175b4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40175b8:	e0bff917 	ldw	r2,-28(fp)
 40175bc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 40175c0:	e0bff717 	ldw	r2,-36(fp)
}
 40175c4:	e037883a 	mov	sp,fp
 40175c8:	dfc00117 	ldw	ra,4(sp)
 40175cc:	df000017 	ldw	fp,0(sp)
 40175d0:	dec00204 	addi	sp,sp,8
 40175d4:	f800283a 	ret

040175d8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 40175d8:	defff804 	addi	sp,sp,-32
 40175dc:	dfc00715 	stw	ra,28(sp)
 40175e0:	df000615 	stw	fp,24(sp)
 40175e4:	dc000515 	stw	r16,20(sp)
 40175e8:	df000604 	addi	fp,sp,24
 40175ec:	e13ffb15 	stw	r4,-20(fp)
 40175f0:	e17ffc15 	stw	r5,-16(fp)
 40175f4:	e1bffd15 	stw	r6,-12(fp)
 40175f8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 40175fc:	e1bffe17 	ldw	r6,-8(fp)
 4017600:	e17ffd17 	ldw	r5,-12(fp)
 4017604:	e13ffc17 	ldw	r4,-16(fp)
 4017608:	4014ac40 	call	4014ac4 <open>
 401760c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 4017610:	e0bffa17 	ldw	r2,-24(fp)
 4017614:	10002216 	blt	r2,zero,40176a0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 4017618:	040100b4 	movhi	r16,1026
 401761c:	84244204 	addi	r16,r16,-28408
 4017620:	e0bffa17 	ldw	r2,-24(fp)
 4017624:	01400304 	movi	r5,12
 4017628:	1009883a 	mov	r4,r2
 401762c:	4001a140 	call	4001a14 <__mulsi3>
 4017630:	8085883a 	add	r2,r16,r2
 4017634:	10c00017 	ldw	r3,0(r2)
 4017638:	e0bffb17 	ldw	r2,-20(fp)
 401763c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4017640:	040100b4 	movhi	r16,1026
 4017644:	84244204 	addi	r16,r16,-28408
 4017648:	e0bffa17 	ldw	r2,-24(fp)
 401764c:	01400304 	movi	r5,12
 4017650:	1009883a 	mov	r4,r2
 4017654:	4001a140 	call	4001a14 <__mulsi3>
 4017658:	8085883a 	add	r2,r16,r2
 401765c:	10800104 	addi	r2,r2,4
 4017660:	10c00017 	ldw	r3,0(r2)
 4017664:	e0bffb17 	ldw	r2,-20(fp)
 4017668:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 401766c:	040100b4 	movhi	r16,1026
 4017670:	84244204 	addi	r16,r16,-28408
 4017674:	e0bffa17 	ldw	r2,-24(fp)
 4017678:	01400304 	movi	r5,12
 401767c:	1009883a 	mov	r4,r2
 4017680:	4001a140 	call	4001a14 <__mulsi3>
 4017684:	8085883a 	add	r2,r16,r2
 4017688:	10800204 	addi	r2,r2,8
 401768c:	10c00017 	ldw	r3,0(r2)
 4017690:	e0bffb17 	ldw	r2,-20(fp)
 4017694:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4017698:	e13ffa17 	ldw	r4,-24(fp)
 401769c:	4014d600 	call	4014d60 <alt_release_fd>
  }
} 
 40176a0:	0001883a 	nop
 40176a4:	e6ffff04 	addi	sp,fp,-4
 40176a8:	dfc00217 	ldw	ra,8(sp)
 40176ac:	df000117 	ldw	fp,4(sp)
 40176b0:	dc000017 	ldw	r16,0(sp)
 40176b4:	dec00304 	addi	sp,sp,12
 40176b8:	f800283a 	ret

040176bc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 40176bc:	defffb04 	addi	sp,sp,-20
 40176c0:	dfc00415 	stw	ra,16(sp)
 40176c4:	df000315 	stw	fp,12(sp)
 40176c8:	df000304 	addi	fp,sp,12
 40176cc:	e13ffd15 	stw	r4,-12(fp)
 40176d0:	e17ffe15 	stw	r5,-8(fp)
 40176d4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 40176d8:	01c07fc4 	movi	r7,511
 40176dc:	01800044 	movi	r6,1
 40176e0:	e17ffd17 	ldw	r5,-12(fp)
 40176e4:	010100b4 	movhi	r4,1026
 40176e8:	21244504 	addi	r4,r4,-28396
 40176ec:	40175d80 	call	40175d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 40176f0:	01c07fc4 	movi	r7,511
 40176f4:	000d883a 	mov	r6,zero
 40176f8:	e17ffe17 	ldw	r5,-8(fp)
 40176fc:	010100b4 	movhi	r4,1026
 4017700:	21244204 	addi	r4,r4,-28408
 4017704:	40175d80 	call	40175d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4017708:	01c07fc4 	movi	r7,511
 401770c:	01800044 	movi	r6,1
 4017710:	e17fff17 	ldw	r5,-4(fp)
 4017714:	010100b4 	movhi	r4,1026
 4017718:	21244804 	addi	r4,r4,-28384
 401771c:	40175d80 	call	40175d8 <alt_open_fd>
}  
 4017720:	0001883a 	nop
 4017724:	e037883a 	mov	sp,fp
 4017728:	dfc00117 	ldw	ra,4(sp)
 401772c:	df000017 	ldw	fp,0(sp)
 4017730:	dec00204 	addi	sp,sp,8
 4017734:	f800283a 	ret

04017738 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4017738:	defffa04 	addi	sp,sp,-24
 401773c:	df000515 	stw	fp,20(sp)
 4017740:	df000504 	addi	fp,sp,20
 4017744:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4017748:	0005303a 	rdctl	r2,status
 401774c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4017750:	e0fffc17 	ldw	r3,-16(fp)
 4017754:	00bfff84 	movi	r2,-2
 4017758:	1884703a 	and	r2,r3,r2
 401775c:	1001703a 	wrctl	status,r2
  
  return context;
 4017760:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4017764:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4017768:	e0bfff17 	ldw	r2,-4(fp)
 401776c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4017770:	e0bffd17 	ldw	r2,-12(fp)
 4017774:	10800017 	ldw	r2,0(r2)
 4017778:	e0fffd17 	ldw	r3,-12(fp)
 401777c:	18c00117 	ldw	r3,4(r3)
 4017780:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4017784:	e0bffd17 	ldw	r2,-12(fp)
 4017788:	10800117 	ldw	r2,4(r2)
 401778c:	e0fffd17 	ldw	r3,-12(fp)
 4017790:	18c00017 	ldw	r3,0(r3)
 4017794:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4017798:	e0bffd17 	ldw	r2,-12(fp)
 401779c:	e0fffd17 	ldw	r3,-12(fp)
 40177a0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 40177a4:	e0bffd17 	ldw	r2,-12(fp)
 40177a8:	e0fffd17 	ldw	r3,-12(fp)
 40177ac:	10c00015 	stw	r3,0(r2)
 40177b0:	e0bffb17 	ldw	r2,-20(fp)
 40177b4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40177b8:	e0bffe17 	ldw	r2,-8(fp)
 40177bc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 40177c0:	0001883a 	nop
 40177c4:	e037883a 	mov	sp,fp
 40177c8:	df000017 	ldw	fp,0(sp)
 40177cc:	dec00104 	addi	sp,sp,4
 40177d0:	f800283a 	ret

040177d4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 40177d4:	defffb04 	addi	sp,sp,-20
 40177d8:	dfc00415 	stw	ra,16(sp)
 40177dc:	df000315 	stw	fp,12(sp)
 40177e0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 40177e4:	d0a02317 	ldw	r2,-32628(gp)
 40177e8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 40177ec:	d0a76917 	ldw	r2,-25180(gp)
 40177f0:	10800044 	addi	r2,r2,1
 40177f4:	d0a76915 	stw	r2,-25180(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 40177f8:	00002e06 	br	40178b4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 40177fc:	e0bffd17 	ldw	r2,-12(fp)
 4017800:	10800017 	ldw	r2,0(r2)
 4017804:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4017808:	e0bffd17 	ldw	r2,-12(fp)
 401780c:	10800403 	ldbu	r2,16(r2)
 4017810:	10803fcc 	andi	r2,r2,255
 4017814:	10000426 	beq	r2,zero,4017828 <alt_tick+0x54>
 4017818:	d0a76917 	ldw	r2,-25180(gp)
 401781c:	1000021e 	bne	r2,zero,4017828 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4017820:	e0bffd17 	ldw	r2,-12(fp)
 4017824:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4017828:	e0bffd17 	ldw	r2,-12(fp)
 401782c:	10800217 	ldw	r2,8(r2)
 4017830:	d0e76917 	ldw	r3,-25180(gp)
 4017834:	18801d36 	bltu	r3,r2,40178ac <alt_tick+0xd8>
 4017838:	e0bffd17 	ldw	r2,-12(fp)
 401783c:	10800403 	ldbu	r2,16(r2)
 4017840:	10803fcc 	andi	r2,r2,255
 4017844:	1000191e 	bne	r2,zero,40178ac <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4017848:	e0bffd17 	ldw	r2,-12(fp)
 401784c:	10800317 	ldw	r2,12(r2)
 4017850:	e0fffd17 	ldw	r3,-12(fp)
 4017854:	18c00517 	ldw	r3,20(r3)
 4017858:	1809883a 	mov	r4,r3
 401785c:	103ee83a 	callr	r2
 4017860:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4017864:	e0bfff17 	ldw	r2,-4(fp)
 4017868:	1000031e 	bne	r2,zero,4017878 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 401786c:	e13ffd17 	ldw	r4,-12(fp)
 4017870:	40177380 	call	4017738 <alt_alarm_stop>
 4017874:	00000d06 	br	40178ac <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4017878:	e0bffd17 	ldw	r2,-12(fp)
 401787c:	10c00217 	ldw	r3,8(r2)
 4017880:	e0bfff17 	ldw	r2,-4(fp)
 4017884:	1887883a 	add	r3,r3,r2
 4017888:	e0bffd17 	ldw	r2,-12(fp)
 401788c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4017890:	e0bffd17 	ldw	r2,-12(fp)
 4017894:	10c00217 	ldw	r3,8(r2)
 4017898:	d0a76917 	ldw	r2,-25180(gp)
 401789c:	1880032e 	bgeu	r3,r2,40178ac <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 40178a0:	e0bffd17 	ldw	r2,-12(fp)
 40178a4:	00c00044 	movi	r3,1
 40178a8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 40178ac:	e0bffe17 	ldw	r2,-8(fp)
 40178b0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 40178b4:	e0fffd17 	ldw	r3,-12(fp)
 40178b8:	d0a02304 	addi	r2,gp,-32628
 40178bc:	18bfcf1e 	bne	r3,r2,40177fc <__alt_data_end+0xfc0177fc>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 40178c0:	0001883a 	nop
}
 40178c4:	0001883a 	nop
 40178c8:	e037883a 	mov	sp,fp
 40178cc:	dfc00117 	ldw	ra,4(sp)
 40178d0:	df000017 	ldw	fp,0(sp)
 40178d4:	dec00204 	addi	sp,sp,8
 40178d8:	f800283a 	ret

040178dc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 40178dc:	deffff04 	addi	sp,sp,-4
 40178e0:	df000015 	stw	fp,0(sp)
 40178e4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 40178e8:	000170fa 	wrctl	ienable,zero
}
 40178ec:	0001883a 	nop
 40178f0:	e037883a 	mov	sp,fp
 40178f4:	df000017 	ldw	fp,0(sp)
 40178f8:	dec00104 	addi	sp,sp,4
 40178fc:	f800283a 	ret

04017900 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 4017900:	defffe04 	addi	sp,sp,-8
 4017904:	df000115 	stw	fp,4(sp)
 4017908:	df000104 	addi	fp,sp,4
 401790c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 4017910:	e0bfff17 	ldw	r2,-4(fp)
 4017914:	10bffe84 	addi	r2,r2,-6
 4017918:	10c00428 	cmpgeui	r3,r2,16
 401791c:	18001a1e 	bne	r3,zero,4017988 <alt_exception_cause_generated_bad_addr+0x88>
 4017920:	100690ba 	slli	r3,r2,2
 4017924:	00810074 	movhi	r2,1025
 4017928:	109e4e04 	addi	r2,r2,31032
 401792c:	1885883a 	add	r2,r3,r2
 4017930:	10800017 	ldw	r2,0(r2)
 4017934:	1000683a 	jmp	r2
 4017938:	04017978 	rdprs	r16,zero,1509
 401793c:	04017978 	rdprs	r16,zero,1509
 4017940:	04017988 	cmpgei	r16,zero,1510
 4017944:	04017988 	cmpgei	r16,zero,1510
 4017948:	04017988 	cmpgei	r16,zero,1510
 401794c:	04017978 	rdprs	r16,zero,1509
 4017950:	04017980 	call	401798 <__alt_mem_sdram-0x3bfe868>
 4017954:	04017988 	cmpgei	r16,zero,1510
 4017958:	04017978 	rdprs	r16,zero,1509
 401795c:	04017978 	rdprs	r16,zero,1509
 4017960:	04017988 	cmpgei	r16,zero,1510
 4017964:	04017978 	rdprs	r16,zero,1509
 4017968:	04017980 	call	401798 <__alt_mem_sdram-0x3bfe868>
 401796c:	04017988 	cmpgei	r16,zero,1510
 4017970:	04017988 	cmpgei	r16,zero,1510
 4017974:	04017978 	rdprs	r16,zero,1509
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4017978:	00800044 	movi	r2,1
 401797c:	00000306 	br	401798c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4017980:	0005883a 	mov	r2,zero
 4017984:	00000106 	br	401798c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 4017988:	0005883a 	mov	r2,zero
  }
}
 401798c:	e037883a 	mov	sp,fp
 4017990:	df000017 	ldw	fp,0(sp)
 4017994:	dec00104 	addi	sp,sp,4
 4017998:	f800283a 	ret

0401799c <atexit>:
 401799c:	200b883a 	mov	r5,r4
 40179a0:	000f883a 	mov	r7,zero
 40179a4:	000d883a 	mov	r6,zero
 40179a8:	0009883a 	mov	r4,zero
 40179ac:	4017a641 	jmpi	4017a64 <__register_exitproc>

040179b0 <exit>:
 40179b0:	defffe04 	addi	sp,sp,-8
 40179b4:	000b883a 	mov	r5,zero
 40179b8:	dc000015 	stw	r16,0(sp)
 40179bc:	dfc00115 	stw	ra,4(sp)
 40179c0:	2021883a 	mov	r16,r4
 40179c4:	4017b7c0 	call	4017b7c <__call_exitprocs>
 40179c8:	008100b4 	movhi	r2,1026
 40179cc:	10a8dc04 	addi	r2,r2,-23696
 40179d0:	11000017 	ldw	r4,0(r2)
 40179d4:	20800f17 	ldw	r2,60(r4)
 40179d8:	10000126 	beq	r2,zero,40179e0 <exit+0x30>
 40179dc:	103ee83a 	callr	r2
 40179e0:	8009883a 	mov	r4,r16
 40179e4:	4017cfc0 	call	4017cfc <_exit>

040179e8 <memcmp>:
 40179e8:	01c000c4 	movi	r7,3
 40179ec:	3980192e 	bgeu	r7,r6,4017a54 <memcmp+0x6c>
 40179f0:	2144b03a 	or	r2,r4,r5
 40179f4:	11c4703a 	and	r2,r2,r7
 40179f8:	10000f26 	beq	r2,zero,4017a38 <memcmp+0x50>
 40179fc:	20800003 	ldbu	r2,0(r4)
 4017a00:	28c00003 	ldbu	r3,0(r5)
 4017a04:	10c0151e 	bne	r2,r3,4017a5c <memcmp+0x74>
 4017a08:	31bfff84 	addi	r6,r6,-2
 4017a0c:	01ffffc4 	movi	r7,-1
 4017a10:	00000406 	br	4017a24 <memcmp+0x3c>
 4017a14:	20800003 	ldbu	r2,0(r4)
 4017a18:	28c00003 	ldbu	r3,0(r5)
 4017a1c:	31bfffc4 	addi	r6,r6,-1
 4017a20:	10c00e1e 	bne	r2,r3,4017a5c <memcmp+0x74>
 4017a24:	21000044 	addi	r4,r4,1
 4017a28:	29400044 	addi	r5,r5,1
 4017a2c:	31fff91e 	bne	r6,r7,4017a14 <__alt_data_end+0xfc017a14>
 4017a30:	0005883a 	mov	r2,zero
 4017a34:	f800283a 	ret
 4017a38:	20c00017 	ldw	r3,0(r4)
 4017a3c:	28800017 	ldw	r2,0(r5)
 4017a40:	18bfee1e 	bne	r3,r2,40179fc <__alt_data_end+0xfc0179fc>
 4017a44:	31bfff04 	addi	r6,r6,-4
 4017a48:	21000104 	addi	r4,r4,4
 4017a4c:	29400104 	addi	r5,r5,4
 4017a50:	39bff936 	bltu	r7,r6,4017a38 <__alt_data_end+0xfc017a38>
 4017a54:	303fe91e 	bne	r6,zero,40179fc <__alt_data_end+0xfc0179fc>
 4017a58:	003ff506 	br	4017a30 <__alt_data_end+0xfc017a30>
 4017a5c:	10c5c83a 	sub	r2,r2,r3
 4017a60:	f800283a 	ret

04017a64 <__register_exitproc>:
 4017a64:	defffa04 	addi	sp,sp,-24
 4017a68:	dc000315 	stw	r16,12(sp)
 4017a6c:	040100b4 	movhi	r16,1026
 4017a70:	8428dc04 	addi	r16,r16,-23696
 4017a74:	80c00017 	ldw	r3,0(r16)
 4017a78:	dc400415 	stw	r17,16(sp)
 4017a7c:	dfc00515 	stw	ra,20(sp)
 4017a80:	18805217 	ldw	r2,328(r3)
 4017a84:	2023883a 	mov	r17,r4
 4017a88:	10003726 	beq	r2,zero,4017b68 <__register_exitproc+0x104>
 4017a8c:	10c00117 	ldw	r3,4(r2)
 4017a90:	010007c4 	movi	r4,31
 4017a94:	20c00e16 	blt	r4,r3,4017ad0 <__register_exitproc+0x6c>
 4017a98:	1a000044 	addi	r8,r3,1
 4017a9c:	8800221e 	bne	r17,zero,4017b28 <__register_exitproc+0xc4>
 4017aa0:	18c00084 	addi	r3,r3,2
 4017aa4:	18c7883a 	add	r3,r3,r3
 4017aa8:	18c7883a 	add	r3,r3,r3
 4017aac:	12000115 	stw	r8,4(r2)
 4017ab0:	10c7883a 	add	r3,r2,r3
 4017ab4:	19400015 	stw	r5,0(r3)
 4017ab8:	0005883a 	mov	r2,zero
 4017abc:	dfc00517 	ldw	ra,20(sp)
 4017ac0:	dc400417 	ldw	r17,16(sp)
 4017ac4:	dc000317 	ldw	r16,12(sp)
 4017ac8:	dec00604 	addi	sp,sp,24
 4017acc:	f800283a 	ret
 4017ad0:	00810034 	movhi	r2,1024
 4017ad4:	108cdc04 	addi	r2,r2,13168
 4017ad8:	10002626 	beq	r2,zero,4017b74 <__register_exitproc+0x110>
 4017adc:	01006404 	movi	r4,400
 4017ae0:	d9400015 	stw	r5,0(sp)
 4017ae4:	d9800115 	stw	r6,4(sp)
 4017ae8:	d9c00215 	stw	r7,8(sp)
 4017aec:	40033700 	call	4003370 <malloc>
 4017af0:	d9400017 	ldw	r5,0(sp)
 4017af4:	d9800117 	ldw	r6,4(sp)
 4017af8:	d9c00217 	ldw	r7,8(sp)
 4017afc:	10001d26 	beq	r2,zero,4017b74 <__register_exitproc+0x110>
 4017b00:	81000017 	ldw	r4,0(r16)
 4017b04:	10000115 	stw	zero,4(r2)
 4017b08:	02000044 	movi	r8,1
 4017b0c:	22405217 	ldw	r9,328(r4)
 4017b10:	0007883a 	mov	r3,zero
 4017b14:	12400015 	stw	r9,0(r2)
 4017b18:	20805215 	stw	r2,328(r4)
 4017b1c:	10006215 	stw	zero,392(r2)
 4017b20:	10006315 	stw	zero,396(r2)
 4017b24:	883fde26 	beq	r17,zero,4017aa0 <__alt_data_end+0xfc017aa0>
 4017b28:	18c9883a 	add	r4,r3,r3
 4017b2c:	2109883a 	add	r4,r4,r4
 4017b30:	1109883a 	add	r4,r2,r4
 4017b34:	21802215 	stw	r6,136(r4)
 4017b38:	01800044 	movi	r6,1
 4017b3c:	12406217 	ldw	r9,392(r2)
 4017b40:	30cc983a 	sll	r6,r6,r3
 4017b44:	4992b03a 	or	r9,r9,r6
 4017b48:	12406215 	stw	r9,392(r2)
 4017b4c:	21c04215 	stw	r7,264(r4)
 4017b50:	01000084 	movi	r4,2
 4017b54:	893fd21e 	bne	r17,r4,4017aa0 <__alt_data_end+0xfc017aa0>
 4017b58:	11006317 	ldw	r4,396(r2)
 4017b5c:	218cb03a 	or	r6,r4,r6
 4017b60:	11806315 	stw	r6,396(r2)
 4017b64:	003fce06 	br	4017aa0 <__alt_data_end+0xfc017aa0>
 4017b68:	18805304 	addi	r2,r3,332
 4017b6c:	18805215 	stw	r2,328(r3)
 4017b70:	003fc606 	br	4017a8c <__alt_data_end+0xfc017a8c>
 4017b74:	00bfffc4 	movi	r2,-1
 4017b78:	003fd006 	br	4017abc <__alt_data_end+0xfc017abc>

04017b7c <__call_exitprocs>:
 4017b7c:	defff504 	addi	sp,sp,-44
 4017b80:	df000915 	stw	fp,36(sp)
 4017b84:	dd400615 	stw	r21,24(sp)
 4017b88:	dc800315 	stw	r18,12(sp)
 4017b8c:	dfc00a15 	stw	ra,40(sp)
 4017b90:	ddc00815 	stw	r23,32(sp)
 4017b94:	dd800715 	stw	r22,28(sp)
 4017b98:	dd000515 	stw	r20,20(sp)
 4017b9c:	dcc00415 	stw	r19,16(sp)
 4017ba0:	dc400215 	stw	r17,8(sp)
 4017ba4:	dc000115 	stw	r16,4(sp)
 4017ba8:	d9000015 	stw	r4,0(sp)
 4017bac:	2839883a 	mov	fp,r5
 4017bb0:	04800044 	movi	r18,1
 4017bb4:	057fffc4 	movi	r21,-1
 4017bb8:	008100b4 	movhi	r2,1026
 4017bbc:	10a8dc04 	addi	r2,r2,-23696
 4017bc0:	12000017 	ldw	r8,0(r2)
 4017bc4:	45005217 	ldw	r20,328(r8)
 4017bc8:	44c05204 	addi	r19,r8,328
 4017bcc:	a0001c26 	beq	r20,zero,4017c40 <__call_exitprocs+0xc4>
 4017bd0:	a0800117 	ldw	r2,4(r20)
 4017bd4:	15ffffc4 	addi	r23,r2,-1
 4017bd8:	b8000d16 	blt	r23,zero,4017c10 <__call_exitprocs+0x94>
 4017bdc:	14000044 	addi	r16,r2,1
 4017be0:	8421883a 	add	r16,r16,r16
 4017be4:	8421883a 	add	r16,r16,r16
 4017be8:	84402004 	addi	r17,r16,128
 4017bec:	a463883a 	add	r17,r20,r17
 4017bf0:	a421883a 	add	r16,r20,r16
 4017bf4:	e0001e26 	beq	fp,zero,4017c70 <__call_exitprocs+0xf4>
 4017bf8:	80804017 	ldw	r2,256(r16)
 4017bfc:	e0801c26 	beq	fp,r2,4017c70 <__call_exitprocs+0xf4>
 4017c00:	bdffffc4 	addi	r23,r23,-1
 4017c04:	843fff04 	addi	r16,r16,-4
 4017c08:	8c7fff04 	addi	r17,r17,-4
 4017c0c:	bd7ff91e 	bne	r23,r21,4017bf4 <__alt_data_end+0xfc017bf4>
 4017c10:	00810034 	movhi	r2,1024
 4017c14:	108ce104 	addi	r2,r2,13188
 4017c18:	10000926 	beq	r2,zero,4017c40 <__call_exitprocs+0xc4>
 4017c1c:	a0800117 	ldw	r2,4(r20)
 4017c20:	1000301e 	bne	r2,zero,4017ce4 <__call_exitprocs+0x168>
 4017c24:	a0800017 	ldw	r2,0(r20)
 4017c28:	10003226 	beq	r2,zero,4017cf4 <__call_exitprocs+0x178>
 4017c2c:	a009883a 	mov	r4,r20
 4017c30:	98800015 	stw	r2,0(r19)
 4017c34:	40033840 	call	4003384 <free>
 4017c38:	9d000017 	ldw	r20,0(r19)
 4017c3c:	a03fe41e 	bne	r20,zero,4017bd0 <__alt_data_end+0xfc017bd0>
 4017c40:	dfc00a17 	ldw	ra,40(sp)
 4017c44:	df000917 	ldw	fp,36(sp)
 4017c48:	ddc00817 	ldw	r23,32(sp)
 4017c4c:	dd800717 	ldw	r22,28(sp)
 4017c50:	dd400617 	ldw	r21,24(sp)
 4017c54:	dd000517 	ldw	r20,20(sp)
 4017c58:	dcc00417 	ldw	r19,16(sp)
 4017c5c:	dc800317 	ldw	r18,12(sp)
 4017c60:	dc400217 	ldw	r17,8(sp)
 4017c64:	dc000117 	ldw	r16,4(sp)
 4017c68:	dec00b04 	addi	sp,sp,44
 4017c6c:	f800283a 	ret
 4017c70:	a0800117 	ldw	r2,4(r20)
 4017c74:	80c00017 	ldw	r3,0(r16)
 4017c78:	10bfffc4 	addi	r2,r2,-1
 4017c7c:	15c01426 	beq	r2,r23,4017cd0 <__call_exitprocs+0x154>
 4017c80:	80000015 	stw	zero,0(r16)
 4017c84:	183fde26 	beq	r3,zero,4017c00 <__alt_data_end+0xfc017c00>
 4017c88:	95c8983a 	sll	r4,r18,r23
 4017c8c:	a0806217 	ldw	r2,392(r20)
 4017c90:	a5800117 	ldw	r22,4(r20)
 4017c94:	2084703a 	and	r2,r4,r2
 4017c98:	10000b26 	beq	r2,zero,4017cc8 <__call_exitprocs+0x14c>
 4017c9c:	a0806317 	ldw	r2,396(r20)
 4017ca0:	2088703a 	and	r4,r4,r2
 4017ca4:	20000c1e 	bne	r4,zero,4017cd8 <__call_exitprocs+0x15c>
 4017ca8:	89400017 	ldw	r5,0(r17)
 4017cac:	d9000017 	ldw	r4,0(sp)
 4017cb0:	183ee83a 	callr	r3
 4017cb4:	a0800117 	ldw	r2,4(r20)
 4017cb8:	15bfbf1e 	bne	r2,r22,4017bb8 <__alt_data_end+0xfc017bb8>
 4017cbc:	98800017 	ldw	r2,0(r19)
 4017cc0:	153fcf26 	beq	r2,r20,4017c00 <__alt_data_end+0xfc017c00>
 4017cc4:	003fbc06 	br	4017bb8 <__alt_data_end+0xfc017bb8>
 4017cc8:	183ee83a 	callr	r3
 4017ccc:	003ff906 	br	4017cb4 <__alt_data_end+0xfc017cb4>
 4017cd0:	a5c00115 	stw	r23,4(r20)
 4017cd4:	003feb06 	br	4017c84 <__alt_data_end+0xfc017c84>
 4017cd8:	89000017 	ldw	r4,0(r17)
 4017cdc:	183ee83a 	callr	r3
 4017ce0:	003ff406 	br	4017cb4 <__alt_data_end+0xfc017cb4>
 4017ce4:	a0800017 	ldw	r2,0(r20)
 4017ce8:	a027883a 	mov	r19,r20
 4017cec:	1029883a 	mov	r20,r2
 4017cf0:	003fb606 	br	4017bcc <__alt_data_end+0xfc017bcc>
 4017cf4:	0005883a 	mov	r2,zero
 4017cf8:	003ffb06 	br	4017ce8 <__alt_data_end+0xfc017ce8>

04017cfc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4017cfc:	defffd04 	addi	sp,sp,-12
 4017d00:	df000215 	stw	fp,8(sp)
 4017d04:	df000204 	addi	fp,sp,8
 4017d08:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4017d0c:	0001883a 	nop
 4017d10:	e0bfff17 	ldw	r2,-4(fp)
 4017d14:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4017d18:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4017d1c:	10000226 	beq	r2,zero,4017d28 <_exit+0x2c>
    ALT_SIM_FAIL();
 4017d20:	002af070 	cmpltui	zero,zero,43969
 4017d24:	00000106 	br	4017d2c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 4017d28:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4017d2c:	003fff06 	br	4017d2c <__alt_data_end+0xfc017d2c>
